{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AccordionLayout, arrays, HtmlComponent, LoadingSupport, objects, Widget, widgets } from '../index';\nexport default class Accordion extends Widget {\n  constructor() {\n    super();\n    this.comparator = null;\n    this.collapseStyle = null;\n    this.exclusiveExpand = true;\n    this.groups = [];\n    this.scrollable = true;\n    this.$container = null;\n    this.htmlComp = null;\n    this._addWidgetProperties(['groups']);\n    this._groupPropertyChangeHandler = this._onGroupPropertyChange.bind(this);\n  }\n  _init(model) {\n    super._init(model);\n    this._initGroups(this.groups);\n    this._setExclusiveExpand(this.exclusiveExpand);\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n  _render() {\n    this.$container = this.$parent.appendDiv('accordion');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(this._createLayout());\n  }\n  _createLayout() {\n    return new AccordionLayout();\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderScrollable();\n    this._renderGroups();\n  }\n  insertGroup(group) {\n    this.insertGroups([group]);\n  }\n  insertGroups(groupsToInsert) {\n    groupsToInsert = arrays.ensure(groupsToInsert);\n    this.setGroups(this.groups.concat(groupsToInsert));\n  }\n  deleteGroup(group) {\n    this.deleteGroups([group]);\n  }\n  deleteGroups(groupsToDelete) {\n    groupsToDelete = arrays.ensure(groupsToDelete);\n    let groups = this.groups.slice();\n    arrays.removeAll(groups, groupsToDelete);\n    this.setGroups(groups);\n  }\n  deleteAllGroups() {\n    this.setGroups([]);\n  }\n  _initGroups(groups) {\n    this.groups.forEach(function (group) {\n      this._initGroup(group);\n    }, this);\n  }\n  setGroups(groups) {\n    groups = arrays.ensure(groups);\n    if (objects.equals(this.groups, groups)) {\n      return;\n    }\n\n    // Ensure given groups are real groups (of type Group)\n    groups = this._createChildren(groups);\n\n    // Only delete those which are not in the new array\n    // Only insert those which are not already there\n    let groupsToDelete = arrays.diff(this.groups, groups);\n    let groupsToInsert = arrays.diff(groups, this.groups);\n    this._deleteGroups(groupsToDelete);\n    this._insertGroups(groupsToInsert);\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n    if (groupsToInsert.length > 0) {\n      this._updateExclusiveExpand();\n    }\n    if (this.rendered) {\n      this._updateFirstLastMarker();\n      this.invalidateLayoutTree();\n    }\n  }\n  _insertGroups(groups) {\n    groups.forEach(function (group) {\n      this._insertGroup(group);\n    }, this);\n  }\n  _insertGroup(group) {\n    this._initGroup(group);\n    if (this.rendered) {\n      this._renderGroup(group);\n    }\n  }\n  _initGroup(group) {\n    group.setParent(this);\n    group.on('propertyChange', this._groupPropertyChangeHandler);\n\n    // Copy properties from accordion to new group. If the properties are not set yet, copy them from the group to the accordion\n    // This gives the possibility to either define the properties on the accordion or on the group initially\n    if (this.collapseStyle !== null) {\n      group.setCollapseStyle(this.collapseStyle);\n    }\n    this.setProperty('collapseStyle', group.collapseStyle);\n  }\n  _renderGroup(group) {\n    group.render();\n  }\n  _deleteGroups(groups) {\n    groups.forEach(function (group) {\n      this._deleteGroup(group);\n    }, this);\n  }\n  _deleteGroup(group) {\n    group.off('propertyChange', this._groupPropertyChangeHandler);\n    if (group.owner === this) {\n      group.destroy();\n    } else if (this.rendered) {\n      group.remove();\n    }\n  }\n  _renderGroups() {\n    this.groups.forEach(function (group) {\n      this._renderGroup(group);\n    }, this);\n    this._updateFirstLastMarker();\n    this.invalidateLayoutTree();\n  }\n  setComparator(comparator) {\n    if (this.comparator === comparator) {\n      return;\n    }\n    this.comparator = comparator;\n  }\n  sort() {\n    let groups = this.groups.slice();\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n  }\n  _sort(groups) {\n    if (this.comparator === null) {\n      return;\n    }\n    groups.sort(this.comparator);\n  }\n  _updateGroupOrder(groups) {\n    if (!this.rendered) {\n      return;\n    }\n    // Loop through the the groups and move every html element to the end of the container\n    // Only move if the order is different to the old order\n    let different = false;\n    groups.forEach(function (group, i) {\n      if (this.groups[i] !== group || different) {\n        // Start ordering as soon as the order of the array starts to differ\n        different = true;\n        group.$container.appendTo(this.$container);\n      }\n    }, this);\n  }\n  _updateFirstLastMarker() {\n    widgets.updateFirstLastMarker(this.groups);\n  }\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n  _renderScrollable() {\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: 'y'\n      });\n    } else {\n      this._uninstallScrollbars();\n    }\n    this.$container.toggleClass('scrollable', this.scrollable);\n    this.invalidateLayoutTree();\n  }\n\n  /**\n   * @override\n   */\n  getFocusableElement() {\n    let group = widgets.findFirstFocusableWidget(this.groups, this);\n    if (group) {\n      return group.getFocusableElement();\n    }\n    return null;\n  }\n  setExclusiveExpand(exclusiveExpand) {\n    this.setProperty('exclusiveExpand', exclusiveExpand);\n  }\n  _setExclusiveExpand(exclusiveExpand) {\n    this._setProperty('exclusiveExpand', exclusiveExpand);\n    this._updateExclusiveExpand();\n  }\n  _updateExclusiveExpand() {\n    if (!this.exclusiveExpand) {\n      return;\n    }\n    let expandedGroup = arrays.find(this.groups, group => {\n      return group.visible && !group.collapsed;\n    });\n    this._collapseOthers(expandedGroup);\n  }\n  setCollapseStyle(collapseStyle) {\n    this.groups.forEach(group => {\n      group.setCollapseStyle(collapseStyle);\n    });\n    this.setProperty('collapseStyle', collapseStyle);\n  }\n  _collapseOthers(expandedGroup) {\n    if (!expandedGroup || !expandedGroup.collapsible) {\n      return;\n    }\n    this.groups.forEach(group => {\n      if (group !== expandedGroup && group.collapsible) {\n        group.setCollapsed(true);\n      }\n    });\n  }\n  _onGroupPropertyChange(event) {\n    if (event.propertyName === 'collapsed') {\n      this._onGroupCollapsedChange(event);\n    } else if (event.propertyName === 'visible') {\n      this._updateFirstLastMarker();\n    }\n  }\n  _onGroupCollapsedChange(event) {\n    if (!event.newValue && this.exclusiveExpand) {\n      this._collapseOthers(event.source);\n    }\n  }\n}","map":{"version":3,"names":["AccordionLayout","arrays","HtmlComponent","LoadingSupport","objects","Widget","widgets","Accordion","constructor","comparator","collapseStyle","exclusiveExpand","groups","scrollable","$container","htmlComp","_addWidgetProperties","_groupPropertyChangeHandler","_onGroupPropertyChange","bind","_init","model","_initGroups","_setExclusiveExpand","_createLoadingSupport","widget","_render","$parent","appendDiv","install","session","setLayout","_createLayout","_renderProperties","_renderScrollable","_renderGroups","insertGroup","group","insertGroups","groupsToInsert","ensure","setGroups","concat","deleteGroup","deleteGroups","groupsToDelete","slice","removeAll","deleteAllGroups","forEach","_initGroup","equals","_createChildren","diff","_deleteGroups","_insertGroups","_sort","_updateGroupOrder","_setProperty","length","_updateExclusiveExpand","rendered","_updateFirstLastMarker","invalidateLayoutTree","_insertGroup","_renderGroup","setParent","on","setCollapseStyle","setProperty","render","_deleteGroup","off","owner","destroy","remove","setComparator","sort","different","i","appendTo","updateFirstLastMarker","setScrollable","_installScrollbars","axis","_uninstallScrollbars","toggleClass","getFocusableElement","findFirstFocusableWidget","setExclusiveExpand","expandedGroup","find","visible","collapsed","_collapseOthers","collapsible","setCollapsed","event","propertyName","_onGroupCollapsedChange","newValue","source"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/accordion/Accordion.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AccordionLayout, arrays, HtmlComponent, LoadingSupport, objects, Widget, widgets} from '../index';\n\nexport default class Accordion extends Widget {\n  constructor() {\n    super();\n    this.comparator = null;\n    this.collapseStyle = null;\n    this.exclusiveExpand = true;\n    this.groups = [];\n    this.scrollable = true;\n\n    this.$container = null;\n    this.htmlComp = null;\n    this._addWidgetProperties(['groups']);\n    this._groupPropertyChangeHandler = this._onGroupPropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this._initGroups(this.groups);\n    this._setExclusiveExpand(this.exclusiveExpand);\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('accordion');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(this._createLayout());\n  }\n\n  _createLayout() {\n    return new AccordionLayout();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderScrollable();\n    this._renderGroups();\n  }\n\n  insertGroup(group) {\n    this.insertGroups([group]);\n  }\n\n  insertGroups(groupsToInsert) {\n    groupsToInsert = arrays.ensure(groupsToInsert);\n    this.setGroups(this.groups.concat(groupsToInsert));\n  }\n\n  deleteGroup(group) {\n    this.deleteGroups([group]);\n  }\n\n  deleteGroups(groupsToDelete) {\n    groupsToDelete = arrays.ensure(groupsToDelete);\n    let groups = this.groups.slice();\n    arrays.removeAll(groups, groupsToDelete);\n    this.setGroups(groups);\n  }\n\n  deleteAllGroups() {\n    this.setGroups([]);\n  }\n\n  _initGroups(groups) {\n    this.groups.forEach(function(group) {\n      this._initGroup(group);\n    }, this);\n  }\n\n  setGroups(groups) {\n    groups = arrays.ensure(groups);\n    if (objects.equals(this.groups, groups)) {\n      return;\n    }\n\n    // Ensure given groups are real groups (of type Group)\n    groups = this._createChildren(groups);\n\n    // Only delete those which are not in the new array\n    // Only insert those which are not already there\n    let groupsToDelete = arrays.diff(this.groups, groups);\n    let groupsToInsert = arrays.diff(groups, this.groups);\n    this._deleteGroups(groupsToDelete);\n    this._insertGroups(groupsToInsert);\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n\n    if (groupsToInsert.length > 0) {\n      this._updateExclusiveExpand();\n    }\n    if (this.rendered) {\n      this._updateFirstLastMarker();\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _insertGroups(groups) {\n    groups.forEach(function(group) {\n      this._insertGroup(group);\n    }, this);\n  }\n\n  _insertGroup(group) {\n    this._initGroup(group);\n    if (this.rendered) {\n      this._renderGroup(group);\n    }\n  }\n\n  _initGroup(group) {\n    group.setParent(this);\n    group.on('propertyChange', this._groupPropertyChangeHandler);\n\n    // Copy properties from accordion to new group. If the properties are not set yet, copy them from the group to the accordion\n    // This gives the possibility to either define the properties on the accordion or on the group initially\n    if (this.collapseStyle !== null) {\n      group.setCollapseStyle(this.collapseStyle);\n    }\n    this.setProperty('collapseStyle', group.collapseStyle);\n  }\n\n  _renderGroup(group) {\n    group.render();\n  }\n\n  _deleteGroups(groups) {\n    groups.forEach(function(group) {\n      this._deleteGroup(group);\n    }, this);\n  }\n\n  _deleteGroup(group) {\n    group.off('propertyChange', this._groupPropertyChangeHandler);\n    if (group.owner === this) {\n      group.destroy();\n    } else if (this.rendered) {\n      group.remove();\n    }\n  }\n\n  _renderGroups() {\n    this.groups.forEach(function(group) {\n      this._renderGroup(group);\n    }, this);\n    this._updateFirstLastMarker();\n    this.invalidateLayoutTree();\n  }\n\n  setComparator(comparator) {\n    if (this.comparator === comparator) {\n      return;\n    }\n    this.comparator = comparator;\n  }\n\n  sort() {\n    let groups = this.groups.slice();\n    this._sort(groups);\n    this._updateGroupOrder(groups);\n    this._setProperty('groups', groups);\n  }\n\n  _sort(groups) {\n    if (this.comparator === null) {\n      return;\n    }\n    groups.sort(this.comparator);\n  }\n\n  _updateGroupOrder(groups) {\n    if (!this.rendered) {\n      return;\n    }\n    // Loop through the the groups and move every html element to the end of the container\n    // Only move if the order is different to the old order\n    let different = false;\n    groups.forEach(function(group, i) {\n      if (this.groups[i] !== group || different) {\n        // Start ordering as soon as the order of the array starts to differ\n        different = true;\n        group.$container.appendTo(this.$container);\n      }\n    }, this);\n  }\n\n  _updateFirstLastMarker() {\n    widgets.updateFirstLastMarker(this.groups);\n  }\n\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n\n  _renderScrollable() {\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: 'y'\n      });\n    } else {\n      this._uninstallScrollbars();\n    }\n    this.$container.toggleClass('scrollable', this.scrollable);\n    this.invalidateLayoutTree();\n  }\n\n  /**\n   * @override\n   */\n  getFocusableElement() {\n    let group = widgets.findFirstFocusableWidget(this.groups, this);\n    if (group) {\n      return group.getFocusableElement();\n    }\n    return null;\n  }\n\n  setExclusiveExpand(exclusiveExpand) {\n    this.setProperty('exclusiveExpand', exclusiveExpand);\n  }\n\n  _setExclusiveExpand(exclusiveExpand) {\n    this._setProperty('exclusiveExpand', exclusiveExpand);\n    this._updateExclusiveExpand();\n  }\n\n  _updateExclusiveExpand() {\n    if (!this.exclusiveExpand) {\n      return;\n    }\n    let expandedGroup = arrays.find(this.groups, group => {\n      return group.visible && !group.collapsed;\n    });\n    this._collapseOthers(expandedGroup);\n  }\n\n  setCollapseStyle(collapseStyle) {\n    this.groups.forEach(group => {\n      group.setCollapseStyle(collapseStyle);\n    });\n    this.setProperty('collapseStyle', collapseStyle);\n  }\n\n  _collapseOthers(expandedGroup) {\n    if (!expandedGroup || !expandedGroup.collapsible) {\n      return;\n    }\n    this.groups.forEach(group => {\n      if (group !== expandedGroup && group.collapsible) {\n        group.setCollapsed(true);\n      }\n    });\n  }\n\n  _onGroupPropertyChange(event) {\n    if (event.propertyName === 'collapsed') {\n      this._onGroupCollapsedChange(event);\n    } else if (event.propertyName === 'visible') {\n      this._updateFirstLastMarker();\n    }\n  }\n\n  _onGroupCollapsedChange(event) {\n    if (!event.newValue && this.exclusiveExpand) {\n      this._collapseOthers(event.source);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}