{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, ListBoxLayout, LookupBox, scout, Table } from '../../../index';\nexport default class ListBox extends LookupBox {\n  constructor() {\n    super();\n    this.table = null;\n    this.lookupStatus = null;\n    this._addWidgetProperties(['table', 'filterBox']);\n  }\n  _init(model) {\n    super._init(model);\n    this.table.on('rowsChecked', this._onTableRowsChecked.bind(this));\n    this.table.setScrollTop(this.scrollTop);\n  }\n  _initStructure(value) {\n    if (!this.table) {\n      this.table = this._createDefaultListBoxTable();\n    }\n\n    // align checkableColumn in table with checkboxes of tree fields\n    if (this.table.checkableColumn) {\n      // may be null if a non-default list-box-table with checkable=false is used\n      this.table.checkableColumn.minWidth = 28;\n      this.table.checkableColumn.width = this.table.checkableColumn.minWidth; // do not use setWidth here\n    }\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('list-box');\n  }\n  _createFieldContainerLayout() {\n    return new ListBoxLayout(this, this.table, this.filterBox);\n  }\n  _renderStructure() {\n    this.table.render(this.$fieldContainer);\n    this.addField(this.table.$container);\n  }\n  _onTableRowsChecked(event) {\n    this._syncTableToValue();\n  }\n  _syncTableToValue() {\n    if (!this.lookupCall || this._valueSyncing) {\n      return;\n    }\n    this._valueSyncing = true;\n    let valueArray = [];\n    this.table.rows.forEach(row => {\n      if (row.checked) {\n        valueArray.push(row.lookupRow.key);\n      }\n    }, this);\n    this.setValue(valueArray);\n    this._valueSyncing = false;\n  }\n  _valueChanged() {\n    super._valueChanged();\n    this._syncValueToTable(this.value);\n  }\n  _syncValueToTable(newValue) {\n    if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n      return;\n    }\n    this._valueSyncing = true;\n    let opts = {\n      checkOnlyEnabled: false\n    };\n    try {\n      if (arrays.empty(newValue)) {\n        this.table.uncheckRows(this.table.rows, opts);\n      } else {\n        // if lookup was not executed yet: do it now.\n        let lookupScheduled = this._ensureLookupCallExecuted();\n        if (lookupScheduled) {\n          return; // was the first lookup: table has no rows yet. cancel sync. Will be executed again after lookup execution.\n        }\n\n        let rowsToCheck = [];\n        this.table.uncheckRows(this.table.rows, opts);\n        this.table.rows.forEach(row => {\n          if (arrays.containsAny(newValue, row.lookupRow.key)) {\n            rowsToCheck.push(row);\n          }\n        }, this);\n        this.table.checkRows(rowsToCheck, opts);\n      }\n      this._updateDisplayText();\n    } finally {\n      this._valueSyncing = false;\n    }\n  }\n  _lookupByAllDone(result) {\n    if (super._lookupByAllDone(result)) {\n      this._populateTable(result);\n    }\n  }\n  _populateTable(result) {\n    let tableRows = [],\n      lookupRows = result.lookupRows;\n    lookupRows.forEach(function (lookupRow) {\n      tableRows.push(this._createTableRow(lookupRow));\n    }, this);\n    this.table.deleteAllRows();\n    this.table.insertRows(tableRows);\n    this._syncValueToTable(this.value);\n  }\n\n  /**\n   * Returns a lookup row for each value currently checked.\n   */\n  getCheckedLookupRows() {\n    if (this.value === null || arrays.empty(this.value) || this.table.rows.length === 0) {\n      return [];\n    }\n    return this.table.rows.filter(row => {\n      return row.checked;\n    }).map(row => {\n      return row.lookupRow;\n    });\n  }\n  _createTableRow(lookupRow) {\n    let cell = scout.create('Cell', {\n        text: lookupRow.text\n      }),\n      cells = [cell],\n      row = {\n        cells: cells,\n        lookupRow: lookupRow\n      };\n    if (lookupRow.iconId) {\n      cell.iconId = lookupRow.iconId;\n    }\n    if (lookupRow.tooltipText) {\n      cell.tooltipText = lookupRow.tooltipText;\n    }\n    if (lookupRow.backgroundColor) {\n      cell.backgroundColor = lookupRow.backgroundColor;\n    }\n    if (lookupRow.foregroundColor) {\n      cell.foregroundColor = lookupRow.foregroundColor;\n    }\n    if (lookupRow.font) {\n      cell.font = lookupRow.font;\n    }\n    if (lookupRow.enabled === false) {\n      row.enabled = false;\n    }\n    if (lookupRow.cssClass) {\n      row.cssClass = lookupRow.cssClass;\n    }\n    if (lookupRow.active === false) {\n      row.active = false;\n      row.cssClass = (row.cssClass ? row.cssClass + ' ' : '') + 'inactive';\n    }\n    return row;\n  }\n  _createDefaultListBoxTable() {\n    return scout.create('Table', {\n      parent: this,\n      autoResizeColumns: true,\n      checkable: true,\n      checkableStyle: Table.CheckableStyle.CHECKBOX_TABLE_ROW,\n      headerVisible: false,\n      footerVisible: false,\n      columns: [{\n        objectType: 'Column'\n      }]\n    });\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.table;\n  }\n}","map":{"version":3,"names":["arrays","ListBoxLayout","LookupBox","scout","Table","ListBox","constructor","table","lookupStatus","_addWidgetProperties","_init","model","on","_onTableRowsChecked","bind","setScrollTop","scrollTop","_initStructure","value","_createDefaultListBoxTable","checkableColumn","minWidth","width","_render","$container","addClass","_createFieldContainerLayout","filterBox","_renderStructure","render","$fieldContainer","addField","event","_syncTableToValue","lookupCall","_valueSyncing","valueArray","rows","forEach","row","checked","push","lookupRow","key","setValue","_valueChanged","_syncValueToTable","newValue","initialized","opts","checkOnlyEnabled","empty","uncheckRows","lookupScheduled","_ensureLookupCallExecuted","rowsToCheck","containsAny","checkRows","_updateDisplayText","_lookupByAllDone","result","_populateTable","tableRows","lookupRows","_createTableRow","deleteAllRows","insertRows","getCheckedLookupRows","length","filter","map","cell","create","text","cells","iconId","tooltipText","backgroundColor","foregroundColor","font","enabled","cssClass","active","parent","autoResizeColumns","checkable","checkableStyle","CheckableStyle","CHECKBOX_TABLE_ROW","headerVisible","footerVisible","columns","objectType","getDelegateScrollable"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/listbox/ListBox.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, ListBoxLayout, LookupBox, scout, Table} from '../../../index';\n\nexport default class ListBox extends LookupBox {\n\n  constructor() {\n    super();\n\n    this.table = null;\n    this.lookupStatus = null;\n\n    this._addWidgetProperties(['table', 'filterBox']);\n  }\n\n  _init(model) {\n    super._init(model);\n    this.table.on('rowsChecked', this._onTableRowsChecked.bind(this));\n    this.table.setScrollTop(this.scrollTop);\n  }\n\n  _initStructure(value) {\n    if (!this.table) {\n      this.table = this._createDefaultListBoxTable();\n    }\n\n    // align checkableColumn in table with checkboxes of tree fields\n    if (this.table.checkableColumn) { // may be null if a non-default list-box-table with checkable=false is used\n      this.table.checkableColumn.minWidth = 28;\n      this.table.checkableColumn.width = this.table.checkableColumn.minWidth; // do not use setWidth here\n    }\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('list-box');\n  }\n\n  _createFieldContainerLayout() {\n    return new ListBoxLayout(this, this.table, this.filterBox);\n  }\n\n  _renderStructure() {\n    this.table.render(this.$fieldContainer);\n    this.addField(this.table.$container);\n  }\n\n  _onTableRowsChecked(event) {\n    this._syncTableToValue();\n  }\n\n  _syncTableToValue() {\n    if (!this.lookupCall || this._valueSyncing) {\n      return;\n    }\n    this._valueSyncing = true;\n    let valueArray = [];\n    this.table.rows.forEach(row => {\n      if (row.checked) {\n        valueArray.push(row.lookupRow.key);\n      }\n    }, this);\n\n    this.setValue(valueArray);\n    this._valueSyncing = false;\n  }\n\n  _valueChanged() {\n    super._valueChanged();\n    this._syncValueToTable(this.value);\n  }\n\n  _syncValueToTable(newValue) {\n    if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n      return;\n    }\n\n    this._valueSyncing = true;\n    let opts = {\n      checkOnlyEnabled: false\n    };\n    try {\n      if (arrays.empty(newValue)) {\n        this.table.uncheckRows(this.table.rows, opts);\n      } else {\n        // if lookup was not executed yet: do it now.\n        let lookupScheduled = this._ensureLookupCallExecuted();\n        if (lookupScheduled) {\n          return; // was the first lookup: table has no rows yet. cancel sync. Will be executed again after lookup execution.\n        }\n\n        let rowsToCheck = [];\n\n        this.table.uncheckRows(this.table.rows, opts);\n        this.table.rows.forEach(row => {\n          if (arrays.containsAny(newValue, row.lookupRow.key)) {\n            rowsToCheck.push(row);\n          }\n        }, this);\n        this.table.checkRows(rowsToCheck, opts);\n      }\n\n      this._updateDisplayText();\n    } finally {\n      this._valueSyncing = false;\n    }\n  }\n\n  _lookupByAllDone(result) {\n    if (super._lookupByAllDone(result)) {\n      this._populateTable(result);\n    }\n  }\n\n  _populateTable(result) {\n    let\n      tableRows = [],\n      lookupRows = result.lookupRows;\n\n    lookupRows.forEach(function(lookupRow) {\n      tableRows.push(this._createTableRow(lookupRow));\n    }, this);\n\n    this.table.deleteAllRows();\n    this.table.insertRows(tableRows);\n\n    this._syncValueToTable(this.value);\n  }\n\n  /**\n   * Returns a lookup row for each value currently checked.\n   */\n  getCheckedLookupRows() {\n    if (this.value === null || arrays.empty(this.value) || this.table.rows.length === 0) {\n      return [];\n    }\n\n    return this.table.rows.filter(row => {\n      return row.checked;\n    }).map(row => {\n      return row.lookupRow;\n    });\n  }\n\n  _createTableRow(lookupRow) {\n    let\n      cell = scout.create('Cell', {\n        text: lookupRow.text\n      }),\n      cells = [cell],\n      row = {\n        cells: cells,\n        lookupRow: lookupRow\n      };\n\n    if (lookupRow.iconId) {\n      cell.iconId = lookupRow.iconId;\n    }\n    if (lookupRow.tooltipText) {\n      cell.tooltipText = lookupRow.tooltipText;\n    }\n    if (lookupRow.backgroundColor) {\n      cell.backgroundColor = lookupRow.backgroundColor;\n    }\n    if (lookupRow.foregroundColor) {\n      cell.foregroundColor = lookupRow.foregroundColor;\n    }\n    if (lookupRow.font) {\n      cell.font = lookupRow.font;\n    }\n    if (lookupRow.enabled === false) {\n      row.enabled = false;\n    }\n    if (lookupRow.cssClass) {\n      row.cssClass = lookupRow.cssClass;\n    }\n    if (lookupRow.active === false) {\n      row.active = false;\n      row.cssClass = (row.cssClass ? (row.cssClass + ' ') : '') + 'inactive';\n    }\n\n    return row;\n  }\n\n  _createDefaultListBoxTable() {\n    return scout.create('Table', {\n      parent: this,\n      autoResizeColumns: true,\n      checkable: true,\n      checkableStyle: Table.CheckableStyle.CHECKBOX_TABLE_ROW,\n      headerVisible: false,\n      footerVisible: false,\n      columns: [{\n        objectType: 'Column'\n      }]\n    });\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.table;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}