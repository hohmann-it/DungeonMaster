{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, graphics, MenuBarLayout, scrollbars } from '../index';\nexport default class TreeLayout extends AbstractLayout {\n  constructor(tree) {\n    super();\n    this.tree = tree;\n    this.nodeDimensionsDirty = false;\n  }\n  layout($container) {\n    this._layout($container);\n    scrollbars.update(this.tree.$data);\n  }\n  _layout($container) {\n    let menuBarSize,\n      containerSize,\n      heightOffset,\n      menuBar = this.tree.menuBar,\n      htmlMenuBar = menuBar.htmlComp,\n      htmlContainer = this.tree.htmlComp;\n    containerSize = htmlContainer.availableSize({\n      exact: true\n    }).subtract(htmlContainer.insets());\n    if (this.tree.toggleBreadcrumbStyleEnabled && this._sizeChanged(htmlContainer)) {\n      this.tree.setBreadcrumbStyleActive(Math.floor(containerSize.width) <= this.tree.breadcrumbTogglingThreshold);\n    }\n    heightOffset = 0;\n    if (menuBar.$container.isVisible()) {\n      menuBarSize = MenuBarLayout.size(htmlMenuBar, containerSize);\n      htmlMenuBar.setSize(menuBarSize);\n      heightOffset += menuBarSize.height;\n    }\n    $container.css('--menubar-height', ((menuBarSize || {}).height || 0) + 'px');\n    this._setDataHeight(heightOffset);\n\n    // recalculate ViewRangeSize before any rendering is done\n    this.tree.setViewRangeSize(this.tree.calculateViewRangeSize());\n\n    // Check if width has changed\n    this.nodeDimensionsDirty = this.nodeDimensionsDirty || this._sizeChanged(htmlContainer);\n    if (this.nodeDimensionsDirty) {\n      this.nodeDimensionsDirty = false;\n      if (this.tree.isHorizontalScrollingEnabled()) {\n        // Width is only relevant if horizontal scrolling is enabled -> mark as dirty\n        this.tree.nodeWidthDirty = true;\n        this.tree.maxNodeWidth = 0;\n      } else {\n        // Nodes may contain wrapped text (with breadcrumb style-or if nodes contain html) -> update heights\n        this.tree.updateNodeHeights();\n        this.tree._renderViewport(); // Ensure viewRangeRendered is up to date and matches visibleNodesFlat (can diverge after filtering)\n        this.tree._renderFiller();\n      }\n    }\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n\n    // Always render viewport (not only when viewRangeSize changes), because view range depends on scroll position and data height\n    this.tree._renderViewport();\n\n    // Render scroll top again to make sure the data is really at the correct position after rendering viewport, see tree.setScrollTop for details\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n  }\n  _sizeChanged(htmlContainer) {\n    // Ceil because sizeCached is exact but .size() is not)\n    return htmlContainer.sizeCached && Math.ceil(htmlContainer.sizeCached.width) !== Math.ceil(htmlContainer.size().width);\n  }\n  _setDataHeight(heightOffset) {\n    let $data = this.tree.$data;\n    heightOffset += $data.cssMarginTop() + $data.cssMarginBottom();\n    $data.css('height', heightOffset === 0 ? '100%' : 'calc(100% - ' + heightOffset + 'px)');\n  }\n  preferredLayoutSize($container, options) {\n    // Make sure viewport is up to date before calculating pref size.\n    // This is necessary because the tree does not render the view port on any change (like insert or delete nodes). Instead it just invalidates the layout.\n    this.tree._renderViewport();\n\n    // Node dimensions were fixed when calling _renderViewport using the current size, but that size might change during layout\n    // Only necessary the first time it is layouted, afterwards htmlContainer.sizeCached will be set\n    if (!this.tree.htmlComp.layouted) {\n      this.nodeDimensionsDirty = true;\n    }\n    return graphics.prefSize($container, options);\n  }\n}","map":{"version":3,"names":["AbstractLayout","graphics","MenuBarLayout","scrollbars","TreeLayout","constructor","tree","nodeDimensionsDirty","layout","$container","_layout","update","$data","menuBarSize","containerSize","heightOffset","menuBar","htmlMenuBar","htmlComp","htmlContainer","availableSize","exact","subtract","insets","toggleBreadcrumbStyleEnabled","_sizeChanged","setBreadcrumbStyleActive","Math","floor","width","breadcrumbTogglingThreshold","isVisible","size","setSize","height","css","_setDataHeight","setViewRangeSize","calculateViewRangeSize","isHorizontalScrollingEnabled","nodeWidthDirty","maxNodeWidth","updateNodeHeights","_renderViewport","_renderFiller","layouted","_renderScrollTop","sizeCached","ceil","cssMarginTop","cssMarginBottom","preferredLayoutSize","options","prefSize"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tree/TreeLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, graphics, MenuBarLayout, scrollbars} from '../index';\n\nexport default class TreeLayout extends AbstractLayout {\n\n  constructor(tree) {\n    super();\n    this.tree = tree;\n    this.nodeDimensionsDirty = false;\n  }\n\n  layout($container) {\n    this._layout($container);\n    scrollbars.update(this.tree.$data);\n  }\n\n  _layout($container) {\n    let menuBarSize, containerSize, heightOffset,\n      menuBar = this.tree.menuBar,\n      htmlMenuBar = menuBar.htmlComp,\n      htmlContainer = this.tree.htmlComp;\n\n    containerSize = htmlContainer.availableSize({\n      exact: true\n    })\n      .subtract(htmlContainer.insets());\n\n    if (this.tree.toggleBreadcrumbStyleEnabled && this._sizeChanged(htmlContainer)) {\n      this.tree.setBreadcrumbStyleActive(Math.floor(containerSize.width) <= this.tree.breadcrumbTogglingThreshold);\n    }\n\n    heightOffset = 0;\n    if (menuBar.$container.isVisible()) {\n      menuBarSize = MenuBarLayout.size(htmlMenuBar, containerSize);\n      htmlMenuBar.setSize(menuBarSize);\n      heightOffset += menuBarSize.height;\n    }\n    $container.css('--menubar-height', ((menuBarSize || {}).height || 0) + 'px');\n\n    this._setDataHeight(heightOffset);\n\n    // recalculate ViewRangeSize before any rendering is done\n    this.tree.setViewRangeSize(this.tree.calculateViewRangeSize());\n\n    // Check if width has changed\n    this.nodeDimensionsDirty = this.nodeDimensionsDirty || this._sizeChanged(htmlContainer);\n    if (this.nodeDimensionsDirty) {\n      this.nodeDimensionsDirty = false;\n      if (this.tree.isHorizontalScrollingEnabled()) {\n        // Width is only relevant if horizontal scrolling is enabled -> mark as dirty\n        this.tree.nodeWidthDirty = true;\n        this.tree.maxNodeWidth = 0;\n      } else {\n        // Nodes may contain wrapped text (with breadcrumb style-or if nodes contain html) -> update heights\n        this.tree.updateNodeHeights();\n        this.tree._renderViewport(); // Ensure viewRangeRendered is up to date and matches visibleNodesFlat (can diverge after filtering)\n        this.tree._renderFiller();\n      }\n    }\n\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n\n    // Always render viewport (not only when viewRangeSize changes), because view range depends on scroll position and data height\n    this.tree._renderViewport();\n\n    // Render scroll top again to make sure the data is really at the correct position after rendering viewport, see tree.setScrollTop for details\n    if (!htmlContainer.layouted) {\n      this.tree._renderScrollTop();\n    }\n  }\n\n  _sizeChanged(htmlContainer) {\n    // Ceil because sizeCached is exact but .size() is not)\n    return htmlContainer.sizeCached && Math.ceil(htmlContainer.sizeCached.width) !== Math.ceil(htmlContainer.size().width);\n  }\n\n  _setDataHeight(heightOffset) {\n    let $data = this.tree.$data;\n\n    heightOffset += $data.cssMarginTop() + $data.cssMarginBottom();\n\n    $data.css('height', (heightOffset === 0 ? '100%' : 'calc(100% - ' + heightOffset + 'px)'));\n  }\n\n  preferredLayoutSize($container, options) {\n    // Make sure viewport is up to date before calculating pref size.\n    // This is necessary because the tree does not render the view port on any change (like insert or delete nodes). Instead it just invalidates the layout.\n    this.tree._renderViewport();\n\n    // Node dimensions were fixed when calling _renderViewport using the current size, but that size might change during layout\n    // Only necessary the first time it is layouted, afterwards htmlContainer.sizeCached will be set\n    if (!this.tree.htmlComp.layouted) {\n      this.nodeDimensionsDirty = true;\n    }\n    return graphics.prefSize($container, options);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}