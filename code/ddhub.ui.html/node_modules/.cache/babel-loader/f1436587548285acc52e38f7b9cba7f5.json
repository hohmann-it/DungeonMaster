{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, scout, TypeDescriptor } from './index';\nimport $ from 'jquery';\n\n/**\n * @singleton\n */\nexport default class ObjectFactory {\n  constructor() {\n    // use createUniqueId() to generate a new ID\n    this.uniqueIdSeqNo = 0;\n    this._registry = {};\n  }\n  /**\n   * Creates an object from the given objectType. Only the constructor is called.\n   *\n   * OBJECT TYPE:\n   *\n   * An object type may consist of three parts: [name.space.]Class[:Variant]\n   * 1. Name spaces (optional)\n   *    All name space parts have to end with a dot ('.') character. If this part is omitted, the default\n   *    name space \"scout.\" is assumed.\n   *    Examples: \"scout.\", \"my.custom.namespace.\"\n   * 2. Scout class name (mandatory)\n   *    Examples: \"Desktop\", \"Session\", \"StringField\"\n   * 3. Model variant (optional)\n   *    Custom variants of a class can be created by adding the custom class prefix after\n   *    the Scout class name and a colon character (':'). This prefix is then combined with\n   *    the class name.\n   *    Examples: \":Offline\", \":Horizontal\"\n   *\n   * Full examples:\n   *   Object type: Outline                                      -> Constructor: Outline\n   *   Object type: myNamespace.Outline                          -> Constructor: myNamespace.Outline\n   *   Object type: Outline:MyVariant                            -> Constructor: scout.MyVariantOutline\n   *   Object type: myNamespace.Outline:MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: Outline:myNamespace.MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: myNamespace.Outline:yourNamespace.MyVariant  -> Constructor: yourNamespace.MyVariantOutline\n   *\n   * RESOLVING THE CONSTRUCTOR:\n   *\n   * When scout.objectFactories contains a create function for the given objectType, this function is called.\n   *\n   * Otherwise it tries to find the constructor function by the following logic:\n   * If the objectType provides a name space, it is used. Otherwise it takes the default \"scout\" name space.\n   * If the object type provides a variant (\"Type:Variant\"), the final object type is built by prepending\n   * the variant to the type (\"VariantType\"). If no such type can be found and the option \"variantLenient\"\n   * is set to true, a second attempt is made without the variant.\n   *\n   * @param {string} objectType (mandatory) String describing the type of the object to be created.\n   * @param {object} [options]  (optional)  Options object, currently supporting the following two options:\n   *                               - model = Model object to be passed to the constructor or create function\n   *                               - variantLenient = Flag to allow a second attempt to resolve the class\n   *                                 without variant (see description above).\n   */\n  _createObjectByType(objectType, options) {\n    if (typeof objectType !== 'string') {\n      throw new Error('missing or invalid object type');\n    }\n    options = options || {};\n    let createFunc = this._registry[objectType];\n    if (createFunc) {\n      // 1. - Use factory function registered for the given objectType\n      let scoutObject = createFunc(options.model);\n      if (!scoutObject) {\n        throw new Error('Failed to create object for objectType \"' + objectType + '\": Factory function did not return a valid object');\n      }\n      return scoutObject;\n    }\n    // 2. - Resolve class by name\n    return TypeDescriptor.newInstance(objectType, options);\n  }\n\n  /**\n   * Creates and initializes a new Scout object. When the created object has an init function, the\n   * model object is passed to that function. Otherwise the init call is omitted.\n   *\n   * @param {string|object} objectType A string with the requested objectType. This argument is optional, but if it\n   *        is omitted, the argument \"model\" becomes mandatory and MUST contain a\n   *        property named \"objectType\". If both, objectType and model, are set, the\n   *        objectType parameter always wins before the model.objectType property.\n   * @param {object} [model] The model object passed to the constructor function and to the init() method.\n   *        This argument is mandatory if it is the first argument, otherwise it is\n   *        optional (see above). This function may set/overwrite the properties 'id' and\n   *        'objectType' on the model object.\n   * @param {object} [options] Options object, see table below. This argument is optional.\n   * @param {boolean} [options.variantLenient] Controls if the object factory may try to resolve the\n   *        scoutClass without the model variant part if the initial objectType could not be resolved. Default is false.\n   * @param {boolean} [options.ensureUniqueId] Controls if the resulting object should be assigned the\n   *        attribute \"id\" if it is not defined. If the created object has an\n   *        init() function, we also set the property 'id' on the model object\n   *        to allow the init() function to copy the attribute from the model\n   *        to the scoutObject.\n   *        Default is true.\n   * @throws Error if the argument list does not match the definition.\n   */\n  create(objectType, model, options) {\n    // Normalize arguments\n    if (typeof objectType === 'string') {\n      options = options || {};\n    } else if (objects.isPlainObject(objectType)) {\n      options = model || {};\n      model = objectType;\n      if (!model.objectType) {\n        throw new Error('Missing mandatory property \"objectType\" on model');\n      }\n      objectType = model.objectType;\n    } else {\n      throw new Error('Invalid arguments');\n    }\n    // noinspection JSUndefinedPropertyAssignment\n    options.model = model;\n\n    // Create object\n    let scoutObject = this._createObjectByType(objectType, options);\n    if (objects.isFunction(scoutObject.init)) {\n      if (model) {\n        if (model.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n          model.id = this.createUniqueId();\n        }\n        model.objectType = objectType;\n      }\n      // Initialize object\n      scoutObject.init(model);\n    }\n    if (scoutObject.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n      scoutObject.id = this.createUniqueId();\n    }\n    if (scoutObject.objectType === undefined) {\n      scoutObject.objectType = objectType;\n    }\n    return scoutObject;\n  }\n\n  /**\n   * Returns a new unique ID to be used for Widgets/Adapters created by the UI\n   * without a model delivered by the server-side client.\n   * @return {string} ID with prefix 'ui'\n   */\n  createUniqueId() {\n    return 'ui' + (++this.uniqueIdSeqNo).toString();\n  }\n  register(objectType, createFunc) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) registered create-function for objectType ' + objectType);\n    this._registry[objectType] = createFunc;\n  }\n  unregister(objectType) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) unregistered objectType ' + objectType);\n    delete this._registry[objectType];\n  }\n  get(objectType) {\n    return this._registry[objectType];\n  }\n\n  /**\n   * Cannot init ObjectFactory until Log4Javascript is initialized.\n   * That's why we call this method in the scout._init method.\n   */\n  init() {\n    for (let objectType in scout.objectFactories) {\n      if (scout.objectFactories.hasOwnProperty(objectType)) {\n        this.register(objectType, scout.objectFactories[objectType]);\n      }\n    }\n  }\n  static get() {\n    return objectFactory;\n  }\n  static _set(newFactory) {\n    objectFactory = newFactory;\n  }\n}\n_defineProperty(ObjectFactory, \"NAMESPACE_SEPARATOR\", '.');\n_defineProperty(ObjectFactory, \"MODEL_VARIANT_SEPARATOR\", ':');\nlet objectFactory = new ObjectFactory();","map":{"version":3,"names":["objects","scout","TypeDescriptor","$","ObjectFactory","constructor","uniqueIdSeqNo","_registry","_createObjectByType","objectType","options","Error","createFunc","scoutObject","model","newInstance","create","isPlainObject","isFunction","init","id","undefined","nvl","ensureUniqueId","createUniqueId","toString","register","log","isDebugEnabled","debug","unregister","get","objectFactories","hasOwnProperty","objectFactory","_set","newFactory"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/ObjectFactory.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, scout, TypeDescriptor} from './index';\n\nimport $ from 'jquery';\n\n/**\n * @singleton\n */\nexport default class ObjectFactory {\n\n  constructor() {\n    // use createUniqueId() to generate a new ID\n    this.uniqueIdSeqNo = 0;\n    this._registry = {};\n  }\n\n  static NAMESPACE_SEPARATOR = '.';\n  static MODEL_VARIANT_SEPARATOR = ':';\n\n  /**\n   * Creates an object from the given objectType. Only the constructor is called.\n   *\n   * OBJECT TYPE:\n   *\n   * An object type may consist of three parts: [name.space.]Class[:Variant]\n   * 1. Name spaces (optional)\n   *    All name space parts have to end with a dot ('.') character. If this part is omitted, the default\n   *    name space \"scout.\" is assumed.\n   *    Examples: \"scout.\", \"my.custom.namespace.\"\n   * 2. Scout class name (mandatory)\n   *    Examples: \"Desktop\", \"Session\", \"StringField\"\n   * 3. Model variant (optional)\n   *    Custom variants of a class can be created by adding the custom class prefix after\n   *    the Scout class name and a colon character (':'). This prefix is then combined with\n   *    the class name.\n   *    Examples: \":Offline\", \":Horizontal\"\n   *\n   * Full examples:\n   *   Object type: Outline                                      -> Constructor: Outline\n   *   Object type: myNamespace.Outline                          -> Constructor: myNamespace.Outline\n   *   Object type: Outline:MyVariant                            -> Constructor: scout.MyVariantOutline\n   *   Object type: myNamespace.Outline:MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: Outline:myNamespace.MyVariant                -> Constructor: myNamespace.MyVariantOutline\n   *   Object type: myNamespace.Outline:yourNamespace.MyVariant  -> Constructor: yourNamespace.MyVariantOutline\n   *\n   * RESOLVING THE CONSTRUCTOR:\n   *\n   * When scout.objectFactories contains a create function for the given objectType, this function is called.\n   *\n   * Otherwise it tries to find the constructor function by the following logic:\n   * If the objectType provides a name space, it is used. Otherwise it takes the default \"scout\" name space.\n   * If the object type provides a variant (\"Type:Variant\"), the final object type is built by prepending\n   * the variant to the type (\"VariantType\"). If no such type can be found and the option \"variantLenient\"\n   * is set to true, a second attempt is made without the variant.\n   *\n   * @param {string} objectType (mandatory) String describing the type of the object to be created.\n   * @param {object} [options]  (optional)  Options object, currently supporting the following two options:\n   *                               - model = Model object to be passed to the constructor or create function\n   *                               - variantLenient = Flag to allow a second attempt to resolve the class\n   *                                 without variant (see description above).\n   */\n  _createObjectByType(objectType, options) {\n    if (typeof objectType !== 'string') {\n      throw new Error('missing or invalid object type');\n    }\n    options = options || {};\n\n    let createFunc = this._registry[objectType];\n    if (createFunc) {\n      // 1. - Use factory function registered for the given objectType\n      let scoutObject = createFunc(options.model);\n      if (!scoutObject) {\n        throw new Error('Failed to create object for objectType \"' + objectType + '\": Factory function did not return a valid object');\n      }\n      return scoutObject;\n    }\n    // 2. - Resolve class by name\n    return TypeDescriptor.newInstance(objectType, options);\n  }\n\n  /**\n   * Creates and initializes a new Scout object. When the created object has an init function, the\n   * model object is passed to that function. Otherwise the init call is omitted.\n   *\n   * @param {string|object} objectType A string with the requested objectType. This argument is optional, but if it\n   *        is omitted, the argument \"model\" becomes mandatory and MUST contain a\n   *        property named \"objectType\". If both, objectType and model, are set, the\n   *        objectType parameter always wins before the model.objectType property.\n   * @param {object} [model] The model object passed to the constructor function and to the init() method.\n   *        This argument is mandatory if it is the first argument, otherwise it is\n   *        optional (see above). This function may set/overwrite the properties 'id' and\n   *        'objectType' on the model object.\n   * @param {object} [options] Options object, see table below. This argument is optional.\n   * @param {boolean} [options.variantLenient] Controls if the object factory may try to resolve the\n   *        scoutClass without the model variant part if the initial objectType could not be resolved. Default is false.\n   * @param {boolean} [options.ensureUniqueId] Controls if the resulting object should be assigned the\n   *        attribute \"id\" if it is not defined. If the created object has an\n   *        init() function, we also set the property 'id' on the model object\n   *        to allow the init() function to copy the attribute from the model\n   *        to the scoutObject.\n   *        Default is true.\n   * @throws Error if the argument list does not match the definition.\n   */\n  create(objectType, model, options) {\n    // Normalize arguments\n    if (typeof objectType === 'string') {\n      options = options || {};\n    } else if (objects.isPlainObject(objectType)) {\n      options = model || {};\n      model = objectType;\n      if (!model.objectType) {\n        throw new Error('Missing mandatory property \"objectType\" on model');\n      }\n      objectType = model.objectType;\n    } else {\n      throw new Error('Invalid arguments');\n    }\n    // noinspection JSUndefinedPropertyAssignment\n    options.model = model;\n\n    // Create object\n    let scoutObject = this._createObjectByType(objectType, options);\n    if (objects.isFunction(scoutObject.init)) {\n      if (model) {\n        if (model.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n          model.id = this.createUniqueId();\n        }\n        model.objectType = objectType;\n      }\n      // Initialize object\n      scoutObject.init(model);\n    }\n\n    if (scoutObject.id === undefined && scout.nvl(options.ensureUniqueId, true)) {\n      scoutObject.id = this.createUniqueId();\n    }\n    if (scoutObject.objectType === undefined) {\n      scoutObject.objectType = objectType;\n    }\n\n    return scoutObject;\n  }\n\n  /**\n   * Returns a new unique ID to be used for Widgets/Adapters created by the UI\n   * without a model delivered by the server-side client.\n   * @return {string} ID with prefix 'ui'\n   */\n  createUniqueId() {\n    return 'ui' + (++this.uniqueIdSeqNo).toString();\n  }\n\n  register(objectType, createFunc) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) registered create-function for objectType ' + objectType);\n    this._registry[objectType] = createFunc;\n  }\n\n  unregister(objectType) {\n    $.log.isDebugEnabled() && $.log.debug('(ObjectFactory) unregistered objectType ' + objectType);\n    delete this._registry[objectType];\n  }\n\n  get(objectType) {\n    return this._registry[objectType];\n  }\n\n  /**\n   * Cannot init ObjectFactory until Log4Javascript is initialized.\n   * That's why we call this method in the scout._init method.\n   */\n  init() {\n    for (let objectType in scout.objectFactories) {\n      if (scout.objectFactories.hasOwnProperty(objectType)) {\n        this.register(objectType, scout.objectFactories[objectType]);\n      }\n    }\n  }\n\n  static get() {\n    return objectFactory;\n  }\n\n  static _set(newFactory) {\n    objectFactory = newFactory;\n  }\n}\n\nlet objectFactory = new ObjectFactory();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}