{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, HtmlComponent } from '../index';\nimport $ from 'jquery';\nexport default class TagBarLayout extends AbstractLayout {\n  constructor(tagBar) {\n    super();\n    this.tagBar = tagBar;\n  }\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagBar.tags && this.tagBar.tags.length > 0;\n    if (hasTags) {\n      let availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets());\n      let maxTagsWidth = availableSize.width;\n      let prefTagsWidth = 0;\n      let overflow = false;\n\n      // 1. check if overflow occurs\n      let $te, i;\n      let $tagElements = $container.find('.tag-element');\n      let numTagElements = $tagElements.length;\n      let teSizes = [];\n      $tagElements.removeClass('hidden');\n\n      // use a for loop, because don't want to loop all elements when we already know the rest is in overflow\n      for (i = numTagElements - 1; i >= 0; i--) {\n        $te = $($tagElements[i]);\n        teSizes[i] = graphics.size($te, {\n          includeMargin: true\n        });\n        overflow = prefTagsWidth + teSizes[i].width > maxTagsWidth;\n        if (overflow) {\n          break;\n        }\n        prefTagsWidth += teSizes[i].width;\n      }\n\n      // 2. add overflow icon\n      this.tagBar.setOverflowVisible(overflow);\n      if (overflow) {\n        prefTagsWidth = graphics.size(this.tagBar.$overflowIcon, {\n          includeMargin: true\n        }).width;\n        for (i = numTagElements - 1; i >= 0; i--) {\n          $te = $($tagElements[i]);\n\n          // all elements with a greater index are hidden for sure\n          let teSize = teSizes[i];\n          if (!teSize) {\n            $te.addClass('hidden');\n            continue;\n          }\n\n          // we must re-check the rest again, because we have added the\n          // overflow icon and thus we have less space for tags\n          if (prefTagsWidth + teSizes[i].width > maxTagsWidth) {\n            $te.addClass('hidden');\n          } else {\n            prefTagsWidth += teSizes[i].width;\n          }\n        }\n      }\n    }\n  }\n  preferredLayoutSize($container, options) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagBar.tags && this.tagBar.tags.length > 0;\n    let availableSize = htmlContainer.availableSize();\n    let prefTagsWidth = 0;\n    let prefTagsHeight = 0;\n    if (!hasTags) {\n      return new Dimension(0, availableSize.height);\n    }\n    let $tagElements = $container.find('.tag-element');\n    $tagElements.removeClass('hidden');\n    $tagElements.each((i, elem) => {\n      let size = graphics.size($(elem), {\n        includeMargin: true\n      });\n      prefTagsWidth += size.width;\n      prefTagsHeight = Math.max(size.height, prefTagsHeight);\n    });\n    return new Dimension(prefTagsWidth, prefTagsHeight).add(htmlContainer.insets());\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","graphics","HtmlComponent","$","TagBarLayout","constructor","tagBar","layout","$container","htmlContainer","get","hasTags","tags","length","availableSize","subtract","insets","maxTagsWidth","width","prefTagsWidth","overflow","$te","i","$tagElements","find","numTagElements","teSizes","removeClass","size","includeMargin","setOverflowVisible","$overflowIcon","teSize","addClass","preferredLayoutSize","options","prefTagsHeight","height","each","elem","Math","max","add"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tagbar/TagBarLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, HtmlComponent} from '../index';\nimport $ from 'jquery';\n\nexport default class TagBarLayout extends AbstractLayout {\n\n  constructor(tagBar) {\n    super();\n    this.tagBar = tagBar;\n  }\n\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagBar.tags && this.tagBar.tags.length > 0;\n\n    if (hasTags) {\n      let availableSize = htmlContainer.availableSize()\n        .subtract(htmlContainer.insets());\n      let maxTagsWidth = availableSize.width;\n      let prefTagsWidth = 0;\n      let overflow = false;\n\n      // 1. check if overflow occurs\n      let $te, i;\n      let $tagElements = $container.find('.tag-element');\n      let numTagElements = $tagElements.length;\n      let teSizes = [];\n      $tagElements.removeClass('hidden');\n\n      // use a for loop, because don't want to loop all elements when we already know the rest is in overflow\n      for (i = numTagElements - 1; i >= 0; i--) {\n        $te = $($tagElements[i]);\n        teSizes[i] = graphics.size($te, {\n          includeMargin: true\n        });\n        overflow = (prefTagsWidth + teSizes[i].width) > maxTagsWidth;\n        if (overflow) {\n          break;\n        }\n        prefTagsWidth += teSizes[i].width;\n      }\n\n      // 2. add overflow icon\n      this.tagBar.setOverflowVisible(overflow);\n\n      if (overflow) {\n        prefTagsWidth = graphics.size(this.tagBar.$overflowIcon, {\n          includeMargin: true\n        }).width;\n        for (i = numTagElements - 1; i >= 0; i--) {\n          $te = $($tagElements[i]);\n\n          // all elements with a greater index are hidden for sure\n          let teSize = teSizes[i];\n          if (!teSize) {\n            $te.addClass('hidden');\n            continue;\n          }\n\n          // we must re-check the rest again, because we have added the\n          // overflow icon and thus we have less space for tags\n          if ((prefTagsWidth + teSizes[i].width) > maxTagsWidth) {\n            $te.addClass('hidden');\n          } else {\n            prefTagsWidth += teSizes[i].width;\n          }\n        }\n      }\n    }\n  }\n\n  preferredLayoutSize($container, options) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagBar.tags && this.tagBar.tags.length > 0;\n    let availableSize = htmlContainer.availableSize();\n    let prefTagsWidth = 0;\n    let prefTagsHeight = 0;\n\n    if (!hasTags) {\n      return new Dimension(0, availableSize.height);\n    }\n\n    let $tagElements = $container.find('.tag-element');\n    $tagElements.removeClass('hidden');\n    $tagElements.each((i, elem) => {\n      let size = graphics.size($(elem), {\n        includeMargin: true\n      });\n      prefTagsWidth += size.width;\n      prefTagsHeight = Math.max(size.height, prefTagsHeight);\n    });\n    return new Dimension(prefTagsWidth, prefTagsHeight).add(htmlContainer.insets());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}