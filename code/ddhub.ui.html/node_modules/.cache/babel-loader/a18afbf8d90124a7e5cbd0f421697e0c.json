{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Dimension, Insets, objects, Point, Rectangle, scout, scrollbars } from '../index';\nimport $ from 'jquery';\n\n/**\n * This file contains helpers for graphical operations\n */\n\n/**\n * Returns the preferred size of $elem.\n * Precondition: $elem and it's parents must not be hidden (display: none. Visibility: hidden would be ok\n * because in this case the browser reserves the space the element would be using).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * useCssSize               false           If true, the width and height properties are set to '' while\n *                                          measuring, thus allowing existing CSS rules to influence the\n *                                          sizes. If set to false, the sizes are set to 'auto' or the\n *                                          corresponding hint values (see below).\n *\n * widthHint                undefined       If useCssSize is false, this value is used as width (in pixels)\n *                                          instead of 'auto'. Useful to get the preferred height for a\n *                                          given width.\n *\n * heightHint               undefined       Same as 'widthHint' but for the height.\n *\n * enforceSizeHints         false           Sets min/max-width/height in addition to with width/height if widthHint resp. heightHint is set.\n *                                          The browser sometimes makes the element smaller or larger than specified by width/height, especially in a flex container.\n *                                          To prevent that, set this option to true. Default is false, but may change in the future.\n *\n * restoreScrollPositions   true            By default, the $elem's scrolling position is saved and restored\n *                                          during the execution of this method (because applying\n *                                          intermediate styles for measurement might change the current\n *                                          position). If the calling method does that itself, you should\n *                                          set this option to false to prevent overriding the stored\n *                                          scrolling position in $elem's data attributes.\n * animateClasses           undefined       If set, the $elem is checked for one of these classes.\n *                                          If one class is currently set on the $elem, a clone of the $elem without the class\n *                                          is created and measured instead. See also {@link #prefSizeWithoutAnimation}.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function prefSize($elem, options) {\n  // Return 0/0 if element is not displayed (display: none).\n  // We don't use isVisible by purpose because isVisible returns false for elements with visibility: hidden which is wrong here (we would like to be able to measure hidden elements)\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n  let defaults = {\n    includeMargin: false,\n    useCssSize: false,\n    widthHint: undefined,\n    heightHint: undefined,\n    restoreScrollPositions: true\n  };\n  options = $.extend({}, defaults, options);\n  if (options.animateClasses && options.animateClasses.length > 0) {\n    return prefSizeWithoutAnimation($elem, options);\n  }\n  let oldStyle = $elem.attr('style');\n  let oldScrollLeft = $elem.scrollLeft();\n  let oldScrollTop = $elem.scrollTop();\n  if (options.restoreScrollPositions) {\n    scrollbars.storeScrollPositions($elem);\n  }\n\n  // UseCssSize is necessary if the css rules have a fix height or width set.\n  // Otherwise setting the width/height to auto could result in a different size\n  let newWidth = options.useCssSize ? '' : scout.nvl(options.widthHint, 'auto');\n  let newHeight = options.useCssSize ? '' : scout.nvl(options.heightHint, 'auto');\n  let cssProperties = {\n    'width': newWidth,\n    'height': newHeight\n  };\n  if (scout.nvl(options.enforceSizeHints, false)) {\n    if (objects.isNumber(newWidth)) {\n      cssProperties['max-width'] = newWidth;\n      cssProperties['min-width'] = newWidth;\n    }\n    if (objects.isNumber(newHeight)) {\n      cssProperties['max-height'] = newHeight;\n      cssProperties['min-height'] = newHeight;\n    }\n  }\n\n  // modify properties which prevent reading the preferred size\n  $elem.css(cssProperties);\n\n  // measure\n  let bcr = $elem[0].getBoundingClientRect();\n  let prefSize = new Dimension(bcr.width, bcr.height);\n  if (options.includeMargin) {\n    prefSize.width += $elem.cssMarginX();\n    prefSize.height += $elem.cssMarginY();\n  }\n\n  // reset the modified style attribute\n  $elem.attrOrRemove('style', oldStyle);\n  $elem.scrollLeft(oldScrollLeft);\n  $elem.scrollTop(oldScrollTop);\n  if (options.restoreScrollPositions) {\n    scrollbars.restoreScrollPositions($elem);\n  }\n  return exactPrefSize(prefSize, options);\n}\n\n/**\n * Ensure resulting numbers are integers. getBoundingClientRect() might correctly return fractional values\n * (because of the browser's sub-pixel rendering). However, if we use those numbers to set the size\n * of an element using CSS, it gets rounded or cut off. The behavior is not defined amongst different\n * browser engines.\n * Example:\n * - Measured size from this method:      h = 345.239990234375\n * - Set the size to an element:          $elem.css('height', h + 'px')\n * - Results:\n *    Firefox & Chrome     <div id=\"elem\" style=\"height: 345.24px\">     [Fractional part rounded to three digits]\n */\nexport function exactPrefSize(prefSize, options) {\n  let exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    prefSize.width = Math.ceil(prefSize.width);\n    prefSize.height = Math.ceil(prefSize.height);\n  }\n  return prefSize;\n}\n\n/**\n * If the $container is currently animated by CSS, create a clone, remove the animating CSS class and measure the clone instead.\n * This may be necessary because the animation might change the size of the element.\n * If prefSize is called during the animation, the current size is returned instead of the one after the animation.\n */\nexport function prefSizeWithoutAnimation($elem, options) {\n  let animateClasses = arrays.ensure(options.animateClasses);\n  animateClasses = animateClasses.filter(cssClass => {\n    return $elem.hasClass(cssClass);\n  });\n  options = $.extend({}, options);\n  options.animateClasses = null;\n  if (animateClasses.length === 0) {\n    return prefSize($elem, options);\n  }\n  animateClasses = arrays.format(animateClasses, ' ');\n  let $clone = $elem.clone().removeClass(animateClasses).appendTo($elem.parent());\n  let prefSizeResult = prefSize($clone, options);\n  $clone.remove();\n  return prefSizeResult;\n}\n\n/* These functions are designed to be used with box-sizing:box-model. The only reliable\n * way to set the size of a component when working with box model is to use css('width/height'...)\n * in favor of width/height() functions.\n */\n\n/**\n * Returns the size of the element, insets included. The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param {object|boolean} [options]\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n * @param {boolean} [options.includeMargin] Whether to include $elem's margins in the returned size. Default is false.\n * @param {boolean} [options.exact] When set to true the returned dimensions may contain fractional digits, otherwise the sizes are rounded up. Default is false.\n * @returns {Dimension}\n */\nexport function size($elem, options) {\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n  let bcr = $elem[0].getBoundingClientRect();\n  let size = new Dimension(bcr.width, bcr.height);\n  let includeMargin = scout.nvl(options.includeMargin, false);\n  if (includeMargin) {\n    size.width += $elem.cssMarginX();\n    size.height += $elem.cssMarginY();\n  }\n  // see comments in prefSize()\n  let exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    size.width = Math.ceil(size.width);\n    size.height = Math.ceil(size.height);\n  }\n  return size;\n}\n\n/**\n * @returns {Dimension} the size of the element specified by the style.\n */\nexport function cssSize($elem) {\n  return new Dimension($elem.cssWidth(), $elem.cssHeight());\n}\n\n/**\n * @returns {Dimension} the max size of the element specified by the style.\n */\nexport function cssMaxSize($elem) {\n  return new Dimension($elem.cssMaxWidth(), $elem.cssMaxHeight());\n}\n\n/**\n * @returns {Dimension} the min size of the element specified by the style.\n */\nexport function cssMinSize($elem) {\n  return new Dimension($elem.cssMinWidth(), $elem.cssMinHeight());\n}\nexport function setSize($comp, vararg, height) {\n  let size = vararg instanceof Dimension ? vararg : new Dimension(vararg, height);\n  $comp.cssWidth(size.width).cssHeight(size.height);\n}\n\n/**\n * Returns the inset-dimensions of the component (padding, margin, border).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned insets.\n *\n * includePadding           true            Whether to include $elem's paddings in the returned insets.\n *\n * includeBorder            true            Whether to include $elem's borders in the returned insets.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function insets($comp, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n  let i,\n    directions = ['top', 'right', 'bottom', 'left'],\n    insets = [0, 0, 0, 0],\n    includeMargin = scout.nvl(options.includeMargin, false),\n    includePadding = scout.nvl(options.includePadding, true),\n    includeBorder = scout.nvl(options.includeBorder, true);\n  for (i = 0; i < directions.length; i++) {\n    if (includeMargin) {\n      insets[i] += $comp.cssPxValue('margin-' + directions[i]);\n    }\n    if (includePadding) {\n      insets[i] += $comp.cssPxValue('padding-' + directions[i]);\n    }\n    if (includeBorder) {\n      insets[i] += $comp.cssPxValue('border-' + directions[i] + '-width');\n    }\n  }\n  return new Insets(insets[0], insets[1], insets[2], insets[3]);\n}\nexport function margins($comp) {\n  return insets($comp, {\n    includeMargin: true,\n    includePadding: false,\n    includeBorder: false\n  });\n}\nexport function setMargins($comp, margins) {\n  $comp.css({\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    marginTop: margins.top,\n    marginBottom: margins.bottom\n  });\n}\nexport function paddings($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: true,\n    includeBorder: false\n  });\n}\nexport function borders($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: false,\n    includeBorder: true\n  });\n}\n\n/**\n * Sets the location (CSS properties left, top) of the component.\n * @param vararg integer value for X position OR instance of Point\n * @param y (optional) integer value for Y position\n * @returns\n */\nexport function setLocation($comp, vararg, y) {\n  let point = vararg instanceof Point ? vararg : new Point(vararg, y);\n  $comp.cssLeft(point.x).cssTop(point.y);\n}\n\n/**\n * Returns a Point consisting of the component's \"cssLeft\" and\n * \"cssTop\" values (reverse operation to setLocation).\n */\nexport function location($comp) {\n  return new Point($comp.cssLeft(), $comp.cssTop());\n}\n\n/**\n * Returns the bounds of the element relative to the offset parent, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function bounds($elem, options) {\n  return _bounds($elem, $elem.position(), options);\n}\n\n/**\n * @returns {Point} the position relative to the offset parent ($elem.position()).\n */\nexport function position($elem) {\n  let pos = $elem.position();\n  return new Point(pos.left, pos.top);\n}\n\n/**\n * Returns the bounds of the element relative to the document, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function offsetBounds($elem, options) {\n  return _bounds($elem, $elem.offset(), options);\n}\n\n/**\n * @returns {Point} the position relative to the document ($elem.offset()).\n */\nexport function offset($elem) {\n  let pos = $elem.offset();\n  return new Point(pos.left, pos.top);\n}\nexport function _bounds($elem, pos, options) {\n  let s = size($elem, options);\n  return new Rectangle(pos.left, pos.top, s.width, s.height);\n}\nexport function setBounds($comp, vararg, y, width, height) {\n  let bounds = vararg instanceof Rectangle ? vararg : new Rectangle(vararg, y, width, height);\n  $comp.cssLeft(bounds.x).cssTop(bounds.y).cssWidth(bounds.width).cssHeight(bounds.height);\n}\n\n/**\n * @returns {Rectangle} the bounds of the element specified by the style.\n */\nexport function cssBounds($elem) {\n  return new Rectangle($elem.cssLeft(), $elem.cssTop(), $elem.cssWidth(), $elem.cssHeight());\n}\nexport function debugOutput($comp) {\n  if (!$comp) {\n    return '$comp is undefined';\n  }\n  $comp = $.ensure($comp);\n  if ($comp.length === 0) {\n    return '$comp doesn\\t match any elements';\n  }\n  let attrs = '';\n  if ($comp.attr('id')) {\n    attrs += 'id=' + $comp.attr('id');\n  }\n  if ($comp.attr('class')) {\n    attrs += ' class=' + $comp.attr('class');\n  }\n  if ($comp.attr('data-modelclass')) {\n    attrs += ' data-modelclass=' + $comp.attr('data-modelclass');\n  }\n  if (attrs.length === 0) {\n    let html = scout.nvl($comp.html(), '');\n    if (html.length > 30) {\n      html = html.substring(0, 30) + '...';\n    }\n    attrs = html;\n  }\n  if (!$comp.isAttached()) {\n    attrs += ' attached=false';\n  }\n  return 'Element[' + attrs.trim() + ']';\n}\nexport default {\n  borders,\n  bounds,\n  cssBounds,\n  cssMaxSize,\n  cssMinSize,\n  cssSize,\n  debugOutput,\n  exactPrefSize,\n  insets,\n  location,\n  margins,\n  offset,\n  offsetBounds,\n  paddings,\n  position,\n  prefSize,\n  prefSizeWithoutAnimation,\n  setBounds,\n  setLocation,\n  setMargins,\n  setSize,\n  size\n};","map":{"version":3,"names":["arrays","Dimension","Insets","objects","Point","Rectangle","scout","scrollbars","$","prefSize","$elem","options","isDisplayNone","includeMargin","defaults","useCssSize","widthHint","undefined","heightHint","restoreScrollPositions","extend","animateClasses","length","prefSizeWithoutAnimation","oldStyle","attr","oldScrollLeft","scrollLeft","oldScrollTop","scrollTop","storeScrollPositions","newWidth","nvl","newHeight","cssProperties","enforceSizeHints","isNumber","css","bcr","getBoundingClientRect","width","height","cssMarginX","cssMarginY","attrOrRemove","exactPrefSize","exact","Math","ceil","ensure","filter","cssClass","hasClass","format","$clone","clone","removeClass","appendTo","parent","prefSizeResult","remove","size","cssSize","cssWidth","cssHeight","cssMaxSize","cssMaxWidth","cssMaxHeight","cssMinSize","cssMinWidth","cssMinHeight","setSize","$comp","vararg","insets","i","directions","includePadding","includeBorder","cssPxValue","margins","setMargins","marginLeft","left","marginRight","right","marginTop","top","marginBottom","bottom","paddings","borders","setLocation","y","point","cssLeft","x","cssTop","location","bounds","_bounds","position","pos","offsetBounds","offset","s","setBounds","cssBounds","debugOutput","attrs","html","substring","isAttached","trim"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/layout/graphics.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Dimension, Insets, objects, Point, Rectangle, scout, scrollbars} from '../index';\nimport $ from 'jquery';\n\n/**\n * This file contains helpers for graphical operations\n */\n\n/**\n * Returns the preferred size of $elem.\n * Precondition: $elem and it's parents must not be hidden (display: none. Visibility: hidden would be ok\n * because in this case the browser reserves the space the element would be using).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size.\n *\n * useCssSize               false           If true, the width and height properties are set to '' while\n *                                          measuring, thus allowing existing CSS rules to influence the\n *                                          sizes. If set to false, the sizes are set to 'auto' or the\n *                                          corresponding hint values (see below).\n *\n * widthHint                undefined       If useCssSize is false, this value is used as width (in pixels)\n *                                          instead of 'auto'. Useful to get the preferred height for a\n *                                          given width.\n *\n * heightHint               undefined       Same as 'widthHint' but for the height.\n *\n * enforceSizeHints         false           Sets min/max-width/height in addition to with width/height if widthHint resp. heightHint is set.\n *                                          The browser sometimes makes the element smaller or larger than specified by width/height, especially in a flex container.\n *                                          To prevent that, set this option to true. Default is false, but may change in the future.\n *\n * restoreScrollPositions   true            By default, the $elem's scrolling position is saved and restored\n *                                          during the execution of this method (because applying\n *                                          intermediate styles for measurement might change the current\n *                                          position). If the calling method does that itself, you should\n *                                          set this option to false to prevent overriding the stored\n *                                          scrolling position in $elem's data attributes.\n * animateClasses           undefined       If set, the $elem is checked for one of these classes.\n *                                          If one class is currently set on the $elem, a clone of the $elem without the class\n *                                          is created and measured instead. See also {@link #prefSizeWithoutAnimation}.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function prefSize($elem, options) {\n  // Return 0/0 if element is not displayed (display: none).\n  // We don't use isVisible by purpose because isVisible returns false for elements with visibility: hidden which is wrong here (we would like to be able to measure hidden elements)\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  let defaults = {\n    includeMargin: false,\n    useCssSize: false,\n    widthHint: undefined,\n    heightHint: undefined,\n    restoreScrollPositions: true\n  };\n  options = $.extend({}, defaults, options);\n\n  if (options.animateClasses && options.animateClasses.length > 0) {\n    return prefSizeWithoutAnimation($elem, options);\n  }\n\n  let oldStyle = $elem.attr('style');\n  let oldScrollLeft = $elem.scrollLeft();\n  let oldScrollTop = $elem.scrollTop();\n\n  if (options.restoreScrollPositions) {\n    scrollbars.storeScrollPositions($elem);\n  }\n\n  // UseCssSize is necessary if the css rules have a fix height or width set.\n  // Otherwise setting the width/height to auto could result in a different size\n  let newWidth = (options.useCssSize ? '' : scout.nvl(options.widthHint, 'auto'));\n  let newHeight = (options.useCssSize ? '' : scout.nvl(options.heightHint, 'auto'));\n\n  let cssProperties = {\n    'width': newWidth,\n    'height': newHeight\n  };\n  if (scout.nvl(options.enforceSizeHints, false)) {\n    if (objects.isNumber(newWidth)) {\n      cssProperties['max-width'] = newWidth;\n      cssProperties['min-width'] = newWidth;\n    }\n    if (objects.isNumber(newHeight)) {\n      cssProperties['max-height'] = newHeight;\n      cssProperties['min-height'] = newHeight;\n    }\n  }\n\n  // modify properties which prevent reading the preferred size\n  $elem.css(cssProperties);\n\n  // measure\n  let bcr = $elem[0].getBoundingClientRect();\n  let prefSize = new Dimension(bcr.width, bcr.height);\n  if (options.includeMargin) {\n    prefSize.width += $elem.cssMarginX();\n    prefSize.height += $elem.cssMarginY();\n  }\n\n  // reset the modified style attribute\n  $elem.attrOrRemove('style', oldStyle);\n  $elem.scrollLeft(oldScrollLeft);\n  $elem.scrollTop(oldScrollTop);\n\n  if (options.restoreScrollPositions) {\n    scrollbars.restoreScrollPositions($elem);\n  }\n\n  return exactPrefSize(prefSize, options);\n}\n\n/**\n * Ensure resulting numbers are integers. getBoundingClientRect() might correctly return fractional values\n * (because of the browser's sub-pixel rendering). However, if we use those numbers to set the size\n * of an element using CSS, it gets rounded or cut off. The behavior is not defined amongst different\n * browser engines.\n * Example:\n * - Measured size from this method:      h = 345.239990234375\n * - Set the size to an element:          $elem.css('height', h + 'px')\n * - Results:\n *    Firefox & Chrome     <div id=\"elem\" style=\"height: 345.24px\">     [Fractional part rounded to three digits]\n */\nexport function exactPrefSize(prefSize, options) {\n  let exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    prefSize.width = Math.ceil(prefSize.width);\n    prefSize.height = Math.ceil(prefSize.height);\n  }\n  return prefSize;\n}\n\n/**\n * If the $container is currently animated by CSS, create a clone, remove the animating CSS class and measure the clone instead.\n * This may be necessary because the animation might change the size of the element.\n * If prefSize is called during the animation, the current size is returned instead of the one after the animation.\n */\nexport function prefSizeWithoutAnimation($elem, options) {\n  let animateClasses = arrays.ensure(options.animateClasses);\n  animateClasses = animateClasses.filter(cssClass => {\n    return $elem.hasClass(cssClass);\n  });\n  options = $.extend({}, options);\n  options.animateClasses = null;\n\n  if (animateClasses.length === 0) {\n    return prefSize($elem, options);\n  }\n\n  animateClasses = arrays.format(animateClasses, ' ');\n  let $clone = $elem\n    .clone()\n    .removeClass(animateClasses)\n    .appendTo($elem.parent());\n  let prefSizeResult = prefSize($clone, options);\n  $clone.remove();\n  return prefSizeResult;\n}\n\n/* These functions are designed to be used with box-sizing:box-model. The only reliable\n * way to set the size of a component when working with box model is to use css('width/height'...)\n * in favor of width/height() functions.\n */\n\n/**\n * Returns the size of the element, insets included. The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param {object|boolean} [options]\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n * @param {boolean} [options.includeMargin] Whether to include $elem's margins in the returned size. Default is false.\n * @param {boolean} [options.exact] When set to true the returned dimensions may contain fractional digits, otherwise the sizes are rounded up. Default is false.\n * @returns {Dimension}\n */\nexport function size($elem, options) {\n  if (!$elem[0] || $elem.isDisplayNone()) {\n    return new Dimension(0, 0);\n  }\n\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  let bcr = $elem[0].getBoundingClientRect();\n  let size = new Dimension(bcr.width, bcr.height);\n  let includeMargin = scout.nvl(options.includeMargin, false);\n  if (includeMargin) {\n    size.width += $elem.cssMarginX();\n    size.height += $elem.cssMarginY();\n  }\n  // see comments in prefSize()\n  let exact = scout.nvl(options.exact, false);\n  if (!exact) {\n    size.width = Math.ceil(size.width);\n    size.height = Math.ceil(size.height);\n  }\n  return size;\n}\n\n/**\n * @returns {Dimension} the size of the element specified by the style.\n */\nexport function cssSize($elem) {\n  return new Dimension($elem.cssWidth(), $elem.cssHeight());\n}\n\n/**\n * @returns {Dimension} the max size of the element specified by the style.\n */\nexport function cssMaxSize($elem) {\n  return new Dimension($elem.cssMaxWidth(), $elem.cssMaxHeight());\n}\n\n/**\n * @returns {Dimension} the min size of the element specified by the style.\n */\nexport function cssMinSize($elem) {\n  return new Dimension($elem.cssMinWidth(), $elem.cssMinHeight());\n}\n\nexport function setSize($comp, vararg, height) {\n  let size = vararg instanceof Dimension ?\n    vararg : new Dimension(vararg, height);\n  $comp\n    .cssWidth(size.width)\n    .cssHeight(size.height);\n}\n\n/**\n * Returns the inset-dimensions of the component (padding, margin, border).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned insets.\n *\n * includePadding           true            Whether to include $elem's paddings in the returned insets.\n *\n * includeBorder            true            Whether to include $elem's borders in the returned insets.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function insets($comp, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      includeMargin: options\n    };\n  } else {\n    options = options || {};\n  }\n\n  let i,\n    directions = ['top', 'right', 'bottom', 'left'],\n    insets = [0, 0, 0, 0],\n    includeMargin = scout.nvl(options.includeMargin, false),\n    includePadding = scout.nvl(options.includePadding, true),\n    includeBorder = scout.nvl(options.includeBorder, true);\n\n  for (i = 0; i < directions.length; i++) {\n    if (includeMargin) {\n      insets[i] += $comp.cssPxValue('margin-' + directions[i]);\n    }\n    if (includePadding) {\n      insets[i] += $comp.cssPxValue('padding-' + directions[i]);\n    }\n    if (includeBorder) {\n      insets[i] += $comp.cssPxValue('border-' + directions[i] + '-width');\n    }\n  }\n  return new Insets(insets[0], insets[1], insets[2], insets[3]);\n}\n\nexport function margins($comp) {\n  return insets($comp, {\n    includeMargin: true,\n    includePadding: false,\n    includeBorder: false\n  });\n}\n\nexport function setMargins($comp, margins) {\n  $comp.css({\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    marginTop: margins.top,\n    marginBottom: margins.bottom\n  });\n}\n\nexport function paddings($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: true,\n    includeBorder: false\n  });\n}\n\nexport function borders($comp) {\n  return insets($comp, {\n    includeMargin: false,\n    includePadding: false,\n    includeBorder: true\n  });\n}\n\n/**\n * Sets the location (CSS properties left, top) of the component.\n * @param vararg integer value for X position OR instance of Point\n * @param y (optional) integer value for Y position\n * @returns\n */\nexport function setLocation($comp, vararg, y) {\n  let point = vararg instanceof Point ?\n    vararg : new Point(vararg, y);\n  $comp\n    .cssLeft(point.x)\n    .cssTop(point.y);\n}\n\n/**\n * Returns a Point consisting of the component's \"cssLeft\" and\n * \"cssTop\" values (reverse operation to setLocation).\n */\nexport function location($comp) {\n  return new Point($comp.cssLeft(), $comp.cssTop());\n}\n\n/**\n * Returns the bounds of the element relative to the offset parent, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function bounds($elem, options) {\n  return _bounds($elem, $elem.position(), options);\n}\n\n/**\n * @returns {Point} the position relative to the offset parent ($elem.position()).\n */\nexport function position($elem) {\n  let pos = $elem.position();\n  return new Point(pos.left, pos.top);\n}\n\n/**\n * Returns the bounds of the element relative to the document, insets included.\n * The sizes are rounded up, unless the option 'exact' is set to true.\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * includeMargin            false           Whether to include $elem's margins in the returned size. X and Y are not affected by this option.\n *\n * exact                    false           When set to true the returned size may contain fractional digits, otherwise the sizes are rounded up. X and Y are not affected by this option.\n *\n * @param $elem\n *          the jQuery element to measure\n * @param options\n *          an optional options object (see table above). Short-hand version: If a boolean is passed instead\n *          of an object, the value is automatically converted to the option \"includeMargin\".\n */\nexport function offsetBounds($elem, options) {\n  return _bounds($elem, $elem.offset(), options);\n}\n\n/**\n * @returns {Point} the position relative to the document ($elem.offset()).\n */\nexport function offset($elem) {\n  let pos = $elem.offset();\n  return new Point(pos.left, pos.top);\n}\n\nexport function _bounds($elem, pos, options) {\n  let s = size($elem, options);\n  return new Rectangle(pos.left, pos.top, s.width, s.height);\n}\n\nexport function setBounds($comp, vararg, y, width, height) {\n  let bounds = vararg instanceof Rectangle ?\n    vararg : new Rectangle(vararg, y, width, height);\n  $comp\n    .cssLeft(bounds.x)\n    .cssTop(bounds.y)\n    .cssWidth(bounds.width)\n    .cssHeight(bounds.height);\n}\n\n/**\n * @returns {Rectangle} the bounds of the element specified by the style.\n */\nexport function cssBounds($elem) {\n  return new Rectangle($elem.cssLeft(), $elem.cssTop(), $elem.cssWidth(), $elem.cssHeight());\n}\n\nexport function debugOutput($comp) {\n  if (!$comp) {\n    return '$comp is undefined';\n  }\n  $comp = $.ensure($comp);\n  if ($comp.length === 0) {\n    return '$comp doesn\\t match any elements';\n  }\n  let attrs = '';\n  if ($comp.attr('id')) {\n    attrs += 'id=' + $comp.attr('id');\n  }\n  if ($comp.attr('class')) {\n    attrs += ' class=' + $comp.attr('class');\n  }\n  if ($comp.attr('data-modelclass')) {\n    attrs += ' data-modelclass=' + $comp.attr('data-modelclass');\n  }\n  if (attrs.length === 0) {\n    let html = scout.nvl($comp.html(), '');\n    if (html.length > 30) {\n      html = html.substring(0, 30) + '...';\n    }\n    attrs = html;\n  }\n  if (!$comp.isAttached()) {\n    attrs += ' attached=false';\n  }\n  return 'Element[' + attrs.trim() + ']';\n}\n\nexport default {\n  borders,\n  bounds,\n  cssBounds,\n  cssMaxSize,\n  cssMinSize,\n  cssSize,\n  debugOutput,\n  exactPrefSize,\n  insets,\n  location,\n  margins,\n  offset,\n  offsetBounds,\n  paddings,\n  position,\n  prefSize,\n  prefSizeWithoutAnimation,\n  setBounds,\n  setLocation,\n  setMargins,\n  setSize,\n  size\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}