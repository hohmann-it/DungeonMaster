{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, FormLayout, graphics, HtmlComponent, Point } from '../index';\nexport default class DialogLayout extends FormLayout {\n  constructor(form) {\n    super(form);\n    this.autoSize = true;\n    this.shrinkEnabled = false;\n  }\n  layout($container) {\n    if (!this.autoSize) {\n      super.layout($container);\n      return;\n    }\n    let currentBounds,\n      htmlComp = this.form.htmlComp,\n      prefBounds = this.form.prefBounds(),\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n    if (prefBounds) {\n      currentBounds = prefBounds;\n    } else {\n      currentBounds = htmlComp.bounds();\n    }\n    let dialogSize = this._calcSize($container, currentBounds, prefBounds);\n\n    // Add markers to be able to style the dialog in a different way when it uses the full width or height\n    $container.toggleClass('full-width', this.form.maximized || currentBounds.x === 0 && dialogMargins.horizontal() === 0 && windowSize.width === dialogSize.width).toggleClass('full-height', this.form.maximized || currentBounds.y === 0 && dialogMargins.vertical() === 0 && windowSize.height === dialogSize.height);\n\n    // Ensure the dialog can only get larger, not smaller.\n    // This prevents 'snapping' the dialog back to the calculated size when a field changes its visibility, but the user previously enlarged the dialog.\n    // This must not happen when the dialog is laid out the first time (-> when it is opened, because it has not the right size yet and may get too big)\n    if (htmlComp.layouted && !this.shrinkEnabled) {\n      dialogSize.width = Math.max(dialogSize.width, currentBounds.width);\n      dialogSize.height = Math.max(dialogSize.height, currentBounds.height);\n    }\n    graphics.setSize($container, dialogSize);\n    super.layout($container);\n  }\n\n  /**\n   * @param currentBounds\n   *          bounds as returned by the graphics.bounds() function, i.e. position is the CSS\n   *          position (top-left of \"margin box\"), dimension excludes margins\n   * @param prefBounds\n   *          optional preferred bounds (same expectations as with \"currentBounds\")\n   * @return {Dimension}\n   *          adjusted size excluding margins (suitable to pass to graphics.setSize())\n   */\n  _calcSize($container, currentBounds, prefBounds) {\n    let dialogSize,\n      htmlComp = this.form.htmlComp,\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n    if (this.form.maximized) {\n      return windowSize;\n    }\n    if (prefBounds) {\n      dialogSize = prefBounds.dimension();\n      currentBounds = prefBounds;\n      dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n      if (prefBounds.dimension().width === dialogSize.width) {\n        // If width is still the same (=fitContainerInWindow did not reduce the width), then just return it. Otherwise read pref size again\n        return dialogSize;\n      }\n    }\n\n    // Calculate preferred width first...\n    dialogSize = this.preferredLayoutSize($container, {\n      widthOnly: true\n    });\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n\n    // ...then calculate the actual preferred size based on the width. This is necessary because the dialog may contain fields with wrapping content. Without a width hint the height would not be correct.\n    dialogSize = this.preferredLayoutSize($container, {\n      widthHint: dialogSize.width\n    }).ceil(); // always round up. If we'd round a height of 380.00005 pixel down\n    // there is not enough space to display the group-box, thus the browser would show scrollbars.\n\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n    return dialogSize;\n  }\n\n  /**\n   * Calculates the new container size and position. If the given containerSize is larger then the windowSize, the size will be adjusted.\n   *\n   * @param windowSize total size of the window\n   * @param containerPosition {Point} current CSS position of the container (top-left of the \"margin box\")\n   * @param containerSize {Dimension} preferred size of container (excluding margins)\n   * @param containerMargins {Insets} margins of the container\n   * @returns {Dimension} the new, adjusted container size (excluding margins)\n   * @static\n   */\n  static fitContainerInWindow(windowSize, containerPosition, containerSize, containerMargins) {\n    // class .dialog may specify a margin\n    // currentBounds.y and x are 0 initially, but if size changes while dialog is open they are greater than 0\n    // This guarantees the dialog size may not exceed the document size\n    let maxWidth = windowSize.width - containerMargins.horizontal() - containerPosition.x;\n    let maxHeight = windowSize.height - containerMargins.vertical() - containerPosition.y;\n\n    // Calculate new dialog size, ensuring that the dialog is not larger than container\n    let size = new Dimension();\n    size.width = Math.min(maxWidth, containerSize.width);\n    size.height = Math.min(maxHeight, containerSize.height);\n    return size;\n  }\n\n  /**\n   * Returns the coordinates to place the given container in the optical middle of the window.\n   *\n   * @param $container\n   * @returns {Point} new X,Y position of the container\n   * @static\n   */\n  static positionContainerInWindow($container) {\n    let windowSize = $container.windowSize(),\n      containerSize = HtmlComponent.get($container).size(true),\n      left = (windowSize.width - containerSize.width) / 2,\n      top = (windowSize.height - containerSize.height) / 2;\n\n    // optical middle (move up 20% of distance between window and dialog)\n    let opticalMiddleOffset = top / 5;\n    top -= opticalMiddleOffset;\n\n    // Ensure integer numbers\n    left = Math.floor(left);\n    top = Math.floor(top);\n    return new Point(left, top);\n  }\n}","map":{"version":3,"names":["Dimension","FormLayout","graphics","HtmlComponent","Point","DialogLayout","constructor","form","autoSize","shrinkEnabled","layout","$container","currentBounds","htmlComp","prefBounds","dialogMargins","margins","windowSize","bounds","dialogSize","_calcSize","toggleClass","maximized","x","horizontal","width","y","vertical","height","layouted","Math","max","setSize","dimension","fitContainerInWindow","point","preferredLayoutSize","widthOnly","widthHint","ceil","containerPosition","containerSize","containerMargins","maxWidth","maxHeight","size","min","positionContainerInWindow","get","left","top","opticalMiddleOffset","floor"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/DialogLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, FormLayout, graphics, HtmlComponent, Point} from '../index';\n\nexport default class DialogLayout extends FormLayout {\n\n  constructor(form) {\n    super(form);\n    this.autoSize = true;\n    this.shrinkEnabled = false;\n  }\n\n  layout($container) {\n    if (!this.autoSize) {\n      super.layout($container);\n      return;\n    }\n\n    let currentBounds,\n      htmlComp = this.form.htmlComp,\n      prefBounds = this.form.prefBounds(),\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n\n    if (prefBounds) {\n      currentBounds = prefBounds;\n    } else {\n      currentBounds = htmlComp.bounds();\n    }\n    let dialogSize = this._calcSize($container, currentBounds, prefBounds);\n\n    // Add markers to be able to style the dialog in a different way when it uses the full width or height\n    $container\n      .toggleClass('full-width', this.form.maximized || (currentBounds.x === 0 && dialogMargins.horizontal() === 0 && windowSize.width === dialogSize.width))\n      .toggleClass('full-height', this.form.maximized || (currentBounds.y === 0 && dialogMargins.vertical() === 0 && windowSize.height === dialogSize.height));\n\n    // Ensure the dialog can only get larger, not smaller.\n    // This prevents 'snapping' the dialog back to the calculated size when a field changes its visibility, but the user previously enlarged the dialog.\n    // This must not happen when the dialog is laid out the first time (-> when it is opened, because it has not the right size yet and may get too big)\n    if (htmlComp.layouted && !this.shrinkEnabled) {\n      dialogSize.width = Math.max(dialogSize.width, currentBounds.width);\n      dialogSize.height = Math.max(dialogSize.height, currentBounds.height);\n    }\n\n    graphics.setSize($container, dialogSize);\n    super.layout($container);\n  }\n\n  /**\n   * @param currentBounds\n   *          bounds as returned by the graphics.bounds() function, i.e. position is the CSS\n   *          position (top-left of \"margin box\"), dimension excludes margins\n   * @param prefBounds\n   *          optional preferred bounds (same expectations as with \"currentBounds\")\n   * @return {Dimension}\n   *          adjusted size excluding margins (suitable to pass to graphics.setSize())\n   */\n  _calcSize($container, currentBounds, prefBounds) {\n    let dialogSize,\n      htmlComp = this.form.htmlComp,\n      dialogMargins = htmlComp.margins(),\n      windowSize = $container.windowSize();\n\n    if (this.form.maximized) {\n      return windowSize;\n    }\n\n    if (prefBounds) {\n      dialogSize = prefBounds.dimension();\n      currentBounds = prefBounds;\n      dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n      if (prefBounds.dimension().width === dialogSize.width) {\n        // If width is still the same (=fitContainerInWindow did not reduce the width), then just return it. Otherwise read pref size again\n        return dialogSize;\n      }\n    }\n\n    // Calculate preferred width first...\n    dialogSize = this.preferredLayoutSize($container, {\n      widthOnly: true\n    });\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n\n    // ...then calculate the actual preferred size based on the width. This is necessary because the dialog may contain fields with wrapping content. Without a width hint the height would not be correct.\n    dialogSize = this.preferredLayoutSize($container, {\n      widthHint: dialogSize.width\n    }).ceil(); // always round up. If we'd round a height of 380.00005 pixel down\n    // there is not enough space to display the group-box, thus the browser would show scrollbars.\n\n    dialogSize = DialogLayout.fitContainerInWindow(windowSize, currentBounds.point(), dialogSize, dialogMargins);\n    return dialogSize;\n  }\n\n  /**\n   * Calculates the new container size and position. If the given containerSize is larger then the windowSize, the size will be adjusted.\n   *\n   * @param windowSize total size of the window\n   * @param containerPosition {Point} current CSS position of the container (top-left of the \"margin box\")\n   * @param containerSize {Dimension} preferred size of container (excluding margins)\n   * @param containerMargins {Insets} margins of the container\n   * @returns {Dimension} the new, adjusted container size (excluding margins)\n   * @static\n   */\n  static fitContainerInWindow(windowSize, containerPosition, containerSize, containerMargins) {\n    // class .dialog may specify a margin\n    // currentBounds.y and x are 0 initially, but if size changes while dialog is open they are greater than 0\n    // This guarantees the dialog size may not exceed the document size\n    let maxWidth = (windowSize.width - containerMargins.horizontal() - containerPosition.x);\n    let maxHeight = (windowSize.height - containerMargins.vertical() - containerPosition.y);\n\n    // Calculate new dialog size, ensuring that the dialog is not larger than container\n    let size = new Dimension();\n    size.width = Math.min(maxWidth, containerSize.width);\n    size.height = Math.min(maxHeight, containerSize.height);\n\n    return size;\n  }\n\n  /**\n   * Returns the coordinates to place the given container in the optical middle of the window.\n   *\n   * @param $container\n   * @returns {Point} new X,Y position of the container\n   * @static\n   */\n  static positionContainerInWindow($container) {\n    let\n      windowSize = $container.windowSize(),\n      containerSize = HtmlComponent.get($container).size(true),\n      left = (windowSize.width - containerSize.width) / 2,\n      top = (windowSize.height - containerSize.height) / 2;\n\n    // optical middle (move up 20% of distance between window and dialog)\n    let opticalMiddleOffset = (top / 5);\n    top -= opticalMiddleOffset;\n\n    // Ensure integer numbers\n    left = Math.floor(left);\n    top = Math.floor(top);\n\n    return new Point(left, top);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}