{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { DateFormat, scout, strings } from '../index';\nexport function shift(date, years, months, days) {\n  let newDate = new Date(date.getTime());\n  if (years) {\n    newDate.setFullYear(date.getFullYear() + years);\n    if (compareMonths(newDate, date) !== years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2016-02-29 + 1 year -> 2017-03-01 instead of 2017-02-28\n      newDate.setDate(0);\n    }\n  }\n  if (months) {\n    newDate.setMonth(date.getMonth() + months);\n    if (compareMonths(newDate, date) !== months + years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2010-10-31 + 1 month -> 2010-12-01 instead of 2010-11-30\n      newDate.setDate(0);\n    }\n  }\n  if (days) {\n    newDate.setDate(date.getDate() + days);\n  }\n  return newDate;\n}\nexport function shiftTime(date, hours, minutes, seconds, milliseconds) {\n  let newDate = new Date(date.getTime());\n  if (hours) {\n    newDate.setHours(date.getHours() + hours);\n  }\n  if (minutes) {\n    newDate.setMinutes(date.getMinutes() + minutes);\n  }\n  if (seconds) {\n    newDate.setSeconds(date.getSeconds() + seconds);\n  }\n  if (milliseconds) {\n    newDate.setMilliseconds(date.getMilliseconds() + milliseconds);\n  }\n  return newDate;\n}\nexport function shiftToNextDayOfType(date, day) {\n  let diff = day - date.getDay();\n  if (diff <= 0) {\n    diff += 7;\n  }\n  return shift(date, 0, 0, diff);\n}\n\n/**\n * Finds the next date (based on the given date) that matches the given day in week and date.\n *\n * @param {Date} date Start date\n * @param {number} dayInWeek 0-6\n * @param {number} dayInMonth 1-31\n * @returns {Date}\n */\nexport function shiftToNextDayAndDate(date, dayInWeek, dayInMonth) {\n  let tmpDate = new Date(date.getTime());\n  if (dayInMonth < tmpDate.getDate()) {\n    tmpDate.setMonth(tmpDate.getMonth() + 1);\n  }\n  tmpDate.setDate(dayInMonth);\n  while (tmpDate.getDay() !== dayInWeek || tmpDate.getDate() !== dayInMonth) {\n    tmpDate = shift(tmpDate, 0, 1, 0);\n    tmpDate.setDate(dayInMonth);\n  }\n  return tmpDate;\n}\nexport function shiftToPreviousDayOfType(date, day) {\n  let diff = day - date.getDay();\n  if (diff >= 0) {\n    diff -= 7;\n  }\n  return shift(date, 0, 0, diff);\n}\nexport function shiftToNextOrPrevDayOfType(date, day, direction) {\n  if (direction > 0) {\n    return shiftToNextDayOfType(date, day);\n  }\n  return shiftToPreviousDayOfType(date, day);\n}\nexport function shiftToNextOrPrevMonday(date, direction) {\n  return shiftToNextOrPrevDayOfType(date, 1, direction);\n}\n\n/**\n * Ensures that the given date is really a date.\n * <p>\n * If it already is a date, the date will be returned.\n * Otherwise parseJsonDate is used to create a Date.\n *\n * @param {Date|string} date may be of type date or string.\n */\nexport function ensure(date) {\n  if (!date) {\n    return date;\n  }\n  if (date instanceof Date) {\n    return date;\n  }\n  return parseJsonDate(date);\n}\nexport function ensureMonday(date, direction) {\n  if (date.getDay() === 1) {\n    return date;\n  }\n  return shiftToNextOrPrevMonday(date, direction);\n}\nexport function isSameTime(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getHours() === date2.getHours() && date.getMinutes() === date2.getMinutes() && date.getSeconds() === date2.getSeconds();\n}\nexport function isSameDay(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getFullYear() === date2.getFullYear() && date.getMonth() === date2.getMonth() && date.getDate() === date2.getDate();\n}\nexport function isSameMonth(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return compareMonths(date, date2) === 0;\n}\n\n/**\n * Returns the difference of the two dates in number of months.\n * @returns {number}\n */\nexport function compareMonths(date1, date2) {\n  let d1Month = date1.getMonth(),\n    d2Month = date2.getMonth(),\n    d1Year = date1.getFullYear(),\n    d2Year = date2.getFullYear(),\n    monthDiff = d1Month - d2Month;\n  if (d1Year === d2Year) {\n    return monthDiff;\n  }\n  return (d1Year - d2Year) * 12 + monthDiff;\n}\n\n/**\n * Returns the difference of the two dates in number of days.\n * @returns {number}\n */\nexport function compareDays(date1, date2) {\n  return (trunc(date1) - trunc(date2) - (date1.getTimezoneOffset() - date2.getTimezoneOffset()) * 60000) / (3600000 * 24);\n}\n\n/**\n * Returns the time (with milliseconds) for the given date as a string in the format\n * [year#4][month#2][day#2][hour#2][minute#2][second#2][#millisecond#3]. All characters\n * are guaranteed to be digits. If the date argument is omitted, the current date is\n * used. The returned string in in UTC if the argument 'utc' is true, otherwise the\n * result is in local time (default).\n *\n * @deprecated this function will be deleted in release 23.1. Use DateFormat.js instead\n */\nexport function timestamp(date, utc) {\n  // (note: month is 0-indexed)\n  let d = date || new Date();\n  if (utc) {\n    return strings.padZeroLeft(d.getUTCFullYear(), 4) + strings.padZeroLeft(d.getUTCMonth() + 1, 2) + strings.padZeroLeft(d.getUTCDate(), 2) + strings.padZeroLeft(d.getUTCHours(), 2) + strings.padZeroLeft(d.getUTCMinutes(), 2) + strings.padZeroLeft(d.getUTCSeconds(), 2) + strings.padZeroLeft(d.getUTCMilliseconds(), 3);\n  }\n  return strings.padZeroLeft(d.getFullYear(), 4) + strings.padZeroLeft(d.getMonth() + 1, 2) + strings.padZeroLeft(d.getDate(), 2) + strings.padZeroLeft(d.getHours(), 2) + strings.padZeroLeft(d.getMinutes(), 2) + strings.padZeroLeft(d.getSeconds(), 2) + strings.padZeroLeft(d.getMilliseconds(), 3);\n}\nexport function orderWeekdays(weekdays, firstDayOfWeekArg) {\n  let weekdaysOrdered = [];\n  for (let i = 0; i < 7; i++) {\n    weekdaysOrdered[i] = weekdays[(i + firstDayOfWeekArg) % 7];\n  }\n  return weekdaysOrdered;\n}\n\n/**\n * Returns the week number according to ISO 8601 definition:\n * - All years have 52 or 53 weeks.\n * - The first week is the week with January 4th in it.\n * - The first day of a week is Monday, the last day is Sunday\n *\n * This is the default behavior. By setting the optional second argument 'option',\n * the first day in a week can be changed (e.g. 0 = Sunday). The returned numbers weeks are\n * not ISO 8601 compliant anymore, but can be more appropriate for display in a calendar. The\n * argument can be a number, a 'scout.Locale' or a 'scout.DateFormat' object.\n */\nexport function weekInYear(date, option) {\n  if (!date) {\n    return undefined;\n  }\n  let firstDayOfWeekArg = 1;\n  if (typeof option === 'object') {\n    // DateFormat\n    if (option.symbols !== undefined && option.symbols.firstDayOfWeek !== undefined) {\n      firstDayOfWeekArg = option.symbols.firstDayOfWeek;\n    } else if (option.decimalFormatSymbols !== undefined && option.decimalFormatSymbols.firstDayOfWeek !== undefined) {\n      // Locale\n      firstDayOfWeekArg = option.decimalFormatSymbols.firstDayOfWeek;\n    }\n  } else if (typeof option === 'number') {\n    firstDayOfWeekArg = option;\n  }\n\n  // Thursday of current week decides the year\n  let thursday = _thursdayOfWeek(date, firstDayOfWeekArg);\n\n  // In ISO format, the week with January 4th is the first week\n  let jan4 = new Date(thursday.getFullYear(), 0, 4);\n\n  // If the date is before the beginning of the year, it belongs to the year before\n  let startJan4 = firstDayOfWeek(jan4, firstDayOfWeekArg);\n  if (date.getTime() < startJan4.getTime()) {\n    jan4 = new Date(thursday.getFullYear() - 1, 0, 4);\n  }\n\n  // Get the Thursday of the first week, to be able to compare it to 'thursday'\n  let thursdayFirstWeek = _thursdayOfWeek(jan4, firstDayOfWeekArg);\n  let diffInDays = (thursday.getTime() - thursdayFirstWeek.getTime()) / 86400000;\n  return 1 + Math.round(diffInDays / 7);\n}\nexport function _thursdayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n  let thursday = new Date(date.valueOf());\n  if (thursday.getDay() !== 4) {\n    // 0 = Sun, 1 = Mon, 2 = Thu, 3 = Wed, 4 = Thu, 5 = Fri, 6 = Sat\n    if (thursday.getDay() < firstDayOfWeekArg) {\n      // go 1 week backward\n      thursday.setDate(thursday.getDate() - 7);\n    }\n    thursday.setDate(thursday.getDate() - thursday.getDay() + 4); // go to start of week, then add 4 to go to Thursday\n  }\n\n  return thursday;\n}\nexport function firstDayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n  let firstDay = new Date(date.valueOf());\n  if (firstDay.getDay() !== firstDayOfWeekArg) {\n    firstDay.setDate(firstDay.getDate() - (firstDay.getDay() + 7 - firstDayOfWeekArg) % 7);\n  }\n  return firstDay;\n}\n\n/**\n * Parses a string that corresponds to one of the canonical JSON transfer formats\n * and returns it as a JavaScript 'Date' object.\n *\n * @see JsonDate.java\n */\nexport function parseJsonDate(jsonDate) {\n  if (!jsonDate) {\n    return null;\n  }\n  let year = '1970',\n    month = '01',\n    day = '01',\n    hours = '00',\n    minutes = '00',\n    seconds = '00',\n    milliseconds = '000',\n    utc = false;\n\n  // Date + Time\n  let matches = /^\\+?(\\d{4,5})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n  if (matches !== null) {\n    year = matches[1];\n    month = matches[2];\n    day = matches[3];\n    hours = matches[4];\n    minutes = matches[5];\n    seconds = matches[6];\n    milliseconds = matches[7];\n    utc = matches[8] === 'Z';\n  } else {\n    // Date only\n    matches = /^\\+?(\\d{4,5})-(\\d{2})-(\\d{2})(Z?)$/.exec(jsonDate);\n    if (matches !== null) {\n      year = matches[1];\n      month = matches[2];\n      day = matches[3];\n      utc = matches[4] === 'Z';\n    } else {\n      // Time only\n      matches = /^(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n      if (matches !== null) {\n        hours = matches[1];\n        minutes = matches[2];\n        seconds = matches[3];\n        milliseconds = matches[4];\n        utc = matches[5] === 'Z';\n      } else {\n        throw new Error('Unparsable date: ' + jsonDate);\n      }\n    }\n  }\n  let result;\n  if (utc) {\n    // UTC date\n    result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds));\n    if (year < 100) {\n      // fix \"two-digit years between 1900 and 1999\" logic\n      result.setUTCFullYear(year);\n    }\n  } else {\n    // local date\n    result = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n    if (year < 100) {\n      // fix \"two-digit years between 1900 and 1999\" logic\n      result.setFullYear(year);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts the given date object to a JSON string. By default, the local time zone\n * is used to built the result, time zone information itself is not part of the\n * result. If the argument 'utc' is set to true, the result is built using the\n * UTC values of the date. Such a result string is marked with a trailing 'Z' character.\n *\n * @see JsonDate.java\n */\nexport function toJsonDate(date, utc, includeDate, includeTime) {\n  if (!date) {\n    return null;\n  }\n  if (includeDate === undefined) {\n    includeDate = true;\n  }\n  if (includeTime === undefined) {\n    includeTime = true;\n  }\n  let datePart, timePart, utcPart;\n  if (utc) {\n    // (note: month is 0-indexed)\n    datePart = getYearPart(date) + '-' + strings.padZeroLeft(date.getUTCMonth() + 1, 2) + '-' + strings.padZeroLeft(date.getUTCDate(), 2);\n    timePart = strings.padZeroLeft(date.getUTCHours(), 2) + ':' + strings.padZeroLeft(date.getUTCMinutes(), 2) + ':' + strings.padZeroLeft(date.getUTCSeconds(), 2) + '.' + strings.padZeroLeft(date.getUTCMilliseconds(), 3);\n    utcPart = 'Z';\n  } else {\n    // (note: month is 0-indexed)\n    datePart = getYearPart(date) + '-' + strings.padZeroLeft(date.getMonth() + 1, 2) + '-' + strings.padZeroLeft(date.getDate(), 2);\n    timePart = strings.padZeroLeft(date.getHours(), 2) + ':' + strings.padZeroLeft(date.getMinutes(), 2) + ':' + strings.padZeroLeft(date.getSeconds(), 2) + '.' + strings.padZeroLeft(date.getMilliseconds(), 3);\n    utcPart = '';\n  }\n  let result = '';\n  if (includeDate) {\n    result += datePart;\n    if (includeTime) {\n      result += ' ';\n    }\n  }\n  if (includeTime) {\n    result += timePart;\n  }\n  result += utcPart;\n  return result;\n  function getYearPart(date) {\n    let year = date.getFullYear();\n    if (year > 9999) {\n      return '+' + year;\n    }\n    return strings.padZeroLeft(year, 4);\n  }\n}\nexport function toJsonDateRange(range) {\n  return {\n    from: toJsonDate(range.from),\n    to: toJsonDate(range.to)\n  };\n}\n\n/**\n * Creates a new JavaScript Date object by parsing the given string. This method is not intended to be\n * used in application code, but provides a quick way to create dates in unit tests.\n *\n * The format is as follows:\n *\n * [Year#4|5]-[Month#2]-[Day#2] [Hours#2]:[Minutes#2]:[Seconds#2].[Milliseconds#3][Z]\n *\n * The year component is mandatory, but all others are optional (starting from the beginning).\n * The date is constructed using the local time zone. If the last character is 'Z', then\n * the values are interpreted as UTC date.\n */\nexport function create(dateString) {\n  if (dateString) {\n    let matches = /^(\\d{4,5})(?:-(\\d{2})(?:-(\\d{2})(?: (\\d{2})(?::(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?(Z?))?)?)?)?)?/.exec(dateString);\n    if (matches === null) {\n      throw new Error('Unparsable date: ' + dateString);\n    }\n    let date;\n    if (matches[8] === 'Z') {\n      date = new Date(Date.UTC(matches[1],\n      // fullYear\n      (matches[2] || 1) - 1,\n      // month (0-indexed)\n      matches[3] || 1,\n      // day of month\n      matches[4] || 0,\n      // hours\n      matches[5] || 0,\n      // minutes\n      matches[6] || 0,\n      // seconds\n      matches[7] || 0 // milliseconds\n      ));\n    } else {\n      date = new Date(matches[1],\n      // fullYear\n      (matches[2] || 1) - 1,\n      // month (0-indexed)\n      matches[3] || 1,\n      // day of month\n      matches[4] || 0,\n      // hours\n      matches[5] || 0,\n      // minutes\n      matches[6] || 0,\n      // seconds\n      matches[7] || 0 // milliseconds\n      );\n    }\n\n    return date;\n  }\n  return undefined;\n}\n\n/**\n * Returns a new Date. Use this function in place of <code>new Date();</code> in your productive code\n * when you want to provide a fixed date instead of the system time/date for unit tests. In your unit test\n * you can replace this function with a function that provides a fixed date. Don't forget to restore the\n * original function when you cleanup/tear-down the test.\n *\n * @returns {Date}\n */\nexport function newDate() {\n  return new Date();\n}\nexport function format(date, locale, pattern) {\n  let dateFormat = new DateFormat(locale, pattern);\n  return dateFormat.format(date);\n}\n\n/**\n * Uses the default date and time format patterns from the locale to format the given date.\n */\nexport function formatDateTime(date, locale) {\n  let dateFormat = new DateFormat(locale, locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault);\n  return dateFormat.format(date);\n}\nexport function compare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  let diff = a.getTime() - b.getTime();\n  if (diff < -1) {\n    return -1;\n  }\n  if (diff > 1) {\n    return 1;\n  }\n  return diff;\n}\nexport function equals(a, b) {\n  return compare(a, b) === 0;\n}\n\n/**\n * This combines a date and time, passed as date objects to one object with the date part of param date and the time part of param time.\n * <p>\n * If time is omitted, 00:00:00 is used as time part.<br>\n * If date is omitted, 1970-01-01 is used as date part independent of the time zone, means it is 1970-01-01 in every time zone.\n */\nexport function combineDateTime(date, time) {\n  let newDate = new Date();\n  newDate.setHours(0, 0, 0, 0); // set time part to zero in local time!\n  newDate.setFullYear(1970, 0, 1); // make sure local time has no effect on date (if date is omitted it has to be 1970-01-01)\n  if (date) {\n    newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  if (time) {\n    newDate.setHours(scout.nvl(time.getHours(), 0));\n    newDate.setMinutes(scout.nvl(time.getMinutes(), 0));\n    newDate.setSeconds(scout.nvl(time.getSeconds(), 0));\n    newDate.setMilliseconds(scout.nvl(time.getMilliseconds(), 0));\n  }\n  return newDate;\n}\n\n/**\n * Returns <code>true</code> if the given year is a leap year, i.e if february 29 exists in that year.\n */\nexport function isLeapYear(year) {\n  if (year === undefined || year === null) {\n    return false;\n  }\n  let date = new Date(year, 1, 29);\n  return date.getDate() === 29;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param {Date} date (required)\n *          The date to truncate.\n * @param {boolean} [createCopy] (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function trunc(date, createCopy) {\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n    date.setHours(0, 0, 0, 0); // clear time\n  }\n\n  return date;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param {Date} date\n *          The date to truncate.\n * @param {number} [minutesResolution] default is 30\n *          The amount of minutes added to every full hour XX:00 until > XX+1:00. The given date will ceiled to the next valid time.\n *          e.g. time:15:05, resolution 40  -> 15:40\n *               time: 15:41 resolution 40 -> 16:00\n * @param {boolean} [createCopy]\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function ceil(date, minutesResolution, createCopy) {\n  let h,\n    m,\n    mResulution = scout.nvl(minutesResolution, 30);\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n    date.setSeconds(0, 0); // clear seconds and millis\n\n    m = parseInt((date.getMinutes() + mResulution) / mResulution) * mResulution;\n    h = date.getHours();\n    if (m >= 60) {\n      h++;\n      m = 0;\n    }\n    if (h > 23) {\n      h = 0;\n      date.setDate(date.getDate() + 1);\n    }\n    date.setHours(h, m);\n  }\n  return date;\n}\nexport default {\n  ceil,\n  combineDateTime,\n  compare,\n  compareDays,\n  compareMonths,\n  create,\n  ensure,\n  ensureMonday,\n  equals,\n  firstDayOfWeek,\n  format,\n  formatDateTime,\n  isLeapYear,\n  isSameDay,\n  isSameMonth,\n  isSameTime,\n  newDate,\n  orderWeekdays,\n  parseJsonDate,\n  shift,\n  shiftTime,\n  shiftToNextDayOfType,\n  shiftToNextDayAndDate,\n  shiftToNextOrPrevDayOfType,\n  shiftToNextOrPrevMonday,\n  shiftToPreviousDayOfType,\n  timestamp,\n  toJsonDate,\n  toJsonDateRange,\n  trunc,\n  weekInYear\n};","map":{"version":3,"names":["DateFormat","scout","strings","shift","date","years","months","days","newDate","Date","getTime","setFullYear","getFullYear","compareMonths","setDate","setMonth","getMonth","getDate","shiftTime","hours","minutes","seconds","milliseconds","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","setMilliseconds","getMilliseconds","shiftToNextDayOfType","day","diff","getDay","shiftToNextDayAndDate","dayInWeek","dayInMonth","tmpDate","shiftToPreviousDayOfType","shiftToNextOrPrevDayOfType","direction","shiftToNextOrPrevMonday","ensure","parseJsonDate","ensureMonday","isSameTime","date2","isSameDay","isSameMonth","date1","d1Month","d2Month","d1Year","d2Year","monthDiff","compareDays","trunc","getTimezoneOffset","timestamp","utc","d","padZeroLeft","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","orderWeekdays","weekdays","firstDayOfWeekArg","weekdaysOrdered","i","weekInYear","option","undefined","symbols","firstDayOfWeek","decimalFormatSymbols","thursday","_thursdayOfWeek","jan4","startJan4","thursdayFirstWeek","diffInDays","Math","round","valueOf","firstDay","jsonDate","year","month","matches","exec","Error","result","UTC","setUTCFullYear","toJsonDate","includeDate","includeTime","datePart","timePart","utcPart","getYearPart","toJsonDateRange","range","from","to","create","dateString","format","locale","pattern","dateFormat","formatDateTime","dateFormatPatternDefault","timeFormatPatternDefault","compare","a","b","equals","combineDateTime","time","nvl","isLeapYear","createCopy","ceil","minutesResolution","h","m","mResulution","parseInt"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/dates.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {DateFormat, scout, strings} from '../index';\n\nexport function shift(date, years, months, days) {\n  let newDate = new Date(date.getTime());\n  if (years) {\n    newDate.setFullYear(date.getFullYear() + years);\n    if (compareMonths(newDate, date) !== years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2016-02-29 + 1 year -> 2017-03-01 instead of 2017-02-28\n      newDate.setDate(0);\n    }\n  }\n  if (months) {\n    newDate.setMonth(date.getMonth() + months);\n    if (compareMonths(newDate, date) !== months + years * 12) {\n      // Set to last day of the previous month\n      // The reason: 2010-10-31 + 1 month -> 2010-12-01 instead of 2010-11-30\n      newDate.setDate(0);\n    }\n  }\n  if (days) {\n    newDate.setDate(date.getDate() + days);\n  }\n  return newDate;\n}\n\nexport function shiftTime(date, hours, minutes, seconds, milliseconds) {\n  let newDate = new Date(date.getTime());\n  if (hours) {\n    newDate.setHours(date.getHours() + hours);\n  }\n  if (minutes) {\n    newDate.setMinutes(date.getMinutes() + minutes);\n  }\n  if (seconds) {\n    newDate.setSeconds(date.getSeconds() + seconds);\n  }\n  if (milliseconds) {\n    newDate.setMilliseconds(date.getMilliseconds() + milliseconds);\n  }\n  return newDate;\n}\n\nexport function shiftToNextDayOfType(date, day) {\n  let diff = day - date.getDay();\n\n  if (diff <= 0) {\n    diff += 7;\n  }\n  return shift(date, 0, 0, diff);\n}\n\n/**\n * Finds the next date (based on the given date) that matches the given day in week and date.\n *\n * @param {Date} date Start date\n * @param {number} dayInWeek 0-6\n * @param {number} dayInMonth 1-31\n * @returns {Date}\n */\nexport function shiftToNextDayAndDate(date, dayInWeek, dayInMonth) {\n  let tmpDate = new Date(date.getTime());\n  if (dayInMonth < tmpDate.getDate()) {\n    tmpDate.setMonth(tmpDate.getMonth() + 1);\n  }\n  tmpDate.setDate(dayInMonth);\n  while (tmpDate.getDay() !== dayInWeek || tmpDate.getDate() !== dayInMonth) {\n    tmpDate = shift(tmpDate, 0, 1, 0);\n    tmpDate.setDate(dayInMonth);\n  }\n  return tmpDate;\n}\n\nexport function shiftToPreviousDayOfType(date, day) {\n  let diff = day - date.getDay();\n\n  if (diff >= 0) {\n    diff -= 7;\n  }\n  return shift(date, 0, 0, diff);\n}\n\nexport function shiftToNextOrPrevDayOfType(date, day, direction) {\n  if (direction > 0) {\n    return shiftToNextDayOfType(date, day);\n  }\n  return shiftToPreviousDayOfType(date, day);\n}\n\nexport function shiftToNextOrPrevMonday(date, direction) {\n  return shiftToNextOrPrevDayOfType(date, 1, direction);\n}\n\n/**\n * Ensures that the given date is really a date.\n * <p>\n * If it already is a date, the date will be returned.\n * Otherwise parseJsonDate is used to create a Date.\n *\n * @param {Date|string} date may be of type date or string.\n */\nexport function ensure(date) {\n  if (!date) {\n    return date;\n  }\n  if (date instanceof Date) {\n    return date;\n  }\n  return parseJsonDate(date);\n}\n\nexport function ensureMonday(date, direction) {\n  if (date.getDay() === 1) {\n    return date;\n  }\n  return shiftToNextOrPrevMonday(date, direction);\n}\n\nexport function isSameTime(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getHours() === date2.getHours() &&\n    date.getMinutes() === date2.getMinutes() &&\n    date.getSeconds() === date2.getSeconds();\n}\n\nexport function isSameDay(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return date.getFullYear() === date2.getFullYear() &&\n    date.getMonth() === date2.getMonth() &&\n    date.getDate() === date2.getDate();\n}\n\nexport function isSameMonth(date, date2) {\n  if (!date || !date2) {\n    return false;\n  }\n  return compareMonths(date, date2) === 0;\n}\n\n/**\n * Returns the difference of the two dates in number of months.\n * @returns {number}\n */\nexport function compareMonths(date1, date2) {\n  let d1Month = date1.getMonth(),\n    d2Month = date2.getMonth(),\n    d1Year = date1.getFullYear(),\n    d2Year = date2.getFullYear(),\n    monthDiff = d1Month - d2Month;\n  if (d1Year === d2Year) {\n    return monthDiff;\n  }\n  return (d1Year - d2Year) * 12 + monthDiff;\n}\n\n/**\n * Returns the difference of the two dates in number of days.\n * @returns {number}\n */\nexport function compareDays(date1, date2) {\n  return (trunc(date1) - trunc(date2) - (date1.getTimezoneOffset() - date2.getTimezoneOffset()) * 60000) / (3600000 * 24);\n}\n\n/**\n * Returns the time (with milliseconds) for the given date as a string in the format\n * [year#4][month#2][day#2][hour#2][minute#2][second#2][#millisecond#3]. All characters\n * are guaranteed to be digits. If the date argument is omitted, the current date is\n * used. The returned string in in UTC if the argument 'utc' is true, otherwise the\n * result is in local time (default).\n *\n * @deprecated this function will be deleted in release 23.1. Use DateFormat.js instead\n */\nexport function timestamp(date, utc) {\n  // (note: month is 0-indexed)\n  let d = date || new Date();\n  if (utc) {\n    return strings.padZeroLeft(d.getUTCFullYear(), 4) +\n      strings.padZeroLeft(d.getUTCMonth() + 1, 2) +\n      strings.padZeroLeft(d.getUTCDate(), 2) +\n      strings.padZeroLeft(d.getUTCHours(), 2) +\n      strings.padZeroLeft(d.getUTCMinutes(), 2) +\n      strings.padZeroLeft(d.getUTCSeconds(), 2) +\n      strings.padZeroLeft(d.getUTCMilliseconds(), 3);\n  }\n  return strings.padZeroLeft(d.getFullYear(), 4) +\n    strings.padZeroLeft(d.getMonth() + 1, 2) +\n    strings.padZeroLeft(d.getDate(), 2) +\n    strings.padZeroLeft(d.getHours(), 2) +\n    strings.padZeroLeft(d.getMinutes(), 2) +\n    strings.padZeroLeft(d.getSeconds(), 2) +\n    strings.padZeroLeft(d.getMilliseconds(), 3);\n}\n\nexport function orderWeekdays(weekdays, firstDayOfWeekArg) {\n  let weekdaysOrdered = [];\n  for (let i = 0; i < 7; i++) {\n    weekdaysOrdered[i] = weekdays[(i + firstDayOfWeekArg) % 7];\n  }\n  return weekdaysOrdered;\n}\n\n/**\n * Returns the week number according to ISO 8601 definition:\n * - All years have 52 or 53 weeks.\n * - The first week is the week with January 4th in it.\n * - The first day of a week is Monday, the last day is Sunday\n *\n * This is the default behavior. By setting the optional second argument 'option',\n * the first day in a week can be changed (e.g. 0 = Sunday). The returned numbers weeks are\n * not ISO 8601 compliant anymore, but can be more appropriate for display in a calendar. The\n * argument can be a number, a 'scout.Locale' or a 'scout.DateFormat' object.\n */\nexport function weekInYear(date, option) {\n  if (!date) {\n    return undefined;\n  }\n  let firstDayOfWeekArg = 1;\n  if (typeof option === 'object') {\n    // DateFormat\n    if (option.symbols !== undefined && option.symbols.firstDayOfWeek !== undefined) {\n      firstDayOfWeekArg = option.symbols.firstDayOfWeek;\n    } else if (option.decimalFormatSymbols !== undefined && option.decimalFormatSymbols.firstDayOfWeek !== undefined) {\n      // Locale\n      firstDayOfWeekArg = option.decimalFormatSymbols.firstDayOfWeek;\n    }\n  } else if (typeof option === 'number') {\n    firstDayOfWeekArg = option;\n  }\n\n  // Thursday of current week decides the year\n  let thursday = _thursdayOfWeek(date, firstDayOfWeekArg);\n\n  // In ISO format, the week with January 4th is the first week\n  let jan4 = new Date(thursday.getFullYear(), 0, 4);\n\n  // If the date is before the beginning of the year, it belongs to the year before\n  let startJan4 = firstDayOfWeek(jan4, firstDayOfWeekArg);\n  if (date.getTime() < startJan4.getTime()) {\n    jan4 = new Date(thursday.getFullYear() - 1, 0, 4);\n  }\n\n  // Get the Thursday of the first week, to be able to compare it to 'thursday'\n  let thursdayFirstWeek = _thursdayOfWeek(jan4, firstDayOfWeekArg);\n\n  let diffInDays = (thursday.getTime() - thursdayFirstWeek.getTime()) / 86400000;\n\n  return 1 + Math.round(diffInDays / 7);\n}\n\nexport function _thursdayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n\n  let thursday = new Date(date.valueOf());\n  if (thursday.getDay() !== 4) { // 0 = Sun, 1 = Mon, 2 = Thu, 3 = Wed, 4 = Thu, 5 = Fri, 6 = Sat\n    if (thursday.getDay() < firstDayOfWeekArg) {\n      // go 1 week backward\n      thursday.setDate(thursday.getDate() - 7);\n    }\n    thursday.setDate(thursday.getDate() - thursday.getDay() + 4); // go to start of week, then add 4 to go to Thursday\n  }\n  return thursday;\n}\n\nexport function firstDayOfWeek(date, firstDayOfWeekArg) {\n  if (!date || typeof firstDayOfWeekArg !== 'number') {\n    return undefined;\n  }\n  let firstDay = new Date(date.valueOf());\n  if (firstDay.getDay() !== firstDayOfWeekArg) {\n    firstDay.setDate(firstDay.getDate() - (firstDay.getDay() + 7 - firstDayOfWeekArg) % 7);\n  }\n  return firstDay;\n}\n\n/**\n * Parses a string that corresponds to one of the canonical JSON transfer formats\n * and returns it as a JavaScript 'Date' object.\n *\n * @see JsonDate.java\n */\nexport function parseJsonDate(jsonDate) {\n  if (!jsonDate) {\n    return null;\n  }\n\n  let year = '1970',\n    month = '01',\n    day = '01',\n    hours = '00',\n    minutes = '00',\n    seconds = '00',\n    milliseconds = '000',\n    utc = false;\n\n  // Date + Time\n  let matches = /^\\+?(\\d{4,5})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n  if (matches !== null) {\n    year = matches[1];\n    month = matches[2];\n    day = matches[3];\n    hours = matches[4];\n    minutes = matches[5];\n    seconds = matches[6];\n    milliseconds = matches[7];\n    utc = matches[8] === 'Z';\n  } else {\n    // Date only\n    matches = /^\\+?(\\d{4,5})-(\\d{2})-(\\d{2})(Z?)$/.exec(jsonDate);\n    if (matches !== null) {\n      year = matches[1];\n      month = matches[2];\n      day = matches[3];\n      utc = matches[4] === 'Z';\n    } else {\n      // Time only\n      matches = /^(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{3})(Z?)$/.exec(jsonDate);\n      if (matches !== null) {\n        hours = matches[1];\n        minutes = matches[2];\n        seconds = matches[3];\n        milliseconds = matches[4];\n        utc = matches[5] === 'Z';\n      } else {\n        throw new Error('Unparsable date: ' + jsonDate);\n      }\n    }\n  }\n\n  let result;\n  if (utc) {\n    // UTC date\n    result = new Date(Date.UTC(year, month - 1, day, hours, minutes, seconds, milliseconds));\n    if (year < 100) { // fix \"two-digit years between 1900 and 1999\" logic\n      result.setUTCFullYear(year);\n    }\n  } else {\n    // local date\n    result = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);\n    if (year < 100) { // fix \"two-digit years between 1900 and 1999\" logic\n      result.setFullYear(year);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts the given date object to a JSON string. By default, the local time zone\n * is used to built the result, time zone information itself is not part of the\n * result. If the argument 'utc' is set to true, the result is built using the\n * UTC values of the date. Such a result string is marked with a trailing 'Z' character.\n *\n * @see JsonDate.java\n */\nexport function toJsonDate(date, utc, includeDate, includeTime) {\n  if (!date) {\n    return null;\n  }\n  if (includeDate === undefined) {\n    includeDate = true;\n  }\n  if (includeTime === undefined) {\n    includeTime = true;\n  }\n  let datePart, timePart, utcPart;\n  if (utc) {\n    // (note: month is 0-indexed)\n    datePart = getYearPart(date) + '-' +\n      strings.padZeroLeft(date.getUTCMonth() + 1, 2) + '-' +\n      strings.padZeroLeft(date.getUTCDate(), 2);\n    timePart = strings.padZeroLeft(date.getUTCHours(), 2) + ':' +\n      strings.padZeroLeft(date.getUTCMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getUTCSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getUTCMilliseconds(), 3);\n    utcPart = 'Z';\n  } else {\n    // (note: month is 0-indexed)\n    datePart = getYearPart(date) + '-' +\n      strings.padZeroLeft(date.getMonth() + 1, 2) + '-' +\n      strings.padZeroLeft(date.getDate(), 2);\n    timePart = strings.padZeroLeft(date.getHours(), 2) + ':' +\n      strings.padZeroLeft(date.getMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getMilliseconds(), 3);\n    utcPart = '';\n  }\n  let result = '';\n  if (includeDate) {\n    result += datePart;\n    if (includeTime) {\n      result += ' ';\n    }\n  }\n  if (includeTime) {\n    result += timePart;\n  }\n  result += utcPart;\n  return result;\n\n  function getYearPart(date) {\n    let year = date.getFullYear();\n    if (year > 9999) {\n      return '+' + year;\n    }\n    return strings.padZeroLeft(year, 4);\n  }\n}\n\nexport function toJsonDateRange(range) {\n  return {\n    from: toJsonDate(range.from),\n    to: toJsonDate(range.to)\n  };\n}\n\n/**\n * Creates a new JavaScript Date object by parsing the given string. This method is not intended to be\n * used in application code, but provides a quick way to create dates in unit tests.\n *\n * The format is as follows:\n *\n * [Year#4|5]-[Month#2]-[Day#2] [Hours#2]:[Minutes#2]:[Seconds#2].[Milliseconds#3][Z]\n *\n * The year component is mandatory, but all others are optional (starting from the beginning).\n * The date is constructed using the local time zone. If the last character is 'Z', then\n * the values are interpreted as UTC date.\n */\nexport function create(dateString) {\n  if (dateString) {\n    let matches = /^(\\d{4,5})(?:-(\\d{2})(?:-(\\d{2})(?: (\\d{2})(?::(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?(Z?))?)?)?)?)?/.exec(dateString);\n    if (matches === null) {\n      throw new Error('Unparsable date: ' + dateString);\n    }\n    let date;\n    if (matches[8] === 'Z') {\n      date = new Date(Date.UTC(\n        matches[1], // fullYear\n        (matches[2] || 1) - 1, // month (0-indexed)\n        matches[3] || 1, // day of month\n        matches[4] || 0, // hours\n        matches[5] || 0, // minutes\n        matches[6] || 0, // seconds\n        matches[7] || 0 // milliseconds\n      ));\n    } else {\n      date = new Date(\n        matches[1], // fullYear\n        (matches[2] || 1) - 1, // month (0-indexed)\n        matches[3] || 1, // day of month\n        matches[4] || 0, // hours\n        matches[5] || 0, // minutes\n        matches[6] || 0, // seconds\n        matches[7] || 0 // milliseconds\n      );\n    }\n    return date;\n  }\n  return undefined;\n}\n\n/**\n * Returns a new Date. Use this function in place of <code>new Date();</code> in your productive code\n * when you want to provide a fixed date instead of the system time/date for unit tests. In your unit test\n * you can replace this function with a function that provides a fixed date. Don't forget to restore the\n * original function when you cleanup/tear-down the test.\n *\n * @returns {Date}\n */\nexport function newDate() {\n  return new Date();\n}\n\nexport function format(date, locale, pattern) {\n  let dateFormat = new DateFormat(locale, pattern);\n  return dateFormat.format(date);\n}\n\n/**\n * Uses the default date and time format patterns from the locale to format the given date.\n */\nexport function formatDateTime(date, locale) {\n  let dateFormat = new DateFormat(locale, locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault);\n  return dateFormat.format(date);\n}\n\nexport function compare(a, b) {\n  if (!a && !b) {\n    return 0;\n  }\n  if (!a) {\n    return -1;\n  }\n  if (!b) {\n    return 1;\n  }\n  let diff = a.getTime() - b.getTime();\n  if (diff < -1) {\n    return -1;\n  }\n  if (diff > 1) {\n    return 1;\n  }\n  return diff;\n}\n\nexport function equals(a, b) {\n  return compare(a, b) === 0;\n}\n\n/**\n * This combines a date and time, passed as date objects to one object with the date part of param date and the time part of param time.\n * <p>\n * If time is omitted, 00:00:00 is used as time part.<br>\n * If date is omitted, 1970-01-01 is used as date part independent of the time zone, means it is 1970-01-01 in every time zone.\n */\nexport function combineDateTime(date, time) {\n  let newDate = new Date();\n  newDate.setHours(0, 0, 0, 0); // set time part to zero in local time!\n  newDate.setFullYear(1970, 0, 1); // make sure local time has no effect on date (if date is omitted it has to be 1970-01-01)\n  if (date) {\n    newDate.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  if (time) {\n    newDate.setHours(scout.nvl(time.getHours(), 0));\n    newDate.setMinutes(scout.nvl(time.getMinutes(), 0));\n    newDate.setSeconds(scout.nvl(time.getSeconds(), 0));\n    newDate.setMilliseconds(scout.nvl(time.getMilliseconds(), 0));\n  }\n  return newDate;\n}\n\n/**\n * Returns <code>true</code> if the given year is a leap year, i.e if february 29 exists in that year.\n */\nexport function isLeapYear(year) {\n  if (year === undefined || year === null) {\n    return false;\n  }\n  let date = new Date(year, 1, 29);\n  return date.getDate() === 29;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param {Date} date (required)\n *          The date to truncate.\n * @param {boolean} [createCopy] (optional)\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function trunc(date, createCopy) {\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n    date.setHours(0, 0, 0, 0); // clear time\n  }\n  return date;\n}\n\n/**\n * Returns the given date with time set to midnight (hours, minutes, seconds, milliseconds = 0).\n *\n * @param {Date} date\n *          The date to truncate.\n * @param {number} [minutesResolution] default is 30\n *          The amount of minutes added to every full hour XX:00 until > XX+1:00. The given date will ceiled to the next valid time.\n *          e.g. time:15:05, resolution 40  -> 15:40\n *               time: 15:41 resolution 40 -> 16:00\n * @param {boolean} [createCopy]\n *          If this flag is true, a copy of the given date is returned (the input date is not\n *          altered). If the flag is false, the given object is changed and then returned.\n *          The default value for this flag is \"true\".\n */\nexport function ceil(date, minutesResolution, createCopy) {\n  let h,\n    m,\n    mResulution = scout.nvl(minutesResolution, 30);\n  if (date) {\n    if (scout.nvl(createCopy, true)) {\n      date = new Date(date.getTime());\n    }\n\n    date.setSeconds(0, 0); // clear seconds and millis\n\n    m = parseInt((date.getMinutes() + mResulution) / mResulution) * mResulution;\n    h = date.getHours();\n    if (m >= 60) {\n      h++;\n      m = 0;\n    }\n    if (h > 23) {\n      h = 0;\n      date.setDate(date.getDate() + 1);\n    }\n    date.setHours(h, m);\n  }\n  return date;\n}\n\nexport default {\n  ceil,\n  combineDateTime,\n  compare,\n  compareDays,\n  compareMonths,\n  create,\n  ensure,\n  ensureMonday,\n  equals,\n  firstDayOfWeek,\n  format,\n  formatDateTime,\n  isLeapYear,\n  isSameDay,\n  isSameMonth,\n  isSameTime,\n  newDate,\n  orderWeekdays,\n  parseJsonDate,\n  shift,\n  shiftTime,\n  shiftToNextDayOfType,\n  shiftToNextDayAndDate,\n  shiftToNextOrPrevDayOfType,\n  shiftToNextOrPrevMonday,\n  shiftToPreviousDayOfType,\n  timestamp,\n  toJsonDate,\n  toJsonDateRange,\n  trunc,\n  weekInYear\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}