{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout, StaticLookupCall } from '../index';\nexport default class TileTableHeaderGroupByLookupCall extends StaticLookupCall {\n  constructor() {\n    super();\n    this.table = null;\n  }\n  _init(model) {\n    super._init(model);\n  }\n  _data() {\n    let lookupRows = [];\n    lookupRows.push([null, this.session.text('NoGrouping'), 'BOLD']);\n    this.table.visibleColumns().forEach(function (column) {\n      if (this.table.isGroupingPossible(column)) {\n        lookupRows.push([column, scout.nvl(column.text, column.headerTooltipText)]);\n      }\n    }, this);\n    return lookupRows;\n  }\n  _dataToLookupRow(data) {\n    return scout.create('LookupRow', {\n      key: data[0],\n      text: data[1],\n      font: data[2]\n    });\n  }\n}","map":{"version":3,"names":["scout","StaticLookupCall","TileTableHeaderGroupByLookupCall","constructor","table","_init","model","_data","lookupRows","push","session","text","visibleColumns","forEach","column","isGroupingPossible","nvl","headerTooltipText","_dataToLookupRow","data","create","key","font"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TileTableHeaderGroupByLookupCall.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout, StaticLookupCall} from '../index';\n\nexport default class TileTableHeaderGroupByLookupCall extends StaticLookupCall {\n\n  constructor() {\n    super();\n    this.table = null;\n  }\n\n  _init(model) {\n    super._init(model);\n  }\n\n  _data() {\n    let lookupRows = [];\n    lookupRows.push([null, this.session.text('NoGrouping'), 'BOLD']);\n    this.table.visibleColumns().forEach(function(column) {\n      if (this.table.isGroupingPossible(column)) {\n        lookupRows.push([column, scout.nvl(column.text, column.headerTooltipText)]);\n      }\n    }, this);\n    return lookupRows;\n  }\n\n  _dataToLookupRow(data) {\n    return scout.create('LookupRow', {\n      key: data[0],\n      text: data[1],\n      font: data[2]\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAK,EAAEC,gBAAgB,QAAO,UAAU;AAEhD,eAAe,MAAMC,gCAAgC,SAASD,gBAAgB,CAAC;EAE7EE,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAG,IAAI;EACnB;EAEAC,KAAK,CAACC,KAAK,EAAE;IACX,KAAK,CAACD,KAAK,CAACC,KAAK,CAAC;EACpB;EAEAC,KAAK,GAAG;IACN,IAAIC,UAAU,GAAG,EAAE;IACnBA,UAAU,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC;IAChE,IAAI,CAACP,KAAK,CAACQ,cAAc,EAAE,CAACC,OAAO,CAAC,UAASC,MAAM,EAAE;MACnD,IAAI,IAAI,CAACV,KAAK,CAACW,kBAAkB,CAACD,MAAM,CAAC,EAAE;QACzCN,UAAU,CAACC,IAAI,CAAC,CAACK,MAAM,EAAEd,KAAK,CAACgB,GAAG,CAACF,MAAM,CAACH,IAAI,EAAEG,MAAM,CAACG,iBAAiB,CAAC,CAAC,CAAC;MAC7E;IACF,CAAC,EAAE,IAAI,CAAC;IACR,OAAOT,UAAU;EACnB;EAEAU,gBAAgB,CAACC,IAAI,EAAE;IACrB,OAAOnB,KAAK,CAACoB,MAAM,CAAC,WAAW,EAAE;MAC/BC,GAAG,EAAEF,IAAI,CAAC,CAAC,CAAC;MACZR,IAAI,EAAEQ,IAAI,CAAC,CAAC,CAAC;MACbG,IAAI,EAAEH,IAAI,CAAC,CAAC;IACd,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module"}