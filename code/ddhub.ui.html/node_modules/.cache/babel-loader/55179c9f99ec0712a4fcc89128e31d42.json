{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, scout } from '../index';\nlet instance;\nexport default class ResponsiveManager {\n  constructor() {\n    this.active = true;\n    this.globalState = null;\n    this._responsiveHandlers = [];\n  }\n  init() {}\n  destroy() {\n    this._responsiveHandlers.forEach(handler => {\n      handler.destroy();\n    });\n  }\n\n  /**\n   * Sets the responsive manager to active or inactive globally. Default is active.\n   */\n  setActive(active) {\n    this.active = active;\n  }\n\n  /**\n   * Set a global responsive state. This state will always be set. Resizing will no longer result in a different responsive state.\n   *\n   * @param {string} responsive state (ResponsiveManager.ResponsiveState)\n   */\n  setGlobalState(globalState) {\n    this.globalState = globalState;\n  }\n\n  /**\n   * Checks if the form is smaller than the preferred width of the form. If this is reached, the fields will\n   * be transformed to ensure better readability.\n   */\n  handleResponsive(target, width) {\n    if (!this.active) {\n      return false;\n    }\n    if (!target.responsiveHandler || !target.responsiveHandler.active()) {\n      return false;\n    }\n    let newState;\n    let state = target.responsiveHandler.state;\n    if (this.globalState) {\n      newState = this.globalState;\n    } else if (width < target.responsiveHandler.getCompactThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.COMPACT)) {\n      newState = ResponsiveManager.ResponsiveState.COMPACT;\n    } else {\n      if (state === ResponsiveManager.ResponsiveState.COMPACT) {\n        target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.CONDENSED);\n      }\n      if (width < target.responsiveHandler.getCondensedThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.CONDENSED)) {\n        newState = ResponsiveManager.ResponsiveState.CONDENSED;\n      } else {\n        newState = ResponsiveManager.ResponsiveState.NORMAL;\n      }\n    }\n    return target.responsiveHandler.transform(newState);\n  }\n  reset(target, force) {\n    if (!this.active) {\n      return;\n    }\n    if ((!target.responsiveHandler || !target.responsiveHandler.active()) && !force) {\n      return false;\n    }\n    target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.NORMAL, force);\n  }\n  registerHandler(target, handler) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n    }\n    target.responsiveHandler = handler;\n  }\n  unregisterHandler(target) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n      target.responsiveHandler = null;\n    }\n  }\n  static get() {\n    return instance;\n  }\n}\n_defineProperty(ResponsiveManager, \"ResponsiveState\", {\n  NORMAL: 'normal',\n  CONDENSED: 'condensed',\n  COMPACT: 'compact'\n});\nApp.addListener('prepare', () => {\n  if (instance) {\n    // if it was created before the app itself, use it instead of creating a new one\n    return;\n  }\n  instance = scout.create('ResponsiveManager');\n  instance.init();\n});","map":{"version":3,"names":["App","scout","instance","ResponsiveManager","constructor","active","globalState","_responsiveHandlers","init","destroy","forEach","handler","setActive","setGlobalState","handleResponsive","target","width","responsiveHandler","newState","state","getCompactThreshold","acceptState","ResponsiveState","COMPACT","transform","CONDENSED","getCondensedThreshold","NORMAL","reset","force","registerHandler","unregisterHandler","get","addListener","create"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/ResponsiveManager.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, scout} from '../index';\n\nlet instance;\nexport default class ResponsiveManager {\n\n  constructor() {\n    this.active = true;\n    this.globalState = null;\n\n    this._responsiveHandlers = [];\n  }\n\n  static ResponsiveState = {\n    NORMAL: 'normal',\n    CONDENSED: 'condensed',\n    COMPACT: 'compact'\n  };\n\n  init() {\n  }\n\n  destroy() {\n    this._responsiveHandlers.forEach(handler => {\n      handler.destroy();\n    });\n  }\n\n  /**\n   * Sets the responsive manager to active or inactive globally. Default is active.\n   */\n  setActive(active) {\n    this.active = active;\n  }\n\n  /**\n   * Set a global responsive state. This state will always be set. Resizing will no longer result in a different responsive state.\n   *\n   * @param {string} responsive state (ResponsiveManager.ResponsiveState)\n   */\n  setGlobalState(globalState) {\n    this.globalState = globalState;\n  }\n\n  /**\n   * Checks if the form is smaller than the preferred width of the form. If this is reached, the fields will\n   * be transformed to ensure better readability.\n   */\n  handleResponsive(target, width) {\n    if (!this.active) {\n      return false;\n    }\n\n    if (!target.responsiveHandler || !target.responsiveHandler.active()) {\n      return false;\n    }\n\n    let newState;\n    let state = target.responsiveHandler.state;\n    if (this.globalState) {\n      newState = this.globalState;\n    } else if (width < target.responsiveHandler.getCompactThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.COMPACT)) {\n      newState = ResponsiveManager.ResponsiveState.COMPACT;\n    } else {\n      if (state === ResponsiveManager.ResponsiveState.COMPACT) {\n        target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.CONDENSED);\n      }\n      if (width < target.responsiveHandler.getCondensedThreshold() && target.responsiveHandler.acceptState(ResponsiveManager.ResponsiveState.CONDENSED)) {\n        newState = ResponsiveManager.ResponsiveState.CONDENSED;\n      } else {\n        newState = ResponsiveManager.ResponsiveState.NORMAL;\n      }\n    }\n\n    return target.responsiveHandler.transform(newState);\n  }\n\n  reset(target, force) {\n    if (!this.active) {\n      return;\n    }\n\n    if ((!target.responsiveHandler || !target.responsiveHandler.active()) && !force) {\n      return false;\n    }\n\n    target.responsiveHandler.transform(ResponsiveManager.ResponsiveState.NORMAL, force);\n  }\n\n  registerHandler(target, handler) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n    }\n    target.responsiveHandler = handler;\n  }\n\n  unregisterHandler(target) {\n    if (target.responsiveHandler) {\n      target.responsiveHandler.destroy();\n      target.responsiveHandler = null;\n    }\n  }\n\n  static get() {\n    return instance;\n  }\n}\n\nApp.addListener('prepare', () => {\n  if (instance) {\n    // if it was created before the app itself, use it instead of creating a new one\n    return;\n  }\n  instance = scout.create('ResponsiveManager');\n  instance.init();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}