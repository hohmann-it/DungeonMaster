{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\nimport { AccordionLayout, HtmlComponent } from '../../index';\nexport default class TileAccordionLayout extends AccordionLayout {\n  constructor(tileAccordion, options) {\n    super(options);\n    this.tileAccordion = tileAccordion;\n  }\n  layout($container) {\n    let previousGroupHeights = this.tileAccordion.groups.map(group => group.body).map(tileGrid => this._getTileGridHeight(tileGrid));\n    super.layout($container);\n    this._updateFilterFieldMaxWidth($container);\n    this.tileAccordion.groups.map(group => group.body).forEach((tileGrid, index) => this._updateTileGridViewPort(tileGrid, previousGroupHeights[index]));\n  }\n  _updateTileGridViewPort(tileGrid, previousHeight) {\n    if (!tileGrid.rendered || !tileGrid.htmlComp || previousHeight <= 0) {\n      return;\n    }\n    let newHeight = this._getTileGridHeight(tileGrid);\n    if (previousHeight === newHeight && tileGrid.virtual) {\n      // The viewPort of the virtual tileGrid has not been updated as no layout update was done for the grid because its height is unchanged.\n      // But as there might be more space available in the accordion now (its height might have changed), enforce a viewPort update to ensure all necessary tiles are rendered.\n      tileGrid.setViewRangeSize(tileGrid.calculateViewRangeSize(), false);\n      tileGrid.htmlComp.layout.updateViewPort();\n    }\n  }\n  _getTileGridHeight(tileGrid) {\n    if (!tileGrid) {\n      return 0;\n    }\n    let htmlComp = tileGrid.htmlComp;\n    if (!htmlComp) {\n      return 0;\n    }\n    let size = tileGrid.htmlComp.sizeCached;\n    if (!size) {\n      return 0;\n    }\n    return size.height;\n  }\n  _updateFilterFieldMaxWidth($container) {\n    let htmlComp = HtmlComponent.get($container),\n      width = htmlComp.availableSize().subtract(htmlComp.insets()).width;\n    this.tileAccordion.$filterFieldContainer.css('--filter-field-max-width', width * 0.6 + 'px');\n  }\n}","map":{"version":3,"names":["AccordionLayout","HtmlComponent","TileAccordionLayout","constructor","tileAccordion","options","layout","$container","previousGroupHeights","groups","map","group","body","tileGrid","_getTileGridHeight","_updateFilterFieldMaxWidth","forEach","index","_updateTileGridViewPort","previousHeight","rendered","htmlComp","newHeight","virtual","setViewRangeSize","calculateViewRangeSize","updateViewPort","size","sizeCached","height","get","width","availableSize","subtract","insets","$filterFieldContainer","css"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/accordion/TileAccordionLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\nimport {AccordionLayout, HtmlComponent} from '../../index';\n\nexport default class TileAccordionLayout extends AccordionLayout {\n\n  constructor(tileAccordion, options) {\n    super(options);\n    this.tileAccordion = tileAccordion;\n  }\n\n  layout($container) {\n    let previousGroupHeights = this.tileAccordion.groups\n      .map(group => group.body)\n      .map(tileGrid => this._getTileGridHeight(tileGrid));\n\n    super.layout($container);\n    this._updateFilterFieldMaxWidth($container);\n\n    this.tileAccordion.groups\n      .map(group => group.body)\n      .forEach((tileGrid, index) => this._updateTileGridViewPort(tileGrid, previousGroupHeights[index]));\n  }\n\n  _updateTileGridViewPort(tileGrid, previousHeight) {\n    if (!tileGrid.rendered || !tileGrid.htmlComp || previousHeight <= 0) {\n      return;\n    }\n\n    let newHeight = this._getTileGridHeight(tileGrid);\n    if (previousHeight === newHeight && tileGrid.virtual) {\n      // The viewPort of the virtual tileGrid has not been updated as no layout update was done for the grid because its height is unchanged.\n      // But as there might be more space available in the accordion now (its height might have changed), enforce a viewPort update to ensure all necessary tiles are rendered.\n      tileGrid.setViewRangeSize(tileGrid.calculateViewRangeSize(), false);\n      tileGrid.htmlComp.layout.updateViewPort();\n    }\n  }\n\n  _getTileGridHeight(tileGrid) {\n    if (!tileGrid) {\n      return 0;\n    }\n    let htmlComp = tileGrid.htmlComp;\n    if (!htmlComp) {\n      return 0;\n    }\n    let size = tileGrid.htmlComp.sizeCached;\n    if (!size) {\n      return 0;\n    }\n    return size.height;\n  }\n\n  _updateFilterFieldMaxWidth($container) {\n    let htmlComp = HtmlComponent.get($container),\n      width = htmlComp.availableSize().subtract(htmlComp.insets()).width;\n    this.tileAccordion.$filterFieldContainer.css('--filter-field-max-width', (width * 0.6) + 'px');\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,eAAe,EAAEC,aAAa,QAAO,aAAa;AAE1D,eAAe,MAAMC,mBAAmB,SAASF,eAAe,CAAC;EAE/DG,WAAW,CAACC,aAAa,EAAEC,OAAO,EAAE;IAClC,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACD,aAAa,GAAGA,aAAa;EACpC;EAEAE,MAAM,CAACC,UAAU,EAAE;IACjB,IAAIC,oBAAoB,GAAG,IAAI,CAACJ,aAAa,CAACK,MAAM,CACjDC,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CACxBF,GAAG,CAACG,QAAQ,IAAI,IAAI,CAACC,kBAAkB,CAACD,QAAQ,CAAC,CAAC;IAErD,KAAK,CAACP,MAAM,CAACC,UAAU,CAAC;IACxB,IAAI,CAACQ,0BAA0B,CAACR,UAAU,CAAC;IAE3C,IAAI,CAACH,aAAa,CAACK,MAAM,CACtBC,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CACxBI,OAAO,CAAC,CAACH,QAAQ,EAAEI,KAAK,KAAK,IAAI,CAACC,uBAAuB,CAACL,QAAQ,EAAEL,oBAAoB,CAACS,KAAK,CAAC,CAAC,CAAC;EACtG;EAEAC,uBAAuB,CAACL,QAAQ,EAAEM,cAAc,EAAE;IAChD,IAAI,CAACN,QAAQ,CAACO,QAAQ,IAAI,CAACP,QAAQ,CAACQ,QAAQ,IAAIF,cAAc,IAAI,CAAC,EAAE;MACnE;IACF;IAEA,IAAIG,SAAS,GAAG,IAAI,CAACR,kBAAkB,CAACD,QAAQ,CAAC;IACjD,IAAIM,cAAc,KAAKG,SAAS,IAAIT,QAAQ,CAACU,OAAO,EAAE;MACpD;MACA;MACAV,QAAQ,CAACW,gBAAgB,CAACX,QAAQ,CAACY,sBAAsB,EAAE,EAAE,KAAK,CAAC;MACnEZ,QAAQ,CAACQ,QAAQ,CAACf,MAAM,CAACoB,cAAc,EAAE;IAC3C;EACF;EAEAZ,kBAAkB,CAACD,QAAQ,EAAE;IAC3B,IAAI,CAACA,QAAQ,EAAE;MACb,OAAO,CAAC;IACV;IACA,IAAIQ,QAAQ,GAAGR,QAAQ,CAACQ,QAAQ;IAChC,IAAI,CAACA,QAAQ,EAAE;MACb,OAAO,CAAC;IACV;IACA,IAAIM,IAAI,GAAGd,QAAQ,CAACQ,QAAQ,CAACO,UAAU;IACvC,IAAI,CAACD,IAAI,EAAE;MACT,OAAO,CAAC;IACV;IACA,OAAOA,IAAI,CAACE,MAAM;EACpB;EAEAd,0BAA0B,CAACR,UAAU,EAAE;IACrC,IAAIc,QAAQ,GAAGpB,aAAa,CAAC6B,GAAG,CAACvB,UAAU,CAAC;MAC1CwB,KAAK,GAAGV,QAAQ,CAACW,aAAa,EAAE,CAACC,QAAQ,CAACZ,QAAQ,CAACa,MAAM,EAAE,CAAC,CAACH,KAAK;IACpE,IAAI,CAAC3B,aAAa,CAAC+B,qBAAqB,CAACC,GAAG,CAAC,0BAA0B,EAAGL,KAAK,GAAG,GAAG,GAAI,IAAI,CAAC;EAChG;AACF"},"metadata":{},"sourceType":"module"}