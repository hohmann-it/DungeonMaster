{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Is used to render glasspane after the glasspane targets are set. This case occurs when a child is rendered before a parent is rendered-> on reload page.\n */\nexport default class DeferredGlassPaneTarget {\n  constructor() {\n    this.$glassPaneTargets = null;\n    this.glassPaneRenderer = null;\n  }\n  ready($glassPaneTargets) {\n    this.$glassPaneTargets = $glassPaneTargets;\n    this.renderWhenReady();\n  }\n  rendererReady(glassPaneRenderer) {\n    this.glassPaneRenderer = glassPaneRenderer;\n    this.renderWhenReady();\n  }\n  removeGlassPaneRenderer(glassPaneRenderer) {\n    if (this.glassPaneRenderer === glassPaneRenderer) {\n      this.glassPaneRenderer = null;\n    }\n  }\n  renderWhenReady() {\n    if (this.glassPaneRenderer && this.$glassPaneTargets && this.$glassPaneTargets.length > 0) {\n      this.$glassPaneTargets.forEach($glassPaneTarget => {\n        this.glassPaneRenderer.renderGlassPane($glassPaneTarget);\n      });\n    }\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @param widget a not rendered Widget\n   * @findGlassPaneTargets function which returns the targets\n   */\n  static createFor(widget, findGlassPaneTargets) {\n    if (widget.rendered) {\n      throw new Error('Don\\'t call this function if widget is already rendered.');\n    }\n    let deferred = new DeferredGlassPaneTarget();\n    let renderedHandler = event => {\n      let elements = findGlassPaneTargets();\n      deferred.ready(elements);\n    };\n    widget.one('render', renderedHandler);\n    widget.one('destroy', () => {\n      widget.off('render', renderedHandler);\n    });\n    return [deferred];\n  }\n}","map":{"version":3,"names":["DeferredGlassPaneTarget","constructor","$glassPaneTargets","glassPaneRenderer","ready","renderWhenReady","rendererReady","removeGlassPaneRenderer","length","forEach","$glassPaneTarget","renderGlassPane","createFor","widget","findGlassPaneTargets","rendered","Error","deferred","renderedHandler","event","elements","one","off"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/glasspane/DeferredGlassPaneTarget.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\n/**\n * Is used to render glasspane after the glasspane targets are set. This case occurs when a child is rendered before a parent is rendered-> on reload page.\n */\nexport default class DeferredGlassPaneTarget {\n  constructor() {\n    this.$glassPaneTargets = null;\n    this.glassPaneRenderer = null;\n  }\n\n  ready($glassPaneTargets) {\n    this.$glassPaneTargets = $glassPaneTargets;\n    this.renderWhenReady();\n  }\n\n  rendererReady(glassPaneRenderer) {\n    this.glassPaneRenderer = glassPaneRenderer;\n    this.renderWhenReady();\n  }\n\n  removeGlassPaneRenderer(glassPaneRenderer) {\n    if (this.glassPaneRenderer === glassPaneRenderer) {\n      this.glassPaneRenderer = null;\n    }\n  }\n\n  renderWhenReady() {\n    if (this.glassPaneRenderer && this.$glassPaneTargets && this.$glassPaneTargets.length > 0) {\n      this.$glassPaneTargets.forEach($glassPaneTarget => {\n        this.glassPaneRenderer.renderGlassPane($glassPaneTarget);\n      });\n    }\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @param widget a not rendered Widget\n   * @findGlassPaneTargets function which returns the targets\n   */\n  static createFor(widget, findGlassPaneTargets) {\n    if (widget.rendered) {\n      throw new Error('Don\\'t call this function if widget is already rendered.');\n    }\n\n    let deferred = new DeferredGlassPaneTarget();\n    let renderedHandler = event => {\n      let elements = findGlassPaneTargets();\n      deferred.ready(elements);\n    };\n\n    widget.one('render', renderedHandler);\n    widget.one('destroy', () => {\n      widget.off('render', renderedHandler);\n    });\n    return [deferred];\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,MAAMA,uBAAuB,CAAC;EAC3CC,WAAW,GAAG;IACZ,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,iBAAiB,GAAG,IAAI;EAC/B;EAEAC,KAAK,CAACF,iBAAiB,EAAE;IACvB,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACG,eAAe,EAAE;EACxB;EAEAC,aAAa,CAACH,iBAAiB,EAAE;IAC/B,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACE,eAAe,EAAE;EACxB;EAEAE,uBAAuB,CAACJ,iBAAiB,EAAE;IACzC,IAAI,IAAI,CAACA,iBAAiB,KAAKA,iBAAiB,EAAE;MAChD,IAAI,CAACA,iBAAiB,GAAG,IAAI;IAC/B;EACF;EAEAE,eAAe,GAAG;IAChB,IAAI,IAAI,CAACF,iBAAiB,IAAI,IAAI,CAACD,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACM,MAAM,GAAG,CAAC,EAAE;MACzF,IAAI,CAACN,iBAAiB,CAACO,OAAO,CAACC,gBAAgB,IAAI;QACjD,IAAI,CAACP,iBAAiB,CAACQ,eAAe,CAACD,gBAAgB,CAAC;MAC1D,CAAC,CAAC;IACJ;EACF;;EAEA;;EAEA;AACF;AACA;AACA;EACE,OAAOE,SAAS,CAACC,MAAM,EAAEC,oBAAoB,EAAE;IAC7C,IAAID,MAAM,CAACE,QAAQ,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,0DAA0D,CAAC;IAC7E;IAEA,IAAIC,QAAQ,GAAG,IAAIjB,uBAAuB,EAAE;IAC5C,IAAIkB,eAAe,GAAGC,KAAK,IAAI;MAC7B,IAAIC,QAAQ,GAAGN,oBAAoB,EAAE;MACrCG,QAAQ,CAACb,KAAK,CAACgB,QAAQ,CAAC;IAC1B,CAAC;IAEDP,MAAM,CAACQ,GAAG,CAAC,QAAQ,EAAEH,eAAe,CAAC;IACrCL,MAAM,CAACQ,GAAG,CAAC,SAAS,EAAE,MAAM;MAC1BR,MAAM,CAACS,GAAG,CAAC,QAAQ,EAAEJ,eAAe,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,CAACD,QAAQ,CAAC;EACnB;AACF"},"metadata":{},"sourceType":"module"}