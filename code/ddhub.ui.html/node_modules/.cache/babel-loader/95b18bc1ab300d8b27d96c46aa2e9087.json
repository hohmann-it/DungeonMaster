{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, HtmlComponent } from '../../../index';\nexport default class TagFieldContainerLayout extends AbstractLayout {\n  constructor(tagField) {\n    super();\n    this.tagField = tagField;\n  }\n\n  /**\n   * When there is not a lot of space in a single line field, the input field should at least\n   * have 33% of the available width, which means 66% is used to display tags.\n   */\n\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagField.value && this.tagField.value.length > 0;\n    let $input = this.tagField.$field;\n    let htmlTagBar = this.tagField.tagBar.htmlComp;\n    this.tagField.tagBar.setVisible(hasTags);\n    if (hasTags) {\n      $input.removeClass('fullwidth');\n      let availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets());\n      let maxTagBarWidth = availableSize.width;\n\n      // when input field is not visible, tags may use the whole width, otherwise only a part of it\n      if ($input.isVisible()) {\n        maxTagBarWidth = availableSize.width * (1 - TagFieldContainerLayout.MIN_INPUT_TAG_RATIO);\n      }\n      let prefTagBarSize = htmlTagBar.prefSize(true);\n      let tagBarWidth = Math.min(maxTagBarWidth, prefTagBarSize.width);\n      htmlTagBar.setSize(new Dimension(tagBarWidth, prefTagBarSize.height).subtract(htmlTagBar.margins()));\n      let inputWidth = availableSize.width - tagBarWidth;\n      $input.cssWidth(inputWidth);\n    } else {\n      // remove style to delete previously set layout attributes\n      $input.addClass('fullwidth').removeAttr('style');\n    }\n  }\n}\n_defineProperty(TagFieldContainerLayout, \"MIN_INPUT_TAG_RATIO\", 0.33);","map":{"version":3,"names":["AbstractLayout","Dimension","HtmlComponent","TagFieldContainerLayout","constructor","tagField","layout","$container","htmlContainer","get","hasTags","value","length","$input","$field","htmlTagBar","tagBar","htmlComp","setVisible","removeClass","availableSize","subtract","insets","maxTagBarWidth","width","isVisible","MIN_INPUT_TAG_RATIO","prefTagBarSize","prefSize","tagBarWidth","Math","min","setSize","height","margins","inputWidth","cssWidth","addClass","removeAttr"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/tagfield/TagFieldContainerLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, HtmlComponent} from '../../../index';\n\nexport default class TagFieldContainerLayout extends AbstractLayout {\n\n  constructor(tagField) {\n    super();\n    this.tagField = tagField;\n  }\n\n  /**\n   * When there is not a lot of space in a single line field, the input field should at least\n   * have 33% of the available width, which means 66% is used to display tags.\n   */\n  static MIN_INPUT_TAG_RATIO = 0.33;\n\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container);\n    let hasTags = this.tagField.value && this.tagField.value.length > 0;\n    let $input = this.tagField.$field;\n    let htmlTagBar = this.tagField.tagBar.htmlComp;\n    this.tagField.tagBar.setVisible(hasTags);\n\n    if (hasTags) {\n      $input.removeClass('fullwidth');\n      let availableSize = htmlContainer.availableSize()\n        .subtract(htmlContainer.insets());\n      let maxTagBarWidth = availableSize.width;\n\n      // when input field is not visible, tags may use the whole width, otherwise only a part of it\n      if ($input.isVisible()) {\n        maxTagBarWidth = availableSize.width * (1 - TagFieldContainerLayout.MIN_INPUT_TAG_RATIO);\n      }\n\n      let prefTagBarSize = htmlTagBar.prefSize(true);\n      let tagBarWidth = Math.min(maxTagBarWidth, prefTagBarSize.width);\n      htmlTagBar.setSize(new Dimension(tagBarWidth, prefTagBarSize.height).subtract(htmlTagBar.margins()));\n\n      let inputWidth = availableSize.width - tagBarWidth;\n      $input.cssWidth(inputWidth);\n    } else {\n      // remove style to delete previously set layout attributes\n      $input\n        .addClass('fullwidth')\n        .removeAttr('style');\n    }\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAc,EAAEC,SAAS,EAAEC,aAAa,QAAO,gBAAgB;AAEvE,eAAe,MAAMC,uBAAuB,SAASH,cAAc,CAAC;EAElEI,WAAW,CAACC,QAAQ,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;;EAGEC,MAAM,CAACC,UAAU,EAAE;IACjB,IAAIC,aAAa,GAAGN,aAAa,CAACO,GAAG,CAACF,UAAU,CAAC;IACjD,IAAIG,OAAO,GAAG,IAAI,CAACL,QAAQ,CAACM,KAAK,IAAI,IAAI,CAACN,QAAQ,CAACM,KAAK,CAACC,MAAM,GAAG,CAAC;IACnE,IAAIC,MAAM,GAAG,IAAI,CAACR,QAAQ,CAACS,MAAM;IACjC,IAAIC,UAAU,GAAG,IAAI,CAACV,QAAQ,CAACW,MAAM,CAACC,QAAQ;IAC9C,IAAI,CAACZ,QAAQ,CAACW,MAAM,CAACE,UAAU,CAACR,OAAO,CAAC;IAExC,IAAIA,OAAO,EAAE;MACXG,MAAM,CAACM,WAAW,CAAC,WAAW,CAAC;MAC/B,IAAIC,aAAa,GAAGZ,aAAa,CAACY,aAAa,EAAE,CAC9CC,QAAQ,CAACb,aAAa,CAACc,MAAM,EAAE,CAAC;MACnC,IAAIC,cAAc,GAAGH,aAAa,CAACI,KAAK;;MAExC;MACA,IAAIX,MAAM,CAACY,SAAS,EAAE,EAAE;QACtBF,cAAc,GAAGH,aAAa,CAACI,KAAK,IAAI,CAAC,GAAGrB,uBAAuB,CAACuB,mBAAmB,CAAC;MAC1F;MAEA,IAAIC,cAAc,GAAGZ,UAAU,CAACa,QAAQ,CAAC,IAAI,CAAC;MAC9C,IAAIC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACR,cAAc,EAAEI,cAAc,CAACH,KAAK,CAAC;MAChET,UAAU,CAACiB,OAAO,CAAC,IAAI/B,SAAS,CAAC4B,WAAW,EAAEF,cAAc,CAACM,MAAM,CAAC,CAACZ,QAAQ,CAACN,UAAU,CAACmB,OAAO,EAAE,CAAC,CAAC;MAEpG,IAAIC,UAAU,GAAGf,aAAa,CAACI,KAAK,GAAGK,WAAW;MAClDhB,MAAM,CAACuB,QAAQ,CAACD,UAAU,CAAC;IAC7B,CAAC,MAAM;MACL;MACAtB,MAAM,CACHwB,QAAQ,CAAC,WAAW,CAAC,CACrBC,UAAU,CAAC,OAAO,CAAC;IACxB;EACF;AACF;AAAC,gBA5CoBnC,uBAAuB,yBAWb,IAAI"},"metadata":{},"sourceType":"module"}