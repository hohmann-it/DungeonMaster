{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Button, ButtonAdapterMenu, CompositeField, fields, Form, FormField, GroupBoxGridConfig, GroupBoxLayout, GroupBoxMenuItemsOrder, HAlign, HtmlComponent, LogicalGridData, LogicalGridLayout, LogicalGridLayoutConfig, MenuBar, ResponsiveManager, scout, SplitBox, strings, TabBox, TabItemKeyStroke, tooltips, WrappedFormField } from '../../../index';\nimport $ from 'jquery';\nexport default class GroupBox extends CompositeField {\n  constructor() {\n    super();\n    this._addWidgetProperties(['fields', 'notification', 'staticMenus']);\n    this._addCloneProperties(['menuBarVisible', 'bodyLayoutConfig', 'borderDecoration', 'borderVisible', 'expandable', 'expanded', 'gridColumnCount', 'scrollable', 'subLabel']);\n    this.fields = [];\n    this.menuBarVisible = true;\n    this.menuBarPosition = GroupBox.MenuBarPosition.AUTO;\n    this.menuBarEllipsisPosition = MenuBar.EllipsisPosition.RIGHT;\n    this.notification = null;\n    this.bodyLayoutConfig = null;\n    this.borderDecoration = GroupBox.BorderDecoration.AUTO;\n    this.borderVisible = true;\n    this.mainBox = false;\n    // set to null to enable conditional default\n    // -> it will be set to true if it is a mainbox unless it was explicitly set to false\n    this.scrollable = null;\n    this.expandable = false;\n    this.expanded = true;\n    this.logicalGrid = scout.create('scout.VerticalSmartGrid');\n    this.gridColumnCount = 2;\n    this.gridDataHints.useUiHeight = true;\n    this.gridDataHints.w = FormField.FULL_WIDTH;\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n    this.staticMenus = [];\n    this.selectionKeystroke = null;\n    this.responsive = null;\n    this.$header = null;\n    this.$body = null;\n    this.$title = null;\n    this.$subLabel = null;\n    this._statusPositionOrig = null;\n  }\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'menuBarPosition',\n      constType: GroupBox.MenuBarPosition\n    }]);\n    this._setBodyLayoutConfig(this.bodyLayoutConfig);\n    this.menuBar = scout.create('MenuBar', {\n      parent: this,\n      menuOrder: new GroupBoxMenuItemsOrder(),\n      ellipsisPosition: this.menuBarEllipsisPosition\n    });\n    this.menuBar.on('propertyChange:visible', () => this._updateMenuBarStyle());\n    this._setFields(this.fields);\n    this._setMainBox(this.mainBox);\n    this._updateMenuBar();\n    ResponsiveManager.get().registerHandler(this, scout.create('GroupBoxResponsiveHandler', {\n      widget: this\n    }));\n    this._setResponsive(this.responsive);\n  }\n  _destroy() {\n    ResponsiveManager.get().unregisterHandler(this);\n    super._destroy();\n  }\n\n  /**\n   * @override\n   */\n  getFields() {\n    return this.fields;\n  }\n  insertField(field, index) {\n    let newFields = this.fields.slice();\n    index = scout.nvl(index, this.fields.length);\n    newFields.splice(index, 0, field);\n    this.setFields(newFields);\n  }\n  insertFieldBefore(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    let index = this.fields.indexOf(sibling);\n    this.insertField(field, index);\n  }\n  insertFieldAfter(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    let index = this.fields.indexOf(sibling) + 1;\n    this.insertField(field, index);\n  }\n  deleteField(field) {\n    let newFields = this.fields.slice(),\n      index = this.fields.indexOf(field);\n    if (index < 0) {\n      return;\n    }\n    newFields.splice(index, 1);\n    this.setFields(newFields);\n  }\n  setFields(fields) {\n    this.setProperty('fields', fields);\n  }\n  _setFields(fields) {\n    this._setProperty('fields', fields);\n    this._prepareFields();\n  }\n  _renderFields(fields) {\n    this._renderExpanded();\n    this.invalidateLogicalGrid(true);\n  }\n\n  /**\n   * @override\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n    this.keyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n    this.keyStrokeContext.$bindTarget = this._keyStrokeBindTarget.bind(this);\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _setKeyStrokes(keyStrokes) {\n    keyStrokes = arrays.ensure(keyStrokes);\n    let groupBoxRenderingHints = {\n      render: () => true,\n      offset: 0,\n      hAlign: HAlign.RIGHT,\n      $drawingArea: ($drawingArea, event) => {\n        if (this.$header && this.$header.isVisible()) {\n          return this.$header;\n        }\n        return this.$body;\n      }\n    };\n    keyStrokes.forEach(keyStroke => {\n      keyStroke.actionKeyStroke.renderingHints = $.extend({}, keyStroke.actionKeyStroke.renderingHints, groupBoxRenderingHints);\n    }, this);\n    super._setKeyStrokes(keyStrokes);\n  }\n\n  /**\n   * Returns a $container used as a bind target for the key-stroke context of the group-box.\n   * By default this function returns the container of the form, or when group-box is has no\n   * form as a parent the container of the group-box.\n   */\n  _keyStrokeBindTarget() {\n    let form = this.getForm();\n    if (form) {\n      // keystrokes on a group-box have form scope\n      return form.$container;\n    }\n    return this.$container;\n  }\n  _render() {\n    this.addContainer(this.$parent, this.mainBox ? 'root-group-box' : 'group-box');\n    this.$header = this.$container.appendDiv('group-box-header');\n    HtmlComponent.install(this.$header, this.session); // Complete layout chain for elements inside header (e.g. allow top status to invalidate layout when visibility changes)\n    this.$title = this.$header.appendDiv('title');\n    this.$borderBottom = this.$header.appendDiv('bottom-border');\n    this.addLabel();\n    this.addSubLabel();\n    this.addStatus();\n    this.$body = this.$container.appendDiv('group-box-body');\n    this.htmlBody = HtmlComponent.install(this.$body, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n  }\n  _remove() {\n    this._removeSubLabel();\n    super._remove();\n  }\n  _renderProperties() {\n    this._renderScrollable(); // Need to be before renderExpanded in order to have the scrollbars when the fields are rendered. The status tooltips require a scrollable parent to move when scrolling.\n    this._renderExpanded(); // Need to be before renderVisible is executed, otherwise controls might be rendered if group box is invisible which breaks some widgets (e.g. Tree and Table)\n    super._renderProperties();\n    this._renderBodyLayoutConfig();\n    this._renderNotification();\n    this._renderBorderVisible();\n    this._renderExpandable();\n    this._renderMenuBarPosition();\n    this._renderMenuBarEllipsisPosition();\n    this._renderMenuBarVisible();\n    this._renderSubLabel();\n  }\n  _createLayout() {\n    return new GroupBoxLayout(this);\n  }\n  _createBodyLayout() {\n    return new LogicalGridLayout(this, this.bodyLayoutConfig);\n  }\n  setBodyLayoutConfig(bodyLayoutConfig) {\n    this.setProperty('bodyLayoutConfig', bodyLayoutConfig);\n  }\n  _setBodyLayoutConfig(bodyLayoutConfig) {\n    if (!bodyLayoutConfig) {\n      bodyLayoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('bodyLayoutConfig', LogicalGridLayoutConfig.ensure(bodyLayoutConfig));\n  }\n  _renderBodyLayoutConfig() {\n    let oldMinWidth = this.htmlBody.layout.minWidth;\n    this.bodyLayoutConfig.applyToLayout(this.htmlBody.layout);\n    if (oldMinWidth !== this.bodyLayoutConfig.minWidth) {\n      this._renderScrollable();\n    }\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * Redraws the group box body by removing and rerendering every control.\n   * This may be necessary if a field does not support a dynamic property change and therefore needs to be redrawn completely to reflect the change.\n   */\n  rerenderControls() {\n    this._removeControls();\n    this._renderControls();\n    this.htmlBody.invalidateLayoutTree();\n  }\n  _removeControls() {\n    this.controls.forEach(control => {\n      control.remove();\n    }, this);\n  }\n  _renderControls() {\n    this.controls.forEach(function (control) {\n      if (!control.rendered) {\n        control.render(this.$body);\n        // set each children layout data to logical grid data\n        control.setLayoutData(new LogicalGridData(control));\n      }\n    }, this);\n  }\n  addSubLabel() {\n    if (this.$subLabel) {\n      return;\n    }\n    this.$subLabel = this.$title.appendDiv('sub-label');\n    tooltips.installForEllipsis(this.$subLabel, {\n      parent: this\n    });\n  }\n  _removeSubLabel() {\n    if (!this.$subLabel) {\n      return;\n    }\n    tooltips.uninstall(this.$subLabel);\n    this.$subLabel.remove();\n    this.$subLabel = null;\n  }\n  setSubLabel(subLabel) {\n    this.setProperty('subLabel', subLabel);\n  }\n  _renderSubLabel() {\n    this.$subLabel.setVisible(strings.hasText(this.subLabel));\n    this.$subLabel.textOrNbsp(this.subLabel);\n    this.$container.toggleClass('has-sub-label', this.$subLabel.isVisible());\n    this.invalidateLayoutTree();\n  }\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n  _renderScrollable() {\n    this._uninstallScrollbars();\n\n    // horizontal (x-axis) scrollbar is only installed when minWidth is > 0\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: this.bodyLayoutConfig.minWidth > 0 ? 'both' : 'y'\n      });\n    } else if (this.bodyLayoutConfig.minWidth > 0) {\n      this._installScrollbars({\n        axis: 'x'\n      });\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$body;\n  }\n  _onScroll() {\n    super._onScroll();\n    this._updateScrollShadow();\n  }\n  _updateScrollShadow() {\n    if (this.mainBox || !this.rendered) {\n      // No need to do anything if it's the mainBox because header is invisible and the menu bar already takes the full width\n      return;\n    }\n    let hasScrollShadowTop = this.hasScrollShadow('top');\n    let hasScrollShadowBottom = this.hasScrollShadow('bottom');\n    let oldHasScrollShadowTop = this.$container.hasClass('has-scroll-shadow-top');\n    let oldHasScrollShadowBottom = this.$container.hasClass('has-scroll-shadow-bottom');\n    let hasMenubarTop = this.$container.hasClass('menubar-position-top');\n    let hasMenubarBottom = this.$container.hasClass('menubar-position-bottom');\n    let headerVisible = this.$header.isVisible();\n    this.$container.toggleClass('has-scroll-shadow-top', hasScrollShadowTop);\n    this.$container.toggleClass('has-scroll-shadow-bottom', hasScrollShadowBottom);\n    if ((headerVisible || hasMenubarTop) && oldHasScrollShadowTop !== hasScrollShadowTop || hasMenubarBottom && oldHasScrollShadowBottom !== hasScrollShadowBottom) {\n      this.invalidateLayoutTree(false);\n    }\n\n    // Enlarge header line if there is a shadow, but don't do it if there is a menubar on top\n    fields.adjustStatusPositionForScrollShadow(this, () => hasScrollShadowTop && headerVisible && !hasMenubarTop);\n  }\n  setMainBox(mainBox) {\n    this.setProperty('mainBox', mainBox);\n  }\n  _setMainBox(mainBox) {\n    this._setProperty('mainBox', mainBox);\n    if (this.mainBox) {\n      this.menuBar.setCssClass('main-menubar');\n      if (this.scrollable === null) {\n        this.setScrollable(true);\n      }\n      if (this.responsive === null) {\n        this.setResponsive(true);\n      }\n    }\n  }\n  addLabel() {\n    if (this.$label) {\n      return;\n    }\n    this.$label = this.$title.appendDiv('label');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n  }\n  _renderLabel() {\n    this.$label.textOrNbsp(this.label);\n    if (this.rendered) {\n      this._renderLabelVisible();\n    }\n  }\n  addStatus() {\n    super.addStatus();\n    this._updateStatusPosition();\n  }\n  _renderStatusPosition() {\n    this._updateStatusPosition();\n  }\n  _updateStatusPosition() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    if (this.statusPosition === FormField.StatusPosition.TOP) {\n      // move into header\n      this.$status.appendTo(this.$header);\n    } else {\n      this.$status.appendTo(this.$container);\n    }\n    this.invalidateLayoutTree();\n  }\n  setNotification(notification) {\n    this.setProperty('notification', notification);\n  }\n  _renderNotification() {\n    if (!this.notification) {\n      this.invalidateLayoutTree();\n      return;\n    }\n    this.notification.render();\n    this.notification.$container.insertBefore(this.$body);\n    this.invalidateLayoutTree();\n  }\n  _prepareFields() {\n    this.processButtons.forEach(this._unregisterButtonKeyStrokes.bind(this));\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n    let i, field;\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      if (field instanceof Button) {\n        if (field.processButton) {\n          this.processButtons.push(field);\n          if (field.systemType !== Button.SystemType.NONE) {\n            this.systemButtons.push(field);\n          } else {\n            this.customButtons.push(field);\n          }\n        } else {\n          this.controls.push(field);\n          this._registerButtonKeyStrokes(field);\n        }\n      } else if (field instanceof TabBox) {\n        this.controls.push(field);\n        for (let k = 0; k < field.tabItems.length; k++) {\n          if (field.tabItems[k].selectionKeystroke) {\n            this.keyStrokeContext.registerKeyStroke(new TabItemKeyStroke(field.tabItems[k].selectionKeystroke, field.tabItems[k]));\n          }\n        }\n      } else {\n        this.controls.push(field);\n      }\n    }\n\n    // Create menu for each process button\n    this.processMenus = this.processButtons.map(function (button) {\n      return scout.create('ButtonAdapterMenu', ButtonAdapterMenu.adaptButtonProperties(button, {\n        parent: this,\n        menubar: this.menuBar,\n        button: button,\n        // initially defaultMenu should only be set if defaultButton is set to true, false should not be mapped as the default defaultMenu = null setting\n        // would be overridden if this default null setting is overridden MenuBar.prototype.updateDefaultMenu would not consider these entries anymore\n        defaultMenu: button.defaultButton ? true : null\n      }));\n    }, this);\n    this.registerKeyStrokes(this.processMenus);\n  }\n  _unregisterButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function (keyStroke) {\n        this.keyStrokeContext.unregisterKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n  _registerButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function (keyStroke) {\n        this.keyStrokeContext.registerKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n  setBorderVisible(borderVisible) {\n    this.setProperty('borderVisible', borderVisible);\n  }\n  _renderBorderVisible() {\n    let borderVisible = this.borderVisible;\n    if (this.borderDecoration === GroupBox.BorderDecoration.AUTO) {\n      borderVisible = this._computeBorderVisible(borderVisible);\n    }\n    this.$body.toggleClass('y-padding-invisible', !borderVisible);\n    this.invalidateLayoutTree();\n  }\n  setBorderDecoration(borderDecoration) {\n    this.setProperty('borderDecoration', borderDecoration);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because renderBorderVisible is executed already\n  _renderBorderDecoration() {\n    this._renderBorderVisible();\n  }\n  getContextMenuItems() {\n    let onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.menuBarVisible) {\n      return [];\n    }\n    return super.getContextMenuItems(onlyVisible);\n  }\n  setMenuBarVisible(visible) {\n    this.setProperty('menuBarVisible', visible);\n  }\n  _setMenuBarVisible(visible) {\n    this._setProperty('menuBarVisible', visible);\n    this._updateMenuBar();\n  }\n  _renderMenuBarVisible() {\n    if (this.menuBarVisible) {\n      this._renderMenuBar();\n    } else {\n      this.menuBar.remove();\n    }\n    this._updateMenus();\n    this.invalidateLayoutTree();\n  }\n  _renderMenuBar() {\n    this.menuBar.render();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      // move right of title\n      let $control = this.$header.children('.group-box-control');\n      if ($control.length > 0) {\n        this.menuBar.$container.insertAfter($control);\n      } else {\n        this.menuBar.$container.insertAfter(this.$title);\n      }\n    } else if (this.menuBar.position === MenuBar.Position.TOP) {\n      // move below header\n      this.menuBar.$container.insertAfter(this.$header);\n    }\n  }\n  setMenuBarPosition(menuBarPosition) {\n    this.setProperty('menuBarPosition', menuBarPosition);\n  }\n  _renderMenuBarPosition() {\n    let position = this.menuBarPosition;\n    if (position === GroupBox.MenuBarPosition.AUTO) {\n      position = GroupBox.MenuBarPosition.TOP;\n    }\n    if (position === GroupBox.MenuBarPosition.BOTTOM) {\n      this.menuBar.setPosition(MenuBar.Position.BOTTOM);\n    } else {\n      // top + title\n      this.menuBar.setPosition(MenuBar.Position.TOP);\n    }\n    this._renderMenuBarStyle();\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n  setMenuBarEllipsisPosition(menuBarEllipsisPosition) {\n    this.setProperty('menuBarEllipsisPosition', menuBarEllipsisPosition);\n    this.menuBar.setEllipsisPosition(menuBarEllipsisPosition);\n  }\n  _renderMenuBarEllipsisPosition() {\n    this.menuBar.reorderMenus();\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n  _updateMenuBarStyle() {\n    if (this.rendered) {\n      this._renderMenuBarStyle();\n    }\n  }\n  _renderMenuBarStyle() {\n    let visible = this.menuBar.visible;\n    let hasTitleMenuBar = this.menuBarPosition === GroupBox.MenuBarPosition.TITLE;\n    this.$header.toggleClass('has-menubar', visible && hasTitleMenuBar);\n    this.$container.toggleClass('menubar-position-top', visible && !hasTitleMenuBar && this.menuBar.position === MenuBar.Position.TOP);\n    this.$container.toggleClass('menubar-position-bottom', visible && !hasTitleMenuBar && this.menuBar.position === MenuBar.Position.BOTTOM);\n  }\n\n  /**\n   *\n   * @returns {boolean} false if it is the mainbox. Or if the groupbox contains exactly one tablefield which has an invisible label\n   */\n  _computeBorderVisible(borderVisible) {\n    if (this.mainBox) {\n      borderVisible = false;\n    } else if (this.parent instanceof GroupBox && this.parent.parent instanceof Form && this.parent.parent.parent instanceof WrappedFormField && this.parent.parent.parent.parent instanceof SplitBox && this.parent.getFields().length === 1) {\n      // Special case for wizard: wrapped form in split box with a single group box\n      borderVisible = false;\n    }\n    return borderVisible;\n  }\n  setExpandable(expandable) {\n    this.setProperty('expandable', expandable);\n  }\n  _renderExpandable() {\n    let expandable = this.expandable;\n    let $control = this.$header.children('.group-box-control');\n    if (expandable) {\n      if ($control.length === 0) {\n        // Create control if necessary\n        this.$container.makeDiv('group-box-control').on('click', this._onControlClick.bind(this)).insertAfter(this.$title);\n      }\n      this.$header.addClass('expandable').on('click.group-box-control', this._onControlClick.bind(this));\n    } else {\n      $control.remove();\n      this.$header.removeClass('expandable').off('.group-box-control');\n    }\n    this.invalidateLayoutTree();\n  }\n  setExpanded(expanded) {\n    this.setProperty('expanded', expanded);\n  }\n  _renderExpanded() {\n    this.$container.toggleClass('collapsed', !this.expanded);\n\n    // Group boxes have set \"useUiHeight=true\" by default. When a group box is collapsed, it should not\n    // stretched vertically (no \"weight Y\"). However, because \"weightY\" is -1 by default, a calculated value\n    // is assigned (LogicalGridData._inheritWeightY()) that is based on the group boxes height. In collapsed\n    // state, this height would be wrong. Therefore, we manually assign \"weightY=0\" to collapsed group boxes\n    // to prevent them from beeing stretched.\n    if (this.expanded) {\n      // If group box was previously collapsed, restore original \"weightY\" griaData value\n      if (this._collapsedWeightY !== undefined) {\n        this.gridData.weightY = this._collapsedWeightY;\n        delete this._collapsedWeightY;\n      }\n      // Update inner layout (e.g. menubar)\n      this.invalidateLayout();\n      this._renderControls();\n    } else {\n      // If group box has a weight different than 0, we set it to zero and back up the old value\n      if (this.gridData.weightY !== 0) {\n        this._collapsedWeightY = this.gridData.weightY;\n        this.gridData.weightY = 0;\n      }\n    }\n    this.invalidateLayoutTree();\n  }\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    this.invalidateLogicalGrid();\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new GroupBoxGridConfig());\n    }\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _renderLabelVisible(labelVisible) {\n    this.$header.setVisible(this._computeTitleVisible(labelVisible));\n    this._updateFieldStatus();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      this.invalidateLayoutTree();\n    }\n  }\n  _computeTitleVisible(labelVisible) {\n    labelVisible = scout.nvl(labelVisible, this.labelVisible);\n    return !!(labelVisible && this.label && !this.mainBox);\n  }\n\n  /**\n   * @override FormField.js\n   *\n   * Only show the group box status if title is visible.\n   */\n  _computeStatusVisible() {\n    return super._computeStatusVisible() && this._computeTitleVisible();\n  }\n  _setMenus(menus) {\n    super._setMenus(menus);\n    if (this.menuBar) {\n      // updateMenuBar is required because menuBar is not created yet when synMenus is called initially\n      this._updateMenuBar();\n    }\n  }\n  _updateMenuBar() {\n    if (!this.menuBarVisible) {\n      // Do not update menuBar while it is invisible, the menus may now be managed by another widget.\n      // -> this makes sure the parent is not accidentally set to the group box, the other widget should remain responsible\n      this.menuBar.setMenuItems([]);\n      return;\n    }\n    let menus = this.staticMenus.concat(this.processMenus).concat(this.menus);\n    this.menuBar.setMenuItems(menus);\n  }\n  _removeMenus() {\n    // menubar takes care about removal\n  }\n  setStaticMenus(staticMenus) {\n    this.setProperty('staticMenus', staticMenus);\n    this._updateMenuBar();\n  }\n  _onControlClick(event) {\n    if (!this.expandable) {\n      return;\n    }\n    const target = scout.widget(event.target);\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE && this.menuBar.has(target)) {\n      // If the position of the menubar is set to title and a menu has been clicked, then the event must not be handled\n      return;\n    }\n    this.setExpanded(!this.expanded);\n    $.suppressEvent(event); // otherwise, the event would be triggered twice sometimes (by group-box-control and group-box-title)\n  }\n\n  setResponsive(responsive) {\n    this.setProperty('responsive', responsive);\n  }\n  _setResponsive(responsive) {\n    this._setProperty('responsive', responsive);\n    if (!this.initialized) {\n      return;\n    }\n    if (this.responsive) {\n      ResponsiveManager.get().reset(this, true);\n    } else {\n      ResponsiveManager.get().reset(this, true);\n      if (this.responsive === null) {\n        let parent = this.findParent(parent => {\n          return parent instanceof GroupBox && parent.responsive;\n        });\n        ResponsiveManager.get().reset(parent, true);\n      }\n    }\n    this.invalidateLayoutTree();\n  }\n  clone(model, options) {\n    let clone = super.clone(model);\n    this._deepCloneProperties(clone, ['fields'], options);\n    clone._prepareFields();\n    return clone;\n  }\n}\n_defineProperty(GroupBox, \"BorderDecoration\", {\n  AUTO: 'auto',\n  EMPTY: 'empty',\n  LINE: 'line'\n});\n_defineProperty(GroupBox, \"MenuBarPosition\", {\n  AUTO: 'auto',\n  TOP: 'top',\n  BOTTOM: 'bottom',\n  TITLE: 'title'\n});","map":{"version":3,"names":["arrays","Button","ButtonAdapterMenu","CompositeField","fields","Form","FormField","GroupBoxGridConfig","GroupBoxLayout","GroupBoxMenuItemsOrder","HAlign","HtmlComponent","LogicalGridData","LogicalGridLayout","LogicalGridLayoutConfig","MenuBar","ResponsiveManager","scout","SplitBox","strings","TabBox","TabItemKeyStroke","tooltips","WrappedFormField","$","GroupBox","constructor","_addWidgetProperties","_addCloneProperties","menuBarVisible","menuBarPosition","MenuBarPosition","AUTO","menuBarEllipsisPosition","EllipsisPosition","RIGHT","notification","bodyLayoutConfig","borderDecoration","BorderDecoration","borderVisible","mainBox","scrollable","expandable","expanded","logicalGrid","create","gridColumnCount","gridDataHints","useUiHeight","w","FULL_WIDTH","controls","systemButtons","customButtons","processButtons","processMenus","staticMenus","selectionKeystroke","responsive","$header","$body","$title","$subLabel","_statusPositionOrig","_init","model","resolveConsts","property","constType","_setBodyLayoutConfig","menuBar","parent","menuOrder","ellipsisPosition","on","_updateMenuBarStyle","_setFields","_setMainBox","_updateMenuBar","get","registerHandler","widget","_setResponsive","_destroy","unregisterHandler","getFields","insertField","field","index","newFields","slice","nvl","length","splice","setFields","insertFieldBefore","sibling","assertParameter","indexOf","insertFieldAfter","deleteField","setProperty","_setProperty","_prepareFields","_renderFields","_renderExpanded","invalidateLogicalGrid","_initKeyStrokeContext","keyStrokeContext","invokeAcceptInputOnActiveValueField","$bindTarget","_keyStrokeBindTarget","bind","_setKeyStrokes","keyStrokes","ensure","groupBoxRenderingHints","render","offset","hAlign","$drawingArea","event","isVisible","forEach","keyStroke","actionKeyStroke","renderingHints","extend","form","getForm","$container","_render","addContainer","$parent","appendDiv","install","session","$borderBottom","addLabel","addSubLabel","addStatus","htmlBody","setLayout","_createBodyLayout","_remove","_removeSubLabel","_renderProperties","_renderScrollable","_renderBodyLayoutConfig","_renderNotification","_renderBorderVisible","_renderExpandable","_renderMenuBarPosition","_renderMenuBarEllipsisPosition","_renderMenuBarVisible","_renderSubLabel","_createLayout","setBodyLayoutConfig","oldMinWidth","layout","minWidth","applyToLayout","rendered","invalidateLayoutTree","rerenderControls","_removeControls","_renderControls","control","remove","setLayoutData","installForEllipsis","uninstall","setSubLabel","subLabel","setVisible","hasText","textOrNbsp","toggleClass","setScrollable","_uninstallScrollbars","_installScrollbars","axis","get$Scrollable","_onScroll","_updateScrollShadow","hasScrollShadowTop","hasScrollShadow","hasScrollShadowBottom","oldHasScrollShadowTop","hasClass","oldHasScrollShadowBottom","hasMenubarTop","hasMenubarBottom","headerVisible","adjustStatusPositionForScrollShadow","setMainBox","setCssClass","setResponsive","$label","_renderLabel","label","_renderLabelVisible","_updateStatusPosition","_renderStatusPosition","fieldStatus","statusPosition","StatusPosition","TOP","$status","appendTo","setNotification","insertBefore","_unregisterButtonKeyStrokes","i","processButton","push","systemType","SystemType","NONE","_registerButtonKeyStrokes","k","tabItems","registerKeyStroke","map","button","adaptButtonProperties","menubar","defaultMenu","defaultButton","registerKeyStrokes","unregisterKeyStroke","setBorderVisible","_computeBorderVisible","setBorderDecoration","_renderBorderDecoration","getContextMenuItems","onlyVisible","setMenuBarVisible","visible","_setMenuBarVisible","_renderMenuBar","_updateMenus","TITLE","$control","children","insertAfter","position","Position","setMenuBarPosition","BOTTOM","setPosition","_renderMenuBarStyle","setMenuBarEllipsisPosition","setEllipsisPosition","reorderMenus","hasTitleMenuBar","setExpandable","makeDiv","_onControlClick","addClass","removeClass","off","setExpanded","_collapsedWeightY","undefined","gridData","weightY","invalidateLayout","setGridColumnCount","_setLogicalGrid","setGridConfig","labelVisible","_computeTitleVisible","_updateFieldStatus","_computeStatusVisible","_setMenus","menus","setMenuItems","concat","_removeMenus","setStaticMenus","target","has","suppressEvent","initialized","reset","findParent","clone","options","_deepCloneProperties","EMPTY","LINE"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/groupbox/GroupBox.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Button, ButtonAdapterMenu, CompositeField, fields, Form, FormField, GroupBoxGridConfig, GroupBoxLayout, GroupBoxMenuItemsOrder, HAlign, HtmlComponent, LogicalGridData, LogicalGridLayout, LogicalGridLayoutConfig, MenuBar, ResponsiveManager, scout, SplitBox, strings, TabBox, TabItemKeyStroke, tooltips, WrappedFormField} from '../../../index';\nimport $ from 'jquery';\n\nexport default class GroupBox extends CompositeField {\n\n  constructor() {\n    super();\n    this._addWidgetProperties(['fields', 'notification', 'staticMenus']);\n    this._addCloneProperties(['menuBarVisible', 'bodyLayoutConfig', 'borderDecoration', 'borderVisible', 'expandable', 'expanded', 'gridColumnCount', 'scrollable', 'subLabel']);\n\n    this.fields = [];\n    this.menuBarVisible = true;\n    this.menuBarPosition = GroupBox.MenuBarPosition.AUTO;\n    this.menuBarEllipsisPosition = MenuBar.EllipsisPosition.RIGHT;\n    this.notification = null;\n    this.bodyLayoutConfig = null;\n    this.borderDecoration = GroupBox.BorderDecoration.AUTO;\n    this.borderVisible = true;\n    this.mainBox = false;\n    // set to null to enable conditional default\n    // -> it will be set to true if it is a mainbox unless it was explicitly set to false\n    this.scrollable = null;\n    this.expandable = false;\n    this.expanded = true;\n    this.logicalGrid = scout.create('scout.VerticalSmartGrid');\n    this.gridColumnCount = 2;\n    this.gridDataHints.useUiHeight = true;\n    this.gridDataHints.w = FormField.FULL_WIDTH;\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n    this.staticMenus = [];\n    this.selectionKeystroke = null;\n    this.responsive = null;\n\n    this.$header = null;\n    this.$body = null;\n    this.$title = null;\n    this.$subLabel = null;\n    this._statusPositionOrig = null;\n  }\n\n  static BorderDecoration = {\n    AUTO: 'auto',\n    EMPTY: 'empty',\n    LINE: 'line'\n  };\n\n  static MenuBarPosition = {\n    AUTO: 'auto',\n    TOP: 'top',\n    BOTTOM: 'bottom',\n    TITLE: 'title'\n  };\n\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'menuBarPosition',\n      constType: GroupBox.MenuBarPosition\n    }]);\n    this._setBodyLayoutConfig(this.bodyLayoutConfig);\n    this.menuBar = scout.create('MenuBar', {\n      parent: this,\n      menuOrder: new GroupBoxMenuItemsOrder(),\n      ellipsisPosition: this.menuBarEllipsisPosition\n    });\n    this.menuBar.on('propertyChange:visible', () => this._updateMenuBarStyle());\n    this._setFields(this.fields);\n    this._setMainBox(this.mainBox);\n    this._updateMenuBar();\n\n    ResponsiveManager.get().registerHandler(this, scout.create('GroupBoxResponsiveHandler', {\n      widget: this\n    }));\n\n    this._setResponsive(this.responsive);\n  }\n\n  _destroy() {\n    ResponsiveManager.get().unregisterHandler(this);\n    super._destroy();\n  }\n\n  /**\n   * @override\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  insertField(field, index) {\n    let newFields = this.fields.slice();\n    index = scout.nvl(index, this.fields.length);\n    newFields.splice(index, 0, field);\n    this.setFields(newFields);\n  }\n\n  insertFieldBefore(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    let index = this.fields.indexOf(sibling);\n    this.insertField(field, index);\n  }\n\n  insertFieldAfter(field, sibling) {\n    scout.assertParameter('sibling', sibling);\n    let index = this.fields.indexOf(sibling) + 1;\n    this.insertField(field, index);\n  }\n\n  deleteField(field) {\n    let newFields = this.fields.slice(),\n      index = this.fields.indexOf(field);\n    if (index < 0) {\n      return;\n    }\n    newFields.splice(index, 1);\n    this.setFields(newFields);\n  }\n\n  setFields(fields) {\n    this.setProperty('fields', fields);\n  }\n\n  _setFields(fields) {\n    this._setProperty('fields', fields);\n    this._prepareFields();\n  }\n\n  _renderFields(fields) {\n    this._renderExpanded();\n    this.invalidateLogicalGrid(true);\n  }\n\n  /**\n   * @override\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n    this.keyStrokeContext.invokeAcceptInputOnActiveValueField = true;\n    this.keyStrokeContext.$bindTarget = this._keyStrokeBindTarget.bind(this);\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _setKeyStrokes(keyStrokes) {\n    keyStrokes = arrays.ensure(keyStrokes);\n\n    let groupBoxRenderingHints = {\n      render: () => true,\n      offset: 0,\n      hAlign: HAlign.RIGHT,\n      $drawingArea: ($drawingArea, event) => {\n        if (this.$header && this.$header.isVisible()) {\n          return this.$header;\n        }\n        return this.$body;\n      }\n    };\n\n    keyStrokes\n      .forEach(keyStroke => {\n        keyStroke.actionKeyStroke.renderingHints = $.extend({}, keyStroke.actionKeyStroke.renderingHints, groupBoxRenderingHints);\n      }, this);\n\n    super._setKeyStrokes(keyStrokes);\n  }\n\n  /**\n   * Returns a $container used as a bind target for the key-stroke context of the group-box.\n   * By default this function returns the container of the form, or when group-box is has no\n   * form as a parent the container of the group-box.\n   */\n  _keyStrokeBindTarget() {\n    let form = this.getForm();\n    if (form) {\n      // keystrokes on a group-box have form scope\n      return form.$container;\n    }\n    return this.$container;\n  }\n\n  _render() {\n    this.addContainer(this.$parent, this.mainBox ? 'root-group-box' : 'group-box');\n\n    this.$header = this.$container.appendDiv('group-box-header');\n    HtmlComponent.install(this.$header, this.session); // Complete layout chain for elements inside header (e.g. allow top status to invalidate layout when visibility changes)\n    this.$title = this.$header.appendDiv('title');\n    this.$borderBottom = this.$header.appendDiv('bottom-border');\n    this.addLabel();\n    this.addSubLabel();\n    this.addStatus();\n    this.$body = this.$container.appendDiv('group-box-body');\n    this.htmlBody = HtmlComponent.install(this.$body, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n  }\n\n  _remove() {\n    this._removeSubLabel();\n    super._remove();\n  }\n\n  _renderProperties() {\n    this._renderScrollable(); // Need to be before renderExpanded in order to have the scrollbars when the fields are rendered. The status tooltips require a scrollable parent to move when scrolling.\n    this._renderExpanded(); // Need to be before renderVisible is executed, otherwise controls might be rendered if group box is invisible which breaks some widgets (e.g. Tree and Table)\n    super._renderProperties();\n\n    this._renderBodyLayoutConfig();\n    this._renderNotification();\n    this._renderBorderVisible();\n    this._renderExpandable();\n    this._renderMenuBarPosition();\n    this._renderMenuBarEllipsisPosition();\n    this._renderMenuBarVisible();\n    this._renderSubLabel();\n  }\n\n  _createLayout() {\n    return new GroupBoxLayout(this);\n  }\n\n  _createBodyLayout() {\n    return new LogicalGridLayout(this, this.bodyLayoutConfig);\n  }\n\n  setBodyLayoutConfig(bodyLayoutConfig) {\n    this.setProperty('bodyLayoutConfig', bodyLayoutConfig);\n  }\n\n  _setBodyLayoutConfig(bodyLayoutConfig) {\n    if (!bodyLayoutConfig) {\n      bodyLayoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('bodyLayoutConfig', LogicalGridLayoutConfig.ensure(bodyLayoutConfig));\n  }\n\n  _renderBodyLayoutConfig() {\n    let oldMinWidth = this.htmlBody.layout.minWidth;\n    this.bodyLayoutConfig.applyToLayout(this.htmlBody.layout);\n    if (oldMinWidth !== this.bodyLayoutConfig.minWidth) {\n      this._renderScrollable();\n    }\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * Redraws the group box body by removing and rerendering every control.\n   * This may be necessary if a field does not support a dynamic property change and therefore needs to be redrawn completely to reflect the change.\n   */\n  rerenderControls() {\n    this._removeControls();\n    this._renderControls();\n    this.htmlBody.invalidateLayoutTree();\n  }\n\n  _removeControls() {\n    this.controls.forEach(control => {\n      control.remove();\n    }, this);\n  }\n\n  _renderControls() {\n    this.controls.forEach(function(control) {\n      if (!control.rendered) {\n        control.render(this.$body);\n        // set each children layout data to logical grid data\n        control.setLayoutData(new LogicalGridData(control));\n      }\n    }, this);\n  }\n\n  addSubLabel() {\n    if (this.$subLabel) {\n      return;\n    }\n    this.$subLabel = this.$title.appendDiv('sub-label');\n    tooltips.installForEllipsis(this.$subLabel, {\n      parent: this\n    });\n  }\n\n  _removeSubLabel() {\n    if (!this.$subLabel) {\n      return;\n    }\n    tooltips.uninstall(this.$subLabel);\n    this.$subLabel.remove();\n    this.$subLabel = null;\n  }\n\n  setSubLabel(subLabel) {\n    this.setProperty('subLabel', subLabel);\n  }\n\n  _renderSubLabel() {\n    this.$subLabel.setVisible(strings.hasText(this.subLabel));\n    this.$subLabel.textOrNbsp(this.subLabel);\n    this.$container.toggleClass('has-sub-label', this.$subLabel.isVisible());\n    this.invalidateLayoutTree();\n  }\n\n  setScrollable(scrollable) {\n    this.setProperty('scrollable', scrollable);\n  }\n\n  _renderScrollable() {\n    this._uninstallScrollbars();\n\n    // horizontal (x-axis) scrollbar is only installed when minWidth is > 0\n    if (this.scrollable) {\n      this._installScrollbars({\n        axis: ((this.bodyLayoutConfig.minWidth > 0) ? 'both' : 'y')\n      });\n    } else if (this.bodyLayoutConfig.minWidth > 0) {\n      this._installScrollbars({\n        axis: 'x'\n      });\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$body;\n  }\n\n  _onScroll() {\n    super._onScroll();\n    this._updateScrollShadow();\n  }\n\n  _updateScrollShadow() {\n    if (this.mainBox || !this.rendered) {\n      // No need to do anything if it's the mainBox because header is invisible and the menu bar already takes the full width\n      return;\n    }\n    let hasScrollShadowTop = this.hasScrollShadow('top');\n    let hasScrollShadowBottom = this.hasScrollShadow('bottom');\n    let oldHasScrollShadowTop = this.$container.hasClass('has-scroll-shadow-top');\n    let oldHasScrollShadowBottom = this.$container.hasClass('has-scroll-shadow-bottom');\n    let hasMenubarTop = this.$container.hasClass('menubar-position-top');\n    let hasMenubarBottom = this.$container.hasClass('menubar-position-bottom');\n    let headerVisible = this.$header.isVisible();\n    this.$container.toggleClass('has-scroll-shadow-top', hasScrollShadowTop);\n    this.$container.toggleClass('has-scroll-shadow-bottom', hasScrollShadowBottom);\n    if ((headerVisible || hasMenubarTop) && oldHasScrollShadowTop !== hasScrollShadowTop\n      || hasMenubarBottom && oldHasScrollShadowBottom !== hasScrollShadowBottom) {\n      this.invalidateLayoutTree(false);\n    }\n\n    // Enlarge header line if there is a shadow, but don't do it if there is a menubar on top\n    fields.adjustStatusPositionForScrollShadow(this, () => hasScrollShadowTop && headerVisible && !hasMenubarTop);\n  }\n\n  setMainBox(mainBox) {\n    this.setProperty('mainBox', mainBox);\n  }\n\n  _setMainBox(mainBox) {\n    this._setProperty('mainBox', mainBox);\n    if (this.mainBox) {\n      this.menuBar.setCssClass('main-menubar');\n      if (this.scrollable === null) {\n        this.setScrollable(true);\n      }\n      if (this.responsive === null) {\n        this.setResponsive(true);\n      }\n    }\n  }\n\n  addLabel() {\n    if (this.$label) {\n      return;\n    }\n    this.$label = this.$title.appendDiv('label');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n  }\n\n  _renderLabel() {\n    this.$label.textOrNbsp(this.label);\n    if (this.rendered) {\n      this._renderLabelVisible();\n    }\n  }\n\n  addStatus() {\n    super.addStatus();\n    this._updateStatusPosition();\n  }\n\n  _renderStatusPosition() {\n    this._updateStatusPosition();\n  }\n\n  _updateStatusPosition() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    if (this.statusPosition === FormField.StatusPosition.TOP) {\n      // move into header\n      this.$status.appendTo(this.$header);\n    } else {\n      this.$status.appendTo(this.$container);\n    }\n    this.invalidateLayoutTree();\n  }\n\n  setNotification(notification) {\n    this.setProperty('notification', notification);\n  }\n\n  _renderNotification() {\n    if (!this.notification) {\n      this.invalidateLayoutTree();\n      return;\n    }\n    this.notification.render();\n    this.notification.$container.insertBefore(this.$body);\n    this.invalidateLayoutTree();\n  }\n\n  _prepareFields() {\n    this.processButtons.forEach(this._unregisterButtonKeyStrokes.bind(this));\n\n    this.controls = [];\n    this.systemButtons = [];\n    this.customButtons = [];\n    this.processButtons = [];\n    this.processMenus = [];\n\n    let i, field;\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      if (field instanceof Button) {\n        if (field.processButton) {\n          this.processButtons.push(field);\n          if (field.systemType !== Button.SystemType.NONE) {\n            this.systemButtons.push(field);\n          } else {\n            this.customButtons.push(field);\n          }\n        } else {\n          this.controls.push(field);\n          this._registerButtonKeyStrokes(field);\n        }\n      } else if (field instanceof TabBox) {\n        this.controls.push(field);\n        for (let k = 0; k < field.tabItems.length; k++) {\n          if (field.tabItems[k].selectionKeystroke) {\n            this.keyStrokeContext.registerKeyStroke(new TabItemKeyStroke(field.tabItems[k].selectionKeystroke, field.tabItems[k]));\n          }\n        }\n      } else {\n        this.controls.push(field);\n      }\n    }\n\n    // Create menu for each process button\n    this.processMenus = this.processButtons.map(function(button) {\n      return scout.create('ButtonAdapterMenu',\n        ButtonAdapterMenu.adaptButtonProperties(button, {\n          parent: this,\n          menubar: this.menuBar,\n          button: button,\n          // initially defaultMenu should only be set if defaultButton is set to true, false should not be mapped as the default defaultMenu = null setting\n          // would be overridden if this default null setting is overridden MenuBar.prototype.updateDefaultMenu would not consider these entries anymore\n          defaultMenu: button.defaultButton ? true : null\n        }));\n    }, this);\n    this.registerKeyStrokes(this.processMenus);\n  }\n\n  _unregisterButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function(keyStroke) {\n        this.keyStrokeContext.unregisterKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n\n  _registerButtonKeyStrokes(button) {\n    if (button.keyStrokes) {\n      button.keyStrokes.forEach(function(keyStroke) {\n        this.keyStrokeContext.registerKeyStroke(keyStroke);\n      }, this);\n    }\n  }\n\n  setBorderVisible(borderVisible) {\n    this.setProperty('borderVisible', borderVisible);\n  }\n\n  _renderBorderVisible() {\n    let borderVisible = this.borderVisible;\n    if (this.borderDecoration === GroupBox.BorderDecoration.AUTO) {\n      borderVisible = this._computeBorderVisible(borderVisible);\n    }\n\n    this.$body.toggleClass('y-padding-invisible', !borderVisible);\n    this.invalidateLayoutTree();\n  }\n\n  setBorderDecoration(borderDecoration) {\n    this.setProperty('borderDecoration', borderDecoration);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because renderBorderVisible is executed already\n  _renderBorderDecoration() {\n    this._renderBorderVisible();\n  }\n\n  getContextMenuItems(onlyVisible = true) {\n    if (this.menuBarVisible) {\n      return [];\n    }\n    return super.getContextMenuItems(onlyVisible);\n  }\n\n  setMenuBarVisible(visible) {\n    this.setProperty('menuBarVisible', visible);\n  }\n\n  _setMenuBarVisible(visible) {\n    this._setProperty('menuBarVisible', visible);\n    this._updateMenuBar();\n  }\n\n  _renderMenuBarVisible() {\n    if (this.menuBarVisible) {\n      this._renderMenuBar();\n    } else {\n      this.menuBar.remove();\n    }\n    this._updateMenus();\n    this.invalidateLayoutTree();\n  }\n\n  _renderMenuBar() {\n    this.menuBar.render();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      // move right of title\n      let $control = this.$header.children('.group-box-control');\n      if ($control.length > 0) {\n        this.menuBar.$container.insertAfter($control);\n      } else {\n        this.menuBar.$container.insertAfter(this.$title);\n      }\n    } else if (this.menuBar.position === MenuBar.Position.TOP) {\n      // move below header\n      this.menuBar.$container.insertAfter(this.$header);\n    }\n  }\n\n  setMenuBarPosition(menuBarPosition) {\n    this.setProperty('menuBarPosition', menuBarPosition);\n  }\n\n  _renderMenuBarPosition() {\n    let position = this.menuBarPosition;\n    if (position === GroupBox.MenuBarPosition.AUTO) {\n      position = GroupBox.MenuBarPosition.TOP;\n    }\n\n    if (position === GroupBox.MenuBarPosition.BOTTOM) {\n      this.menuBar.setPosition(MenuBar.Position.BOTTOM);\n    } else { // top + title\n      this.menuBar.setPosition(MenuBar.Position.TOP);\n    }\n    this._renderMenuBarStyle();\n\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n\n  setMenuBarEllipsisPosition(menuBarEllipsisPosition) {\n    this.setProperty('menuBarEllipsisPosition', menuBarEllipsisPosition);\n    this.menuBar.setEllipsisPosition(menuBarEllipsisPosition);\n  }\n\n  _renderMenuBarEllipsisPosition() {\n    this.menuBar.reorderMenus();\n    if (this.rendered) {\n      this.menuBar.remove();\n      this._renderMenuBarVisible();\n    }\n  }\n\n  _updateMenuBarStyle() {\n    if (this.rendered) {\n      this._renderMenuBarStyle();\n    }\n  }\n\n  _renderMenuBarStyle() {\n    let visible = this.menuBar.visible;\n    let hasTitleMenuBar = this.menuBarPosition === GroupBox.MenuBarPosition.TITLE;\n    this.$header.toggleClass('has-menubar', visible && hasTitleMenuBar);\n    this.$container.toggleClass('menubar-position-top', visible && !hasTitleMenuBar && this.menuBar.position === MenuBar.Position.TOP);\n    this.$container.toggleClass('menubar-position-bottom', visible && !hasTitleMenuBar && this.menuBar.position === MenuBar.Position.BOTTOM);\n  }\n\n  /**\n   *\n   * @returns {boolean} false if it is the mainbox. Or if the groupbox contains exactly one tablefield which has an invisible label\n   */\n  _computeBorderVisible(borderVisible) {\n    if (this.mainBox) {\n      borderVisible = false;\n    } else if (this.parent instanceof GroupBox &&\n      this.parent.parent instanceof Form &&\n      this.parent.parent.parent instanceof WrappedFormField &&\n      this.parent.parent.parent.parent instanceof SplitBox &&\n      this.parent.getFields().length === 1) {\n      // Special case for wizard: wrapped form in split box with a single group box\n      borderVisible = false;\n    }\n    return borderVisible;\n  }\n\n  setExpandable(expandable) {\n    this.setProperty('expandable', expandable);\n  }\n\n  _renderExpandable() {\n    let expandable = this.expandable;\n    let $control = this.$header.children('.group-box-control');\n\n    if (expandable) {\n      if ($control.length === 0) {\n        // Create control if necessary\n        this.$container.makeDiv('group-box-control')\n          .on('click', this._onControlClick.bind(this))\n          .insertAfter(this.$title);\n      }\n      this.$header\n        .addClass('expandable')\n        .on('click.group-box-control', this._onControlClick.bind(this));\n    } else {\n      $control.remove();\n      this.$header\n        .removeClass('expandable')\n        .off('.group-box-control');\n    }\n    this.invalidateLayoutTree();\n  }\n\n  setExpanded(expanded) {\n    this.setProperty('expanded', expanded);\n  }\n\n  _renderExpanded() {\n    this.$container.toggleClass('collapsed', !this.expanded);\n\n    // Group boxes have set \"useUiHeight=true\" by default. When a group box is collapsed, it should not\n    // stretched vertically (no \"weight Y\"). However, because \"weightY\" is -1 by default, a calculated value\n    // is assigned (LogicalGridData._inheritWeightY()) that is based on the group boxes height. In collapsed\n    // state, this height would be wrong. Therefore, we manually assign \"weightY=0\" to collapsed group boxes\n    // to prevent them from beeing stretched.\n    if (this.expanded) {\n      // If group box was previously collapsed, restore original \"weightY\" griaData value\n      if (this._collapsedWeightY !== undefined) {\n        this.gridData.weightY = this._collapsedWeightY;\n        delete this._collapsedWeightY;\n      }\n      // Update inner layout (e.g. menubar)\n      this.invalidateLayout();\n      this._renderControls();\n    } else {\n      // If group box has a weight different than 0, we set it to zero and back up the old value\n      if (this.gridData.weightY !== 0) {\n        this._collapsedWeightY = this.gridData.weightY;\n        this.gridData.weightY = 0;\n      }\n    }\n\n    this.invalidateLayoutTree();\n  }\n\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    this.invalidateLogicalGrid();\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new GroupBoxGridConfig());\n    }\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _renderLabelVisible(labelVisible) {\n    this.$header.setVisible(this._computeTitleVisible(labelVisible));\n    this._updateFieldStatus();\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE) {\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _computeTitleVisible(labelVisible) {\n    labelVisible = scout.nvl(labelVisible, this.labelVisible);\n    return !!(labelVisible && this.label && !this.mainBox);\n  }\n\n  /**\n   * @override FormField.js\n   *\n   * Only show the group box status if title is visible.\n   */\n  _computeStatusVisible() {\n    return super._computeStatusVisible() && this._computeTitleVisible();\n  }\n\n  _setMenus(menus) {\n    super._setMenus(menus);\n\n    if (this.menuBar) {\n      // updateMenuBar is required because menuBar is not created yet when synMenus is called initially\n      this._updateMenuBar();\n    }\n  }\n\n  _updateMenuBar() {\n    if (!this.menuBarVisible) {\n      // Do not update menuBar while it is invisible, the menus may now be managed by another widget.\n      // -> this makes sure the parent is not accidentally set to the group box, the other widget should remain responsible\n      this.menuBar.setMenuItems([]);\n      return;\n    }\n    let menus = this.staticMenus\n      .concat(this.processMenus)\n      .concat(this.menus);\n\n    this.menuBar.setMenuItems(menus);\n  }\n\n  _removeMenus() {\n    // menubar takes care about removal\n  }\n\n  setStaticMenus(staticMenus) {\n    this.setProperty('staticMenus', staticMenus);\n    this._updateMenuBar();\n  }\n\n  _onControlClick(event) {\n    if (!this.expandable) {\n      return;\n    }\n    const target = scout.widget(event.target);\n    if (this.menuBarPosition === GroupBox.MenuBarPosition.TITLE && this.menuBar.has(target)) {\n      // If the position of the menubar is set to title and a menu has been clicked, then the event must not be handled\n      return;\n    }\n\n    this.setExpanded(!this.expanded);\n    $.suppressEvent(event); // otherwise, the event would be triggered twice sometimes (by group-box-control and group-box-title)\n  }\n\n  setResponsive(responsive) {\n    this.setProperty('responsive', responsive);\n  }\n\n  _setResponsive(responsive) {\n    this._setProperty('responsive', responsive);\n\n    if (!this.initialized) {\n      return;\n    }\n    if (this.responsive) {\n      ResponsiveManager.get().reset(this, true);\n    } else {\n      ResponsiveManager.get().reset(this, true);\n      if (this.responsive === null) {\n        let parent = this.findParent(parent => {\n          return parent instanceof GroupBox && parent.responsive;\n        });\n        ResponsiveManager.get().reset(parent, true);\n      }\n    }\n    this.invalidateLayoutTree();\n  }\n\n  clone(model, options) {\n    let clone = super.clone(model);\n    this._deepCloneProperties(clone, ['fields'], options);\n    clone._prepareFields();\n    return clone;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}