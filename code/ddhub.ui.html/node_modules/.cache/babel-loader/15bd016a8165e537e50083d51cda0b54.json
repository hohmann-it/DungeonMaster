{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ValueField } from '../../../index';\nexport default class ModeSelectorField extends ValueField {\n  constructor() {\n    super();\n    // modes will be moved to the ModeSelector after the adapters are created (only required in scout classic)\n    // see ModeSelectorFieldAdapter.js\n    this._addWidgetProperties(['modeSelector', 'modes']);\n    this._modeSelectorPropertyChangeHandler = this._onModeSelectorPropertyChange.bind(this);\n  }\n  _render() {\n    this.addContainer(this.$parent, 'mode-selector-field');\n    this.addLabel();\n    this.addStatus();\n    if (this.modeSelector) {\n      this._renderModeSelector();\n      this.modeSelector.on('propertyChange', this._modeSelectorPropertyChangeHandler);\n    }\n  }\n\n  // Will also be called by model adapter on property change event\n  _renderModeSelector() {\n    this.modeSelector.render();\n    this.addField(this.modeSelector.$container);\n  }\n  _removeModeSelector() {\n    this.modeSelector.remove();\n    this._removeField();\n  }\n  _onModeSelectorPropertyChange(event) {\n    if (event.propertyName === 'selectedMode') {\n      if (event.newValue) {\n        this.setValue(event.newValue.ref);\n      } else if (this.modeSelector.selectedMode && this.modeSelector.selectedMode.id) {\n        this.setValue(this.modeSelector.selectedMode.id);\n      } else {\n        this.setValue(null);\n      }\n    }\n  }\n}","map":{"version":3,"names":["ValueField","ModeSelectorField","constructor","_addWidgetProperties","_modeSelectorPropertyChangeHandler","_onModeSelectorPropertyChange","bind","_render","addContainer","$parent","addLabel","addStatus","modeSelector","_renderModeSelector","on","render","addField","$container","_removeModeSelector","remove","_removeField","event","propertyName","newValue","setValue","ref","selectedMode","id"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/modeselectorfield/ModeSelectorField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ValueField} from '../../../index';\n\nexport default class ModeSelectorField extends ValueField {\n\n  constructor() {\n    super();\n    // modes will be moved to the ModeSelector after the adapters are created (only required in scout classic)\n    // see ModeSelectorFieldAdapter.js\n    this._addWidgetProperties(['modeSelector', 'modes']);\n    this._modeSelectorPropertyChangeHandler = this._onModeSelectorPropertyChange.bind(this);\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'mode-selector-field');\n    this.addLabel();\n    this.addStatus();\n    if (this.modeSelector) {\n      this._renderModeSelector();\n      this.modeSelector.on('propertyChange', this._modeSelectorPropertyChangeHandler);\n    }\n  }\n\n  // Will also be called by model adapter on property change event\n  _renderModeSelector() {\n    this.modeSelector.render();\n    this.addField(this.modeSelector.$container);\n  }\n\n  _removeModeSelector() {\n    this.modeSelector.remove();\n    this._removeField();\n  }\n\n  _onModeSelectorPropertyChange(event) {\n    if (event.propertyName === 'selectedMode') {\n      if (event.newValue) {\n        this.setValue(event.newValue.ref);\n      } else if (this.modeSelector.selectedMode && this.modeSelector.selectedMode.id) {\n        this.setValue(this.modeSelector.selectedMode.id);\n      } else {\n        this.setValue(null);\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,UAAU,QAAO,gBAAgB;AAEzC,eAAe,MAAMC,iBAAiB,SAASD,UAAU,CAAC;EAExDE,WAAW,GAAG;IACZ,KAAK,EAAE;IACP;IACA;IACA,IAAI,CAACC,oBAAoB,CAAC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACpD,IAAI,CAACC,kCAAkC,GAAG,IAAI,CAACC,6BAA6B,CAACC,IAAI,CAAC,IAAI,CAAC;EACzF;EAEAC,OAAO,GAAG;IACR,IAAI,CAACC,YAAY,CAAC,IAAI,CAACC,OAAO,EAAE,qBAAqB,CAAC;IACtD,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,IAAI,CAACC,mBAAmB,EAAE;MAC1B,IAAI,CAACD,YAAY,CAACE,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACV,kCAAkC,CAAC;IACjF;EACF;;EAEA;EACAS,mBAAmB,GAAG;IACpB,IAAI,CAACD,YAAY,CAACG,MAAM,EAAE;IAC1B,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACJ,YAAY,CAACK,UAAU,CAAC;EAC7C;EAEAC,mBAAmB,GAAG;IACpB,IAAI,CAACN,YAAY,CAACO,MAAM,EAAE;IAC1B,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAf,6BAA6B,CAACgB,KAAK,EAAE;IACnC,IAAIA,KAAK,CAACC,YAAY,KAAK,cAAc,EAAE;MACzC,IAAID,KAAK,CAACE,QAAQ,EAAE;QAClB,IAAI,CAACC,QAAQ,CAACH,KAAK,CAACE,QAAQ,CAACE,GAAG,CAAC;MACnC,CAAC,MAAM,IAAI,IAAI,CAACb,YAAY,CAACc,YAAY,IAAI,IAAI,CAACd,YAAY,CAACc,YAAY,CAACC,EAAE,EAAE;QAC9E,IAAI,CAACH,QAAQ,CAAC,IAAI,CAACZ,YAAY,CAACc,YAAY,CAACC,EAAE,CAAC;MAClD,CAAC,MAAM;QACL,IAAI,CAACH,QAAQ,CAAC,IAAI,CAAC;MACrB;IACF;EACF;AACF"},"metadata":{},"sourceType":"module"}