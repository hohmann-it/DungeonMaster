{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { numbers, Range, scout } from '../index';\nimport $ from 'jquery';\nexport default class VirtualScrolling {\n  constructor(options) {\n    this.enabled = true;\n    this.minRowHeight = 0;\n    this.scrollHandler = null;\n    this.viewRangeSize = new Range();\n    this.widget = null;\n    this.$scrollable = null;\n    $.extend(this, options);\n  }\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  set$Scrollable($scrollable) {\n    if (this.$scrollable === $scrollable) {\n      return;\n    }\n    this.$scrollable = $scrollable;\n  }\n  setMinRowHeight(minRowHeight) {\n    if (this.minRowHeight === minRowHeight) {\n      return;\n    }\n    if (!numbers.isNumber(minRowHeight)) {\n      throw new Error('minRowHeight is not a number: ' + minRowHeight);\n    }\n    this.minRowHeight = minRowHeight;\n    if (this.widget.rendered) {\n      this.setViewRangeSize(this.calculateViewRangeSize());\n    }\n  }\n  setViewRangeSize(viewRangeSize, updateViewPort) {\n    if (this.viewRangeSize === viewRangeSize) {\n      return;\n    }\n    this.viewRangeSize = viewRangeSize;\n    if (this.widget.rendered && scout.nvl(updateViewPort, true)) {\n      this._renderViewPort();\n    }\n  }\n\n  /**\n   * Calculates the optimal view range size (number of rows to be rendered).\n   * It uses the default row height to estimate how many rows fit in the view port.\n   * The view range size is this value * 2.\n   */\n  calculateViewRangeSize() {\n    if (!this.enabled || this.$scrollable.length === 0) {\n      return this.rowCount();\n    }\n    if (this.minRowHeight === 0) {\n      throw new Error('Cannot calculate view range with rowHeight = 0');\n    }\n    return Math.ceil(this.$scrollable.height() / this.minRowHeight) * 2;\n  }\n  calculateCurrentViewRange() {\n    if (!this.enabled) {\n      return this.maxViewRange();\n    }\n    if (this.viewRangeSize === 0) {\n      return new Range(0, 0);\n    }\n    let rowIndex;\n    if (this.$scrollable.length === 0) {\n      return this.maxViewRange();\n    }\n    let scrollTop = this.$scrollable[0].scrollTop;\n    let maxScrollTop = this.$scrollable[0].scrollHeight - this.$scrollable[0].clientHeight;\n    let widgetBounds = this.widget.$container[0].getBoundingClientRect();\n    let scrollableBounds = this.$scrollable[0].getBoundingClientRect();\n    if (widgetBounds.height > 0 && (widgetBounds.bottom < scrollableBounds.top || widgetBounds.top > scrollableBounds.bottom)) {\n      // If widget is not in the view port, no need to draw any row\n      return new Range(0, 0);\n    }\n    if (maxScrollTop === 0) {\n      // no scrollbars visible\n      rowIndex = 0;\n    } else {\n      rowIndex = this._rowIndexAtScrollTop(scrollTop);\n    }\n    return this.calculateViewRangeForRowIndex(rowIndex);\n  }\n  maxViewRange() {\n    return new Range(0, this.rowCount());\n  }\n\n  /**\n   * Returns a range of size this.viewRangeSize. Start of range is rowIndex - viewRangeSize / 4.\n   * -> 1/4 of the rows are before the viewport 2/4 in the viewport 1/4 after the viewport,\n   * assuming viewRangeSize is 2*number of possible rows in the viewport (see calculateViewRangeSize).\n   */\n  calculateViewRangeForRowIndex(rowIndex) {\n    if (!this.enabled) {\n      return this.maxViewRange();\n    }\n    let viewRange = new Range(),\n      quarterRange = Math.floor(this.viewRangeSize / 4),\n      diff;\n    viewRange.from = Math.max(rowIndex - quarterRange, 0);\n    viewRange.to = Math.min(viewRange.from + this.viewRangeSize, this.rowCount());\n\n    // Try to use the whole viewRangeSize (extend from if necessary)\n    diff = this.viewRangeSize - viewRange.size();\n    if (diff > 0) {\n      viewRange.from = Math.max(viewRange.to - this.viewRangeSize, 0);\n    }\n    return viewRange;\n  }\n\n  /**\n   * Returns the index of the row which is at position scrollTop.\n   */\n  _rowIndexAtScrollTop(scrollTop) {\n    let height = 0,\n      rowCount = this.rowCount(),\n      index = rowCount - 1;\n    if (this.widget.$container[0] !== this.$scrollable[0]) {\n      // If container itself is not scrollable but a parent, height must not start at 0\n      height = scrollTop + (this.widget.$container.offset().top - this.$scrollable.offset().top);\n    }\n    for (let row = 0; row < rowCount; row++) {\n      height += this.rowHeight(row);\n      if (scrollTop < height) {\n        index = row;\n        break;\n      }\n    }\n    return index;\n  }\n  rowHeight(row) {\n    throw new Error('Function has to be provided by widget');\n  }\n\n  /**\n   * @returns {number}\n   */\n  rowCount() {\n    throw new Error('Function has to be provided by widget');\n  }\n\n  /**\n   * Calculates and renders the rows which should be visible in the current viewport based on scroll top.\n   */\n  _renderViewPort() {\n    let viewRange = this.calculateCurrentViewRange();\n    this._renderViewRange(viewRange);\n  }\n  _renderViewRangeForRowIndex(rowIndex) {\n    let viewRange = this.calculateViewRangeForRowIndex(rowIndex);\n    this._renderViewRange(viewRange);\n  }\n\n  /**\n   * Renders the rows visible in the viewport and removes the other rows\n   */\n  _renderViewRange(viewRange) {\n    throw new Error('Function has to be provided by widget');\n  }\n}","map":{"version":3,"names":["numbers","Range","scout","$","VirtualScrolling","constructor","options","enabled","minRowHeight","scrollHandler","viewRangeSize","widget","$scrollable","extend","setEnabled","set$Scrollable","setMinRowHeight","isNumber","Error","rendered","setViewRangeSize","calculateViewRangeSize","updateViewPort","nvl","_renderViewPort","length","rowCount","Math","ceil","height","calculateCurrentViewRange","maxViewRange","rowIndex","scrollTop","maxScrollTop","scrollHeight","clientHeight","widgetBounds","$container","getBoundingClientRect","scrollableBounds","bottom","top","_rowIndexAtScrollTop","calculateViewRangeForRowIndex","viewRange","quarterRange","floor","diff","from","max","to","min","size","index","offset","row","rowHeight","_renderViewRange","_renderViewRangeForRowIndex"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/scrollbar/VirtualScrolling.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {numbers, Range, scout} from '../index';\nimport $ from 'jquery';\n\nexport default class VirtualScrolling {\n\n  constructor(options) {\n    this.enabled = true;\n    this.minRowHeight = 0;\n    this.scrollHandler = null;\n    this.viewRangeSize = new Range();\n    this.widget = null;\n    this.$scrollable = null;\n\n    $.extend(this, options);\n  }\n\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n\n  set$Scrollable($scrollable) {\n    if (this.$scrollable === $scrollable) {\n      return;\n    }\n    this.$scrollable = $scrollable;\n  }\n\n  setMinRowHeight(minRowHeight) {\n    if (this.minRowHeight === minRowHeight) {\n      return;\n    }\n    if (!numbers.isNumber(minRowHeight)) {\n      throw new Error('minRowHeight is not a number: ' + minRowHeight);\n    }\n    this.minRowHeight = minRowHeight;\n    if (this.widget.rendered) {\n      this.setViewRangeSize(this.calculateViewRangeSize());\n    }\n  }\n\n  setViewRangeSize(viewRangeSize, updateViewPort) {\n    if (this.viewRangeSize === viewRangeSize) {\n      return;\n    }\n    this.viewRangeSize = viewRangeSize;\n    if (this.widget.rendered && scout.nvl(updateViewPort, true)) {\n      this._renderViewPort();\n    }\n  }\n\n  /**\n   * Calculates the optimal view range size (number of rows to be rendered).\n   * It uses the default row height to estimate how many rows fit in the view port.\n   * The view range size is this value * 2.\n   */\n  calculateViewRangeSize() {\n    if (!this.enabled || this.$scrollable.length === 0) {\n      return this.rowCount();\n    }\n    if (this.minRowHeight === 0) {\n      throw new Error('Cannot calculate view range with rowHeight = 0');\n    }\n    return Math.ceil(this.$scrollable.height() / this.minRowHeight) * 2;\n  }\n\n  calculateCurrentViewRange() {\n    if (!this.enabled) {\n      return this.maxViewRange();\n    }\n    if (this.viewRangeSize === 0) {\n      return new Range(0, 0);\n    }\n    let rowIndex;\n    if (this.$scrollable.length === 0) {\n      return this.maxViewRange();\n    }\n    let scrollTop = this.$scrollable[0].scrollTop;\n    let maxScrollTop = this.$scrollable[0].scrollHeight - this.$scrollable[0].clientHeight;\n    let widgetBounds = this.widget.$container[0].getBoundingClientRect();\n    let scrollableBounds = this.$scrollable[0].getBoundingClientRect();\n    if (widgetBounds.height > 0 && (\n      widgetBounds.bottom < scrollableBounds.top ||\n      widgetBounds.top > scrollableBounds.bottom)) {\n      // If widget is not in the view port, no need to draw any row\n      return new Range(0, 0);\n    }\n\n    if (maxScrollTop === 0) {\n      // no scrollbars visible\n      rowIndex = 0;\n    } else {\n      rowIndex = this._rowIndexAtScrollTop(scrollTop);\n    }\n\n    return this.calculateViewRangeForRowIndex(rowIndex);\n  }\n\n  maxViewRange() {\n    return new Range(0, this.rowCount());\n  }\n\n  /**\n   * Returns a range of size this.viewRangeSize. Start of range is rowIndex - viewRangeSize / 4.\n   * -> 1/4 of the rows are before the viewport 2/4 in the viewport 1/4 after the viewport,\n   * assuming viewRangeSize is 2*number of possible rows in the viewport (see calculateViewRangeSize).\n   */\n  calculateViewRangeForRowIndex(rowIndex) {\n    if (!this.enabled) {\n      return this.maxViewRange();\n    }\n\n    let viewRange = new Range(),\n      quarterRange = Math.floor(this.viewRangeSize / 4),\n      diff;\n\n    viewRange.from = Math.max(rowIndex - quarterRange, 0);\n    viewRange.to = Math.min(viewRange.from + this.viewRangeSize, this.rowCount());\n\n    // Try to use the whole viewRangeSize (extend from if necessary)\n    diff = this.viewRangeSize - viewRange.size();\n    if (diff > 0) {\n      viewRange.from = Math.max(viewRange.to - this.viewRangeSize, 0);\n    }\n    return viewRange;\n  }\n\n  /**\n   * Returns the index of the row which is at position scrollTop.\n   */\n  _rowIndexAtScrollTop(scrollTop) {\n    let height = 0,\n      rowCount = this.rowCount(),\n      index = rowCount - 1;\n\n    if (this.widget.$container[0] !== this.$scrollable[0]) {\n      // If container itself is not scrollable but a parent, height must not start at 0\n      height = scrollTop + (this.widget.$container.offset().top - this.$scrollable.offset().top);\n    }\n\n    for (let row = 0; row < rowCount; row++) {\n      height += this.rowHeight(row);\n      if (scrollTop < height) {\n        index = row;\n        break;\n      }\n    }\n    return index;\n  }\n\n  rowHeight(row) {\n    throw new Error('Function has to be provided by widget');\n  }\n\n  /**\n   * @returns {number}\n   */\n  rowCount() {\n    throw new Error('Function has to be provided by widget');\n  }\n\n  /**\n   * Calculates and renders the rows which should be visible in the current viewport based on scroll top.\n   */\n  _renderViewPort() {\n    let viewRange = this.calculateCurrentViewRange();\n    this._renderViewRange(viewRange);\n  }\n\n  _renderViewRangeForRowIndex(rowIndex) {\n    let viewRange = this.calculateViewRangeForRowIndex(rowIndex);\n    this._renderViewRange(viewRange);\n  }\n\n  /**\n   * Renders the rows visible in the viewport and removes the other rows\n   */\n  _renderViewRange(viewRange) {\n    throw new Error('Function has to be provided by widget');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}