{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HorizontalGrid, TileGridSelectionHandler } from '../../index';\nexport default class TileAccordionSelectionHandler extends TileGridSelectionHandler {\n  constructor(tileAccordion) {\n    super(tileAccordion);\n    // The difference to the main selectionHandler is that this one works on the TileAccordion rather than on the TileGrid\n    this.tileAccordion = this.tileGrid;\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTiles() {\n    return this.tileAccordion.getFilteredTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTileCount() {\n    return this.tileAccordion.getFilteredTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTiles() {\n    return this.tileAccordion.getVisibleTiles();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTileCount() {\n    return this.tileAccordion.getVisibleTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getSelectedTiles(event) {\n    return this.tileAccordion.getSelectedTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFocusedTile() {\n    return this.tileAccordion.getFocusedTile();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridRowCount() {\n    return this.tileAccordion.getVisibleGridRowCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridX(tile) {\n    return this.tileAccordion.getVisibleGridX(tile);\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridY(tile) {\n    return this.tileAccordion.getVisibleGridY(tile);\n  }\n\n  /**\n   * @override\n   */\n  scrollTo(tile) {\n    let group = this.tileAccordion.getGroupByTile(tile);\n    group.body.scrollTo(tile);\n  }\n\n  /**\n   * @override\n   */\n  getTileGridByRow(rowIndex) {\n    let group = this.tileAccordion.getGroupByVisibleRow(rowIndex);\n    if (group) {\n      return group.body;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  findVisibleTileIndexAt(x, y, startIndex, reverse) {\n    return this.tileAccordion.findVisibleTileIndexAt(x, y, startIndex, reverse);\n  }\n\n  /**\n   * @override\n   */\n  isHorizontalGridActive() {\n    if (this.tileAccordion.groups.length === 0) {\n      return false;\n    }\n    return this.tileAccordion.groups[0].body.logicalGrid instanceof HorizontalGrid;\n  }\n}","map":{"version":3,"names":["HorizontalGrid","TileGridSelectionHandler","TileAccordionSelectionHandler","constructor","tileAccordion","tileGrid","getFilteredTiles","getFilteredTileCount","getVisibleTiles","getVisibleTileCount","getSelectedTiles","event","getFocusedTile","getVisibleGridRowCount","getVisibleGridX","tile","getVisibleGridY","scrollTo","group","getGroupByTile","body","getTileGridByRow","rowIndex","getGroupByVisibleRow","findVisibleTileIndexAt","x","y","startIndex","reverse","isHorizontalGridActive","groups","length","logicalGrid"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/accordion/TileAccordionSelectionHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HorizontalGrid, TileGridSelectionHandler} from '../../index';\n\nexport default class TileAccordionSelectionHandler extends TileGridSelectionHandler {\n\n  constructor(tileAccordion) {\n    super(tileAccordion);\n    // The difference to the main selectionHandler is that this one works on the TileAccordion rather than on the TileGrid\n    this.tileAccordion = this.tileGrid;\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTiles() {\n    return this.tileAccordion.getFilteredTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFilteredTileCount() {\n    return this.tileAccordion.getFilteredTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTiles() {\n    return this.tileAccordion.getVisibleTiles();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleTileCount() {\n    return this.tileAccordion.getVisibleTileCount();\n  }\n\n  /**\n   * @override\n   */\n  getSelectedTiles(event) {\n    return this.tileAccordion.getSelectedTiles();\n  }\n\n  /**\n   * @override\n   */\n  getFocusedTile() {\n    return this.tileAccordion.getFocusedTile();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridRowCount() {\n    return this.tileAccordion.getVisibleGridRowCount();\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridX(tile) {\n    return this.tileAccordion.getVisibleGridX(tile);\n  }\n\n  /**\n   * @override\n   */\n  getVisibleGridY(tile) {\n    return this.tileAccordion.getVisibleGridY(tile);\n  }\n\n  /**\n   * @override\n   */\n  scrollTo(tile) {\n    let group = this.tileAccordion.getGroupByTile(tile);\n    group.body.scrollTo(tile);\n  }\n\n  /**\n   * @override\n   */\n  getTileGridByRow(rowIndex) {\n    let group = this.tileAccordion.getGroupByVisibleRow(rowIndex);\n    if (group) {\n      return group.body;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  findVisibleTileIndexAt(x, y, startIndex, reverse) {\n    return this.tileAccordion.findVisibleTileIndexAt(x, y, startIndex, reverse);\n  }\n\n  /**\n   * @override\n   */\n  isHorizontalGridActive() {\n    if (this.tileAccordion.groups.length === 0) {\n      return false;\n    }\n    return this.tileAccordion.groups[0].body.logicalGrid instanceof HorizontalGrid;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAc,EAAEC,wBAAwB,QAAO,aAAa;AAEpE,eAAe,MAAMC,6BAA6B,SAASD,wBAAwB,CAAC;EAElFE,WAAW,CAACC,aAAa,EAAE;IACzB,KAAK,CAACA,aAAa,CAAC;IACpB;IACA,IAAI,CAACA,aAAa,GAAG,IAAI,CAACC,QAAQ;EACpC;;EAEA;AACF;AACA;EACEC,gBAAgB,GAAG;IACjB,OAAO,IAAI,CAACF,aAAa,CAACE,gBAAgB,EAAE;EAC9C;;EAEA;AACF;AACA;EACEC,oBAAoB,GAAG;IACrB,OAAO,IAAI,CAACH,aAAa,CAACG,oBAAoB,EAAE;EAClD;;EAEA;AACF;AACA;EACEC,eAAe,GAAG;IAChB,OAAO,IAAI,CAACJ,aAAa,CAACI,eAAe,EAAE;EAC7C;;EAEA;AACF;AACA;EACEC,mBAAmB,GAAG;IACpB,OAAO,IAAI,CAACL,aAAa,CAACK,mBAAmB,EAAE;EACjD;;EAEA;AACF;AACA;EACEC,gBAAgB,CAACC,KAAK,EAAE;IACtB,OAAO,IAAI,CAACP,aAAa,CAACM,gBAAgB,EAAE;EAC9C;;EAEA;AACF;AACA;EACEE,cAAc,GAAG;IACf,OAAO,IAAI,CAACR,aAAa,CAACQ,cAAc,EAAE;EAC5C;;EAEA;AACF;AACA;EACEC,sBAAsB,GAAG;IACvB,OAAO,IAAI,CAACT,aAAa,CAACS,sBAAsB,EAAE;EACpD;;EAEA;AACF;AACA;EACEC,eAAe,CAACC,IAAI,EAAE;IACpB,OAAO,IAAI,CAACX,aAAa,CAACU,eAAe,CAACC,IAAI,CAAC;EACjD;;EAEA;AACF;AACA;EACEC,eAAe,CAACD,IAAI,EAAE;IACpB,OAAO,IAAI,CAACX,aAAa,CAACY,eAAe,CAACD,IAAI,CAAC;EACjD;;EAEA;AACF;AACA;EACEE,QAAQ,CAACF,IAAI,EAAE;IACb,IAAIG,KAAK,GAAG,IAAI,CAACd,aAAa,CAACe,cAAc,CAACJ,IAAI,CAAC;IACnDG,KAAK,CAACE,IAAI,CAACH,QAAQ,CAACF,IAAI,CAAC;EAC3B;;EAEA;AACF;AACA;EACEM,gBAAgB,CAACC,QAAQ,EAAE;IACzB,IAAIJ,KAAK,GAAG,IAAI,CAACd,aAAa,CAACmB,oBAAoB,CAACD,QAAQ,CAAC;IAC7D,IAAIJ,KAAK,EAAE;MACT,OAAOA,KAAK,CAACE,IAAI;IACnB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEI,sBAAsB,CAACC,CAAC,EAAEC,CAAC,EAAEC,UAAU,EAAEC,OAAO,EAAE;IAChD,OAAO,IAAI,CAACxB,aAAa,CAACoB,sBAAsB,CAACC,CAAC,EAAEC,CAAC,EAAEC,UAAU,EAAEC,OAAO,CAAC;EAC7E;;EAEA;AACF;AACA;EACEC,sBAAsB,GAAG;IACvB,IAAI,IAAI,CAACzB,aAAa,CAAC0B,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1C,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAAC3B,aAAa,CAAC0B,MAAM,CAAC,CAAC,CAAC,CAACV,IAAI,CAACY,WAAW,YAAYhC,cAAc;EAChF;AACF"},"metadata":{},"sourceType":"module"}