{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { FormMenu } from '../../index';\nexport default class TableControlAdapterMenu extends FormMenu {\n  constructor() {\n    super();\n    this.tableControl = null;\n    this._tableControlPropertyChangeHandler = this._onTableControlPropertyChange.bind(this);\n    this._tableControlDestroyHandler = this._onTableControlDestroy.bind(this);\n    this._addCloneProperties(['tableControl']);\n  }\n\n  /**\n   * @override Action.js\n   */\n  _init(model) {\n    super._init(model);\n    if (!this.tableControl) {\n      throw new Error('Cannot adapt to undefined tableControl');\n    }\n    this._installListeners();\n  }\n  _destroy() {\n    this._uninstallListeners();\n    super._destroy();\n  }\n  _installListeners() {\n    this.tableControl.on('propertyChange', this._tableControlPropertyChangeHandler);\n    this.tableControl.on('destroy', this._tableControlDestroyHandler);\n  }\n  _uninstallListeners() {\n    this.tableControl.off('propertyChange', this._tableControlPropertyChangeHandler);\n    this.tableControl.off('destroy', this._tableControlDestroyHandler);\n  }\n  _render() {\n    super._render();\n    // Convenience: Add ID of original tableControl to DOM for debugging purposes\n    this.$container.attr('data-tableControlAdapter', this.tableControl.id);\n  }\n  _onTableControlPropertyChange(event) {\n    // Whenever a tableControl property changes, apply the changes to the menu\n    let changedProperties = {};\n    changedProperties[event.propertyName] = event.newValue;\n    changedProperties = TableControlAdapterMenu.adaptTableControlProperties(changedProperties);\n    for (let prop in changedProperties) {\n      // NOSONAR\n      // Set the property (don't use callSetter because this may delegate to the table control)\n      this.setProperty(prop, changedProperties[prop]);\n    }\n  }\n  _onTableControlDestroy(event) {\n    this.destroy();\n    this._uninstallListeners();\n  }\n\n  /**\n   * @override Action.js\n   */\n  doAction() {\n    return this.tableControl.doAction();\n  }\n\n  /**\n   * @override Action.js\n   */\n  setSelected(selected) {\n    this.tableControl.setSelected(selected);\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @memberOf TableControlAdapterMenu\n   */\n  static adaptTableControlProperties(tableControlProperties, menuProperties) {\n    menuProperties = menuProperties || {};\n\n    // Plain properties: simply copy, no translation required\n    ['text', 'iconId', 'enabled', 'visible', 'selected', 'tooltipText', 'keyStroke', 'keyStrokes', 'modelClass', 'classId', 'form'].forEach(prop => {\n      menuProperties[prop] = tableControlProperties[prop];\n    });\n\n    // Cleanup: Remove all properties that have value 'undefined' from the result object,\n    // otherwise, they would be applied to the model adapter.\n    for (let prop in menuProperties) {\n      if (menuProperties[prop] === undefined) {\n        delete menuProperties[prop];\n      }\n    }\n    return menuProperties;\n  }\n}","map":{"version":3,"names":["FormMenu","TableControlAdapterMenu","constructor","tableControl","_tableControlPropertyChangeHandler","_onTableControlPropertyChange","bind","_tableControlDestroyHandler","_onTableControlDestroy","_addCloneProperties","_init","model","Error","_installListeners","_destroy","_uninstallListeners","on","off","_render","$container","attr","id","event","changedProperties","propertyName","newValue","adaptTableControlProperties","prop","setProperty","destroy","doAction","setSelected","selected","tableControlProperties","menuProperties","forEach","undefined"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/controls/TableControlAdapterMenu.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {FormMenu} from '../../index';\n\nexport default class TableControlAdapterMenu extends FormMenu {\n\n  constructor() {\n    super();\n\n    this.tableControl = null;\n    this._tableControlPropertyChangeHandler = this._onTableControlPropertyChange.bind(this);\n    this._tableControlDestroyHandler = this._onTableControlDestroy.bind(this);\n\n    this._addCloneProperties(['tableControl']);\n  }\n\n  /**\n   * @override Action.js\n   */\n  _init(model) {\n    super._init(model);\n    if (!this.tableControl) {\n      throw new Error('Cannot adapt to undefined tableControl');\n    }\n    this._installListeners();\n  }\n\n  _destroy() {\n    this._uninstallListeners();\n    super._destroy();\n  }\n\n  _installListeners() {\n    this.tableControl.on('propertyChange', this._tableControlPropertyChangeHandler);\n    this.tableControl.on('destroy', this._tableControlDestroyHandler);\n  }\n\n  _uninstallListeners() {\n    this.tableControl.off('propertyChange', this._tableControlPropertyChangeHandler);\n    this.tableControl.off('destroy', this._tableControlDestroyHandler);\n  }\n\n  _render() {\n    super._render();\n    // Convenience: Add ID of original tableControl to DOM for debugging purposes\n    this.$container.attr('data-tableControlAdapter', this.tableControl.id);\n  }\n\n  _onTableControlPropertyChange(event) {\n    // Whenever a tableControl property changes, apply the changes to the menu\n    let changedProperties = {};\n    changedProperties[event.propertyName] = event.newValue;\n    changedProperties = TableControlAdapterMenu.adaptTableControlProperties(changedProperties);\n    for (let prop in changedProperties) { // NOSONAR\n      // Set the property (don't use callSetter because this may delegate to the table control)\n      this.setProperty(prop, changedProperties[prop]);\n    }\n  }\n\n  _onTableControlDestroy(event) {\n    this.destroy();\n    this._uninstallListeners();\n  }\n\n  /**\n   * @override Action.js\n   */\n  doAction() {\n    return this.tableControl.doAction();\n  }\n\n  /**\n   * @override Action.js\n   */\n  setSelected(selected) {\n    this.tableControl.setSelected(selected);\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @memberOf TableControlAdapterMenu\n   */\n  static adaptTableControlProperties(tableControlProperties, menuProperties) {\n    menuProperties = menuProperties || {};\n\n    // Plain properties: simply copy, no translation required\n    ['text', 'iconId', 'enabled', 'visible', 'selected', 'tooltipText', 'keyStroke', 'keyStrokes', 'modelClass', 'classId', 'form'].forEach(prop => {\n      menuProperties[prop] = tableControlProperties[prop];\n    });\n\n    // Cleanup: Remove all properties that have value 'undefined' from the result object,\n    // otherwise, they would be applied to the model adapter.\n    for (let prop in menuProperties) {\n      if (menuProperties[prop] === undefined) {\n        delete menuProperties[prop];\n      }\n    }\n    return menuProperties;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}