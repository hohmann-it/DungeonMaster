{"ast":null,"code":"/*\n * Copyright (c) 2014-2015 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout } from '../index';\n\n/**\n * Simple helper to determine if two consecutive 'mousedown' events should be considered as a double click.\n *\n * How to use:\n * 1. Feed all mousedown events to the mousedown() method.\n * 2. The method doubleClicked() returns true if the two last added events happened so fast after\n *    each other that hey should be considered a 'double click'. If the distance or interval between\n *    the last two events is too large, false is returned.\n *\n * Options:\n * [maxDoubleClickInterval, default=500]\n *   Maximum time in milliseconds between two consecutive mousedown events to consider as a double\n *   click event. If the interval is larger than this value, doubleClicked() will return false.\n * [maxDoubleClickDistance, default=10]\n *   Maximum distance (in both directions) between two consecutive mousedown events to consider as\n *   a double click event. If the distance is larger than this value, doubleClicked() will return false.\n */\nexport default class DoubleClickSupport {\n  /**\n   * @param {object} [options]\n   * @param options.maxDoubleClickInterval default 500ms\n   * @param options.maxDoubleClickDistance default 10px\n   */\n  constructor(options) {\n    options = options || {};\n    this._lastPosX = null;\n    this._lastPosY = null;\n    this._lastTimestamp = null;\n    this._maxDoubleClickInterval = options.maxDoubleClickInterval || 500; // ms\n    this._maxDoubleClickDistance = options.maxDoubleClickDistance || 10; // px\n    this._doubleClicked = false;\n  }\n  mousedown(event) {\n    if (event && event.type === 'mousedown') {\n      let posX = scout.nvl(event.pageX, 0);\n      let posY = scout.nvl(event.pageY, 0);\n      let timestamp = Date.now();\n      let isDoubleClick = false;\n      if (this._lastTimestamp !== undefined) {\n        let interval = timestamp - this._lastTimestamp;\n        if (interval <= this._maxDoubleClickInterval) {\n          let distance = Math.max(Math.abs(posX - this._lastPosX), Math.abs(posY - this._lastPosY));\n          if (distance <= this._maxDoubleClickDistance) {\n            // Double click detected\n            isDoubleClick = true;\n          }\n        }\n      }\n      this._lastPosX = posX;\n      this._lastPosY = posY;\n      this._lastTimestamp = timestamp;\n      this._doubleClicked = isDoubleClick;\n    }\n  }\n  doubleClicked() {\n    return this._doubleClicked;\n  }\n}","map":{"version":3,"names":["scout","DoubleClickSupport","constructor","options","_lastPosX","_lastPosY","_lastTimestamp","_maxDoubleClickInterval","maxDoubleClickInterval","_maxDoubleClickDistance","maxDoubleClickDistance","_doubleClicked","mousedown","event","type","posX","nvl","pageX","posY","pageY","timestamp","Date","now","isDoubleClick","undefined","interval","distance","Math","max","abs","doubleClicked"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/DoubleClickSupport.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2015 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout} from '../index';\n\n/**\n * Simple helper to determine if two consecutive 'mousedown' events should be considered as a double click.\n *\n * How to use:\n * 1. Feed all mousedown events to the mousedown() method.\n * 2. The method doubleClicked() returns true if the two last added events happened so fast after\n *    each other that hey should be considered a 'double click'. If the distance or interval between\n *    the last two events is too large, false is returned.\n *\n * Options:\n * [maxDoubleClickInterval, default=500]\n *   Maximum time in milliseconds between two consecutive mousedown events to consider as a double\n *   click event. If the interval is larger than this value, doubleClicked() will return false.\n * [maxDoubleClickDistance, default=10]\n *   Maximum distance (in both directions) between two consecutive mousedown events to consider as\n *   a double click event. If the distance is larger than this value, doubleClicked() will return false.\n */\nexport default class DoubleClickSupport {\n\n  /**\n   * @param {object} [options]\n   * @param options.maxDoubleClickInterval default 500ms\n   * @param options.maxDoubleClickDistance default 10px\n   */\n  constructor(options) {\n    options = options || {};\n\n    this._lastPosX = null;\n    this._lastPosY = null;\n    this._lastTimestamp = null;\n\n    this._maxDoubleClickInterval = options.maxDoubleClickInterval || 500; // ms\n    this._maxDoubleClickDistance = options.maxDoubleClickDistance || 10; // px\n    this._doubleClicked = false;\n  }\n\n  mousedown(event) {\n    if (event && event.type === 'mousedown') {\n      let posX = scout.nvl(event.pageX, 0);\n      let posY = scout.nvl(event.pageY, 0);\n      let timestamp = Date.now();\n      let isDoubleClick = false;\n      if (this._lastTimestamp !== undefined) {\n        let interval = timestamp - this._lastTimestamp;\n        if (interval <= this._maxDoubleClickInterval) {\n          let distance = Math.max(Math.abs(posX - this._lastPosX), Math.abs(posY - this._lastPosY));\n          if (distance <= this._maxDoubleClickDistance) {\n            // Double click detected\n            isDoubleClick = true;\n          }\n        }\n      }\n      this._lastPosX = posX;\n      this._lastPosY = posY;\n      this._lastTimestamp = timestamp;\n      this._doubleClicked = isDoubleClick;\n    }\n  }\n\n  doubleClicked() {\n    return this._doubleClicked;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAK,QAAO,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,kBAAkB,CAAC;EAEtC;AACF;AACA;AACA;AACA;EACEC,WAAW,CAACC,OAAO,EAAE;IACnBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAEvB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,cAAc,GAAG,IAAI;IAE1B,IAAI,CAACC,uBAAuB,GAAGJ,OAAO,CAACK,sBAAsB,IAAI,GAAG,CAAC,CAAC;IACtE,IAAI,CAACC,uBAAuB,GAAGN,OAAO,CAACO,sBAAsB,IAAI,EAAE,CAAC,CAAC;IACrE,IAAI,CAACC,cAAc,GAAG,KAAK;EAC7B;EAEAC,SAAS,CAACC,KAAK,EAAE;IACf,IAAIA,KAAK,IAAIA,KAAK,CAACC,IAAI,KAAK,WAAW,EAAE;MACvC,IAAIC,IAAI,GAAGf,KAAK,CAACgB,GAAG,CAACH,KAAK,CAACI,KAAK,EAAE,CAAC,CAAC;MACpC,IAAIC,IAAI,GAAGlB,KAAK,CAACgB,GAAG,CAACH,KAAK,CAACM,KAAK,EAAE,CAAC,CAAC;MACpC,IAAIC,SAAS,GAAGC,IAAI,CAACC,GAAG,EAAE;MAC1B,IAAIC,aAAa,GAAG,KAAK;MACzB,IAAI,IAAI,CAACjB,cAAc,KAAKkB,SAAS,EAAE;QACrC,IAAIC,QAAQ,GAAGL,SAAS,GAAG,IAAI,CAACd,cAAc;QAC9C,IAAImB,QAAQ,IAAI,IAAI,CAAClB,uBAAuB,EAAE;UAC5C,IAAImB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACd,IAAI,GAAG,IAAI,CAACX,SAAS,CAAC,EAAEuB,IAAI,CAACE,GAAG,CAACX,IAAI,GAAG,IAAI,CAACb,SAAS,CAAC,CAAC;UACzF,IAAIqB,QAAQ,IAAI,IAAI,CAACjB,uBAAuB,EAAE;YAC5C;YACAc,aAAa,GAAG,IAAI;UACtB;QACF;MACF;MACA,IAAI,CAACnB,SAAS,GAAGW,IAAI;MACrB,IAAI,CAACV,SAAS,GAAGa,IAAI;MACrB,IAAI,CAACZ,cAAc,GAAGc,SAAS;MAC/B,IAAI,CAACT,cAAc,GAAGY,aAAa;IACrC;EACF;EAEAO,aAAa,GAAG;IACd,OAAO,IAAI,CAACnB,cAAc;EAC5B;AACF"},"metadata":{},"sourceType":"module"}