{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Action, arrays, KeyStroke, keyStrokeModifier, objects, scout } from '../index';\nimport $ from 'jquery';\nexport default class KeyStrokeContext {\n  constructor(options) {\n    /*\n     * Holds the target where to bind this context as keydown listener.\n     * This can either be a static value or a function to resolve the target.\n     */\n    this.$bindTarget = null;\n    /*\n     * Holds the scope of this context and is used to determine the context's accessibility, meaning not covert by a glasspane.\n     * This can either be a static value or a function to resolve the target.\n     */\n    this.$scopeTarget = null;\n    /*\n     * Holds the keystrokes registered within this context.\n     */\n    this.keyStrokes = [];\n    /*\n     * Array of interceptors to participate in setting 'stop propagation' flags.\n     */\n    this.stopPropagationInterceptors = [];\n\n    /*\n     * Arrays with combinations of keys to prevent from bubbling up in the DOM tree.\n     */\n    this._stopPropagationKeys = {};\n\n    /*\n     * Indicates whether to invoke 'acceptInput' on a currently focused value field prior handling the keystroke.\n     */\n    this.invokeAcceptInputOnActiveValueField = false;\n    options = options || {};\n    $.extend(this, options);\n  }\n\n  /**\n   * Registers the given keys as 'stopPropagation' keys, meaning that any keystroke event with that key and matching the modifier bit mask is prevented from bubbling the DOM tree up.\n   *\n   * @param {number} modifierBitMask bitwise OR'ing together modifier constants to match a keystroke event. (KeyStrokeModifier.js)\n   * @param {[number]} keys the keys to match a keystroke event.\n   */\n  registerStopPropagationKeys(modifierBitMask, keys) {\n    this._stopPropagationKeys[modifierBitMask] = this._stopPropagationKeys[modifierBitMask] || [];\n    arrays.pushAll(this._stopPropagationKeys[modifierBitMask], keys);\n  }\n\n  /**\n   * Unregisters the given keys as 'stopPropagation' keys.\n   *\n   * @param {number} modifierBitMask bitwise OR'ing together modifier constants to match a keystroke event. (KeyStrokeModifier.js)\n   * @param {[number]} keys the keys to match a keystroke event.\n   */\n  unregisterStopPropagationKeys(modifierBitMask, keys) {\n    if (!this._stopPropagationKeys[modifierBitMask]) {\n      return;\n    }\n    arrays.removeAll(this._stopPropagationKeys[modifierBitMask], keys);\n  }\n\n  /**\n   * Use this method to register an interceptor to set propagation flags on context level.\n   */\n  registerStopPropagationInterceptor(interceptor) {\n    this.stopPropagationInterceptors.push(interceptor);\n  }\n\n  /**\n   * Returns true if this event is handled by this context, and if so sets the propagation flags accordingly.\n   */\n  accept(event) {\n    // Check whether this event is accepted.\n    if (!this._accept(event)) {\n      return false;\n    }\n\n    // Apply propagation flags to the event.\n    this._applyPropagationFlags(event);\n    return true;\n  }\n\n  /**\n   * Sets the propagation flags to the given event.\n   */\n  _applyPropagationFlags(event) {\n    let modifierBitMask = keyStrokeModifier.toModifierBitMask(event);\n    let keys = this._stopPropagationKeys[modifierBitMask];\n    if (keys && scout.isOneOf(event.which, keys)) {\n      event.stopPropagation();\n    }\n\n    // Let registered interceptors participate.\n    this.stopPropagationInterceptors.forEach(interceptor => {\n      interceptor(event);\n    }, this);\n  }\n  _accept(event) {\n    return true;\n  }\n  registerKeyStroke(keyStroke) {\n    this.registerKeyStrokes(keyStroke);\n  }\n\n  /**\n   * Registers the given keystroke(s) if not installed yet.\n   */\n  registerKeyStrokes(keyStrokes) {\n    arrays.ensure(keyStrokes).map(this._resolveKeyStroke, this).filter(function (ks) {\n      return this.keyStrokes.indexOf(ks) === -1; // must not be registered yet\n    }, this).forEach(function (ks) {\n      this.keyStrokes.push(ks);\n\n      // Registers a destroy listener, so that the keystroke is uninstalled once its field is destroyed.\n      if (ks.field && !ks.destroyListener) {\n        ks.destroyListener = function (event) {\n          this.unregisterKeyStroke(ks);\n          ks.destroyListener = null;\n        }.bind(this);\n        ks.field.one('destroy', ks.destroyListener);\n      }\n    }, this);\n  }\n\n  /**\n   * Uninstalls the given keystroke. Has no effect if not installed.\n   */\n  unregisterKeyStroke(keyStroke) {\n    this.unregisterKeyStrokes(keyStroke);\n  }\n  unregisterKeyStrokes(keyStrokes) {\n    arrays.ensure(keyStrokes).map(this._resolveKeyStroke, this).forEach(function (ks) {\n      if (arrays.remove(this.keyStrokes, ks) && ks.field && ks.destroyListener) {\n        ks.field.off('destroy', ks.destroyListener);\n        ks.destroyListener = null;\n      }\n    }, this);\n  }\n  _resolveKeyStroke(keyStroke) {\n    if (keyStroke instanceof KeyStroke) {\n      return keyStroke;\n    } else if (keyStroke instanceof Action) {\n      return keyStroke.actionKeyStroke;\n    }\n    throw new Error('unsupported keystroke: ' + keyStroke);\n  }\n\n  /**\n   * Returns the $target where to bind this context as keydown listener.\n   */\n  $getBindTarget() {\n    return typeof this.$bindTarget === 'function' ? this.$bindTarget() : this.$bindTarget;\n  }\n\n  /**\n   * Returns the scope of this context and is used to determine the context's accessibility, meaning not covert by a glasspane.\n   */\n  $getScopeTarget() {\n    return typeof this.$scopeTarget === 'function' ? this.$scopeTarget() : this.$scopeTarget;\n  }\n  clone() {\n    return new KeyStrokeContext(objects.copyOwnProperties(this, {}));\n  }\n}","map":{"version":3,"names":["Action","arrays","KeyStroke","keyStrokeModifier","objects","scout","$","KeyStrokeContext","constructor","options","$bindTarget","$scopeTarget","keyStrokes","stopPropagationInterceptors","_stopPropagationKeys","invokeAcceptInputOnActiveValueField","extend","registerStopPropagationKeys","modifierBitMask","keys","pushAll","unregisterStopPropagationKeys","removeAll","registerStopPropagationInterceptor","interceptor","push","accept","event","_accept","_applyPropagationFlags","toModifierBitMask","isOneOf","which","stopPropagation","forEach","registerKeyStroke","keyStroke","registerKeyStrokes","ensure","map","_resolveKeyStroke","filter","ks","indexOf","field","destroyListener","unregisterKeyStroke","bind","one","unregisterKeyStrokes","remove","off","actionKeyStroke","Error","$getBindTarget","$getScopeTarget","clone","copyOwnProperties"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/keystroke/KeyStrokeContext.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Action, arrays, KeyStroke, keyStrokeModifier, objects, scout} from '../index';\nimport $ from 'jquery';\n\nexport default class KeyStrokeContext {\n\n  constructor(options) {\n    /*\n     * Holds the target where to bind this context as keydown listener.\n     * This can either be a static value or a function to resolve the target.\n     */\n    this.$bindTarget = null;\n    /*\n     * Holds the scope of this context and is used to determine the context's accessibility, meaning not covert by a glasspane.\n     * This can either be a static value or a function to resolve the target.\n     */\n    this.$scopeTarget = null;\n    /*\n     * Holds the keystrokes registered within this context.\n     */\n    this.keyStrokes = [];\n    /*\n     * Array of interceptors to participate in setting 'stop propagation' flags.\n     */\n    this.stopPropagationInterceptors = [];\n\n    /*\n     * Arrays with combinations of keys to prevent from bubbling up in the DOM tree.\n     */\n    this._stopPropagationKeys = {};\n\n    /*\n     * Indicates whether to invoke 'acceptInput' on a currently focused value field prior handling the keystroke.\n     */\n    this.invokeAcceptInputOnActiveValueField = false;\n\n    options = options || {};\n    $.extend(this, options);\n  }\n\n  /**\n   * Registers the given keys as 'stopPropagation' keys, meaning that any keystroke event with that key and matching the modifier bit mask is prevented from bubbling the DOM tree up.\n   *\n   * @param {number} modifierBitMask bitwise OR'ing together modifier constants to match a keystroke event. (KeyStrokeModifier.js)\n   * @param {[number]} keys the keys to match a keystroke event.\n   */\n  registerStopPropagationKeys(modifierBitMask, keys) {\n    this._stopPropagationKeys[modifierBitMask] = this._stopPropagationKeys[modifierBitMask] || [];\n    arrays.pushAll(this._stopPropagationKeys[modifierBitMask], keys);\n  }\n\n  /**\n   * Unregisters the given keys as 'stopPropagation' keys.\n   *\n   * @param {number} modifierBitMask bitwise OR'ing together modifier constants to match a keystroke event. (KeyStrokeModifier.js)\n   * @param {[number]} keys the keys to match a keystroke event.\n   */\n  unregisterStopPropagationKeys(modifierBitMask, keys) {\n    if (!this._stopPropagationKeys[modifierBitMask]) {\n      return;\n    }\n    arrays.removeAll(this._stopPropagationKeys[modifierBitMask], keys);\n  }\n\n  /**\n   * Use this method to register an interceptor to set propagation flags on context level.\n   */\n  registerStopPropagationInterceptor(interceptor) {\n    this.stopPropagationInterceptors.push(interceptor);\n  }\n\n  /**\n   * Returns true if this event is handled by this context, and if so sets the propagation flags accordingly.\n   */\n  accept(event) {\n    // Check whether this event is accepted.\n    if (!this._accept(event)) {\n      return false;\n    }\n\n    // Apply propagation flags to the event.\n    this._applyPropagationFlags(event);\n\n    return true;\n  }\n\n  /**\n   * Sets the propagation flags to the given event.\n   */\n  _applyPropagationFlags(event) {\n    let modifierBitMask = keyStrokeModifier.toModifierBitMask(event);\n    let keys = this._stopPropagationKeys[modifierBitMask];\n\n    if (keys && scout.isOneOf(event.which, keys)) {\n      event.stopPropagation();\n    }\n\n    // Let registered interceptors participate.\n    this.stopPropagationInterceptors.forEach(interceptor => {\n      interceptor(event);\n    }, this);\n  }\n\n  _accept(event) {\n    return true;\n  }\n\n  registerKeyStroke(keyStroke) {\n    this.registerKeyStrokes(keyStroke);\n  }\n\n  /**\n   * Registers the given keystroke(s) if not installed yet.\n   */\n  registerKeyStrokes(keyStrokes) {\n    arrays.ensure(keyStrokes)\n      .map(this._resolveKeyStroke, this)\n      .filter(function(ks) {\n        return this.keyStrokes.indexOf(ks) === -1; // must not be registered yet\n      }, this)\n      .forEach(function(ks) {\n        this.keyStrokes.push(ks);\n\n        // Registers a destroy listener, so that the keystroke is uninstalled once its field is destroyed.\n        if (ks.field && !ks.destroyListener) {\n          ks.destroyListener = function(event) {\n            this.unregisterKeyStroke(ks);\n            ks.destroyListener = null;\n          }.bind(this);\n          ks.field.one('destroy', ks.destroyListener);\n        }\n      }, this);\n  }\n\n  /**\n   * Uninstalls the given keystroke. Has no effect if not installed.\n   */\n  unregisterKeyStroke(keyStroke) {\n    this.unregisterKeyStrokes(keyStroke);\n  }\n\n  unregisterKeyStrokes(keyStrokes) {\n    arrays.ensure(keyStrokes)\n      .map(this._resolveKeyStroke, this)\n      .forEach(function(ks) {\n        if (arrays.remove(this.keyStrokes, ks) && ks.field && ks.destroyListener) {\n          ks.field.off('destroy', ks.destroyListener);\n          ks.destroyListener = null;\n        }\n      }, this);\n  }\n\n  _resolveKeyStroke(keyStroke) {\n    if (keyStroke instanceof KeyStroke) {\n      return keyStroke;\n    } else if (keyStroke instanceof Action) {\n      return keyStroke.actionKeyStroke;\n    }\n    throw new Error('unsupported keystroke: ' + keyStroke);\n  }\n\n  /**\n   * Returns the $target where to bind this context as keydown listener.\n   */\n  $getBindTarget() {\n    return (typeof this.$bindTarget === 'function' ? this.$bindTarget() : this.$bindTarget);\n  }\n\n  /**\n   * Returns the scope of this context and is used to determine the context's accessibility, meaning not covert by a glasspane.\n   */\n  $getScopeTarget() {\n    return (typeof this.$scopeTarget === 'function' ? this.$scopeTarget() : this.$scopeTarget);\n  }\n\n  clone() {\n    return new KeyStrokeContext(objects.copyOwnProperties(this, {}));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}