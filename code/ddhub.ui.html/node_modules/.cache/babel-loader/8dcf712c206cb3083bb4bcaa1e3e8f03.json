{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout, TreeVisitResult } from '../index';\nexport default class CodeType {\n  constructor() {\n    this.id;\n    this.codes = [];\n    this.codeMap = {};\n  }\n  init(model) {\n    scout.assertParameter('id', model.id);\n    this.id = model.id;\n    this.modelClass = model.modelClass;\n    if (model.codes) {\n      for (let i = 0; i < model.codes.length; i++) {\n        this._initCode(model.codes[i]);\n      }\n    }\n  }\n  _initCode(modelCode, parent) {\n    let code = scout.create(modelCode);\n    this.add(code, parent);\n    if (modelCode.children) {\n      for (let i = 0; i < modelCode.children.length; i++) {\n        this._initCode(modelCode.children[i], code);\n      }\n    }\n  }\n  add(code, parent) {\n    this.codes.push(code);\n    this.codeMap[code.id] = code;\n    if (parent) {\n      parent.children.push(code);\n      code.parent = parent;\n    }\n  }\n\n  /**\n   * @param codeId\n   * @returns {Code}\n   * @throw {Error) if code does not exist\n   */\n  get(codeId) {\n    let code = this.optGet(codeId);\n    if (!code) {\n      throw new Error('No code found for id=' + codeId);\n    }\n    return code;\n  }\n\n  /**\n   * Same as <code>get</code>, but does not throw an error if the code does not exist.\n   *\n   * @param codeId\n   * @returns {Code} code for the given codeId or undefined if code does not exist\n   */\n  optGet(codeId) {\n    return this.codeMap[codeId];\n  }\n\n  /**\n   * @param {boolean} rootOnly\n   * @returns {Array<string>}\n   */\n  getCodes(rootOnly) {\n    if (rootOnly) {\n      let rootCodes = [];\n      for (let i = 0; i < this.codes.length; i++) {\n        if (!this.codes[i].parent) {\n          rootCodes.push(this.codes[i]);\n        }\n      }\n      return rootCodes;\n    }\n    return this.codes;\n  }\n\n  /**\n   * Visits all codes and theirs children.\n   * <p>\n   * In order to abort visiting, the visitor can return true or TreeVisitResult.TERMINATE.\n   * To only abort the visiting of a sub tree, the visitor can return SKIP_SUBTREE.\n   * </p>\n   * @returns {boolean} true if the visitor aborted the visiting, false if the visiting completed without aborting\n   */\n  visit(visitor) {\n    let codes = this.codes.filter(code => {\n      // Only consider root codes\n      return !code.parent;\n    });\n    for (let i = 0; i < codes.length; i++) {\n      let code = codes[i];\n      let visitResult = visitor(code);\n      if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n        return TreeVisitResult.TERMINATE;\n      }\n      if (visitResult !== TreeVisitResult.SKIP_SUBTREE) {\n        visitResult = code.visitChildren(visitor);\n        if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n          return TreeVisitResult.TERMINATE;\n        }\n      }\n    }\n  }\n  static ensure(codeType) {\n    if (!codeType) {\n      return codeType;\n    }\n    if (codeType instanceof CodeType) {\n      return codeType;\n    }\n    return scout.create('CodeType', codeType);\n  }\n}","map":{"version":3,"names":["scout","TreeVisitResult","CodeType","constructor","id","codes","codeMap","init","model","assertParameter","modelClass","i","length","_initCode","modelCode","parent","code","create","add","children","push","get","codeId","optGet","Error","getCodes","rootOnly","rootCodes","visit","visitor","filter","visitResult","TERMINATE","SKIP_SUBTREE","visitChildren","ensure","codeType"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/code/CodeType.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout, TreeVisitResult} from '../index';\n\nexport default class CodeType {\n\n  constructor() {\n    this.id;\n    this.codes = [];\n    this.codeMap = {};\n  }\n\n  init(model) {\n    scout.assertParameter('id', model.id);\n    this.id = model.id;\n    this.modelClass = model.modelClass;\n\n    if (model.codes) {\n      for (let i = 0; i < model.codes.length; i++) {\n        this._initCode(model.codes[i]);\n      }\n    }\n  }\n\n  _initCode(modelCode, parent) {\n    let code = scout.create(modelCode);\n    this.add(code, parent);\n    if (modelCode.children) {\n      for (let i = 0; i < modelCode.children.length; i++) {\n        this._initCode(modelCode.children[i], code);\n      }\n    }\n  }\n\n  add(code, parent) {\n    this.codes.push(code);\n    this.codeMap[code.id] = code;\n    if (parent) {\n      parent.children.push(code);\n      code.parent = parent;\n    }\n  }\n\n  /**\n   * @param codeId\n   * @returns {Code}\n   * @throw {Error) if code does not exist\n   */\n  get(codeId) {\n    let code = this.optGet(codeId);\n    if (!code) {\n      throw new Error('No code found for id=' + codeId);\n    }\n    return code;\n  }\n\n  /**\n   * Same as <code>get</code>, but does not throw an error if the code does not exist.\n   *\n   * @param codeId\n   * @returns {Code} code for the given codeId or undefined if code does not exist\n   */\n  optGet(codeId) {\n    return this.codeMap[codeId];\n  }\n\n  /**\n   * @param {boolean} rootOnly\n   * @returns {Array<string>}\n   */\n  getCodes(rootOnly) {\n    if (rootOnly) {\n      let rootCodes = [];\n      for (let i = 0; i < this.codes.length; i++) {\n        if (!this.codes[i].parent) {\n          rootCodes.push(this.codes[i]);\n        }\n      }\n      return rootCodes;\n    }\n    return this.codes;\n  }\n\n  /**\n   * Visits all codes and theirs children.\n   * <p>\n   * In order to abort visiting, the visitor can return true or TreeVisitResult.TERMINATE.\n   * To only abort the visiting of a sub tree, the visitor can return SKIP_SUBTREE.\n   * </p>\n   * @returns {boolean} true if the visitor aborted the visiting, false if the visiting completed without aborting\n   */\n  visit(visitor) {\n    let codes = this.codes.filter(code => {\n      // Only consider root codes\n      return !code.parent;\n    });\n    for (let i = 0; i < codes.length; i++) {\n      let code = codes[i];\n      let visitResult = visitor(code);\n      if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n        return TreeVisitResult.TERMINATE;\n      }\n      if (visitResult !== TreeVisitResult.SKIP_SUBTREE) {\n        visitResult = code.visitChildren(visitor);\n        if (visitResult === true || visitResult === TreeVisitResult.TERMINATE) {\n          return TreeVisitResult.TERMINATE;\n        }\n      }\n    }\n  }\n\n  static ensure(codeType) {\n    if (!codeType) {\n      return codeType;\n    }\n    if (codeType instanceof CodeType) {\n      return codeType;\n    }\n    return scout.create('CodeType', codeType);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}