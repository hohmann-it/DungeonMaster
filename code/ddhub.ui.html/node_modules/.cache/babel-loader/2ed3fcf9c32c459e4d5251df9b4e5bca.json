{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { fields, FormField, TreeVisitResult, widgets } from '../../index';\nexport default class CompositeField extends FormField {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @returns {FormField[]} an array of child-fields.\n   */\n  getFields() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   *\n   * @param {FormField[]} fields\n   * @returns void\n   */\n  setFields(fields) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @override FormField.js\n   */\n  visitFields(visitor) {\n    let treeVisitResult = super.visitFields(visitor);\n    if (treeVisitResult === TreeVisitResult.TERMINATE) {\n      return TreeVisitResult.TERMINATE;\n    }\n    if (treeVisitResult === TreeVisitResult.SKIP_SUBTREE) {\n      return TreeVisitResult.CONTINUE;\n    }\n    let fields = this.getFields();\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i];\n      treeVisitResult = field.visitFields(visitor);\n      if (treeVisitResult === TreeVisitResult.TERMINATE) {\n        return TreeVisitResult.TERMINATE;\n      }\n    }\n  }\n\n  /**\n   * Sets the given fieldStyle recursively on all fields of the composite field.\n   * @override FormField.js\n   */\n  setFieldStyle(fieldStyle) {\n    this.getFields().forEach(field => {\n      field.setFieldStyle(fieldStyle);\n    });\n    super.setFieldStyle(fieldStyle);\n  }\n\n  /**\n   * @override\n   */\n  activate() {\n    fields.activateFirstField(this, this.getFields());\n  }\n\n  /**\n   * @override\n   */\n  getFocusableElement() {\n    let field = widgets.findFirstFocusableWidget(this.getFields(), this);\n    if (field) {\n      return field.getFocusableElement();\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["fields","FormField","TreeVisitResult","widgets","CompositeField","constructor","getFields","Error","setFields","visitFields","visitor","treeVisitResult","TERMINATE","SKIP_SUBTREE","CONTINUE","i","length","field","setFieldStyle","fieldStyle","forEach","activate","activateFirstField","getFocusableElement","findFirstFocusableWidget"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/CompositeField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {fields, FormField, TreeVisitResult, widgets} from '../../index';\n\nexport default class CompositeField extends FormField {\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * @returns {FormField[]} an array of child-fields.\n   */\n  getFields() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   *\n   * @param {FormField[]} fields\n   * @returns void\n   */\n  setFields(fields) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * @override FormField.js\n   */\n  visitFields(visitor) {\n    let treeVisitResult = super.visitFields(visitor);\n    if (treeVisitResult === TreeVisitResult.TERMINATE) {\n      return TreeVisitResult.TERMINATE;\n    }\n\n    if (treeVisitResult === TreeVisitResult.SKIP_SUBTREE) {\n      return TreeVisitResult.CONTINUE;\n    }\n\n    let fields = this.getFields();\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i];\n      treeVisitResult = field.visitFields(visitor);\n      if (treeVisitResult === TreeVisitResult.TERMINATE) {\n        return TreeVisitResult.TERMINATE;\n      }\n    }\n  }\n\n  /**\n   * Sets the given fieldStyle recursively on all fields of the composite field.\n   * @override FormField.js\n   */\n  setFieldStyle(fieldStyle) {\n    this.getFields().forEach(field => {\n      field.setFieldStyle(fieldStyle);\n    });\n    super.setFieldStyle(fieldStyle);\n  }\n\n  /**\n   * @override\n   */\n  activate() {\n    fields.activateFirstField(this, this.getFields());\n  }\n\n  /**\n   * @override\n   */\n  getFocusableElement() {\n    let field = widgets.findFirstFocusableWidget(this.getFields(), this);\n    if (field) {\n      return field.getFocusableElement();\n    }\n    return null;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,eAAe,EAAEC,OAAO,QAAO,aAAa;AAEvE,eAAe,MAAMC,cAAc,SAASH,SAAS,CAAC;EAEpDI,WAAW,GAAG;IACZ,KAAK,EAAE;EACT;;EAEA;AACF;AACA;EACEC,SAAS,GAAG;IACV,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAAS,CAACR,MAAM,EAAE;IAChB,MAAM,IAAIO,KAAK,CAAC,iBAAiB,CAAC;EACpC;;EAEA;AACF;AACA;EACEE,WAAW,CAACC,OAAO,EAAE;IACnB,IAAIC,eAAe,GAAG,KAAK,CAACF,WAAW,CAACC,OAAO,CAAC;IAChD,IAAIC,eAAe,KAAKT,eAAe,CAACU,SAAS,EAAE;MACjD,OAAOV,eAAe,CAACU,SAAS;IAClC;IAEA,IAAID,eAAe,KAAKT,eAAe,CAACW,YAAY,EAAE;MACpD,OAAOX,eAAe,CAACY,QAAQ;IACjC;IAEA,IAAId,MAAM,GAAG,IAAI,CAACM,SAAS,EAAE;IAC7B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,MAAM,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIE,KAAK,GAAGjB,MAAM,CAACe,CAAC,CAAC;MACrBJ,eAAe,GAAGM,KAAK,CAACR,WAAW,CAACC,OAAO,CAAC;MAC5C,IAAIC,eAAe,KAAKT,eAAe,CAACU,SAAS,EAAE;QACjD,OAAOV,eAAe,CAACU,SAAS;MAClC;IACF;EACF;;EAEA;AACF;AACA;AACA;EACEM,aAAa,CAACC,UAAU,EAAE;IACxB,IAAI,CAACb,SAAS,EAAE,CAACc,OAAO,CAACH,KAAK,IAAI;MAChCA,KAAK,CAACC,aAAa,CAACC,UAAU,CAAC;IACjC,CAAC,CAAC;IACF,KAAK,CAACD,aAAa,CAACC,UAAU,CAAC;EACjC;;EAEA;AACF;AACA;EACEE,QAAQ,GAAG;IACTrB,MAAM,CAACsB,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAChB,SAAS,EAAE,CAAC;EACnD;;EAEA;AACF;AACA;EACEiB,mBAAmB,GAAG;IACpB,IAAIN,KAAK,GAAGd,OAAO,CAACqB,wBAAwB,CAAC,IAAI,CAAClB,SAAS,EAAE,EAAE,IAAI,CAAC;IACpE,IAAIW,KAAK,EAAE;MACT,OAAOA,KAAK,CAACM,mBAAmB,EAAE;IACpC;IACA,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module"}