{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, LookupBox, objects, scout, TreeBoxLayout } from '../../../index';\nexport default class TreeBox extends LookupBox {\n  constructor() {\n    super();\n    this.tree = null;\n    this._populating = false;\n    this._addWidgetProperties(['tree', 'filterBox']);\n  }\n  _init(model) {\n    super._init(model);\n    this.tree.on('nodesChecked', this._onTreeNodesChecked.bind(this));\n    this.tree.setScrollTop(this.scrollTop);\n  }\n  _initStructure(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n  }\n  _initValue(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n    super._initValue(value);\n  }\n  _render() {\n    super._render();\n    this.$container.addClass('tree-box');\n  }\n  _createFieldContainerLayout() {\n    return new TreeBoxLayout(this, this.tree, this.filterBox);\n  }\n  _renderStructure($fieldContainer) {\n    this.tree.render(this.$fieldContainer);\n    this.addField(this.tree.$container);\n  }\n  _onTreeNodesChecked(event) {\n    if (this._populating) {\n      return;\n    }\n    this._syncTreeToValue();\n  }\n  _syncTreeToValue() {\n    if (!this.lookupCall || this._valueSyncing) {\n      return;\n    }\n    this._valueSyncing = true;\n    let valueArray = objects.values(this.tree.nodesMap).filter(node => {\n      return node.checked;\n    }).map(node => {\n      return node.id;\n    });\n    this.setValue(valueArray);\n    this._valueSyncing = false;\n  }\n  _valueChanged() {\n    super._valueChanged();\n    this._syncValueToTree(this.value);\n  }\n  _syncValueToTree(newValue) {\n    if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n      return;\n    }\n    this._valueSyncing = true;\n    let opts = {\n      checkOnlyEnabled: false,\n      checkChildren: false\n    };\n    try {\n      if (arrays.empty(newValue)) {\n        this.uncheckAll(opts);\n      } else {\n        // if lookup was not executed yet: do it now.\n        let lookupScheduled = this._ensureLookupCallExecuted();\n        if (lookupScheduled) {\n          return; // was the first lookup: tree has no nodes yet. cancel sync. Will be executed again after lookup execution.\n        }\n\n        this.uncheckAll(opts);\n        objects.values(this.tree.nodesMap).forEach(function (node) {\n          if (arrays.containsAny(newValue, node.id)) {\n            this.tree.checkNode(node, true, opts);\n          }\n        }, this);\n      }\n      this._updateDisplayText();\n    } finally {\n      this._valueSyncing = false;\n    }\n  }\n  uncheckAll(options) {\n    for (let nodeId in this.tree.nodesMap) {\n      if (this.tree.nodesMap.hasOwnProperty(nodeId)) {\n        this.tree.uncheckNode(this.tree.nodesMap[nodeId], options);\n      }\n    }\n  }\n  _lookupByAllDone(result) {\n    if (super._lookupByAllDone(result)) {\n      this._populateTree(result);\n    }\n  }\n  _populateTree(result) {\n    let topLevelNodes = [];\n    this._populating = true;\n    this._populateTreeRecursive(null, topLevelNodes, result.lookupRows);\n    this.tree.deleteAllNodes();\n    this.tree.insertNodes(topLevelNodes);\n    this._populating = false;\n    this._syncValueToTree(this.value);\n  }\n  _populateTreeRecursive(parentKey, nodesArray, lookupRows) {\n    let node;\n    lookupRows.forEach(function (lookupRow) {\n      if (lookupRow.parentKey === parentKey) {\n        node = this._createNode(lookupRow);\n        this._populateTreeRecursive(node.id, node.childNodes, lookupRows);\n        node.leaf = !node.childNodes.length;\n        nodesArray.push(node);\n      }\n    }, this);\n  }\n\n  /**\n   * Returns a lookup row for each node currently checked.\n   */\n  getCheckedLookupRows() {\n    if (this.value === null || arrays.empty(this.value) || this.tree.nodes.length === 0) {\n      return [];\n    }\n    return objects.values(this.tree.nodesMap).filter(node => {\n      return node.checked;\n    }).map(node => {\n      return node.lookupRow;\n    });\n  }\n  _createNode(lookupRow) {\n    let node = scout.create('TreeNode', {\n      parent: this.tree,\n      id: lookupRow.key,\n      text: lookupRow.text,\n      lookupRow: lookupRow\n    });\n    if (lookupRow.iconId) {\n      node.iconId = lookupRow.iconId;\n    }\n    if (lookupRow.tooltipText) {\n      node.tooltipText = lookupRow.tooltipText;\n    }\n    if (lookupRow.backgroundColor) {\n      node.backgroundColor = lookupRow.backgroundColor;\n    }\n    if (lookupRow.foregroundColor) {\n      node.foregroundColor = lookupRow.foregroundColor;\n    }\n    if (lookupRow.font) {\n      node.font = lookupRow.font;\n    }\n    if (lookupRow.enabled === false) {\n      node.enabled = false;\n    }\n    if (lookupRow.cssClass) {\n      node.cssClass = lookupRow.cssClass;\n    }\n    if (lookupRow.active === false) {\n      node.active = false;\n      node.cssClass = (node.cssClass ? node.cssClass + ' ' : '') + 'inactive';\n    }\n    return node;\n  }\n  _createDefaultTreeBoxTree() {\n    return scout.create('Tree', {\n      parent: this,\n      checkable: true\n    });\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.tree;\n  }\n}","map":{"version":3,"names":["arrays","LookupBox","objects","scout","TreeBoxLayout","TreeBox","constructor","tree","_populating","_addWidgetProperties","_init","model","on","_onTreeNodesChecked","bind","setScrollTop","scrollTop","_initStructure","value","_createDefaultTreeBoxTree","_initValue","_render","$container","addClass","_createFieldContainerLayout","filterBox","_renderStructure","$fieldContainer","render","addField","event","_syncTreeToValue","lookupCall","_valueSyncing","valueArray","values","nodesMap","filter","node","checked","map","id","setValue","_valueChanged","_syncValueToTree","newValue","initialized","opts","checkOnlyEnabled","checkChildren","empty","uncheckAll","lookupScheduled","_ensureLookupCallExecuted","forEach","containsAny","checkNode","_updateDisplayText","options","nodeId","hasOwnProperty","uncheckNode","_lookupByAllDone","result","_populateTree","topLevelNodes","_populateTreeRecursive","lookupRows","deleteAllNodes","insertNodes","parentKey","nodesArray","lookupRow","_createNode","childNodes","leaf","length","push","getCheckedLookupRows","nodes","create","parent","key","text","iconId","tooltipText","backgroundColor","foregroundColor","font","enabled","cssClass","active","checkable","getDelegateScrollable"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/treebox/TreeBox.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, LookupBox, objects, scout, TreeBoxLayout} from '../../../index';\n\nexport default class TreeBox extends LookupBox {\n\n  constructor() {\n    super();\n    this.tree = null;\n    this._populating = false;\n    this._addWidgetProperties(['tree', 'filterBox']);\n  }\n\n  _init(model) {\n    super._init(model);\n    this.tree.on('nodesChecked', this._onTreeNodesChecked.bind(this));\n    this.tree.setScrollTop(this.scrollTop);\n  }\n\n  _initStructure(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n  }\n\n  _initValue(value) {\n    if (!this.tree) {\n      this.tree = this._createDefaultTreeBoxTree();\n    }\n    super._initValue(value);\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('tree-box');\n  }\n\n  _createFieldContainerLayout() {\n    return new TreeBoxLayout(this, this.tree, this.filterBox);\n  }\n\n  _renderStructure($fieldContainer) {\n    this.tree.render(this.$fieldContainer);\n    this.addField(this.tree.$container);\n  }\n\n  _onTreeNodesChecked(event) {\n    if (this._populating) {\n      return;\n    }\n    this._syncTreeToValue();\n  }\n\n  _syncTreeToValue() {\n    if (!this.lookupCall || this._valueSyncing) {\n      return;\n    }\n    this._valueSyncing = true;\n    let valueArray = objects.values(this.tree.nodesMap).filter(node => {\n      return node.checked;\n    }).map(node => {\n      return node.id;\n    });\n\n    this.setValue(valueArray);\n    this._valueSyncing = false;\n  }\n\n  _valueChanged() {\n    super._valueChanged();\n    this._syncValueToTree(this.value);\n  }\n\n  _syncValueToTree(newValue) {\n    if (!this.lookupCall || this._valueSyncing || !this.initialized) {\n      return;\n    }\n\n    this._valueSyncing = true;\n    let opts = {\n      checkOnlyEnabled: false,\n      checkChildren: false\n    };\n    try {\n      if (arrays.empty(newValue)) {\n        this.uncheckAll(opts);\n      } else {\n        // if lookup was not executed yet: do it now.\n        let lookupScheduled = this._ensureLookupCallExecuted();\n        if (lookupScheduled) {\n          return; // was the first lookup: tree has no nodes yet. cancel sync. Will be executed again after lookup execution.\n        }\n\n        this.uncheckAll(opts);\n        objects.values(this.tree.nodesMap).forEach(function(node) {\n          if (arrays.containsAny(newValue, node.id)) {\n            this.tree.checkNode(node, true, opts);\n          }\n        }, this);\n      }\n\n      this._updateDisplayText();\n    } finally {\n      this._valueSyncing = false;\n    }\n  }\n\n  uncheckAll(options) {\n    for (let nodeId in this.tree.nodesMap) {\n      if (this.tree.nodesMap.hasOwnProperty(nodeId)) {\n        this.tree.uncheckNode(this.tree.nodesMap[nodeId], options);\n      }\n    }\n  }\n\n  _lookupByAllDone(result) {\n    if (super._lookupByAllDone(result)) {\n      this._populateTree(result);\n    }\n  }\n\n  _populateTree(result) {\n    let topLevelNodes = [];\n    this._populating = true;\n    this._populateTreeRecursive(null, topLevelNodes, result.lookupRows);\n\n    this.tree.deleteAllNodes();\n    this.tree.insertNodes(topLevelNodes);\n    this._populating = false;\n\n    this._syncValueToTree(this.value);\n  }\n\n  _populateTreeRecursive(parentKey, nodesArray, lookupRows) {\n    let node;\n    lookupRows.forEach(function(lookupRow) {\n      if (lookupRow.parentKey === parentKey) {\n        node = this._createNode(lookupRow);\n        this._populateTreeRecursive(node.id, node.childNodes, lookupRows);\n        node.leaf = !node.childNodes.length;\n        nodesArray.push(node);\n      }\n    }, this);\n  }\n\n  /**\n   * Returns a lookup row for each node currently checked.\n   */\n  getCheckedLookupRows() {\n    if (this.value === null || arrays.empty(this.value) || this.tree.nodes.length === 0) {\n      return [];\n    }\n\n    return objects.values(this.tree.nodesMap).filter(node => {\n      return node.checked;\n    }).map(node => {\n      return node.lookupRow;\n    });\n  }\n\n  _createNode(lookupRow) {\n    let\n      node = scout.create('TreeNode', {\n        parent: this.tree,\n        id: lookupRow.key,\n        text: lookupRow.text,\n        lookupRow: lookupRow\n      });\n\n    if (lookupRow.iconId) {\n      node.iconId = lookupRow.iconId;\n    }\n    if (lookupRow.tooltipText) {\n      node.tooltipText = lookupRow.tooltipText;\n    }\n    if (lookupRow.backgroundColor) {\n      node.backgroundColor = lookupRow.backgroundColor;\n    }\n    if (lookupRow.foregroundColor) {\n      node.foregroundColor = lookupRow.foregroundColor;\n    }\n    if (lookupRow.font) {\n      node.font = lookupRow.font;\n    }\n    if (lookupRow.enabled === false) {\n      node.enabled = false;\n    }\n    if (lookupRow.cssClass) {\n      node.cssClass = lookupRow.cssClass;\n    }\n    if (lookupRow.active === false) {\n      node.active = false;\n      node.cssClass = (node.cssClass ? (node.cssClass + ' ') : '') + 'inactive';\n    }\n\n    return node;\n  }\n\n  _createDefaultTreeBoxTree() {\n    return scout.create('Tree', {\n      parent: this,\n      checkable: true\n    });\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.tree;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,KAAK,EAAEC,aAAa,QAAO,gBAAgB;AAE/E,eAAe,MAAMC,OAAO,SAASJ,SAAS,CAAC;EAE7CK,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,oBAAoB,CAAC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;EAClD;EAEAC,KAAK,CAACC,KAAK,EAAE;IACX,KAAK,CAACD,KAAK,CAACC,KAAK,CAAC;IAClB,IAAI,CAACJ,IAAI,CAACK,EAAE,CAAC,cAAc,EAAE,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,IAAI,CAACP,IAAI,CAACQ,YAAY,CAAC,IAAI,CAACC,SAAS,CAAC;EACxC;EAEAC,cAAc,CAACC,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACX,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,GAAG,IAAI,CAACY,yBAAyB,EAAE;IAC9C;EACF;EAEAC,UAAU,CAACF,KAAK,EAAE;IAChB,IAAI,CAAC,IAAI,CAACX,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,GAAG,IAAI,CAACY,yBAAyB,EAAE;IAC9C;IACA,KAAK,CAACC,UAAU,CAACF,KAAK,CAAC;EACzB;EAEAG,OAAO,GAAG;IACR,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,UAAU,CAAC;EACtC;EAEAC,2BAA2B,GAAG;IAC5B,OAAO,IAAIpB,aAAa,CAAC,IAAI,EAAE,IAAI,CAACG,IAAI,EAAE,IAAI,CAACkB,SAAS,CAAC;EAC3D;EAEAC,gBAAgB,CAACC,eAAe,EAAE;IAChC,IAAI,CAACpB,IAAI,CAACqB,MAAM,CAAC,IAAI,CAACD,eAAe,CAAC;IACtC,IAAI,CAACE,QAAQ,CAAC,IAAI,CAACtB,IAAI,CAACe,UAAU,CAAC;EACrC;EAEAT,mBAAmB,CAACiB,KAAK,EAAE;IACzB,IAAI,IAAI,CAACtB,WAAW,EAAE;MACpB;IACF;IACA,IAAI,CAACuB,gBAAgB,EAAE;EACzB;EAEAA,gBAAgB,GAAG;IACjB,IAAI,CAAC,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,aAAa,EAAE;MAC1C;IACF;IACA,IAAI,CAACA,aAAa,GAAG,IAAI;IACzB,IAAIC,UAAU,GAAGhC,OAAO,CAACiC,MAAM,CAAC,IAAI,CAAC5B,IAAI,CAAC6B,QAAQ,CAAC,CAACC,MAAM,CAACC,IAAI,IAAI;MACjE,OAAOA,IAAI,CAACC,OAAO;IACrB,CAAC,CAAC,CAACC,GAAG,CAACF,IAAI,IAAI;MACb,OAAOA,IAAI,CAACG,EAAE;IAChB,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACR,UAAU,CAAC;IACzB,IAAI,CAACD,aAAa,GAAG,KAAK;EAC5B;EAEAU,aAAa,GAAG;IACd,KAAK,CAACA,aAAa,EAAE;IACrB,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAC1B,KAAK,CAAC;EACnC;EAEA0B,gBAAgB,CAACC,QAAQ,EAAE;IACzB,IAAI,CAAC,IAAI,CAACb,UAAU,IAAI,IAAI,CAACC,aAAa,IAAI,CAAC,IAAI,CAACa,WAAW,EAAE;MAC/D;IACF;IAEA,IAAI,CAACb,aAAa,GAAG,IAAI;IACzB,IAAIc,IAAI,GAAG;MACTC,gBAAgB,EAAE,KAAK;MACvBC,aAAa,EAAE;IACjB,CAAC;IACD,IAAI;MACF,IAAIjD,MAAM,CAACkD,KAAK,CAACL,QAAQ,CAAC,EAAE;QAC1B,IAAI,CAACM,UAAU,CAACJ,IAAI,CAAC;MACvB,CAAC,MAAM;QACL;QACA,IAAIK,eAAe,GAAG,IAAI,CAACC,yBAAyB,EAAE;QACtD,IAAID,eAAe,EAAE;UACnB,OAAO,CAAC;QACV;;QAEA,IAAI,CAACD,UAAU,CAACJ,IAAI,CAAC;QACrB7C,OAAO,CAACiC,MAAM,CAAC,IAAI,CAAC5B,IAAI,CAAC6B,QAAQ,CAAC,CAACkB,OAAO,CAAC,UAAShB,IAAI,EAAE;UACxD,IAAItC,MAAM,CAACuD,WAAW,CAACV,QAAQ,EAAEP,IAAI,CAACG,EAAE,CAAC,EAAE;YACzC,IAAI,CAAClC,IAAI,CAACiD,SAAS,CAAClB,IAAI,EAAE,IAAI,EAAES,IAAI,CAAC;UACvC;QACF,CAAC,EAAE,IAAI,CAAC;MACV;MAEA,IAAI,CAACU,kBAAkB,EAAE;IAC3B,CAAC,SAAS;MACR,IAAI,CAACxB,aAAa,GAAG,KAAK;IAC5B;EACF;EAEAkB,UAAU,CAACO,OAAO,EAAE;IAClB,KAAK,IAAIC,MAAM,IAAI,IAAI,CAACpD,IAAI,CAAC6B,QAAQ,EAAE;MACrC,IAAI,IAAI,CAAC7B,IAAI,CAAC6B,QAAQ,CAACwB,cAAc,CAACD,MAAM,CAAC,EAAE;QAC7C,IAAI,CAACpD,IAAI,CAACsD,WAAW,CAAC,IAAI,CAACtD,IAAI,CAAC6B,QAAQ,CAACuB,MAAM,CAAC,EAAED,OAAO,CAAC;MAC5D;IACF;EACF;EAEAI,gBAAgB,CAACC,MAAM,EAAE;IACvB,IAAI,KAAK,CAACD,gBAAgB,CAACC,MAAM,CAAC,EAAE;MAClC,IAAI,CAACC,aAAa,CAACD,MAAM,CAAC;IAC5B;EACF;EAEAC,aAAa,CAACD,MAAM,EAAE;IACpB,IAAIE,aAAa,GAAG,EAAE;IACtB,IAAI,CAACzD,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC0D,sBAAsB,CAAC,IAAI,EAAED,aAAa,EAAEF,MAAM,CAACI,UAAU,CAAC;IAEnE,IAAI,CAAC5D,IAAI,CAAC6D,cAAc,EAAE;IAC1B,IAAI,CAAC7D,IAAI,CAAC8D,WAAW,CAACJ,aAAa,CAAC;IACpC,IAAI,CAACzD,WAAW,GAAG,KAAK;IAExB,IAAI,CAACoC,gBAAgB,CAAC,IAAI,CAAC1B,KAAK,CAAC;EACnC;EAEAgD,sBAAsB,CAACI,SAAS,EAAEC,UAAU,EAAEJ,UAAU,EAAE;IACxD,IAAI7B,IAAI;IACR6B,UAAU,CAACb,OAAO,CAAC,UAASkB,SAAS,EAAE;MACrC,IAAIA,SAAS,CAACF,SAAS,KAAKA,SAAS,EAAE;QACrChC,IAAI,GAAG,IAAI,CAACmC,WAAW,CAACD,SAAS,CAAC;QAClC,IAAI,CAACN,sBAAsB,CAAC5B,IAAI,CAACG,EAAE,EAAEH,IAAI,CAACoC,UAAU,EAAEP,UAAU,CAAC;QACjE7B,IAAI,CAACqC,IAAI,GAAG,CAACrC,IAAI,CAACoC,UAAU,CAACE,MAAM;QACnCL,UAAU,CAACM,IAAI,CAACvC,IAAI,CAAC;MACvB;IACF,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;AACF;AACA;EACEwC,oBAAoB,GAAG;IACrB,IAAI,IAAI,CAAC5D,KAAK,KAAK,IAAI,IAAIlB,MAAM,CAACkD,KAAK,CAAC,IAAI,CAAChC,KAAK,CAAC,IAAI,IAAI,CAACX,IAAI,CAACwE,KAAK,CAACH,MAAM,KAAK,CAAC,EAAE;MACnF,OAAO,EAAE;IACX;IAEA,OAAO1E,OAAO,CAACiC,MAAM,CAAC,IAAI,CAAC5B,IAAI,CAAC6B,QAAQ,CAAC,CAACC,MAAM,CAACC,IAAI,IAAI;MACvD,OAAOA,IAAI,CAACC,OAAO;IACrB,CAAC,CAAC,CAACC,GAAG,CAACF,IAAI,IAAI;MACb,OAAOA,IAAI,CAACkC,SAAS;IACvB,CAAC,CAAC;EACJ;EAEAC,WAAW,CAACD,SAAS,EAAE;IACrB,IACElC,IAAI,GAAGnC,KAAK,CAAC6E,MAAM,CAAC,UAAU,EAAE;MAC9BC,MAAM,EAAE,IAAI,CAAC1E,IAAI;MACjBkC,EAAE,EAAE+B,SAAS,CAACU,GAAG;MACjBC,IAAI,EAAEX,SAAS,CAACW,IAAI;MACpBX,SAAS,EAAEA;IACb,CAAC,CAAC;IAEJ,IAAIA,SAAS,CAACY,MAAM,EAAE;MACpB9C,IAAI,CAAC8C,MAAM,GAAGZ,SAAS,CAACY,MAAM;IAChC;IACA,IAAIZ,SAAS,CAACa,WAAW,EAAE;MACzB/C,IAAI,CAAC+C,WAAW,GAAGb,SAAS,CAACa,WAAW;IAC1C;IACA,IAAIb,SAAS,CAACc,eAAe,EAAE;MAC7BhD,IAAI,CAACgD,eAAe,GAAGd,SAAS,CAACc,eAAe;IAClD;IACA,IAAId,SAAS,CAACe,eAAe,EAAE;MAC7BjD,IAAI,CAACiD,eAAe,GAAGf,SAAS,CAACe,eAAe;IAClD;IACA,IAAIf,SAAS,CAACgB,IAAI,EAAE;MAClBlD,IAAI,CAACkD,IAAI,GAAGhB,SAAS,CAACgB,IAAI;IAC5B;IACA,IAAIhB,SAAS,CAACiB,OAAO,KAAK,KAAK,EAAE;MAC/BnD,IAAI,CAACmD,OAAO,GAAG,KAAK;IACtB;IACA,IAAIjB,SAAS,CAACkB,QAAQ,EAAE;MACtBpD,IAAI,CAACoD,QAAQ,GAAGlB,SAAS,CAACkB,QAAQ;IACpC;IACA,IAAIlB,SAAS,CAACmB,MAAM,KAAK,KAAK,EAAE;MAC9BrD,IAAI,CAACqD,MAAM,GAAG,KAAK;MACnBrD,IAAI,CAACoD,QAAQ,GAAG,CAACpD,IAAI,CAACoD,QAAQ,GAAIpD,IAAI,CAACoD,QAAQ,GAAG,GAAG,GAAI,EAAE,IAAI,UAAU;IAC3E;IAEA,OAAOpD,IAAI;EACb;EAEAnB,yBAAyB,GAAG;IAC1B,OAAOhB,KAAK,CAAC6E,MAAM,CAAC,MAAM,EAAE;MAC1BC,MAAM,EAAE,IAAI;MACZW,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEC,qBAAqB,GAAG;IACtB,OAAO,IAAI,CAACtF,IAAI;EAClB;AACF"},"metadata":{},"sourceType":"module"}