{"ast":null,"code":"/*\n * Copyright (c) 2010-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, arrays, graphics } from '../index';\nexport default class BreadcrumbBarLayout extends AbstractLayout {\n  constructor(breadcrumbBar) {\n    super();\n    this._breadcrumbBar = breadcrumbBar;\n  }\n  layout($container) {\n    // 1) undo all shrinking etc.\n    this._undoCollapse(this._breadcrumbBar.breadcrumbItems);\n    const breadcrumbItems = this._visibleBreadcrumbItems();\n    const htmlContainer = this._breadcrumbBar.htmlComp;\n    const containerSize = htmlContainer.size();\n    const breadcrumbItemsWidth = this._actualPrefSize(breadcrumbItems, false).width;\n    if (breadcrumbItemsWidth <= containerSize.width) {\n      this._applyToEllipsis(ell => {\n        ell.setVisible(false);\n      });\n      // OK, every breadcrumbItems fits into container\n      return;\n    }\n    this._applyToEllipsis(ell => {\n      ell.setVisible(true);\n    });\n\n    // breadcrumbItems don't fit\n\n    // Third approach: Create ellipsis and move overflown menus into it\n    this._collapse(breadcrumbItems, containerSize);\n  }\n  _collapse($container, containerSize) {\n    let currentIndex = 1;\n    const visibleBreadcrumbItems = this._visibleBreadcrumbItems();\n    let prefSize = this._actualPrefSize(visibleBreadcrumbItems, true);\n    while (prefSize.width > containerSize.width && currentIndex < visibleBreadcrumbItems.length - 1) {\n      // remove breadcrumbItems until size fits or only 2 breadcrumbItems are visible\n      const crumb = visibleBreadcrumbItems[currentIndex];\n      crumb.$container.hide();\n      crumb._layHidden = true;\n      visibleBreadcrumbItems.splice(currentIndex, 1);\n      prefSize = this._actualPrefSize(visibleBreadcrumbItems, true);\n    }\n  }\n  _applyToEllipsis(fun) {\n    if (this._breadcrumbBar._ellipsisBreadcrumbItem) {\n      fun(this._breadcrumbBar._ellipsisBreadcrumbItem);\n    }\n  }\n  _undoCollapse() {\n    arrays.ensure(this._breadcrumbBar.breadcrumbItems).forEach(crumb => {\n      crumb.$container.show();\n      crumb._layHidden = false;\n    });\n  }\n  preferredLayoutSize($container) {\n    const breadcrumbItems = this._visibleBreadcrumbItems();\n    this._undoCollapse(breadcrumbItems);\n    return this._actualPrefSize();\n  }\n  _breadcrumbSize(breadcrumbItem) {\n    const classList = breadcrumbItem.$container.attr('class');\n    breadcrumbItem.$container.removeClass('hidden');\n    breadcrumbItem.htmlComp.invalidateLayout();\n    const prefSize = breadcrumbItem.htmlComp.prefSize({\n      useCssSize: true,\n      exact: true\n    }).add(graphics.margins(breadcrumbItem.$container));\n    breadcrumbItem.$container.attrOrRemove('class', classList);\n    return prefSize;\n  }\n  _visibleBreadcrumbItems() {\n    return this._breadcrumbBar.breadcrumbItems.filter(breadcrumb => {\n      return breadcrumb.visible;\n    }, this);\n  }\n  _actualPrefSize(breadcrumbItems, considerEllipsis) {\n    breadcrumbItems = breadcrumbItems || this._visibleBreadcrumbItems();\n    const breadcrumbItemsWidth = this._breadcrumbItemsWidth(breadcrumbItems, considerEllipsis);\n    const prefSize = graphics.prefSize(this._breadcrumbBar.$container, {\n      includeMargin: true,\n      useCssSize: true\n    });\n    prefSize.width = breadcrumbItemsWidth + this._breadcrumbBar.htmlComp.insets().horizontal();\n    return prefSize;\n  }\n\n  /**\n   * @return {number} the preferred width of all breadcrumbItems (plus ellipsis breadcrumb)\n   */\n  _breadcrumbItemsWidth(breadcrumbItems, considerEllipsis) {\n    let breadcrumbsWidth = 0;\n    breadcrumbItems = breadcrumbItems || this._visibleBreadcrumbItems();\n    breadcrumbItems.forEach(breadcrumbItem => {\n      if (breadcrumbItem.rendered) {\n        breadcrumbsWidth += breadcrumbItem.$container.outerWidth(true);\n      }\n    }, this);\n    if (considerEllipsis && this._breadcrumbBar._ellipsisBreadcrumbItem && this._breadcrumbBar._ellipsisBreadcrumbItem.rendered) {\n      breadcrumbsWidth += this._breadcrumbBar._ellipsisBreadcrumbItem.$container.outerWidth(true);\n    }\n    return breadcrumbsWidth;\n  }\n}","map":{"version":3,"names":["AbstractLayout","arrays","graphics","BreadcrumbBarLayout","constructor","breadcrumbBar","_breadcrumbBar","layout","$container","_undoCollapse","breadcrumbItems","_visibleBreadcrumbItems","htmlContainer","htmlComp","containerSize","size","breadcrumbItemsWidth","_actualPrefSize","width","_applyToEllipsis","ell","setVisible","_collapse","currentIndex","visibleBreadcrumbItems","prefSize","length","crumb","hide","_layHidden","splice","fun","_ellipsisBreadcrumbItem","ensure","forEach","show","preferredLayoutSize","_breadcrumbSize","breadcrumbItem","classList","attr","removeClass","invalidateLayout","useCssSize","exact","add","margins","attrOrRemove","filter","breadcrumb","visible","considerEllipsis","_breadcrumbItemsWidth","includeMargin","insets","horizontal","breadcrumbsWidth","rendered","outerWidth"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/breadcrumbbar/BreadcrumbBarLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, arrays, graphics} from '../index';\n\nexport default class BreadcrumbBarLayout extends AbstractLayout {\n\n  constructor(breadcrumbBar) {\n    super();\n\n    this._breadcrumbBar = breadcrumbBar;\n  }\n\n  layout($container) {\n    // 1) undo all shrinking etc.\n    this._undoCollapse(this._breadcrumbBar.breadcrumbItems);\n\n    const breadcrumbItems = this._visibleBreadcrumbItems();\n\n    const htmlContainer = this._breadcrumbBar.htmlComp;\n    const containerSize = htmlContainer.size();\n    const breadcrumbItemsWidth = this._actualPrefSize(breadcrumbItems, false).width;\n    if (breadcrumbItemsWidth <= containerSize.width) {\n      this._applyToEllipsis(ell => {\n        ell.setVisible(false);\n      });\n      // OK, every breadcrumbItems fits into container\n      return;\n    }\n    this._applyToEllipsis(ell => {\n      ell.setVisible(true);\n    });\n\n    // breadcrumbItems don't fit\n\n    // Third approach: Create ellipsis and move overflown menus into it\n    this._collapse(breadcrumbItems, containerSize);\n  }\n\n  _collapse($container, containerSize) {\n    let currentIndex = 1;\n    const visibleBreadcrumbItems = this._visibleBreadcrumbItems();\n    let prefSize = this._actualPrefSize(visibleBreadcrumbItems, true);\n\n    while (prefSize.width > containerSize.width && currentIndex < visibleBreadcrumbItems.length - 1) {\n      // remove breadcrumbItems until size fits or only 2 breadcrumbItems are visible\n      const crumb = visibleBreadcrumbItems[currentIndex];\n      crumb.$container.hide();\n      crumb._layHidden = true;\n      visibleBreadcrumbItems.splice(currentIndex, 1);\n      prefSize = this._actualPrefSize(visibleBreadcrumbItems, true);\n    }\n  }\n\n  _applyToEllipsis(fun) {\n    if (this._breadcrumbBar._ellipsisBreadcrumbItem) {\n      fun(this._breadcrumbBar._ellipsisBreadcrumbItem);\n    }\n  }\n\n  _undoCollapse() {\n    arrays.ensure(this._breadcrumbBar.breadcrumbItems).forEach(crumb => {\n      crumb.$container.show();\n      crumb._layHidden = false;\n    });\n  }\n\n  preferredLayoutSize($container) {\n    const breadcrumbItems = this._visibleBreadcrumbItems();\n\n    this._undoCollapse(breadcrumbItems);\n\n    return this._actualPrefSize();\n  }\n\n  _breadcrumbSize(breadcrumbItem) {\n    const classList = breadcrumbItem.$container.attr('class');\n    breadcrumbItem.$container.removeClass('hidden');\n\n    breadcrumbItem.htmlComp.invalidateLayout();\n    const prefSize = breadcrumbItem.htmlComp.prefSize({\n      useCssSize: true,\n      exact: true\n    }).add(graphics.margins(breadcrumbItem.$container));\n\n    breadcrumbItem.$container.attrOrRemove('class', classList);\n    return prefSize;\n  }\n\n  _visibleBreadcrumbItems() {\n    return this._breadcrumbBar.breadcrumbItems.filter(breadcrumb => {\n      return breadcrumb.visible;\n    }, this);\n  }\n\n  _actualPrefSize(breadcrumbItems, considerEllipsis) {\n    breadcrumbItems = breadcrumbItems || this._visibleBreadcrumbItems();\n\n    const breadcrumbItemsWidth = this._breadcrumbItemsWidth(breadcrumbItems, considerEllipsis);\n    const prefSize = graphics.prefSize(this._breadcrumbBar.$container, {\n      includeMargin: true,\n      useCssSize: true\n    });\n    prefSize.width = breadcrumbItemsWidth + this._breadcrumbBar.htmlComp.insets().horizontal();\n\n    return prefSize;\n  }\n\n  /**\n   * @return {number} the preferred width of all breadcrumbItems (plus ellipsis breadcrumb)\n   */\n  _breadcrumbItemsWidth(breadcrumbItems, considerEllipsis) {\n    let breadcrumbsWidth = 0;\n    breadcrumbItems = breadcrumbItems || this._visibleBreadcrumbItems();\n    breadcrumbItems.forEach(breadcrumbItem => {\n      if (breadcrumbItem.rendered) {\n        breadcrumbsWidth += breadcrumbItem.$container.outerWidth(true);\n      }\n    }, this);\n\n    if (considerEllipsis && this._breadcrumbBar._ellipsisBreadcrumbItem && this._breadcrumbBar._ellipsisBreadcrumbItem.rendered) {\n      breadcrumbsWidth += this._breadcrumbBar._ellipsisBreadcrumbItem.$container.outerWidth(true);\n    }\n    return breadcrumbsWidth;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}