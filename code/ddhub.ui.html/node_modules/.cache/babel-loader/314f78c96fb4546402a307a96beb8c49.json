{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { defaultValues, icons, objects, scout, styles, texts, Tree } from '../index';\nimport $ from 'jquery';\n\n/**\n * @class\n */\nexport default class TreeNode {\n  constructor() {\n    this.$node = null;\n    this.$text = null;\n    this.attached = false;\n    this.checked = false;\n    this.childNodes = [];\n    this.childrenLoaded = false;\n    this.childrenChecked = false;\n    this.cssClass = null;\n    this.destroyed = false;\n    this.enabled = true;\n    this.expanded = false;\n    this.expandedLazy = false;\n    this.filterAccepted = true;\n    this.filterDirty = false;\n    this.htmlEnabled = false;\n    this.iconId = null;\n    this.id = null;\n    this.initialized = false;\n    this.initialExpanded = false;\n    this.lazyExpandingEnabled = false;\n    this.leaf = false;\n    this.level = 0;\n    this.parent = null;\n    this.parentNode = undefined;\n    this.prevSelectionAnimationDone = false;\n    this.rendered = false;\n    this.session = null;\n    this.text = null;\n\n    /**\n     * This internal variable stores the promise which is used when a loadChildren() operation is in progress.\n     */\n    this._loadChildrenPromise = false;\n  }\n  init(model) {\n    let staticModel = this._jsonModel();\n    if (staticModel) {\n      model = $.extend({}, staticModel, model);\n    }\n    this._init(model);\n    if (model.initialExpanded === undefined) {\n      this.initialExpanded = this.expanded;\n    }\n  }\n  destroy() {\n    if (this.destroyed) {\n      // Already destroyed, do nothing\n      return;\n    }\n    this._destroy();\n    this.destroyed = true;\n  }\n\n  /**\n   * Override this method to do something when TreeNode gets destroyed. The default impl. does nothing.\n   */\n  _destroy() {\n    // NOP\n  }\n  getTree() {\n    return this.parent;\n  }\n  _init(model) {\n    scout.assertParameter('parent', model.parent, Tree);\n    this.session = model.session || model.parent.session;\n    $.extend(this, model);\n    defaultValues.applyTo(this);\n    texts.resolveTextProperty(this, 'text');\n    icons.resolveIconProperty(this, 'iconId');\n\n    // make sure all child nodes are TreeNodes too\n    if (this.hasChildNodes()) {\n      this.getTree()._ensureTreeNodes(this.childNodes);\n    }\n  }\n  _jsonModel() {}\n  reset() {\n    if (this.$node) {\n      this.$node.remove();\n      this.$node = null;\n    }\n    this.rendered = false;\n    this.attached = false;\n  }\n  hasChildNodes() {\n    return this.childNodes.length > 0;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is an ancestor of the given node\n   */\n  isAncestorOf(node) {\n    while (node) {\n      if (node.parentNode === this) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is a descendant of the given node\n   */\n  isDescendantOf(node) {\n    if (node === this.parentNode) {\n      return true;\n    }\n    if (!this.parentNode) {\n      return false;\n    }\n    return this.parentNode.isDescendantOf(node);\n  }\n  setFilterAccepted(filterAccepted) {\n    this.filterAccepted = filterAccepted;\n  }\n  isFilterAccepted(forceFilter) {\n    if (this.filterDirty || forceFilter) {\n      this.getTree().applyFiltersForNode(this);\n    }\n    return this.filterAccepted;\n  }\n\n  /**\n   * This method loads the child nodes of this node and returns a jQuery.Deferred to register callbacks\n   * when loading is done or has failed. This method should only be called when childrenLoaded is false.\n   *\n   * @return {$.Deferred} or null when TreeNode cannot load children (which is the case for all\n   *     TreeNodes in the remote case). The default impl. return null.\n   */\n  loadChildren() {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method calls loadChildren() but does nothing when children are already loaded or when loadChildren()\n   * is already in progress.\n   * @returns {Promise}\n   */\n  ensureLoadChildren() {\n    // when children are already loaded we return an already resolved promise so the caller can continue immediately\n    if (this.childrenLoaded) {\n      return $.resolvedPromise();\n    }\n    // when load children is already in progress, we return the same promise\n    if (this._loadChildrenPromise) {\n      return this._loadChildrenPromise;\n    }\n    let deferred = this.loadChildren();\n    let promise = deferred.promise();\n    // check if we can get rid of this state-check in a future release\n    if (deferred.state() === 'resolved') {\n      this._loadChildrenPromise = null;\n      return promise;\n    }\n    this._loadChildrenPromise = promise;\n    promise.done(this._onLoadChildrenDone.bind(this));\n    return promise; // we must always return a promise, never null - otherwise caller would throw an error\n  }\n\n  _onLoadChildrenDone() {\n    this._loadChildrenPromise = null;\n  }\n  setText(text) {\n    this.text = text;\n  }\n\n  /**\n   * This functions renders sets the $node and $text properties.\n   *\n   * @param {jQuery} $parent the tree DOM\n   * @param {number} paddingLeft calculated by tree\n   */\n  render($parent, paddingLeft) {\n    this.$node = $parent.makeDiv('tree-node').data('node', this).attr('data-nodeid', this.id).attr('data-level', this.level);\n    if (!objects.isNullOrUndefined(paddingLeft)) {\n      this.$node.cssPaddingLeft(paddingLeft);\n    }\n    this.$text = this.$node.appendSpan('text');\n    this._renderControl();\n    if (this.getTree().checkable) {\n      this._renderCheckbox();\n    }\n    this._renderText();\n    this._renderIcon();\n  }\n  _renderText() {\n    if (this.htmlEnabled) {\n      this.$text.html(this.text);\n    } else {\n      this.$text.textOrNbsp(this.text);\n    }\n  }\n  _renderChecked() {\n    // if node is not rendered, do nothing\n    if (!this.rendered) {\n      return;\n    }\n    this.$node.children('.tree-node-checkbox').children('.check-box').toggleClass('checked', this.checked);\n  }\n  _renderIcon() {\n    this.$node.toggleClass('has-icon', !!this.iconId);\n    this.$node.icon(this.iconId, $icon => $icon.insertBefore(this.$text));\n  }\n  $icon() {\n    return this.$node.children('.icon');\n  }\n  _renderControl() {\n    let $control = this.$node.prependDiv('tree-node-control');\n    this._updateControl($control);\n  }\n  _updateControl($control) {\n    let tree = this.getTree();\n    $control.toggleClass('checkable', tree.checkable);\n    $control.cssPaddingLeft(tree._computeNodeControlPaddingLeft(this));\n    $control.setVisible(!this.leaf);\n  }\n  _renderCheckbox() {\n    let $checkboxContainer = this.$node.prependDiv('tree-node-checkbox');\n    let $checkbox = $checkboxContainer.appendDiv('check-box').toggleClass('checked', this.checked).toggleClass('disabled', !this.enabled);\n    $checkbox.toggleClass('children-checked', !!this.childrenChecked);\n  }\n  _decorate() {\n    // This node is not yet rendered, nothing to do\n    if (!this.$node) {\n      return;\n    }\n    let $node = this.$node,\n      tree = this.getTree();\n    $node.attr('class', this._preserveCssClasses($node));\n    $node.addClass(this.cssClass);\n    $node.toggleClass('leaf', !!this.leaf);\n    $node.toggleClass('expanded', !!this.expanded && this.childNodes.length > 0);\n    $node.toggleClass('lazy', $node.hasClass('expanded') && this.expandedLazy);\n    $node.toggleClass('group', !!tree.groupedNodes[this.id]);\n    $node.setEnabled(!!this.enabled);\n    $node.children('.tree-node-control').setVisible(!this.leaf);\n    $node.children('.tree-node-checkbox').children('.check-box').toggleClass('disabled', !this.enabled);\n    if (!this.parentNode && tree.selectedNodes.length === 0 ||\n    // root nodes have class child-of-selected if no node is selected\n    tree._isChildOfSelectedNodes(this)) {\n      $node.addClass('child-of-selected');\n    }\n    this._renderText();\n    this._renderIcon();\n    styles.legacyStyle(this._getStyles(), $node);\n\n    // If parent node is marked as 'lazy', check if any visible child nodes remain.\n    if (this.parentNode && this.parentNode.expandedLazy) {\n      let hasVisibleNodes = this.parentNode.childNodes.some(childNode => {\n        return !!tree.visibleNodesMap[childNode.id];\n      });\n      if (!hasVisibleNodes && this.parentNode.$node) {\n        // Remove 'lazy' from parent\n        this.parentNode.$node.removeClass('lazy');\n      }\n    }\n  }\n\n  /**\n   * @return {object} The object that has the properties used for styles (colors, fonts, etc.)\n   *     The default impl. returns \"this\". Override this function to return another object.\n   */\n  _getStyles() {\n    return this;\n  }\n\n  /**\n   * This function extracts all CSS classes that are set externally by the tree.\n   * The classes depend on the tree hierarchy or the selection and thus cannot determined\n   * by the node itself.\n   */\n  _preserveCssClasses($node) {\n    let cssClass = 'tree-node';\n    if ($node.isSelected()) {\n      cssClass += ' selected';\n    }\n    if ($node.hasClass('ancestor-of-selected')) {\n      cssClass += ' ancestor-of-selected';\n    }\n    if ($node.hasClass('parent-of-selected')) {\n      cssClass += ' parent-of-selected';\n    }\n    return cssClass;\n  }\n}","map":{"version":3,"names":["defaultValues","icons","objects","scout","styles","texts","Tree","$","TreeNode","constructor","$node","$text","attached","checked","childNodes","childrenLoaded","childrenChecked","cssClass","destroyed","enabled","expanded","expandedLazy","filterAccepted","filterDirty","htmlEnabled","iconId","id","initialized","initialExpanded","lazyExpandingEnabled","leaf","level","parent","parentNode","undefined","prevSelectionAnimationDone","rendered","session","text","_loadChildrenPromise","init","model","staticModel","_jsonModel","extend","_init","destroy","_destroy","getTree","assertParameter","applyTo","resolveTextProperty","resolveIconProperty","hasChildNodes","_ensureTreeNodes","reset","remove","length","isAncestorOf","node","isDescendantOf","setFilterAccepted","isFilterAccepted","forceFilter","applyFiltersForNode","loadChildren","resolvedDeferred","ensureLoadChildren","resolvedPromise","deferred","promise","state","done","_onLoadChildrenDone","bind","setText","render","$parent","paddingLeft","makeDiv","data","attr","isNullOrUndefined","cssPaddingLeft","appendSpan","_renderControl","checkable","_renderCheckbox","_renderText","_renderIcon","html","textOrNbsp","_renderChecked","children","toggleClass","icon","$icon","insertBefore","$control","prependDiv","_updateControl","tree","_computeNodeControlPaddingLeft","setVisible","$checkboxContainer","$checkbox","appendDiv","_decorate","_preserveCssClasses","addClass","hasClass","groupedNodes","setEnabled","selectedNodes","_isChildOfSelectedNodes","legacyStyle","_getStyles","hasVisibleNodes","some","childNode","visibleNodesMap","removeClass","isSelected"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tree/TreeNode.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {defaultValues, icons, objects, scout, styles, texts, Tree} from '../index';\nimport $ from 'jquery';\n\n/**\n * @class\n */\nexport default class TreeNode {\n\n  constructor() {\n    this.$node = null;\n    this.$text = null;\n    this.attached = false;\n    this.checked = false;\n    this.childNodes = [];\n    this.childrenLoaded = false;\n    this.childrenChecked = false;\n    this.cssClass = null;\n    this.destroyed = false;\n    this.enabled = true;\n    this.expanded = false;\n    this.expandedLazy = false;\n    this.filterAccepted = true;\n    this.filterDirty = false;\n    this.htmlEnabled = false;\n    this.iconId = null;\n    this.id = null;\n    this.initialized = false;\n    this.initialExpanded = false;\n    this.lazyExpandingEnabled = false;\n    this.leaf = false;\n    this.level = 0;\n    this.parent = null;\n    this.parentNode = undefined;\n    this.prevSelectionAnimationDone = false;\n    this.rendered = false;\n    this.session = null;\n    this.text = null;\n\n    /**\n     * This internal variable stores the promise which is used when a loadChildren() operation is in progress.\n     */\n    this._loadChildrenPromise = false;\n  }\n\n  init(model) {\n    let staticModel = this._jsonModel();\n    if (staticModel) {\n      model = $.extend({}, staticModel, model);\n    }\n    this._init(model);\n    if (model.initialExpanded === undefined) {\n      this.initialExpanded = this.expanded;\n    }\n  }\n\n  destroy() {\n    if (this.destroyed) {\n      // Already destroyed, do nothing\n      return;\n    }\n    this._destroy();\n    this.destroyed = true;\n  }\n\n  /**\n   * Override this method to do something when TreeNode gets destroyed. The default impl. does nothing.\n   */\n  _destroy() {\n    // NOP\n  }\n\n  getTree() {\n    return this.parent;\n  }\n\n  _init(model) {\n    scout.assertParameter('parent', model.parent, Tree);\n    this.session = model.session || model.parent.session;\n\n    $.extend(this, model);\n    defaultValues.applyTo(this);\n\n    texts.resolveTextProperty(this, 'text');\n    icons.resolveIconProperty(this, 'iconId');\n\n    // make sure all child nodes are TreeNodes too\n    if (this.hasChildNodes()) {\n      this.getTree()._ensureTreeNodes(this.childNodes);\n    }\n  }\n\n  _jsonModel() {\n  }\n\n  reset() {\n    if (this.$node) {\n      this.$node.remove();\n      this.$node = null;\n    }\n    this.rendered = false;\n    this.attached = false;\n  }\n\n  hasChildNodes() {\n    return this.childNodes.length > 0;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is an ancestor of the given node\n   */\n  isAncestorOf(node) {\n    while (node) {\n      if (node.parentNode === this) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  }\n\n  /**\n   * @returns {boolean} true, if the node is a descendant of the given node\n   */\n  isDescendantOf(node) {\n    if (node === this.parentNode) {\n      return true;\n    }\n    if (!this.parentNode) {\n      return false;\n    }\n    return this.parentNode.isDescendantOf(node);\n  }\n\n  setFilterAccepted(filterAccepted) {\n    this.filterAccepted = filterAccepted;\n  }\n\n  isFilterAccepted(forceFilter) {\n    if (this.filterDirty || forceFilter) {\n      this.getTree().applyFiltersForNode(this);\n    }\n    return this.filterAccepted;\n  }\n\n  /**\n   * This method loads the child nodes of this node and returns a jQuery.Deferred to register callbacks\n   * when loading is done or has failed. This method should only be called when childrenLoaded is false.\n   *\n   * @return {$.Deferred} or null when TreeNode cannot load children (which is the case for all\n   *     TreeNodes in the remote case). The default impl. return null.\n   */\n  loadChildren() {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method calls loadChildren() but does nothing when children are already loaded or when loadChildren()\n   * is already in progress.\n   * @returns {Promise}\n   */\n  ensureLoadChildren() {\n    // when children are already loaded we return an already resolved promise so the caller can continue immediately\n    if (this.childrenLoaded) {\n      return $.resolvedPromise();\n    }\n    // when load children is already in progress, we return the same promise\n    if (this._loadChildrenPromise) {\n      return this._loadChildrenPromise;\n    }\n    let deferred = this.loadChildren();\n    let promise = deferred.promise();\n    // check if we can get rid of this state-check in a future release\n    if (deferred.state() === 'resolved') {\n      this._loadChildrenPromise = null;\n      return promise;\n    }\n\n    this._loadChildrenPromise = promise;\n    promise.done(this._onLoadChildrenDone.bind(this));\n    return promise; // we must always return a promise, never null - otherwise caller would throw an error\n  }\n\n  _onLoadChildrenDone() {\n    this._loadChildrenPromise = null;\n  }\n\n  setText(text) {\n    this.text = text;\n  }\n\n  /**\n   * This functions renders sets the $node and $text properties.\n   *\n   * @param {jQuery} $parent the tree DOM\n   * @param {number} paddingLeft calculated by tree\n   */\n  render($parent, paddingLeft) {\n    this.$node = $parent.makeDiv('tree-node')\n      .data('node', this)\n      .attr('data-nodeid', this.id)\n      .attr('data-level', this.level);\n    if (!objects.isNullOrUndefined(paddingLeft)) {\n      this.$node.cssPaddingLeft(paddingLeft);\n    }\n    this.$text = this.$node.appendSpan('text');\n\n    this._renderControl();\n    if (this.getTree().checkable) {\n      this._renderCheckbox();\n    }\n    this._renderText();\n    this._renderIcon();\n  }\n\n  _renderText() {\n    if (this.htmlEnabled) {\n      this.$text.html(this.text);\n    } else {\n      this.$text.textOrNbsp(this.text);\n    }\n  }\n\n  _renderChecked() {\n    // if node is not rendered, do nothing\n    if (!this.rendered) {\n      return;\n    }\n\n    this.$node\n      .children('.tree-node-checkbox')\n      .children('.check-box')\n      .toggleClass('checked', this.checked);\n  }\n\n  _renderIcon() {\n    this.$node.toggleClass('has-icon', !!this.iconId);\n    this.$node.icon(this.iconId, $icon => $icon.insertBefore(this.$text));\n  }\n\n  $icon() {\n    return this.$node.children('.icon');\n  }\n\n  _renderControl() {\n    let $control = this.$node.prependDiv('tree-node-control');\n    this._updateControl($control);\n  }\n\n  _updateControl($control) {\n    let tree = this.getTree();\n    $control.toggleClass('checkable', tree.checkable);\n    $control.cssPaddingLeft(tree._computeNodeControlPaddingLeft(this));\n    $control.setVisible(!this.leaf);\n  }\n\n  _renderCheckbox() {\n    let $checkboxContainer = this.$node.prependDiv('tree-node-checkbox');\n    let $checkbox = $checkboxContainer\n      .appendDiv('check-box')\n      .toggleClass('checked', this.checked)\n      .toggleClass('disabled', !this.enabled);\n    $checkbox.toggleClass('children-checked', !!this.childrenChecked);\n  }\n\n  _decorate() {\n    // This node is not yet rendered, nothing to do\n    if (!this.$node) {\n      return;\n    }\n\n    let $node = this.$node,\n      tree = this.getTree();\n\n    $node.attr('class', this._preserveCssClasses($node));\n    $node.addClass(this.cssClass);\n    $node.toggleClass('leaf', !!this.leaf);\n    $node.toggleClass('expanded', (!!this.expanded && this.childNodes.length > 0));\n    $node.toggleClass('lazy', $node.hasClass('expanded') && this.expandedLazy);\n    $node.toggleClass('group', !!tree.groupedNodes[this.id]);\n    $node.setEnabled(!!this.enabled);\n    $node.children('.tree-node-control').setVisible(!this.leaf);\n    $node\n      .children('.tree-node-checkbox')\n      .children('.check-box')\n      .toggleClass('disabled', !this.enabled);\n\n    if (!this.parentNode && tree.selectedNodes.length === 0 || // root nodes have class child-of-selected if no node is selected\n      tree._isChildOfSelectedNodes(this)) {\n      $node.addClass('child-of-selected');\n    }\n\n    this._renderText();\n    this._renderIcon();\n    styles.legacyStyle(this._getStyles(), $node);\n\n    // If parent node is marked as 'lazy', check if any visible child nodes remain.\n    if (this.parentNode && this.parentNode.expandedLazy) {\n      let hasVisibleNodes = this.parentNode.childNodes.some(childNode => {\n        return !!tree.visibleNodesMap[childNode.id];\n      });\n      if (!hasVisibleNodes && this.parentNode.$node) {\n        // Remove 'lazy' from parent\n        this.parentNode.$node.removeClass('lazy');\n      }\n    }\n  }\n\n  /**\n   * @return {object} The object that has the properties used for styles (colors, fonts, etc.)\n   *     The default impl. returns \"this\". Override this function to return another object.\n   */\n  _getStyles() {\n    return this;\n  }\n\n  /**\n   * This function extracts all CSS classes that are set externally by the tree.\n   * The classes depend on the tree hierarchy or the selection and thus cannot determined\n   * by the node itself.\n   */\n  _preserveCssClasses($node) {\n    let cssClass = 'tree-node';\n    if ($node.isSelected()) {\n      cssClass += ' selected';\n    }\n    if ($node.hasClass('ancestor-of-selected')) {\n      cssClass += ' ancestor-of-selected';\n    }\n    if ($node.hasClass('parent-of-selected')) {\n      cssClass += ' parent-of-selected';\n    }\n    return cssClass;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}