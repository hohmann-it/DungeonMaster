{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Device, Form, FormField, GroupBox, icons, inspector, scout, scrollbars, strings, tooltips, WizardProgressFieldLayout } from '../../../index';\nimport $ from 'jquery';\nexport default class WizardProgressField extends FormField {\n  constructor() {\n    super();\n    this.activeStepIndex = -1;\n    this.steps = [];\n\n    // Used to determine direction of transition (\"going backward\" or \"going forward\")\n    this.previousActiveStepIndex = -1;\n\n    // Helper map to find a step by step index. The step index does not necessarily correspond to the\n    // array index, because invisible model steps can produce \"holes\" in the sequence of indices.\n    this.stepsMap = {};\n    this.$wizardStepsBody = null;\n    this.keepActiveStepAtLeftBorder = Device.get().type === Device.Type.MOBILE;\n    this.animateScrolling = Device.get().type === Device.Type.MOBILE;\n  }\n  _init(model) {\n    super._init(model);\n    this._updateStepsMap();\n  }\n  _render() {\n    this.addContainer(this.$parent, 'wizard-progress-field', new WizardProgressFieldLayout(this));\n    this.addField(this.$parent.makeDiv('wizard-steps'));\n    this.addStatus();\n    this.addLabel();\n\n    // Add compact class on mobile. It is not based on width because height will be smaller too which is not desired on desktop or tablet\n    // (field would not be correctly aligned with other components anymore)\n    this.$field.toggleClass('compact', Device.get().type === Device.Type.MOBILE);\n    this.htmlComp.layout.compactFieldWidth = -1; // disable compact toggling\n\n    this.$wizardStepsBody = this.$field.appendDiv('wizard-steps-body');\n    this._installScrollbars({\n      axis: 'x',\n      scrollShadow: 'none'\n    });\n\n    // If this field is the first field in a form's main box, mark the form as \"wizard-container-form\"\n    if (this.parent instanceof GroupBox && this.parent.controls[0] === this && this.parent.parent instanceof Form) {\n      let form = this.parent.parent;\n      form.$container.addClass('wizard-container-form');\n    }\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSteps();\n    this._renderActiveStepIndex();\n  }\n  _setSteps(steps) {\n    this._setProperty('steps', steps);\n    this._updateStepsMap();\n  }\n  _renderSteps() {\n    this.$wizardStepsBody.children('.wizard-step').each(function () {\n      // Tooltips are only uninstalled if user clicked outside container. However, the steps\n      // may be updated by clicking inside the container. Therefore, manually make sure all\n      // tooltips are uninstalled before destroying the DOM elements.\n      tooltips.uninstall($(this));\n    });\n    this.$wizardStepsBody.empty();\n    this.steps.forEach((step, index) => {\n      // Step\n      let $step = this.$wizardStepsBody.appendDiv('wizard-step').addClass(step.cssClass).data('wizard-step', step);\n      step.$step = $step;\n      this._updateStepClasses(step);\n\n      // Inspector info\n      if (this.session.inspector) {\n        inspector.applyInfo(step, $step);\n        $step.attr('data-step-index', step.index);\n      }\n      if (strings.hasText(step.tooltipText)) {\n        tooltips.install($step, {\n          parent: this,\n          text: step.tooltipText,\n          tooltipPosition: 'bottom'\n        });\n      }\n\n      // Icon\n      let $icon = $step.appendDiv('icon');\n      if (step.iconId) {\n        $icon.icon(step.iconId);\n      } else if (step.finished) {\n        $icon.icon(icons.CHECKED_BOLD);\n      } else {\n        $icon.text(index + 1);\n      }\n      // Text\n      let $text = $step.appendDiv('text');\n      $text.appendDiv('title').textOrNbsp(step.title).attr('data-text', step.title);\n      if (step.subTitle) {\n        $text.appendDiv('sub-title').textOrNbsp(step.subTitle);\n      }\n\n      // Separator\n      if (index < this.steps.length - 1) {\n        this.$wizardStepsBody.appendDiv('wizard-step-separator');\n      }\n    });\n    this.invalidateLayoutTree(false);\n  }\n  _setActiveStepIndex(activeStepIndex) {\n    this.previousActiveStepIndex = this.activeStepIndex;\n    // Ensure this.activeStepIndex always has a value. If the server has no active step set (may\n    // happen during transition between steps), we use -1 as dummy value\n    this._setProperty('activeStepIndex', scout.nvl(activeStepIndex, -1));\n  }\n  _renderActiveStepIndex() {\n    this.steps.forEach(this._updateStepClasses.bind(this));\n    this.invalidateLayoutTree(false);\n  }\n  _updateStepClasses(step) {\n    let $step = step.$step;\n    $step.removeClass('selected first last action-enabled disabled');\n    $step.off('click.selected');\n\n    // Important: those indices correspond to the UI's data structures (this.steps) and are not necessarily\n    // consistent with the server indices (because the server does not send invisible steps).\n    let stepIndex = this.steps.indexOf(step);\n    let activeStepIndex = this.steps.indexOf(this.stepsMap[this.activeStepIndex]);\n    if (this.enabledComputed && step.enabled && step.actionEnabled && stepIndex !== this.activeStepIndex) {\n      $step.addClass('action-enabled');\n      $step.on('click.selected', this._onStepClick.bind(this));\n    } else if (!this.enabledComputed || !step.enabled) {\n      $step.addClass('disabled');\n    }\n    $step.toggleClass('finished', step.finished);\n    if (stepIndex >= 0 && activeStepIndex >= 0) {\n      // Active\n      if (stepIndex === activeStepIndex) {\n        $step.addClass('selected');\n      }\n      // First / last\n      if (stepIndex === 0) {\n        $step.addClass('first');\n      }\n      if (stepIndex === this.steps.length - 1) {\n        $step.addClass('last');\n      }\n    }\n\n    // update background color for this.$wizardStepsBody, use same as for last step (otherwise there might be white space after last step)\n    if (stepIndex === this.steps.length - 1) {\n      this.$wizardStepsBody.css('background-color', $step.css('background-color'));\n    }\n  }\n  _stepIndex($step) {\n    if ($step) {\n      let step = $step.data('wizard-step');\n      if (step) {\n        return step.index;\n      }\n    }\n    return -1;\n  }\n  _updateStepsMap() {\n    this.stepsMap = {};\n    this.steps.forEach(step => {\n      this.stepsMap[step.index] = step;\n    });\n  }\n  _resolveStep(stepIndex) {\n    // Because \"step index\" does not necessarily correspond to the array indices\n    // (invisible model steps produce \"holes\"), we have to loop over the array.\n    for (let i = 0; i < this.steps.length; i++) {\n      let step = this.steps[i];\n      if (step.index === stepIndex) {\n        return step;\n      }\n    }\n    return null;\n  }\n  _onStepClick(event) {\n    let $step = $(event.currentTarget); // currentTarget instead of target to support event bubbling from inner divs\n    let targetStepIndex = this._stepIndex($step);\n    if (targetStepIndex >= 0 && targetStepIndex !== this.activeStepIndex) {\n      this.trigger('stepAction', {\n        stepIndex: targetStepIndex\n      });\n    }\n  }\n  scrollToActiveStep() {\n    let currentStep = this.stepsMap[this.activeStepIndex];\n    if (!currentStep) {\n      return;\n    }\n    let $currentStep = currentStep.$step;\n    let currentStepLeft = $currentStep.position().left;\n    let animate = this.animateScrolling && this.htmlComp.layouted;\n    if (this.keepActiveStepAtLeftBorder) {\n      let $firstStep = this.steps[0].$step;\n      let scrollLeft = currentStepLeft - $firstStep.cssPaddingLeft() + $currentStep.cssPaddingLeft();\n      scrollbars.scrollLeft(this.$field, scrollLeft, {\n        animate: animate\n      });\n    } else {\n      let scrollLeft = this.$field.scrollLeft();\n      let currentStepWidth = $currentStep.width();\n      let fieldWidth = this.$field.width();\n\n      // If going forward, try to scroll the steps such that the center of active step is not after 75% of the available space.\n      // If going backward, try to scroll the steps such that the center of the active step is not before 25% of the available space.\n      let goingBack = this.previousActiveStepIndex > this.activeStepIndex;\n      let p1 = scrollLeft + Math.floor(fieldWidth * (goingBack ? 0.25 : 0.75));\n      let p2 = currentStepLeft + Math.floor(currentStepWidth / 2);\n      if (goingBack && p2 < p1 || !goingBack && p2 > p1) {\n        scrollbars.scrollLeft(this.$field, scrollLeft + (p2 - p1), {\n          animate: animate\n        });\n      }\n    }\n  }\n}","map":{"version":3,"names":["Device","Form","FormField","GroupBox","icons","inspector","scout","scrollbars","strings","tooltips","WizardProgressFieldLayout","$","WizardProgressField","constructor","activeStepIndex","steps","previousActiveStepIndex","stepsMap","$wizardStepsBody","keepActiveStepAtLeftBorder","get","type","Type","MOBILE","animateScrolling","_init","model","_updateStepsMap","_render","addContainer","$parent","addField","makeDiv","addStatus","addLabel","$field","toggleClass","htmlComp","layout","compactFieldWidth","appendDiv","_installScrollbars","axis","scrollShadow","parent","controls","form","$container","addClass","_renderProperties","_renderSteps","_renderActiveStepIndex","_setSteps","_setProperty","children","each","uninstall","empty","forEach","step","index","$step","cssClass","data","_updateStepClasses","session","applyInfo","attr","hasText","tooltipText","install","text","tooltipPosition","$icon","iconId","icon","finished","CHECKED_BOLD","$text","textOrNbsp","title","subTitle","length","invalidateLayoutTree","_setActiveStepIndex","nvl","bind","removeClass","off","stepIndex","indexOf","enabledComputed","enabled","actionEnabled","on","_onStepClick","css","_stepIndex","_resolveStep","i","event","currentTarget","targetStepIndex","trigger","scrollToActiveStep","currentStep","$currentStep","currentStepLeft","position","left","animate","layouted","$firstStep","scrollLeft","cssPaddingLeft","currentStepWidth","width","fieldWidth","goingBack","p1","Math","floor","p2"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/wizard/WizardProgressField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Device, Form, FormField, GroupBox, icons, inspector, scout, scrollbars, strings, tooltips, WizardProgressFieldLayout} from '../../../index';\nimport $ from 'jquery';\n\nexport default class WizardProgressField extends FormField {\n\n  constructor() {\n    super();\n\n    this.activeStepIndex = -1;\n    this.steps = [];\n\n    // Used to determine direction of transition (\"going backward\" or \"going forward\")\n    this.previousActiveStepIndex = -1;\n\n    // Helper map to find a step by step index. The step index does not necessarily correspond to the\n    // array index, because invisible model steps can produce \"holes\" in the sequence of indices.\n    this.stepsMap = {};\n    this.$wizardStepsBody = null;\n    this.keepActiveStepAtLeftBorder = Device.get().type === Device.Type.MOBILE;\n    this.animateScrolling = Device.get().type === Device.Type.MOBILE;\n  }\n\n  _init(model) {\n    super._init(model);\n    this._updateStepsMap();\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'wizard-progress-field', new WizardProgressFieldLayout(this));\n    this.addField(this.$parent.makeDiv('wizard-steps'));\n    this.addStatus();\n    this.addLabel();\n\n    // Add compact class on mobile. It is not based on width because height will be smaller too which is not desired on desktop or tablet\n    // (field would not be correctly aligned with other components anymore)\n    this.$field.toggleClass('compact', Device.get().type === Device.Type.MOBILE);\n    this.htmlComp.layout.compactFieldWidth = -1; // disable compact toggling\n\n    this.$wizardStepsBody = this.$field.appendDiv('wizard-steps-body');\n\n    this._installScrollbars({\n      axis: 'x',\n      scrollShadow: 'none'\n    });\n\n    // If this field is the first field in a form's main box, mark the form as \"wizard-container-form\"\n    if (this.parent instanceof GroupBox && this.parent.controls[0] === this && this.parent.parent instanceof Form) {\n      let form = this.parent.parent;\n      form.$container.addClass('wizard-container-form');\n    }\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSteps();\n    this._renderActiveStepIndex();\n  }\n\n  _setSteps(steps) {\n    this._setProperty('steps', steps);\n    this._updateStepsMap();\n  }\n\n  _renderSteps() {\n    this.$wizardStepsBody.children('.wizard-step').each(function() {\n      // Tooltips are only uninstalled if user clicked outside container. However, the steps\n      // may be updated by clicking inside the container. Therefore, manually make sure all\n      // tooltips are uninstalled before destroying the DOM elements.\n      tooltips.uninstall($(this));\n    });\n    this.$wizardStepsBody.empty();\n\n    this.steps.forEach((step, index) => {\n      // Step\n      let $step = this.$wizardStepsBody\n        .appendDiv('wizard-step')\n        .addClass(step.cssClass)\n        .data('wizard-step', step);\n      step.$step = $step;\n      this._updateStepClasses(step);\n\n      // Inspector info\n      if (this.session.inspector) {\n        inspector.applyInfo(step, $step);\n        $step.attr('data-step-index', step.index);\n      }\n\n      if (strings.hasText(step.tooltipText)) {\n        tooltips.install($step, {\n          parent: this,\n          text: step.tooltipText,\n          tooltipPosition: 'bottom'\n        });\n      }\n\n      // Icon\n      let $icon = $step.appendDiv('icon');\n      if (step.iconId) {\n        $icon.icon(step.iconId);\n      } else if (step.finished) {\n        $icon.icon(icons.CHECKED_BOLD);\n      } else {\n        $icon.text(index + 1);\n      }\n      // Text\n      let $text = $step.appendDiv('text');\n      $text.appendDiv('title').textOrNbsp(step.title).attr('data-text', step.title);\n      if (step.subTitle) {\n        $text.appendDiv('sub-title').textOrNbsp(step.subTitle);\n      }\n\n      // Separator\n      if (index < this.steps.length - 1) {\n        this.$wizardStepsBody\n          .appendDiv('wizard-step-separator');\n      }\n    });\n\n    this.invalidateLayoutTree(false);\n  }\n\n  _setActiveStepIndex(activeStepIndex) {\n    this.previousActiveStepIndex = this.activeStepIndex;\n    // Ensure this.activeStepIndex always has a value. If the server has no active step set (may\n    // happen during transition between steps), we use -1 as dummy value\n    this._setProperty('activeStepIndex', scout.nvl(activeStepIndex, -1));\n  }\n\n  _renderActiveStepIndex() {\n    this.steps.forEach(this._updateStepClasses.bind(this));\n    this.invalidateLayoutTree(false);\n  }\n\n  _updateStepClasses(step) {\n    let $step = step.$step;\n    $step.removeClass('selected first last action-enabled disabled');\n    $step.off('click.selected');\n\n    // Important: those indices correspond to the UI's data structures (this.steps) and are not necessarily\n    // consistent with the server indices (because the server does not send invisible steps).\n    let stepIndex = this.steps.indexOf(step);\n    let activeStepIndex = this.steps.indexOf(this.stepsMap[this.activeStepIndex]);\n\n    if (this.enabledComputed && step.enabled && step.actionEnabled && stepIndex !== this.activeStepIndex) {\n      $step.addClass('action-enabled');\n      $step.on('click.selected', this._onStepClick.bind(this));\n    } else if (!this.enabledComputed || !step.enabled) {\n      $step.addClass('disabled');\n    }\n    $step.toggleClass('finished', step.finished);\n\n    if (stepIndex >= 0 && activeStepIndex >= 0) {\n      // Active\n      if (stepIndex === activeStepIndex) {\n        $step.addClass('selected');\n      }\n      // First / last\n      if (stepIndex === 0) {\n        $step.addClass('first');\n      }\n      if (stepIndex === this.steps.length - 1) {\n        $step.addClass('last');\n      }\n    }\n\n    // update background color for this.$wizardStepsBody, use same as for last step (otherwise there might be white space after last step)\n    if (stepIndex === this.steps.length - 1) {\n      this.$wizardStepsBody.css('background-color', $step.css('background-color'));\n    }\n  }\n\n  _stepIndex($step) {\n    if ($step) {\n      let step = $step.data('wizard-step');\n      if (step) {\n        return step.index;\n      }\n    }\n    return -1;\n  }\n\n  _updateStepsMap() {\n    this.stepsMap = {};\n    this.steps.forEach(step => {\n      this.stepsMap[step.index] = step;\n    });\n  }\n\n  _resolveStep(stepIndex) {\n    // Because \"step index\" does not necessarily correspond to the array indices\n    // (invisible model steps produce \"holes\"), we have to loop over the array.\n    for (let i = 0; i < this.steps.length; i++) {\n      let step = this.steps[i];\n      if (step.index === stepIndex) {\n        return step;\n      }\n    }\n    return null;\n  }\n\n  _onStepClick(event) {\n    let $step = $(event.currentTarget); // currentTarget instead of target to support event bubbling from inner divs\n    let targetStepIndex = this._stepIndex($step);\n    if (targetStepIndex >= 0 && targetStepIndex !== this.activeStepIndex) {\n      this.trigger('stepAction', {\n        stepIndex: targetStepIndex\n      });\n    }\n  }\n\n  scrollToActiveStep() {\n    let currentStep = this.stepsMap[this.activeStepIndex];\n    if (!currentStep) {\n      return;\n    }\n    let $currentStep = currentStep.$step;\n    let currentStepLeft = $currentStep.position().left;\n    let animate = this.animateScrolling && this.htmlComp.layouted;\n    if (this.keepActiveStepAtLeftBorder) {\n      let $firstStep = this.steps[0].$step;\n      let scrollLeft = currentStepLeft - $firstStep.cssPaddingLeft() + $currentStep.cssPaddingLeft();\n      scrollbars.scrollLeft(this.$field, scrollLeft, {animate: animate});\n    } else {\n      let scrollLeft = this.$field.scrollLeft();\n      let currentStepWidth = $currentStep.width();\n      let fieldWidth = this.$field.width();\n\n      // If going forward, try to scroll the steps such that the center of active step is not after 75% of the available space.\n      // If going backward, try to scroll the steps such that the center of the active step is not before 25% of the available space.\n      let goingBack = (this.previousActiveStepIndex > this.activeStepIndex);\n      let p1 = scrollLeft + Math.floor(fieldWidth * (goingBack ? 0.25 : 0.75));\n      let p2 = currentStepLeft + Math.floor(currentStepWidth / 2);\n      if ((goingBack && p2 < p1) || (!goingBack && p2 > p1)) {\n        scrollbars.scrollLeft(this.$field, scrollLeft + (p2 - p1), {animate: animate});\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}