{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AppLinkKeyStroke, ValueField } from '../../../index';\nimport $ from 'jquery';\n\n/**\n * Base class for fields where the value should be visualized.\n */\nexport default class BeanField extends ValueField {\n  constructor() {\n    super();\n    this.preventInitialFocus = true;\n  }\n  _render() {\n    this.addContainer(this.$parent, 'bean-field');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderValue();\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n    this.keyStrokeContext.registerKeyStroke(new AppLinkKeyStroke(this, this._onAppLinkAction));\n  }\n  _formatValue(value) {\n    // The value cannot be changed by the user, therefore we always return the initial displayText property.\n    //\n    // Strange things happen, if an other value is returned... Example:\n    // 1. The value is set asynchronously on the field using setValue().\n    // 2. This causes the display text to be updated (using _formatValue).\n    // 3. When acceptInput() is called (via aboutToBlurByMouseDown), the \"current\" displayText\n    //    is read using _readDisplayText(). The default ValueField.js implementation returns\n    //    an empty string, which is different from this.displayText (which is equal to the value,\n    //    because of step 2).\n    // 4. Because the displayText has changed, parseAndSetValue() is called, which\n    //    causes the value to be set to the empty string. The _renderValue() method\n    //    will then most likely clear the bean field's content.\n    //\n    // Test case:\n    //   bf.setValue({...}) --> should not update displayText property\n    //   bf.acceptInput() --> should not do anything\n    return this.displayText;\n  }\n  _parseValue(displayText) {\n    // DisplayText cannot be converted to value, use original value (see comment in _formatValue).\n    return this.value;\n  }\n  _readDisplayText() {\n    // DisplayText cannot be changed, therefore it must be equal to the current value (see comment in _formatValue)\n    return this.displayText;\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    // nop\n  }\n  _renderValue() {\n    // to be implemented by the subclass\n  }\n  triggerAppLinkAction(ref) {\n    this.trigger('appLinkAction', {\n      ref: ref\n    });\n  }\n  _onAppLinkAction(event) {\n    let $target = $(event.delegateTarget);\n    let ref = $target.data('ref');\n    this.triggerAppLinkAction(ref);\n  }\n}","map":{"version":3,"names":["AppLinkKeyStroke","ValueField","$","BeanField","constructor","preventInitialFocus","_render","addContainer","$parent","addLabel","addField","makeDiv","addStatus","_renderProperties","_renderValue","_initKeyStrokeContext","keyStrokeContext","registerKeyStroke","_onAppLinkAction","_formatValue","value","displayText","_parseValue","_readDisplayText","_renderDisplayText","triggerAppLinkAction","ref","trigger","event","$target","delegateTarget","data"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/beanfield/BeanField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AppLinkKeyStroke, ValueField} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * Base class for fields where the value should be visualized.\n */\nexport default class BeanField extends ValueField {\n\n  constructor() {\n    super();\n\n    this.preventInitialFocus = true;\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'bean-field');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderValue();\n  }\n\n  /**\n   * @override FormField.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n\n    this.keyStrokeContext.registerKeyStroke(new AppLinkKeyStroke(this, this._onAppLinkAction));\n  }\n\n  _formatValue(value) {\n    // The value cannot be changed by the user, therefore we always return the initial displayText property.\n    //\n    // Strange things happen, if an other value is returned... Example:\n    // 1. The value is set asynchronously on the field using setValue().\n    // 2. This causes the display text to be updated (using _formatValue).\n    // 3. When acceptInput() is called (via aboutToBlurByMouseDown), the \"current\" displayText\n    //    is read using _readDisplayText(). The default ValueField.js implementation returns\n    //    an empty string, which is different from this.displayText (which is equal to the value,\n    //    because of step 2).\n    // 4. Because the displayText has changed, parseAndSetValue() is called, which\n    //    causes the value to be set to the empty string. The _renderValue() method\n    //    will then most likely clear the bean field's content.\n    //\n    // Test case:\n    //   bf.setValue({...}) --> should not update displayText property\n    //   bf.acceptInput() --> should not do anything\n    return this.displayText;\n  }\n\n  _parseValue(displayText) {\n    // DisplayText cannot be converted to value, use original value (see comment in _formatValue).\n    return this.value;\n  }\n\n  _readDisplayText() {\n    // DisplayText cannot be changed, therefore it must be equal to the current value (see comment in _formatValue)\n    return this.displayText;\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    // nop\n  }\n\n  _renderValue() {\n    // to be implemented by the subclass\n  }\n\n  triggerAppLinkAction(ref) {\n    this.trigger('appLinkAction', {\n      ref: ref\n    });\n  }\n\n  _onAppLinkAction(event) {\n    let $target = $(event.delegateTarget);\n    let ref = $target.data('ref');\n    this.triggerAppLinkAction(ref);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,gBAAgB,EAAEC,UAAU,QAAO,gBAAgB;AAC3D,OAAOC,CAAC,MAAM,QAAQ;;AAEtB;AACA;AACA;AACA,eAAe,MAAMC,SAAS,SAASF,UAAU,CAAC;EAEhDG,WAAW,GAAG;IACZ,KAAK,EAAE;IAEP,IAAI,CAACC,mBAAmB,GAAG,IAAI;EACjC;EAEAC,OAAO,GAAG;IACR,IAAI,CAACC,YAAY,CAAC,IAAI,CAACC,OAAO,EAAE,YAAY,CAAC;IAC7C,IAAI,CAACC,QAAQ,EAAE;IACf,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACF,OAAO,CAACG,OAAO,EAAE,CAAC;IACrC,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAC,iBAAiB,GAAG;IAClB,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,YAAY,EAAE;EACrB;;EAEA;AACF;AACA;EACEC,qBAAqB,GAAG;IACtB,KAAK,CAACA,qBAAqB,EAAE;IAE7B,IAAI,CAACC,gBAAgB,CAACC,iBAAiB,CAAC,IAAIjB,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAACkB,gBAAgB,CAAC,CAAC;EAC5F;EAEAC,YAAY,CAACC,KAAK,EAAE;IAClB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI,CAACC,WAAW;EACzB;EAEAC,WAAW,CAACD,WAAW,EAAE;IACvB;IACA,OAAO,IAAI,CAACD,KAAK;EACnB;EAEAG,gBAAgB,GAAG;IACjB;IACA,OAAO,IAAI,CAACF,WAAW;EACzB;;EAEA;AACF;AACA;EACEG,kBAAkB,GAAG;IACnB;EAAA;EAGFV,YAAY,GAAG;IACb;EAAA;EAGFW,oBAAoB,CAACC,GAAG,EAAE;IACxB,IAAI,CAACC,OAAO,CAAC,eAAe,EAAE;MAC5BD,GAAG,EAAEA;IACP,CAAC,CAAC;EACJ;EAEAR,gBAAgB,CAACU,KAAK,EAAE;IACtB,IAAIC,OAAO,GAAG3B,CAAC,CAAC0B,KAAK,CAACE,cAAc,CAAC;IACrC,IAAIJ,GAAG,GAAGG,OAAO,CAACE,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,CAACN,oBAAoB,CAACC,GAAG,CAAC;EAChC;AACF"},"metadata":{},"sourceType":"module"}