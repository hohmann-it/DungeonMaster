{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { LogicalGridLayoutConfig } from '../index';\nexport default class TileGridLayoutConfig extends LogicalGridLayoutConfig {\n  constructor(options) {\n    super(options);\n  }\n  _extend(options) {\n    super._extend(options);\n    options = options || {};\n    if (options.maxWidth > -2) {\n      this.maxWidth = options.maxWidth;\n    }\n  }\n  applyToLayout(layout) {\n    super.applyToLayout(layout);\n    if (this.maxWidth) {\n      layout.maxWidth = this.maxWidth;\n    }\n  }\n  clone() {\n    return new TileGridLayoutConfig(this);\n  }\n  static ensure(layoutConfig) {\n    if (!layoutConfig) {\n      return layoutConfig;\n    }\n    if (layoutConfig instanceof TileGridLayoutConfig) {\n      return layoutConfig;\n    }\n    return new TileGridLayoutConfig(layoutConfig);\n  }\n}","map":{"version":3,"names":["LogicalGridLayoutConfig","TileGridLayoutConfig","constructor","options","_extend","maxWidth","applyToLayout","layout","clone","ensure","layoutConfig"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/TileGridLayoutConfig.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {LogicalGridLayoutConfig} from '../index';\n\nexport default class TileGridLayoutConfig extends LogicalGridLayoutConfig {\n\n  constructor(options) {\n    super(options);\n  }\n\n  _extend(options) {\n    super._extend(options);\n    options = options || {};\n    if (options.maxWidth > -2) {\n      this.maxWidth = options.maxWidth;\n    }\n  }\n\n  applyToLayout(layout) {\n    super.applyToLayout(layout);\n    if (this.maxWidth) {\n      layout.maxWidth = this.maxWidth;\n    }\n  }\n\n  clone() {\n    return new TileGridLayoutConfig(this);\n  }\n\n  static ensure(layoutConfig) {\n    if (!layoutConfig) {\n      return layoutConfig;\n    }\n    if (layoutConfig instanceof TileGridLayoutConfig) {\n      return layoutConfig;\n    }\n    return new TileGridLayoutConfig(layoutConfig);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,uBAAuB,QAAO,UAAU;AAEhD,eAAe,MAAMC,oBAAoB,SAASD,uBAAuB,CAAC;EAExEE,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEAC,OAAO,CAACD,OAAO,EAAE;IACf,KAAK,CAACC,OAAO,CAACD,OAAO,CAAC;IACtBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIA,OAAO,CAACE,QAAQ,GAAG,CAAC,CAAC,EAAE;MACzB,IAAI,CAACA,QAAQ,GAAGF,OAAO,CAACE,QAAQ;IAClC;EACF;EAEAC,aAAa,CAACC,MAAM,EAAE;IACpB,KAAK,CAACD,aAAa,CAACC,MAAM,CAAC;IAC3B,IAAI,IAAI,CAACF,QAAQ,EAAE;MACjBE,MAAM,CAACF,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACjC;EACF;EAEAG,KAAK,GAAG;IACN,OAAO,IAAIP,oBAAoB,CAAC,IAAI,CAAC;EACvC;EAEA,OAAOQ,MAAM,CAACC,YAAY,EAAE;IAC1B,IAAI,CAACA,YAAY,EAAE;MACjB,OAAOA,YAAY;IACrB;IACA,IAAIA,YAAY,YAAYT,oBAAoB,EAAE;MAChD,OAAOS,YAAY;IACrB;IACA,OAAO,IAAIT,oBAAoB,CAACS,YAAY,CAAC;EAC/C;AACF"},"metadata":{},"sourceType":"module"}