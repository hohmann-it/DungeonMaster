{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, arrays, comparators, defaultValues, EventSupport, objects, PropertyChangeEventFilter, RemoteEvent, scout, strings, Widget, WidgetEventTypeFilter } from '../index';\nimport $ from 'jquery';\n\n/**\n * A model adapter is the connector with the server, it takes the events sent from the server and calls the corresponding methods on the widget.\n * It also sends events to the server whenever an action happens on the widget.\n */\nexport default class ModelAdapter {\n  constructor() {\n    this.id = null;\n    this.objectType = null;\n    this.initialized = false;\n    this.attached = false;\n    this.destroyed = false;\n    this.widget = null;\n    this._enabledBeforeOffline = true;\n\n    /**\n     * Widget properties which should be sent to server on property change.\n     */\n    this._remoteProperties = [];\n    this._widgetListener = null;\n    this._propertyChangeEventFilter = new PropertyChangeEventFilter();\n    this._widgetEventTypeFilter = new WidgetEventTypeFilter();\n    this.events = new EventSupport();\n    this.session = null;\n  }\n  init(model) {\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * @param model expects a plain-object with properties: id, session\n   */\n  _init(model) {\n    scout.assertParameter('id', model.id);\n    scout.assertParameter('session', model.session);\n    $.extend(this, model);\n    this.session.registerModelAdapter(this);\n  }\n  destroy() {\n    this._detachWidget();\n    this.widget.destroy();\n    this.widget = null;\n    this.session.unregisterModelAdapter(this);\n    this.destroyed = true;\n  }\n  createWidget(adapterData, parent) {\n    let model = this._initModel(adapterData, parent);\n    this.widget = this._createWidget(model);\n    this._attachWidget();\n    this._postCreateWidget();\n    return this.widget;\n  }\n\n  /**\n   * Override this method to do something right after the widget has been created and has been\n   * attached to the remote adapter. The default impl. does nothing.\n   */\n  _postCreateWidget() {\n    // NOP\n  }\n  _initModel(model, parent) {\n    // Make a copy to prevent a modification of the given model\n    let deepCopy = this.session.adapterExportEnabled;\n    model = $.extend(deepCopy, {}, model);\n\n    // Fill in the missing default values\n    defaultValues.applyTo(model);\n    model.parent = parent;\n    model.owner = parent; // Set it explicitly because server sends owner in inspector mode -> ignore the owner sent by server.\n    model.modelAdapter = this;\n    if (model.global) {\n      // Use the root adapter as owner if global is set to true\n      model.owner = this.session.getModelAdapter('1').widget;\n    }\n    this._initProperties(model);\n    return model;\n  }\n\n  /**\n   * Override this method to call _sync* methods of the ModelAdapter _before_ the widget is created.\n   */\n  _initProperties(model) {\n    // NOP\n  }\n\n  /**\n   * @returns A new widget instance. The default impl. uses calls scout.create() with property objectType from given model.\n   */\n  _createWidget(model) {\n    let widget = scout.create(model);\n    widget._addCloneProperties(['modelClass', 'classId']);\n    return widget;\n  }\n  _attachWidget() {\n    if (this._widgetListener) {\n      return;\n    }\n    this._widgetListener = {\n      func: this._onWidgetEventInternal.bind(this)\n    };\n    this.widget.addListener(this._widgetListener);\n    this.attached = true;\n    this.events.trigger('attach');\n  }\n  _detachWidget() {\n    if (!this._widgetListener) {\n      return;\n    }\n    this.widget.removeListener(this._widgetListener);\n    this._widgetListener = null;\n    this.attached = false;\n    this.events.trigger('detach');\n  }\n  goOffline() {\n    this.widget.visitChildren(child => {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOffline();\n      }\n    });\n  }\n  _goOffline() {\n    // NOP may be implemented by subclasses\n  }\n  goOnline() {\n    this.widget.visitChildren(child => {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOnline();\n      }\n    });\n  }\n  _goOnline() {\n    // NOP may be implemented by subclasses\n  }\n  isRemoteProperty(propertyName) {\n    return this._remoteProperties.indexOf(propertyName) > -1;\n  }\n  _addRemoteProperties(properties) {\n    this._addProperties('_remoteProperties', properties);\n  }\n  _removeRemoteProperties(properties) {\n    this._removeProperties('_remoteProperties', properties);\n  }\n  _addProperties(propertyName, properties) {\n    if (Array.isArray(properties)) {\n      this[propertyName] = this[propertyName].concat(properties);\n    } else {\n      this[propertyName].push(properties);\n    }\n  }\n  _removeProperties(propertyName, properties) {\n    properties = arrays.ensure(properties);\n    arrays.removeAll(this[propertyName], properties);\n  }\n\n  /**\n   * @returns Creates a Event object from the current adapter instance and\n   *   sends the event by using the Session#sendEvent() method. Local objects may\n   *   set a different remoteHandler to call custom code instead of the Session#sendEvent()\n   *   method.\n   *\n   * @param type of event\n   * @param data of event\n   * @param options (optional) options according to the following table:\n   *\n   * Option name         Default value   Description\n   * -----------------------------------------------------------------------------------------\n   * delay               0               Delay in milliseconds before the event is sent.\n   *\n   * coalesce            undefined       Coalesce function added to event-object.\n   *\n   * showBusyIndicator   undefined       Whether sending the event should block the UI\n   *                     (true*)         after a certain delay.\n   *                                     * The default value 'undefined' means that the\n   *                                       default value ('true') is determined in Session.js.\n   *                                       We don't write it explicitly to the event here\n   *                                       because that would break many Jasmine tests.\n   */\n  _send(type, data, options) {\n    // Legacy fallback with all options as arguments\n    let opts = {};\n    if (arguments.length > 2) {\n      if (options !== null && typeof options === 'object') {\n        opts = options;\n      } else {\n        // eslint-disable-next-line prefer-rest-params\n        opts.delay = arguments[2];\n        // eslint-disable-next-line prefer-rest-params\n        opts.coalesce = arguments[3];\n        // eslint-disable-next-line prefer-rest-params\n        opts.showBusyIndicator = arguments[4];\n      }\n    }\n    options = opts;\n    // (End legacy fallback)\n\n    let event = new RemoteEvent(this.id, type, data);\n    // The following properties will not be sent to the server, see Session._requestToJson().\n    if (options.coalesce !== undefined) {\n      event.coalesce = options.coalesce;\n    }\n    if (options.showBusyIndicator !== undefined) {\n      event.showBusyIndicator = options.showBusyIndicator;\n    }\n    if (options.newRequest !== undefined) {\n      event.newRequest = options.newRequest;\n    }\n    this.session.sendEvent(event, options.delay);\n  }\n\n  /**\n   * Sends the given value as property event to the server.\n   */\n  _sendProperty(propertyName, value) {\n    let data = {};\n    data[propertyName] = value;\n    this._send('property', data);\n  }\n\n  /**\n   * Adds a custom filter for events.\n   */\n  addFilterForWidgetEvent(filter) {\n    this._widgetEventTypeFilter.addFilter(filter);\n  }\n\n  /**\n   * Adds a filter which only checks the type of the event.\n   */\n  addFilterForWidgetEventType(eventType) {\n    this._widgetEventTypeFilter.addFilterForEventType(eventType);\n  }\n\n  /**\n   * Adds a filter which checks the name and value of every property in the given properties array.\n   */\n  addFilterForProperties(properties) {\n    this._propertyChangeEventFilter.addFilterForProperties(properties);\n  }\n\n  /**\n   * Adds a filter which only checks the property name and ignores the value.\n   */\n  addFilterForPropertyName(propertyName) {\n    this._propertyChangeEventFilter.addFilterForPropertyName(propertyName);\n  }\n  _isPropertyChangeEventFiltered(propertyName, value) {\n    if (value instanceof Widget) {\n      // In case of a remote widget property use the id, otherwise it would always return false\n      value = value.id;\n    }\n    return this._propertyChangeEventFilter.filter(propertyName, value);\n  }\n  _isWidgetEventFiltered(event) {\n    return this._widgetEventTypeFilter.filter(event);\n  }\n  resetEventFilters() {\n    this._propertyChangeEventFilter.reset();\n    this._widgetEventTypeFilter.reset();\n  }\n  _onWidgetPropertyChange(event) {\n    let propertyName = event.propertyName;\n    let value = event.newValue;\n\n    // TODO [7.0] cgu This does not work if value will be converted into another object (e.g DateRange.ensure(selectionRange) in Planner.js)\n    // -> either do the check in this._send() or extract ensure into separate method and move the call of addFilterForProperties.\n    // The advantage of the first one would be simpler filter functions (e.g. this.widget._nodesToIds(this.widget.selectedNodes) in Tree.js)\n    if (this._isPropertyChangeEventFiltered(propertyName, value)) {\n      return;\n    }\n    if (this.isRemoteProperty(propertyName)) {\n      value = this._prepareRemoteProperty(propertyName, value);\n      this._callSendProperty(propertyName, value);\n    }\n  }\n  _prepareRemoteProperty(propertyName, value) {\n    if (!value || !this.widget.isWidgetProperty(propertyName)) {\n      return value;\n    }\n    if (!Array.isArray(value)) {\n      return value.modelAdapter.id;\n    }\n    return value.map(widget => {\n      return widget.modelAdapter.id;\n    });\n  }\n  _callSendProperty(propertyName, value) {\n    let sendFuncName = '_send' + strings.toUpperCaseFirstLetter(propertyName);\n    if (this[sendFuncName]) {\n      this[sendFuncName](value);\n    } else {\n      this._sendProperty(propertyName, value);\n    }\n  }\n  _onWidgetDestroy() {\n    this.destroy();\n  }\n\n  /**\n   * Do not override this method. Widget event filtering is done here, before _onWidgetEvent is called.\n   */\n  _onWidgetEventInternal(event) {\n    if (!this._isWidgetEventFiltered(event)) {\n      this._onWidgetEvent(event);\n    }\n  }\n  _onWidgetEvent(event) {\n    if (event.type === 'destroy') {\n      this._onWidgetDestroy(event);\n    } else if (event.type === 'propertyChange') {\n      this._onWidgetPropertyChange(event);\n    }\n  }\n  _syncPropertiesOnPropertyChange(newProperties) {\n    let orderedPropertyNames = this._orderPropertyNamesOnSync(newProperties);\n    orderedPropertyNames.forEach(function (propertyName) {\n      let value = newProperties[propertyName];\n      let syncFuncName = '_sync' + strings.toUpperCaseFirstLetter(propertyName);\n      if (this[syncFuncName]) {\n        this[syncFuncName](value);\n      } else {\n        this.widget.callSetter(propertyName, value);\n      }\n    }, this);\n  }\n\n  /**\n   * May be overridden to return a custom order of how the properties will be set.\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties);\n  }\n  _createPropertySortFunc(order) {\n    return (a, b) => {\n      let ia = order.indexOf(a);\n      let ib = order.indexOf(b);\n      if (ia > -1 && ib > -1) {\n        // both are in the list\n        return ia - ib;\n      }\n      if (ia > -1) {\n        // B is not in list\n        return -1;\n      }\n      if (ib > -1) {\n        // A is not in list\n        return 1;\n      }\n      return comparators.TEXT.compare(a, b); // both are not in list\n    };\n  }\n\n  /**\n   * Called by Session.js for every event from the model\n   */\n  onModelEvent(event) {\n    if (!event) {\n      return;\n    }\n    if (event.type === 'property') {\n      // Special handling for 'property' type\n      this.onModelPropertyChange(event);\n    } else {\n      this.onModelAction(event);\n    }\n  }\n\n  /**\n   * Processes the JSON event from the server and calls the corresponding setter of the widget for each property.\n   */\n  onModelPropertyChange(event) {\n    this.addFilterForProperties(event.properties);\n    this._syncPropertiesOnPropertyChange(event.properties);\n  }\n\n  /**\n   * The default impl. only logs a warning that the event is not supported.\n   */\n  onModelAction(event) {\n    if (event.type === 'scrollToTop') {\n      this.widget.scrollToTop({\n        animate: event.animate\n      });\n    } else if (event.type === 'reveal') {\n      this.widget.reveal({\n        animate: event.animate\n      });\n    } else {\n      $.log.warn('Model action \"' + event.type + '\" is not supported by model-adapter ' + this.objectType);\n    }\n  }\n  toString() {\n    return 'ModelAdapter[objectType=' + this.objectType + ' id=' + this.id + ']';\n  }\n\n  /**\n   * This method is used to modify adapterData before the data is exported (as used for JSON export).\n   */\n  exportAdapterData(adapterData) {\n    // use last part of class-name as ID (because that's better than having only a number as ID)\n    let modelClass = adapterData.modelClass;\n    if (modelClass) {\n      let pos = Math.max(0, modelClass.lastIndexOf('$') + 1, modelClass.lastIndexOf('.') + 1);\n      adapterData.id = modelClass.substring(pos);\n    }\n    delete adapterData.owner;\n    delete adapterData.classId;\n    delete adapterData.modelClass;\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Widget.\n   */\n  static modifyWidgetPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _createChild\n    objects.replacePrototypeFunction(Widget, '_createChild', function (model) {\n      if (model instanceof Widget) {\n        return model;\n      }\n\n      // Remote case\n      // If the widget has a model adapter use getOrCreateWidget of the session to resolve the child widget\n      // The model normally is a String containing the (remote) object ID.\n      // If it is not a string it may be a local model -> use default local case instead\n      if (this.modelAdapter && typeof model === 'string') {\n        return this.session.getOrCreateWidget(model, this);\n      }\n\n      // Local case (default)\n      return this._createChildOrig(model);\n    }, true); // <-- true = keep original function\n  }\n}\n\nApp.addListener('bootstrap', ModelAdapter.modifyWidgetPrototype);","map":{"version":3,"names":["App","arrays","comparators","defaultValues","EventSupport","objects","PropertyChangeEventFilter","RemoteEvent","scout","strings","Widget","WidgetEventTypeFilter","$","ModelAdapter","constructor","id","objectType","initialized","attached","destroyed","widget","_enabledBeforeOffline","_remoteProperties","_widgetListener","_propertyChangeEventFilter","_widgetEventTypeFilter","events","session","init","model","_init","assertParameter","extend","registerModelAdapter","destroy","_detachWidget","unregisterModelAdapter","createWidget","adapterData","parent","_initModel","_createWidget","_attachWidget","_postCreateWidget","deepCopy","adapterExportEnabled","applyTo","owner","modelAdapter","global","getModelAdapter","_initProperties","create","_addCloneProperties","func","_onWidgetEventInternal","bind","addListener","trigger","removeListener","goOffline","visitChildren","child","_goOffline","goOnline","_goOnline","isRemoteProperty","propertyName","indexOf","_addRemoteProperties","properties","_addProperties","_removeRemoteProperties","_removeProperties","Array","isArray","concat","push","ensure","removeAll","_send","type","data","options","opts","arguments","length","delay","coalesce","showBusyIndicator","event","undefined","newRequest","sendEvent","_sendProperty","value","addFilterForWidgetEvent","filter","addFilter","addFilterForWidgetEventType","eventType","addFilterForEventType","addFilterForProperties","addFilterForPropertyName","_isPropertyChangeEventFiltered","_isWidgetEventFiltered","resetEventFilters","reset","_onWidgetPropertyChange","newValue","_prepareRemoteProperty","_callSendProperty","isWidgetProperty","map","sendFuncName","toUpperCaseFirstLetter","_onWidgetDestroy","_onWidgetEvent","_syncPropertiesOnPropertyChange","newProperties","orderedPropertyNames","_orderPropertyNamesOnSync","forEach","syncFuncName","callSetter","Object","keys","_createPropertySortFunc","order","a","b","ia","ib","TEXT","compare","onModelEvent","onModelPropertyChange","onModelAction","scrollToTop","animate","reveal","log","warn","toString","exportAdapterData","modelClass","pos","Math","max","lastIndexOf","substring","classId","modifyWidgetPrototype","get","remote","replacePrototypeFunction","getOrCreateWidget","_createChildOrig"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/session/ModelAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, arrays, comparators, defaultValues, EventSupport, objects, PropertyChangeEventFilter, RemoteEvent, scout, strings, Widget, WidgetEventTypeFilter} from '../index';\nimport $ from 'jquery';\n\n/**\n * A model adapter is the connector with the server, it takes the events sent from the server and calls the corresponding methods on the widget.\n * It also sends events to the server whenever an action happens on the widget.\n */\nexport default class ModelAdapter {\n  constructor() {\n    this.id = null;\n    this.objectType = null;\n    this.initialized = false;\n    this.attached = false;\n    this.destroyed = false;\n    this.widget = null;\n    this._enabledBeforeOffline = true;\n\n    /**\n     * Widget properties which should be sent to server on property change.\n     */\n    this._remoteProperties = [];\n    this._widgetListener = null;\n\n    this._propertyChangeEventFilter = new PropertyChangeEventFilter();\n    this._widgetEventTypeFilter = new WidgetEventTypeFilter();\n    this.events = new EventSupport();\n    this.session = null;\n  }\n\n  init(model) {\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * @param model expects a plain-object with properties: id, session\n   */\n  _init(model) {\n    scout.assertParameter('id', model.id);\n    scout.assertParameter('session', model.session);\n    $.extend(this, model);\n    this.session.registerModelAdapter(this);\n  }\n\n  destroy() {\n    this._detachWidget();\n    this.widget.destroy();\n    this.widget = null;\n    this.session.unregisterModelAdapter(this);\n    this.destroyed = true;\n  }\n\n  createWidget(adapterData, parent) {\n    let model = this._initModel(adapterData, parent);\n    this.widget = this._createWidget(model);\n    this._attachWidget();\n    this._postCreateWidget();\n    return this.widget;\n  }\n\n  /**\n   * Override this method to do something right after the widget has been created and has been\n   * attached to the remote adapter. The default impl. does nothing.\n   */\n  _postCreateWidget() {\n    // NOP\n  }\n\n  _initModel(model, parent) {\n    // Make a copy to prevent a modification of the given model\n    let deepCopy = this.session.adapterExportEnabled;\n    model = $.extend(deepCopy, {}, model);\n\n    // Fill in the missing default values\n    defaultValues.applyTo(model);\n\n    model.parent = parent;\n    model.owner = parent; // Set it explicitly because server sends owner in inspector mode -> ignore the owner sent by server.\n    model.modelAdapter = this;\n\n    if (model.global) {\n      // Use the root adapter as owner if global is set to true\n      model.owner = this.session.getModelAdapter('1').widget;\n    }\n\n    this._initProperties(model);\n\n    return model;\n  }\n\n  /**\n   * Override this method to call _sync* methods of the ModelAdapter _before_ the widget is created.\n   */\n  _initProperties(model) {\n    // NOP\n  }\n\n  /**\n   * @returns A new widget instance. The default impl. uses calls scout.create() with property objectType from given model.\n   */\n  _createWidget(model) {\n    let widget = scout.create(model);\n    widget._addCloneProperties(['modelClass', 'classId']);\n    return widget;\n  }\n\n  _attachWidget() {\n    if (this._widgetListener) {\n      return;\n    }\n    this._widgetListener = {\n      func: this._onWidgetEventInternal.bind(this)\n    };\n    this.widget.addListener(this._widgetListener);\n    this.attached = true;\n    this.events.trigger('attach');\n  }\n\n  _detachWidget() {\n    if (!this._widgetListener) {\n      return;\n    }\n    this.widget.removeListener(this._widgetListener);\n    this._widgetListener = null;\n    this.attached = false;\n    this.events.trigger('detach');\n  }\n\n  goOffline() {\n    this.widget.visitChildren(child => {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOffline();\n      }\n    });\n  }\n\n  _goOffline() {\n    // NOP may be implemented by subclasses\n  }\n\n  goOnline() {\n    this.widget.visitChildren(child => {\n      if (child.modelAdapter) {\n        child.modelAdapter._goOnline();\n      }\n    });\n  }\n\n  _goOnline() {\n    // NOP may be implemented by subclasses\n  }\n\n  isRemoteProperty(propertyName) {\n    return this._remoteProperties.indexOf(propertyName) > -1;\n  }\n\n  _addRemoteProperties(properties) {\n    this._addProperties('_remoteProperties', properties);\n  }\n\n  _removeRemoteProperties(properties) {\n    this._removeProperties('_remoteProperties', properties);\n  }\n\n  _addProperties(propertyName, properties) {\n    if (Array.isArray(properties)) {\n      this[propertyName] = this[propertyName].concat(properties);\n    } else {\n      this[propertyName].push(properties);\n    }\n  }\n\n  _removeProperties(propertyName, properties) {\n    properties = arrays.ensure(properties);\n    arrays.removeAll(this[propertyName], properties);\n  }\n\n  /**\n   * @returns Creates a Event object from the current adapter instance and\n   *   sends the event by using the Session#sendEvent() method. Local objects may\n   *   set a different remoteHandler to call custom code instead of the Session#sendEvent()\n   *   method.\n   *\n   * @param type of event\n   * @param data of event\n   * @param options (optional) options according to the following table:\n   *\n   * Option name         Default value   Description\n   * -----------------------------------------------------------------------------------------\n   * delay               0               Delay in milliseconds before the event is sent.\n   *\n   * coalesce            undefined       Coalesce function added to event-object.\n   *\n   * showBusyIndicator   undefined       Whether sending the event should block the UI\n   *                     (true*)         after a certain delay.\n   *                                     * The default value 'undefined' means that the\n   *                                       default value ('true') is determined in Session.js.\n   *                                       We don't write it explicitly to the event here\n   *                                       because that would break many Jasmine tests.\n   */\n  _send(type, data, options) {\n    // Legacy fallback with all options as arguments\n    let opts = {};\n    if (arguments.length > 2) {\n      if (options !== null && typeof options === 'object') {\n        opts = options;\n      } else {\n        // eslint-disable-next-line prefer-rest-params\n        opts.delay = arguments[2];\n        // eslint-disable-next-line prefer-rest-params\n        opts.coalesce = arguments[3];\n        // eslint-disable-next-line prefer-rest-params\n        opts.showBusyIndicator = arguments[4];\n      }\n    }\n    options = opts;\n    // (End legacy fallback)\n\n    let event = new RemoteEvent(this.id, type, data);\n    // The following properties will not be sent to the server, see Session._requestToJson().\n    if (options.coalesce !== undefined) {\n      event.coalesce = options.coalesce;\n    }\n    if (options.showBusyIndicator !== undefined) {\n      event.showBusyIndicator = options.showBusyIndicator;\n    }\n    if (options.newRequest !== undefined) {\n      event.newRequest = options.newRequest;\n    }\n    this.session.sendEvent(event, options.delay);\n  }\n\n  /**\n   * Sends the given value as property event to the server.\n   */\n  _sendProperty(propertyName, value) {\n    let data = {};\n    data[propertyName] = value;\n    this._send('property', data);\n  }\n\n  /**\n   * Adds a custom filter for events.\n   */\n  addFilterForWidgetEvent(filter) {\n    this._widgetEventTypeFilter.addFilter(filter);\n  }\n\n  /**\n   * Adds a filter which only checks the type of the event.\n   */\n  addFilterForWidgetEventType(eventType) {\n    this._widgetEventTypeFilter.addFilterForEventType(eventType);\n  }\n\n  /**\n   * Adds a filter which checks the name and value of every property in the given properties array.\n   */\n  addFilterForProperties(properties) {\n    this._propertyChangeEventFilter.addFilterForProperties(properties);\n  }\n\n  /**\n   * Adds a filter which only checks the property name and ignores the value.\n   */\n  addFilterForPropertyName(propertyName) {\n    this._propertyChangeEventFilter.addFilterForPropertyName(propertyName);\n  }\n\n  _isPropertyChangeEventFiltered(propertyName, value) {\n    if (value instanceof Widget) {\n      // In case of a remote widget property use the id, otherwise it would always return false\n      value = value.id;\n    }\n    return this._propertyChangeEventFilter.filter(propertyName, value);\n  }\n\n  _isWidgetEventFiltered(event) {\n    return this._widgetEventTypeFilter.filter(event);\n  }\n\n  resetEventFilters() {\n    this._propertyChangeEventFilter.reset();\n    this._widgetEventTypeFilter.reset();\n  }\n\n  _onWidgetPropertyChange(event) {\n    let propertyName = event.propertyName;\n    let value = event.newValue;\n\n    // TODO [7.0] cgu This does not work if value will be converted into another object (e.g DateRange.ensure(selectionRange) in Planner.js)\n    // -> either do the check in this._send() or extract ensure into separate method and move the call of addFilterForProperties.\n    // The advantage of the first one would be simpler filter functions (e.g. this.widget._nodesToIds(this.widget.selectedNodes) in Tree.js)\n    if (this._isPropertyChangeEventFiltered(propertyName, value)) {\n      return;\n    }\n\n    if (this.isRemoteProperty(propertyName)) {\n      value = this._prepareRemoteProperty(propertyName, value);\n      this._callSendProperty(propertyName, value);\n    }\n  }\n\n  _prepareRemoteProperty(propertyName, value) {\n    if (!value || !this.widget.isWidgetProperty(propertyName)) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      return value.modelAdapter.id;\n    }\n\n    return value.map(widget => {\n      return widget.modelAdapter.id;\n    });\n  }\n\n  _callSendProperty(propertyName, value) {\n    let sendFuncName = '_send' + strings.toUpperCaseFirstLetter(propertyName);\n    if (this[sendFuncName]) {\n      this[sendFuncName](value);\n    } else {\n      this._sendProperty(propertyName, value);\n    }\n  }\n\n  _onWidgetDestroy() {\n    this.destroy();\n  }\n\n  /**\n   * Do not override this method. Widget event filtering is done here, before _onWidgetEvent is called.\n   */\n  _onWidgetEventInternal(event) {\n    if (!this._isWidgetEventFiltered(event)) {\n      this._onWidgetEvent(event);\n    }\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'destroy') {\n      this._onWidgetDestroy(event);\n    } else if (event.type === 'propertyChange') {\n      this._onWidgetPropertyChange(event);\n    }\n  }\n\n  _syncPropertiesOnPropertyChange(newProperties) {\n    let orderedPropertyNames = this._orderPropertyNamesOnSync(newProperties);\n    orderedPropertyNames.forEach(function(propertyName) {\n      let value = newProperties[propertyName];\n      let syncFuncName = '_sync' + strings.toUpperCaseFirstLetter(propertyName);\n      if (this[syncFuncName]) {\n        this[syncFuncName](value);\n      } else {\n        this.widget.callSetter(propertyName, value);\n      }\n    }, this);\n  }\n\n  /**\n   * May be overridden to return a custom order of how the properties will be set.\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties);\n  }\n\n  _createPropertySortFunc(order) {\n    return (a, b) => {\n      let ia = order.indexOf(a);\n      let ib = order.indexOf(b);\n      if (ia > -1 && ib > -1) { // both are in the list\n        return ia - ib;\n      }\n      if (ia > -1) { // B is not in list\n        return -1;\n      }\n      if (ib > -1) { // A is not in list\n        return 1;\n      }\n      return comparators.TEXT.compare(a, b); // both are not in list\n    };\n  }\n\n  /**\n   * Called by Session.js for every event from the model\n   */\n  onModelEvent(event) {\n    if (!event) {\n      return;\n    }\n    if (event.type === 'property') { // Special handling for 'property' type\n      this.onModelPropertyChange(event);\n    } else {\n      this.onModelAction(event);\n    }\n  }\n\n  /**\n   * Processes the JSON event from the server and calls the corresponding setter of the widget for each property.\n   */\n  onModelPropertyChange(event) {\n    this.addFilterForProperties(event.properties);\n    this._syncPropertiesOnPropertyChange(event.properties);\n  }\n\n  /**\n   * The default impl. only logs a warning that the event is not supported.\n   */\n  onModelAction(event) {\n    if (event.type === 'scrollToTop') {\n      this.widget.scrollToTop({animate: event.animate});\n    } else if (event.type === 'reveal') {\n      this.widget.reveal({animate: event.animate});\n    } else {\n      $.log.warn('Model action \"' + event.type + '\" is not supported by model-adapter ' + this.objectType);\n    }\n  }\n\n  toString() {\n    return 'ModelAdapter[objectType=' + this.objectType + ' id=' + this.id + ']';\n  }\n\n  /**\n   * This method is used to modify adapterData before the data is exported (as used for JSON export).\n   */\n  exportAdapterData(adapterData) {\n    // use last part of class-name as ID (because that's better than having only a number as ID)\n    let modelClass = adapterData.modelClass;\n    if (modelClass) {\n      let pos = Math.max(0,\n        modelClass.lastIndexOf('$') + 1,\n        modelClass.lastIndexOf('.') + 1);\n      adapterData.id = modelClass.substring(pos);\n    }\n    delete adapterData.owner;\n    delete adapterData.classId;\n    delete adapterData.modelClass;\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Widget.\n   */\n  static modifyWidgetPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _createChild\n    objects.replacePrototypeFunction(Widget, '_createChild', function(model) {\n      if (model instanceof Widget) {\n        return model;\n      }\n\n      // Remote case\n      // If the widget has a model adapter use getOrCreateWidget of the session to resolve the child widget\n      // The model normally is a String containing the (remote) object ID.\n      // If it is not a string it may be a local model -> use default local case instead\n      if (this.modelAdapter && typeof model === 'string') {\n        return this.session.getOrCreateWidget(model, this);\n      }\n\n      // Local case (default)\n      return this._createChildOrig(model);\n    }, true); // <-- true = keep original function\n  }\n}\n\nApp.addListener('bootstrap', ModelAdapter.modifyWidgetPrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}