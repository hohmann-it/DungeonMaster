{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, DefaultStatus, ObjectFactory, objects, ParsingFailedStatus, strings, ValidationFailedStatus } from '../index';\nimport $ from 'jquery';\nexport default class Status {\n  constructor(model) {\n    this.message = null;\n    this.severity = Status.Severity.ERROR;\n    this.iconId = null;\n    this.code = 0;\n    this.children = null;\n    this.deletable = true;\n    $.extend(this, model);\n\n    // severity may be a string (e.g. if set in a model json file) -> convert to real severity\n    if (typeof this.severity === 'string') {\n      this.severity = Status.Severity[this.severity.toUpperCase()];\n    }\n    // children\n    if (model && model.children && Array.isArray(model.children)) {\n      this.children = model.children.map(child => {\n        return Status.ensure(child);\n      });\n    }\n  }\n  cssClass() {\n    return Status.cssClassForSeverity(this.severity);\n  }\n\n  /**\n   * @returns {boolean} true if severity is OK or INFO, false if severity is WARNING or ERROR.\n   */\n  isValid() {\n    return this.severity === Status.Severity.OK || this.severity === Status.Severity.INFO;\n  }\n  isError() {\n    return this.severity === Status.Severity.ERROR;\n  }\n  isWarning() {\n    return this.severity === Status.Severity.WARNING;\n  }\n  isInfo() {\n    return this.severity === Status.Severity.INFO;\n  }\n  isOk() {\n    return this.severity === Status.Severity.OK;\n  }\n\n  /**\n   * @returns {Status[]} status including children as flat list.\n   */\n  asFlatList() {\n    return Status.asFlatList(this);\n  }\n\n  /**\n   * @return {Status} a clone of this Status instance.\n   */\n  clone() {\n    let modelClone = $.extend({}, this);\n    return new Status(modelClone);\n  }\n  equals(o) {\n    if (!(o instanceof Status)) {\n      return false;\n    }\n    if (!objects.equalsRecursive(this.children, o.children)) {\n      return false;\n    }\n    return objects.propertiesEquals(this, o, ['severity', 'message', 'invalidDate', 'invalidTime']);\n  }\n\n  /**\n   * Note: we cannot 'overload' this function, because predicates and status-types are both functions,\n   * thus we cannot distinct them by type or instanceof.\n   *\n   * @param {object} statusType\n   * @return {boolean} whether or not this status contains a child with the give type\n   */\n  containsStatus(statusType) {\n    return this.containsStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n  containsStatusByPredicate(predicate) {\n    return this.asFlatList().some(predicate);\n  }\n  addStatus(status) {\n    if (this.hasChildren()) {\n      this.children.push(status);\n    } else {\n      this.children = [status];\n    }\n    this._updateProperties();\n  }\n\n  /**\n   * Removes all children of the given type from this status. The type is checked by inheritance.\n   *\n   * @param {object} statusType\n   */\n  removeAllStatus(statusType) {\n    this.removeAllStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n  removeAllStatusByPredicate(predicate) {\n    if (this.hasChildren()) {\n      this.children.forEach(status => {\n        status.removeAllStatusByPredicate(predicate);\n      });\n      this.children = this.children.filter(status => {\n        // when status is not deletable we must add it as child again, thus --> true\n        if (!status.deletable) {\n          return true;\n        }\n        return !predicate(status); // negate predicate\n      });\n\n      this._updateProperties();\n    }\n  }\n  _updateProperties() {\n    if (!this.hasChildren()) {\n      this.message = null;\n      this.severity = Status.Severity.OK;\n      this.code = 0;\n      return;\n    }\n    let firstStatus = this.asFlatList().sort((a, b) => {\n      return calcPriority(b) - calcPriority(a);\n      function calcPriority(status) {\n        let multiplier = 1;\n        if (status instanceof ParsingFailedStatus) {\n          multiplier = 4;\n        } else if (status instanceof ValidationFailedStatus) {\n          multiplier = 2;\n        }\n        return multiplier * status.severity;\n      }\n    })[0];\n    this.message = firstStatus.message;\n    this.severity = firstStatus.severity;\n    this.code = firstStatus.code;\n  }\n\n  /**\n   * @return {boolean} whether this status has children (= multi status)\n   */\n  hasChildren() {\n    return !!(this.children && this.children.length > 0);\n  }\n\n  /**\n   * In some cases we need to transform an error status without children to a multi-status with children.\n   * If the instance already has children, this function returns a clone of the instance.\n   * If the instance is not yet a multi-status, we return a new instance with the current instance as first child.\n   *\n   * @returns {Status}\n   */\n  ensureChildren() {\n    if (objects.isArray(this.children)) {\n      return this.clone();\n    }\n    let childStatus = this;\n    let newStatus = this.clone();\n    newStatus.children = [childStatus];\n    newStatus._updateProperties();\n    return newStatus;\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * Null-safe static clone method.\n   */\n  static clone(original) {\n    return original ? original.clone() : null;\n  }\n\n  /**\n   * @param {number} severity\n   * @returns {string}\n   * @static\n   */\n  static cssClassForSeverity(severity) {\n    let cssSeverity,\n      Severity = Status.Severity;\n    switch (severity) {\n      case Severity.OK:\n        cssSeverity = 'ok';\n        break;\n      case Severity.INFO:\n        cssSeverity = 'info';\n        break;\n      case Severity.WARNING:\n        cssSeverity = 'warning';\n        break;\n      case Severity.ERROR:\n        cssSeverity = 'error';\n        break;\n    }\n    return cssSeverity;\n  }\n  static animateStatusMessage($status, message) {\n    if (strings.endsWith(message, '...')) {\n      let $ellipsis = $status.makeSpan('ellipsis');\n      for (let i = 0; i < 3; i++) {\n        $ellipsis.append($status.makeSpan('animate-dot delay-' + i, '.'));\n      }\n      message = message.substring(0, message.length - 3);\n      $status.empty().text(message).append($ellipsis);\n    } else {\n      $status.text(message);\n    }\n  }\n  static ensure(status) {\n    if (!status) {\n      return status;\n    }\n    if (status instanceof Status) {\n      return status;\n    }\n    // May return a specialized sub-class of Status\n    if (!status.objectType) {\n      status.objectType = 'Status';\n    }\n    return ObjectFactory.get().create(status);\n  }\n\n  /**\n   * @returns {Status} a Status object with severity OK.\n   */\n  static ok(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.OK));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity INFO.\n   */\n  static info(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.INFO));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity WARNING.\n   */\n  static warning(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.WARNING));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity ERROR.\n   */\n  static error(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.ERROR));\n  }\n\n  /**\n   * @returns {object}\n   */\n  static ensureModel(model, severity) {\n    if (typeof model === 'string') {\n      model = {\n        message: model\n      };\n    } else {\n      model = model || {};\n    }\n    return $.extend({}, model, {\n      severity: severity\n    });\n  }\n\n  /**\n   * @returns {Status[]} all Status objects as flat list (goes through the status hierarchy)\n   */\n  static asFlatList(status) {\n    if (!status) {\n      return [];\n    }\n    let list = [];\n    if (status.hasChildren()) {\n      status.children.forEach(childStatus => {\n        arrays.pushAll(list, Status.asFlatList(childStatus));\n      });\n    } else {\n      list.push(status);\n    }\n    return list;\n  }\n\n  /**\n   * Returns a constructor function for the given class-name.\n   * <p>\n   * The key of this map is a string which is equals to the objectType string, the value is a reference to the constructor function.\n   * This map is required because in JavaScript we don't have the class-name at runtime.\n   * <p>\n   * Note: we cannot initialize this map as static variable, because webpack dependencies are not resolved in the moment the variable\n   * is initialized.\n   *\n   * @param {string} className\n   * @returns {function} Status constructor\n   */\n  static classForName(className) {\n    return {\n      Status: Status,\n      DefaultStatus: DefaultStatus,\n      ParsingFailedStatus: ParsingFailedStatus,\n      ValidationFailedStatus: ValidationFailedStatus\n    }[className];\n  }\n}\n_defineProperty(Status, \"Severity\", {\n  OK: 0x01,\n  INFO: 0x100,\n  WARNING: 0x10000,\n  ERROR: 0x1000000\n});\n_defineProperty(Status, \"SEVERITY_CSS_CLASSES\", 'error warning info ok');","map":{"version":3,"names":["arrays","DefaultStatus","ObjectFactory","objects","ParsingFailedStatus","strings","ValidationFailedStatus","$","Status","constructor","model","message","severity","Severity","ERROR","iconId","code","children","deletable","extend","toUpperCase","Array","isArray","map","child","ensure","cssClass","cssClassForSeverity","isValid","OK","INFO","isError","isWarning","WARNING","isInfo","isOk","asFlatList","clone","modelClone","equals","o","equalsRecursive","propertiesEquals","containsStatus","statusType","containsStatusByPredicate","status","predicate","some","addStatus","hasChildren","push","_updateProperties","removeAllStatus","removeAllStatusByPredicate","forEach","filter","firstStatus","sort","a","b","calcPriority","multiplier","length","ensureChildren","childStatus","newStatus","original","cssSeverity","animateStatusMessage","$status","endsWith","$ellipsis","makeSpan","i","append","substring","empty","text","objectType","get","create","ok","ensureModel","info","warning","error","list","pushAll","classForName","className"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/status/Status.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, DefaultStatus, ObjectFactory, objects, ParsingFailedStatus, strings, ValidationFailedStatus} from '../index';\nimport $ from 'jquery';\n\nexport default class Status {\n\n  constructor(model) {\n    this.message = null;\n    this.severity = Status.Severity.ERROR;\n    this.iconId = null;\n    this.code = 0;\n    this.children = null;\n    this.deletable = true;\n    $.extend(this, model);\n\n    // severity may be a string (e.g. if set in a model json file) -> convert to real severity\n    if (typeof this.severity === 'string') {\n      this.severity = Status.Severity[this.severity.toUpperCase()];\n    }\n    // children\n    if (model && model.children && Array.isArray(model.children)) {\n      this.children = model.children.map(child => {\n        return Status.ensure(child);\n      });\n    }\n  }\n\n  static Severity = {\n    OK: 0x01,\n    INFO: 0x100,\n    WARNING: 0x10000,\n    ERROR: 0x1000000\n  };\n\n  static SEVERITY_CSS_CLASSES = 'error warning info ok';\n\n  cssClass() {\n    return Status.cssClassForSeverity(this.severity);\n  }\n\n  /**\n   * @returns {boolean} true if severity is OK or INFO, false if severity is WARNING or ERROR.\n   */\n  isValid() {\n    return this.severity === Status.Severity.OK ||\n      this.severity === Status.Severity.INFO;\n  }\n\n  isError() {\n    return this.severity === Status.Severity.ERROR;\n  }\n\n  isWarning() {\n    return this.severity === Status.Severity.WARNING;\n  }\n\n  isInfo() {\n    return this.severity === Status.Severity.INFO;\n  }\n\n  isOk() {\n    return this.severity === Status.Severity.OK;\n  }\n\n  /**\n   * @returns {Status[]} status including children as flat list.\n   */\n  asFlatList() {\n    return Status.asFlatList(this);\n  }\n\n  /**\n   * @return {Status} a clone of this Status instance.\n   */\n  clone() {\n    let modelClone = $.extend({}, this);\n    return new Status(modelClone);\n  }\n\n  equals(o) {\n    if (!(o instanceof Status)) {\n      return false;\n    }\n    if (!objects.equalsRecursive(this.children, o.children)) {\n      return false;\n    }\n    return objects.propertiesEquals(this, o, ['severity', 'message', 'invalidDate', 'invalidTime']);\n  }\n\n  /**\n   * Note: we cannot 'overload' this function, because predicates and status-types are both functions,\n   * thus we cannot distinct them by type or instanceof.\n   *\n   * @param {object} statusType\n   * @return {boolean} whether or not this status contains a child with the give type\n   */\n  containsStatus(statusType) {\n    return this.containsStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n\n  containsStatusByPredicate(predicate) {\n    return this.asFlatList().some(predicate);\n  }\n\n  addStatus(status) {\n    if (this.hasChildren()) {\n      this.children.push(status);\n    } else {\n      this.children = [status];\n    }\n    this._updateProperties();\n  }\n\n  /**\n   * Removes all children of the given type from this status. The type is checked by inheritance.\n   *\n   * @param {object} statusType\n   */\n  removeAllStatus(statusType) {\n    this.removeAllStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n\n  removeAllStatusByPredicate(predicate) {\n    if (this.hasChildren()) {\n      this.children.forEach(status => {\n        status.removeAllStatusByPredicate(predicate);\n      });\n      this.children = this.children.filter(status => {\n        // when status is not deletable we must add it as child again, thus --> true\n        if (!status.deletable) {\n          return true;\n        }\n        return !predicate(status); // negate predicate\n      });\n      this._updateProperties();\n    }\n  }\n\n  _updateProperties() {\n    if (!this.hasChildren()) {\n      this.message = null;\n      this.severity = Status.Severity.OK;\n      this.code = 0;\n      return;\n    }\n\n    let firstStatus = this.asFlatList().sort((a, b) => {\n      return calcPriority(b) - calcPriority(a);\n\n      function calcPriority(status) {\n        let multiplier = 1;\n        if (status instanceof ParsingFailedStatus) {\n          multiplier = 4;\n        } else if (status instanceof ValidationFailedStatus) {\n          multiplier = 2;\n        }\n        return multiplier * status.severity;\n      }\n    })[0];\n    this.message = firstStatus.message;\n    this.severity = firstStatus.severity;\n    this.code = firstStatus.code;\n  }\n\n  /**\n   * @return {boolean} whether this status has children (= multi status)\n   */\n  hasChildren() {\n    return !!(this.children && this.children.length > 0);\n  }\n\n  /**\n   * In some cases we need to transform an error status without children to a multi-status with children.\n   * If the instance already has children, this function returns a clone of the instance.\n   * If the instance is not yet a multi-status, we return a new instance with the current instance as first child.\n   *\n   * @returns {Status}\n   */\n  ensureChildren() {\n    if (objects.isArray(this.children)) {\n      return this.clone();\n    }\n    let childStatus = this;\n    let newStatus = this.clone();\n    newStatus.children = [childStatus];\n    newStatus._updateProperties();\n    return newStatus;\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * Null-safe static clone method.\n   */\n  static clone(original) {\n    return original ? original.clone() : null;\n  }\n\n  /**\n   * @param {number} severity\n   * @returns {string}\n   * @static\n   */\n  static cssClassForSeverity(severity) {\n    let cssSeverity,\n      Severity = Status.Severity;\n\n    switch (severity) {\n      case Severity.OK:\n        cssSeverity = 'ok';\n        break;\n      case Severity.INFO:\n        cssSeverity = 'info';\n        break;\n      case Severity.WARNING:\n        cssSeverity = 'warning';\n        break;\n      case Severity.ERROR:\n        cssSeverity = 'error';\n        break;\n    }\n    return cssSeverity;\n  }\n\n  static animateStatusMessage($status, message) {\n    if (strings.endsWith(message, '...')) {\n      let $ellipsis = $status.makeSpan('ellipsis');\n      for (let i = 0; i < 3; i++) {\n        $ellipsis.append($status.makeSpan('animate-dot delay-' + i, '.'));\n      }\n      message = message.substring(0, message.length - 3);\n      $status.empty().text(message).append($ellipsis);\n    } else {\n      $status.text(message);\n    }\n  }\n\n  static ensure(status) {\n    if (!status) {\n      return status;\n    }\n    if (status instanceof Status) {\n      return status;\n    }\n    // May return a specialized sub-class of Status\n    if (!status.objectType) {\n      status.objectType = 'Status';\n    }\n    return ObjectFactory.get().create(status);\n  }\n\n  /**\n   * @returns {Status} a Status object with severity OK.\n   */\n  static ok(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.OK));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity INFO.\n   */\n  static info(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.INFO));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity WARNING.\n   */\n  static warning(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.WARNING));\n  }\n\n  /**\n   * @returns {Status} a Status object with severity ERROR.\n   */\n  static error(model) {\n    return new Status(Status.ensureModel(model, Status.Severity.ERROR));\n  }\n\n  /**\n   * @returns {object}\n   */\n  static ensureModel(model, severity) {\n    if (typeof model === 'string') {\n      model = {\n        message: model\n      };\n    } else {\n      model = model || {};\n    }\n    return $.extend({}, model, {\n      severity: severity\n    });\n  }\n\n  /**\n   * @returns {Status[]} all Status objects as flat list (goes through the status hierarchy)\n   */\n  static asFlatList(status) {\n    if (!status) {\n      return [];\n    }\n    let list = [];\n    if (status.hasChildren()) {\n      status.children.forEach(childStatus => {\n        arrays.pushAll(list, Status.asFlatList(childStatus));\n      });\n    } else {\n      list.push(status);\n    }\n    return list;\n  }\n\n  /**\n   * Returns a constructor function for the given class-name.\n   * <p>\n   * The key of this map is a string which is equals to the objectType string, the value is a reference to the constructor function.\n   * This map is required because in JavaScript we don't have the class-name at runtime.\n   * <p>\n   * Note: we cannot initialize this map as static variable, because webpack dependencies are not resolved in the moment the variable\n   * is initialized.\n   *\n   * @param {string} className\n   * @returns {function} Status constructor\n   */\n  static classForName(className) {\n    return {\n      Status: Status,\n      DefaultStatus: DefaultStatus,\n      ParsingFailedStatus: ParsingFailedStatus,\n      ValidationFailedStatus: ValidationFailedStatus\n    }[className];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}