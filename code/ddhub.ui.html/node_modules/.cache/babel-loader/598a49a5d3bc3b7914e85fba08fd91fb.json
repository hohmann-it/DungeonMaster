{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HtmlEncoder, objects, PlainTextEncoder, scout } from '../index';\nlet htmlEncoder = null;\nlet plainTextEncoder = null;\n\n/**\n * @param text\n * @param {boolean} [encodeHtml] defaults to true\n */\nexport function nl2br(text, encodeHtml) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  encodeHtml = scout.nvl(encodeHtml, true);\n  if (encodeHtml) {\n    text = encode(text);\n  }\n  return text.replace(/\\n/g, '<br>').replace(/\\r/g, '');\n}\nexport function insertAt(text, insertText, position) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  insertText = asString(insertText);\n  if (insertText && (typeof position === 'number' || position instanceof Number) && position >= 0) {\n    return text.substr(0, position) + insertText + text.substr(position);\n  }\n  return text;\n}\n\n/**\n * @returns {boolean} true if the given string contains any non-space characters\n */\nexport function hasText(text) {\n  if (text === undefined || text === null) {\n    return false;\n  }\n  text = asString(text);\n  if (typeof text !== 'string' || text.length === 0) {\n    return false;\n  }\n  return !/^\\s*$/.test(text);\n}\n\n/**\n * Inverse operation of hasText(string). Used because empty(s) is more readable than !hasText(s).\n * @returns {boolean} true if the given string is not set or contains only white-space characters.\n */\nexport function empty(text) {\n  return !hasText(text);\n}\nexport function repeat(pattern, count) {\n  if (pattern === undefined || pattern === null) {\n    return pattern;\n  }\n  if (typeof count !== 'number' || count < 1) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < count; i++) {\n    result += pattern;\n  }\n  return result;\n}\nexport function padZeroLeft(string, padding) {\n  string = asString(string);\n  if (string === undefined || string === null || typeof padding !== 'number' || padding < 1 || (string + '').length >= padding) {\n    return string;\n  }\n  let z = repeat('0', padding) + string;\n  return z.slice(-padding);\n}\nexport function contains(string, searchFor) {\n  if (!string) {\n    return false;\n  }\n  return string.indexOf(searchFor) > -1;\n}\n\n// noinspection DuplicatedCode\nexport function startsWith(fullString, startString) {\n  if (fullString === undefined || fullString === null || startString === undefined || startString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  startString = asString(startString);\n  if (startString.length === 0) {\n    return true; // every string starts with the empty string\n  }\n\n  if (fullString.length === 0) {\n    return false; // empty string cannot start with non-empty string\n  }\n\n  return fullString.substr(0, startString.length) === startString;\n}\n\n// noinspection DuplicatedCode\nexport function endsWith(fullString, endString) {\n  if (fullString === undefined || fullString === null || endString === undefined || endString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  endString = asString(endString);\n  if (endString.length === 0) {\n    return true; // every string ends with the empty string\n  }\n\n  if (fullString.length === 0) {\n    return false; // empty string cannot end with non-empty string\n  }\n\n  return fullString.substr(-endString.length) === endString;\n}\n\n/**\n * Returns the number of occurrences of 'separator' in 'string'\n */\nexport function count(string, separator) {\n  if (!string || separator === undefined || separator === null) {\n    return 0;\n  }\n  string = asString(string);\n  separator = asString(separator);\n  return string.split(separator).length - 1;\n}\n\n/**\n * Returns the HTML encoded text. Example: 'Foo<br>Bar' returns 'Foo&amp;lt;br&amp;gt;Bar'.\n * If the argument is or undefined, the same value is returned.\n * @param {string|null|undefined} text plain text to encode\n * @return {string} HTML encoded text\n */\nexport function encode(text) {\n  if (!htmlEncoder) {\n    // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    htmlEncoder = new HtmlEncoder();\n  }\n  return htmlEncoder.encode(text);\n}\n\n/**\n * Returns the plain text of the given html string using simple tag replacement.<p>\n * Tries to preserve the new lines. Since it does not consider the style, it won't be right in any cases.\n * A div for example always generates a new line, even if display style is not set to block.\n *\n * @param {object} [options]\n * @param {boolean} [options.compact] Multiple consecutive empty lines are reduced to a single empty line. Default is false.\n * @param {boolean}[options.trim] Calls string.trim(). White space at the beginning and the end of the text gets removed.. Default is false.\n * @param {boolean} [options.removeFontIcons] Removes font icons. Default is false.\n */\nexport function plainText(text, options) {\n  if (!plainTextEncoder) {\n    // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    plainTextEncoder = new PlainTextEncoder();\n  }\n  return plainTextEncoder.encode(text, options);\n}\n\n/**\n * Joins a list of strings to a single string using the given separator. Elements that are\n * not defined or have zero length are ignored. The default return value is the empty string.\n *\n * @param {string} separator String to use as separator\n * @param args list of strings to join. Can be an array or individual arguments\n */\nexport function join(separator) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  let stringsToJoin = args;\n  if (args[0] && objects.isArray(args[0])) {\n    stringsToJoin = args[0];\n  }\n  separator = asString(separator);\n  let s = '';\n  for (let i = 0; i < stringsToJoin.length; i++) {\n    let arg = asString(stringsToJoin[i]);\n    if (arg) {\n      if (s && separator) {\n        s += separator;\n      }\n      s += arg;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, it is returned with the 'prefix' and 'suffix'\n * prepended and appended, respectively. Otherwise, the empty string is returned.\n */\nexport function box(prefix, string, suffix) {\n  prefix = asString(prefix);\n  string = asString(string);\n  suffix = asString(suffix);\n  let s = '';\n  if (hasText(string)) {\n    if (prefix) {\n      s += prefix;\n    }\n    s += string;\n    if (suffix) {\n      s += suffix;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in lower case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n *\n * @deprecated use {@link toLowerCaseFirstLetter} instead\n */\nexport function lowercaseFirstLetter(string) {\n  return toLowerCaseFirstLetter(string);\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in upper case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n *\n * @deprecated use {@link toUpperCaseFirstLetter} instead\n */\nexport function uppercaseFirstLetter(string) {\n  return toUpperCaseFirstLetter(string);\n}\n/**\n * Quotes a string for use in a regular expression, i.e. escapes all characters with special meaning.\n */\nexport function quote(string) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n  string = asString(string);\n  // see \"escapeRegExp()\" from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& = last match\n}\n\n/**\n * If the given input is not of type string, it is converted to a string (using the standard\n * JavaScript \"String()\" function). Inputs 'null' and 'undefined' are returned as they are.\n */\nexport function asString(input) {\n  if (input === undefined || input === null) {\n    return input;\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return input;\n  }\n  return String(input);\n}\n\n/**\n * This is a shortcut for <code>scout.nvl(string, '')</code>.\n * @param {string} string String to check\n * @returns {string} Empty string '' when given string is null or undefined.\n */\nexport function nvl(string) {\n  if (arguments.length > 1) {\n    throw new Error('strings.nvl only accepts one argument. Use scout.nvl if you need to handle multiple arguments');\n  }\n  return scout.nvl(string, '');\n}\n\n/**\n * Null-safe version of <code>String.prototype.length</code>.\n * If the argument is null or undefined, 0 will be returned.\n * A non-string argument will be converted to a string.\n * @return {number}\n */\nexport function length(string) {\n  string = asString(string);\n  return string ? string.length : 0;\n}\n\n/**\n * Null-safe version of <code>String.prototype.trim</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function trim(string) {\n  string = asString(string);\n  return string ? string.trim() : string;\n}\n\n/**\n * Null-safe version of <code>String.prototype.toUpperCase</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toUpperCase(string) {\n  string = asString(string);\n  return string ? string.toUpperCase() : string;\n}\n\n/**\n * Null-safe version of <code>String.prototype.toLowerCase</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toLowerCase(string) {\n  string = asString(string);\n  return string ? string.toLowerCase() : string;\n}\n\n/**\n * Returns the given string, with the first character converted to upper case and the remainder unchanged.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toUpperCaseFirstLetter(string) {\n  string = asString(string);\n  if (!string) {\n    return string;\n  }\n  return string.substring(0, 1).toUpperCase() + string.substring(1);\n}\n\n/**\n * Returns the given string, with the first character converted to lower case and the remainder unchanged.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toLowerCaseFirstLetter(string) {\n  string = asString(string);\n  if (!string) {\n    return string;\n  }\n  return string.substring(0, 1).toLowerCase() + string.substring(1);\n}\n\n/**\n * Returns the number of unicode characters in the given string.\n * As opposed to the string.length property, astral symbols are\n * counted as one single character.\n *\n * Example: <code>'\\uD83D\\uDC4D'.length</code> returns 2, whereas\n * <code>countCodePoints('\\uD83D\\uDC4D')</code> returns 1.\n *\n * (\\uD83D\\uDC4D = unicode character U+1F44D 'THUMBS UP SIGN')\n */\nexport function countCodePoints(string) {\n  return string\n  // Replace every surrogate pair with a BMP symbol.\n  .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '_')\n  // and then get the length.\n  .length;\n}\n\n/**\n * Splits the given 'string' at 'separator' while returning at most 'limit' elements.\n * Unlike String.prototype.split(), this function does not discard elements if more than\n * 'limit' elements are found. Instead, the surplus elements are joined with the last element.\n *\n * Example:\n * <ul>\n * <li>'a-b-c'.split('-', 2)       ==>   ['a', 'b']\n * <li>splitMax('a-b-c', '-', 2)   ==>   ['a', 'b-c']\n * </ul>\n */\nexport function splitMax(string, separator, limit) {\n  if (string === null || string === undefined) {\n    return [];\n  }\n  string = asString(string);\n  separator = asString(separator);\n  limit = Number(limit);\n  let array = string.split(separator);\n  if (isNaN(limit) || limit <= 0 || limit >= array.length) {\n    return array;\n  }\n  let arrayShort = array.slice(0, limit - 1);\n  let last = array.slice(limit - 1).join(separator); // combine the rest\n  arrayShort.push(last);\n  return arrayShort;\n}\nexport function nullIfEmpty(string) {\n  return empty(string) ? null : string;\n}\n\n/**\n * Null safe case sensitive comparison of two strings.\n *\n * @param [ignoreCase] optional flag to perform case insensitive comparison\n */\nexport function equals(a, b, ignoreCase) {\n  a = nullIfEmpty(a);\n  b = nullIfEmpty(b);\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (ignoreCase) {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n  return a === b;\n}\nexport function equalsIgnoreCase(a, b) {\n  return equals(a, b, true);\n}\nexport function removePrefix(string, prefix) {\n  let s = string;\n  if (startsWith(string, prefix)) {\n    s = string.substring(prefix.length);\n  }\n  return s;\n}\nexport function removeSuffix(string, suffix) {\n  let s = string;\n  if (endsWith(string, suffix)) {\n    s = string.substring(0, string.length - suffix.length);\n  }\n  return s;\n}\n\n/**\n * Truncates the given text and appends '...' so it fits into the given horizontal space.\n * @param {string} text the text to be truncated\n * @param {number} horizontalSpace the horizontal space the text needs to fit into\n * @param {function} measureText a function that measures the span of a text, it needs to return an object containing a 'width' property.\n * @return {string} the truncated text\n */\nexport function truncateText(text, horizontalSpace, measureText) {\n  if (text && horizontalSpace && measureText && horizontalSpace > 0 && measureText(text).width > horizontalSpace) {\n    text = text.trim();\n    if (measureText(text).width <= horizontalSpace) {\n      return text;\n    }\n    let upperBound = text.length,\n      // exclusive\n      lowerBound = 0; // inclusive\n    while (lowerBound + 1 < upperBound) {\n      let textLength = Math.round((upperBound + lowerBound) / 2);\n      if (measureText(text.slice(0, textLength) + '...').width > horizontalSpace) {\n        upperBound = textLength;\n      } else {\n        lowerBound = textLength;\n      }\n    }\n    return text.slice(0, lowerBound).trim() + '...';\n  }\n  return text;\n}\n\n// noinspection JSDeprecatedSymbols\nexport default {\n  asString,\n  box,\n  contains,\n  count,\n  countCodePoints,\n  empty,\n  encode,\n  endsWith,\n  equals,\n  equalsIgnoreCase,\n  hasText,\n  insertAt,\n  join,\n  length,\n  /** @deprecated */\n  lowercaseFirstLetter,\n  nl2br,\n  nullIfEmpty,\n  nvl,\n  padZeroLeft,\n  plainText,\n  quote,\n  removePrefix,\n  removeSuffix,\n  repeat,\n  splitMax,\n  startsWith,\n  toLowerCase,\n  toLowerCaseFirstLetter,\n  toUpperCase,\n  toUpperCaseFirstLetter,\n  trim,\n  truncateText,\n  /** @deprecated */\n  uppercaseFirstLetter\n};","map":{"version":3,"names":["HtmlEncoder","objects","PlainTextEncoder","scout","htmlEncoder","plainTextEncoder","nl2br","text","encodeHtml","asString","nvl","encode","replace","insertAt","insertText","position","Number","substr","hasText","undefined","length","test","empty","repeat","pattern","count","result","i","padZeroLeft","string","padding","z","slice","contains","searchFor","indexOf","startsWith","fullString","startString","endsWith","endString","separator","split","plainText","options","join","args","stringsToJoin","isArray","s","arg","box","prefix","suffix","lowercaseFirstLetter","toLowerCaseFirstLetter","uppercaseFirstLetter","toUpperCaseFirstLetter","quote","input","String","arguments","Error","trim","toUpperCase","toLowerCase","substring","countCodePoints","splitMax","limit","array","isNaN","arrayShort","last","push","nullIfEmpty","equals","a","b","ignoreCase","equalsIgnoreCase","removePrefix","removeSuffix","truncateText","horizontalSpace","measureText","width","upperBound","lowerBound","textLength","Math","round"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/strings.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HtmlEncoder, objects, PlainTextEncoder, scout} from '../index';\n\nlet htmlEncoder = null;\nlet plainTextEncoder = null;\n\n/**\n * @param text\n * @param {boolean} [encodeHtml] defaults to true\n */\nexport function nl2br(text, encodeHtml) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  encodeHtml = scout.nvl(encodeHtml, true);\n  if (encodeHtml) {\n    text = encode(text);\n  }\n  return text.replace(/\\n/g, '<br>').replace(/\\r/g, '');\n}\n\nexport function insertAt(text, insertText, position) {\n  if (!text) {\n    return text;\n  }\n  text = asString(text);\n  insertText = asString(insertText);\n  if (insertText && (typeof position === 'number' || position instanceof Number) && position >= 0) {\n    return text.substr(0, position) + insertText + text.substr(position);\n  }\n  return text;\n}\n\n/**\n * @returns {boolean} true if the given string contains any non-space characters\n */\nexport function hasText(text) {\n  if (text === undefined || text === null) {\n    return false;\n  }\n  text = asString(text);\n  if (typeof text !== 'string' || text.length === 0) {\n    return false;\n  }\n  return !/^\\s*$/.test(text);\n}\n\n/**\n * Inverse operation of hasText(string). Used because empty(s) is more readable than !hasText(s).\n * @returns {boolean} true if the given string is not set or contains only white-space characters.\n */\nexport function empty(text) {\n  return !hasText(text);\n}\n\nexport function repeat(pattern, count) {\n  if (pattern === undefined || pattern === null) {\n    return pattern;\n  }\n  if (typeof count !== 'number' || count < 1) {\n    return '';\n  }\n  let result = '';\n  for (let i = 0; i < count; i++) {\n    result += pattern;\n  }\n  return result;\n}\n\nexport function padZeroLeft(string, padding) {\n  string = asString(string);\n  if (string === undefined || string === null || typeof padding !== 'number' || padding < 1 || (string + '').length >= padding) {\n    return string;\n  }\n  let z = repeat('0', padding) + string;\n  return z.slice(-padding);\n}\n\nexport function contains(string, searchFor) {\n  if (!string) {\n    return false;\n  }\n  return string.indexOf(searchFor) > -1;\n}\n\n// noinspection DuplicatedCode\nexport function startsWith(fullString, startString) {\n  if (fullString === undefined || fullString === null || startString === undefined || startString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  startString = asString(startString);\n  if (startString.length === 0) {\n    return true; // every string starts with the empty string\n  }\n  if (fullString.length === 0) {\n    return false; // empty string cannot start with non-empty string\n  }\n  return (fullString.substr(0, startString.length) === startString);\n}\n\n// noinspection DuplicatedCode\nexport function endsWith(fullString, endString) {\n  if (fullString === undefined || fullString === null || endString === undefined || endString === null) {\n    return false;\n  }\n  fullString = asString(fullString);\n  endString = asString(endString);\n  if (endString.length === 0) {\n    return true; // every string ends with the empty string\n  }\n  if (fullString.length === 0) {\n    return false; // empty string cannot end with non-empty string\n  }\n  return (fullString.substr(-endString.length) === endString);\n}\n\n/**\n * Returns the number of occurrences of 'separator' in 'string'\n */\nexport function count(string, separator) {\n  if (!string || separator === undefined || separator === null) {\n    return 0;\n  }\n  string = asString(string);\n  separator = asString(separator);\n  return string.split(separator).length - 1;\n}\n\n/**\n * Returns the HTML encoded text. Example: 'Foo<br>Bar' returns 'Foo&amp;lt;br&amp;gt;Bar'.\n * If the argument is or undefined, the same value is returned.\n * @param {string|null|undefined} text plain text to encode\n * @return {string} HTML encoded text\n */\nexport function encode(text) {\n  if (!htmlEncoder) { // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    htmlEncoder = new HtmlEncoder();\n  }\n  return htmlEncoder.encode(text);\n}\n\n/**\n * Returns the plain text of the given html string using simple tag replacement.<p>\n * Tries to preserve the new lines. Since it does not consider the style, it won't be right in any cases.\n * A div for example always generates a new line, even if display style is not set to block.\n *\n * @param {object} [options]\n * @param {boolean} [options.compact] Multiple consecutive empty lines are reduced to a single empty line. Default is false.\n * @param {boolean}[options.trim] Calls string.trim(). White space at the beginning and the end of the text gets removed.. Default is false.\n * @param {boolean} [options.removeFontIcons] Removes font icons. Default is false.\n */\nexport function plainText(text, options) {\n  if (!plainTextEncoder) { // lazy instantiation to avoid cyclic dependency errors during webpack bootstrap\n    plainTextEncoder = new PlainTextEncoder();\n  }\n  return plainTextEncoder.encode(text, options);\n}\n\n/**\n * Joins a list of strings to a single string using the given separator. Elements that are\n * not defined or have zero length are ignored. The default return value is the empty string.\n *\n * @param {string} separator String to use as separator\n * @param args list of strings to join. Can be an array or individual arguments\n */\nexport function join(separator, ...args) {\n  let stringsToJoin = args;\n  if (args[0] && objects.isArray(args[0])) {\n    stringsToJoin = args[0];\n  }\n  separator = asString(separator);\n  let s = '';\n  for (let i = 0; i < stringsToJoin.length; i++) {\n    let arg = asString(stringsToJoin[i]);\n    if (arg) {\n      if (s && separator) {\n        s += separator;\n      }\n      s += arg;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, it is returned with the 'prefix' and 'suffix'\n * prepended and appended, respectively. Otherwise, the empty string is returned.\n */\nexport function box(prefix, string, suffix) {\n  prefix = asString(prefix);\n  string = asString(string);\n  suffix = asString(suffix);\n  let s = '';\n  if (hasText(string)) {\n    if (prefix) {\n      s += prefix;\n    }\n    s += string;\n    if (suffix) {\n      s += suffix;\n    }\n  }\n  return s;\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in lower case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n *\n * @deprecated use {@link toLowerCaseFirstLetter} instead\n */\nexport function lowercaseFirstLetter(string) {\n  return toLowerCaseFirstLetter(string);\n}\n\n/**\n * If the given 'string' has text, its first letter is returned in upper case,\n * the remainder is unchanged. Otherwise, the empty string is returned.\n *\n * @deprecated use {@link toUpperCaseFirstLetter} instead\n */\nexport function uppercaseFirstLetter(string) {\n  return toUpperCaseFirstLetter(string);\n}\n/**\n * Quotes a string for use in a regular expression, i.e. escapes all characters with special meaning.\n */\nexport function quote(string) {\n  if (string === undefined || string === null) {\n    return string;\n  }\n  string = asString(string);\n  // see \"escapeRegExp()\" from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& = last match\n}\n\n/**\n * If the given input is not of type string, it is converted to a string (using the standard\n * JavaScript \"String()\" function). Inputs 'null' and 'undefined' are returned as they are.\n */\nexport function asString(input) {\n  if (input === undefined || input === null) {\n    return input;\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return input;\n  }\n  return String(input);\n}\n\n/**\n * This is a shortcut for <code>scout.nvl(string, '')</code>.\n * @param {string} string String to check\n * @returns {string} Empty string '' when given string is null or undefined.\n */\nexport function nvl(string) {\n  if (arguments.length > 1) {\n    throw new Error('strings.nvl only accepts one argument. Use scout.nvl if you need to handle multiple arguments');\n  }\n  return scout.nvl(string, '');\n}\n\n/**\n * Null-safe version of <code>String.prototype.length</code>.\n * If the argument is null or undefined, 0 will be returned.\n * A non-string argument will be converted to a string.\n * @return {number}\n */\nexport function length(string) {\n  string = asString(string);\n  return (string ? string.length : 0);\n}\n\n/**\n * Null-safe version of <code>String.prototype.trim</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function trim(string) {\n  string = asString(string);\n  return (string ? string.trim() : string);\n}\n\n/**\n * Null-safe version of <code>String.prototype.toUpperCase</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toUpperCase(string) {\n  string = asString(string);\n  return (string ? string.toUpperCase() : string);\n}\n\n/**\n * Null-safe version of <code>String.prototype.toLowerCase</code>.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toLowerCase(string) {\n  string = asString(string);\n  return (string ? string.toLowerCase() : string);\n}\n\n/**\n * Returns the given string, with the first character converted to upper case and the remainder unchanged.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toUpperCaseFirstLetter(string) {\n  string = asString(string);\n  if (!string) {\n    return string;\n  }\n  return string.substring(0, 1).toUpperCase() + string.substring(1);\n}\n\n/**\n * Returns the given string, with the first character converted to lower case and the remainder unchanged.\n * If the argument is null or undefined, the same value will be returned.\n * A non-string argument will be converted to a string.\n */\nexport function toLowerCaseFirstLetter(string) {\n  string = asString(string);\n  if (!string) {\n    return string;\n  }\n  return string.substring(0, 1).toLowerCase() + string.substring(1);\n}\n\n/**\n * Returns the number of unicode characters in the given string.\n * As opposed to the string.length property, astral symbols are\n * counted as one single character.\n *\n * Example: <code>'\\uD83D\\uDC4D'.length</code> returns 2, whereas\n * <code>countCodePoints('\\uD83D\\uDC4D')</code> returns 1.\n *\n * (\\uD83D\\uDC4D = unicode character U+1F44D 'THUMBS UP SIGN')\n */\nexport function countCodePoints(string) {\n  return string\n    // Replace every surrogate pair with a BMP symbol.\n    .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, '_')\n    // and then get the length.\n    .length;\n}\n\n/**\n * Splits the given 'string' at 'separator' while returning at most 'limit' elements.\n * Unlike String.prototype.split(), this function does not discard elements if more than\n * 'limit' elements are found. Instead, the surplus elements are joined with the last element.\n *\n * Example:\n * <ul>\n * <li>'a-b-c'.split('-', 2)       ==>   ['a', 'b']\n * <li>splitMax('a-b-c', '-', 2)   ==>   ['a', 'b-c']\n * </ul>\n */\nexport function splitMax(string, separator, limit) {\n  if (string === null || string === undefined) {\n    return [];\n  }\n  string = asString(string);\n  separator = asString(separator);\n  limit = Number(limit);\n\n  let array = string.split(separator);\n  if (isNaN(limit) || limit <= 0 || limit >= array.length) {\n    return array;\n  }\n\n  let arrayShort = array.slice(0, limit - 1);\n  let last = array.slice(limit - 1).join(separator); // combine the rest\n  arrayShort.push(last);\n  return arrayShort;\n}\n\nexport function nullIfEmpty(string) {\n  return empty(string) ? null : string;\n}\n\n/**\n * Null safe case sensitive comparison of two strings.\n *\n * @param [ignoreCase] optional flag to perform case insensitive comparison\n */\nexport function equals(a, b, ignoreCase) {\n  a = nullIfEmpty(a);\n  b = nullIfEmpty(b);\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (ignoreCase) {\n    return a.toLowerCase() === b.toLowerCase();\n  }\n  return a === b;\n}\n\nexport function equalsIgnoreCase(a, b) {\n  return equals(a, b, true);\n}\n\nexport function removePrefix(string, prefix) {\n  let s = string;\n  if (startsWith(string, prefix)) {\n    s = string.substring(prefix.length);\n  }\n  return s;\n}\n\nexport function removeSuffix(string, suffix) {\n  let s = string;\n  if (endsWith(string, suffix)) {\n    s = string.substring(0, string.length - suffix.length);\n  }\n  return s;\n}\n\n/**\n * Truncates the given text and appends '...' so it fits into the given horizontal space.\n * @param {string} text the text to be truncated\n * @param {number} horizontalSpace the horizontal space the text needs to fit into\n * @param {function} measureText a function that measures the span of a text, it needs to return an object containing a 'width' property.\n * @return {string} the truncated text\n */\nexport function truncateText(text, horizontalSpace, measureText) {\n  if (text && horizontalSpace && measureText && horizontalSpace > 0 && measureText(text).width > horizontalSpace) {\n    text = text.trim();\n    if (measureText(text).width <= horizontalSpace) {\n      return text;\n    }\n    let upperBound = text.length, // exclusive\n      lowerBound = 0; // inclusive\n    while (lowerBound + 1 < upperBound) {\n      let textLength = Math.round((upperBound + lowerBound) / 2);\n      if (measureText(text.slice(0, textLength) + '...').width > horizontalSpace) {\n        upperBound = textLength;\n      } else {\n        lowerBound = textLength;\n      }\n    }\n    return text.slice(0, lowerBound).trim() + '...';\n  }\n  return text;\n}\n\n// noinspection JSDeprecatedSymbols\nexport default {\n  asString,\n  box,\n  contains,\n  count,\n  countCodePoints,\n  empty,\n  encode,\n  endsWith,\n  equals,\n  equalsIgnoreCase,\n  hasText,\n  insertAt,\n  join,\n  length,\n  /** @deprecated */\n  lowercaseFirstLetter,\n  nl2br,\n  nullIfEmpty,\n  nvl,\n  padZeroLeft,\n  plainText,\n  quote,\n  removePrefix,\n  removeSuffix,\n  repeat,\n  splitMax,\n  startsWith,\n  toLowerCase,\n  toLowerCaseFirstLetter,\n  toUpperCase,\n  toUpperCaseFirstLetter,\n  trim,\n  truncateText,\n  /** @deprecated */\n  uppercaseFirstLetter\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}