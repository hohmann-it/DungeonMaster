{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractCompactTreeControlKeyStroke, arrays, keys } from '../../index';\nexport default class CompactTreeUpKeyStroke extends AbstractCompactTreeControlKeyStroke {\n  constructor(compactProcessTree) {\n    super(compactProcessTree);\n    this.which = [keys.UP];\n    this.renderingHints.text = '↑';\n  }\n  _findNextNode($currentNode, currentNode) {\n    if (currentNode) {\n      // Find last process node, or last process node in previous section.\n      return $currentNode.prev('.section-node').data('node') || $currentNode.parent().prev('.section').children('.section-node').last().data('node');\n    }\n    // Find last process node.\n    return arrays.last(arrays.last(this.field.nodes).childNodes);\n  }\n}","map":{"version":3,"names":["AbstractCompactTreeControlKeyStroke","arrays","keys","CompactTreeUpKeyStroke","constructor","compactProcessTree","which","UP","renderingHints","text","_findNextNode","$currentNode","currentNode","prev","data","parent","children","last","field","nodes","childNodes"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tree/keystrokes/CompactTreeUpKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractCompactTreeControlKeyStroke, arrays, keys} from '../../index';\n\nexport default class CompactTreeUpKeyStroke extends AbstractCompactTreeControlKeyStroke {\n\n  constructor(compactProcessTree) {\n    super(compactProcessTree);\n    this.which = [keys.UP];\n    this.renderingHints.text = '↑';\n  }\n\n  _findNextNode($currentNode, currentNode) {\n    if (currentNode) {\n      // Find last process node, or last process node in previous section.\n      return $currentNode.prev('.section-node').data('node') || $currentNode.parent().prev('.section').children('.section-node').last().data('node');\n    }\n    // Find last process node.\n    return arrays.last(arrays.last(this.field.nodes).childNodes);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,mCAAmC,EAAEC,MAAM,EAAEC,IAAI,QAAO,aAAa;AAE7E,eAAe,MAAMC,sBAAsB,SAASH,mCAAmC,CAAC;EAEtFI,WAAW,CAACC,kBAAkB,EAAE;IAC9B,KAAK,CAACA,kBAAkB,CAAC;IACzB,IAAI,CAACC,KAAK,GAAG,CAACJ,IAAI,CAACK,EAAE,CAAC;IACtB,IAAI,CAACC,cAAc,CAACC,IAAI,GAAG,GAAG;EAChC;EAEAC,aAAa,CAACC,YAAY,EAAEC,WAAW,EAAE;IACvC,IAAIA,WAAW,EAAE;MACf;MACA,OAAOD,YAAY,CAACE,IAAI,CAAC,eAAe,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC,IAAIH,YAAY,CAACI,MAAM,EAAE,CAACF,IAAI,CAAC,UAAU,CAAC,CAACG,QAAQ,CAAC,eAAe,CAAC,CAACC,IAAI,EAAE,CAACH,IAAI,CAAC,MAAM,CAAC;IAChJ;IACA;IACA,OAAOb,MAAM,CAACgB,IAAI,CAAChB,MAAM,CAACgB,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC,CAACC,UAAU,CAAC;EAC9D;AACF"},"metadata":{},"sourceType":"module"}