{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, Insets, Popup, Rectangle, scout } from '../index';\nexport default class PopupLayout extends AbstractLayout {\n  constructor(popup) {\n    super();\n    this.popup = popup;\n    this.doubleCalcPrefSize = true; // enables popups with a height which depends on the width (= popups with wrapping content)\n    this.autoPosition = true;\n    this.autoSize = true;\n    this.resizeAnimationRunning = false;\n    this.resizeAnimationDuration = null; // default\n    this._autoPositionOrig = null;\n  }\n  layout($container) {\n    if (this.popup.isOpeningAnimationRunning()) {\n      this.popup.$container.oneAnimationEnd(this.layout.bind(this, $container));\n      return;\n    }\n    if (this.popup.removalPending || this.popup.removing || !this.popup.rendered) {\n      return;\n    }\n    if (!this.autoSize) {\n      // Just layout the popup with the current size\n      this._setSize(this.popup.htmlComp.size({\n        exact: true\n      }));\n      return;\n    }\n    let htmlComp = this.popup.htmlComp;\n    // Read current bounds before calling pref size, because pref size may change position (_calcMaxSize)\n    let currentBounds = graphics.bounds(htmlComp.$comp);\n    let prefSize = this.preferredLayoutSize($container, {\n      exact: true,\n      onlyWidth: this.doubleCalcPrefSize\n    });\n    prefSize = this.adjustSize(prefSize);\n    if (this.doubleCalcPrefSize) {\n      prefSize = this.preferredLayoutSize($container, {\n        exact: true,\n        widthHint: prefSize.width - htmlComp.insets().horizontal()\n      });\n      prefSize = this.adjustSize(prefSize);\n    }\n    this._setSize(prefSize);\n    if (htmlComp.layouted && this.popup.animateResize) {\n      this._resizeAnimated(currentBounds, prefSize);\n    }\n  }\n  _resizeAnimated(currentBounds, prefSize) {\n    this._position();\n    let htmlComp = this.popup.htmlComp;\n    let prefPosition = htmlComp.$comp.position();\n\n    // Preferred size are exact, current bounds are rounded -> round preferred size up to make compare work\n    let prefBounds = new Rectangle(prefPosition.left, prefPosition.top, Math.ceil(prefSize.width), Math.ceil(prefSize.height));\n    if (currentBounds.equals(prefBounds)) {\n      // Bounds did not change -> do nothing\n      return;\n    }\n    this.resizeAnimationRunning = true;\n    htmlComp.$comp.stop(true).cssHeight(currentBounds.height).cssWidth(currentBounds.width).cssLeft(currentBounds.x).cssTop(currentBounds.y).animate({\n      height: prefSize.height,\n      width: prefSize.width,\n      left: prefPosition.left,\n      top: prefPosition.top\n    }, {\n      duration: this.resizeAnimationDuration,\n      complete: () => {\n        this.resizeAnimationRunning = false;\n        if (!this.popup.rendered) {\n          return;\n        }\n        // Ensure the arrow is at the correct position after the animation\n        this._position();\n      }\n    });\n  }\n  _position(switchIfNecessary) {\n    if (this.autoPosition) {\n      this.popup.position(switchIfNecessary);\n    }\n  }\n  _setSize(prefSize) {\n    graphics.setSize(this.popup.htmlComp.$comp, prefSize);\n  }\n  adjustSize(prefSize) {\n    // Consider CSS min/max rules\n    this.popup.htmlComp._adjustPrefSizeWithMinMaxSize(prefSize);\n\n    // Consider window boundaries\n    if (this.popup.boundToAnchor && (this.popup.anchorBounds || this.popup.$anchor)) {\n      return this._adjustSizeWithAnchor(prefSize);\n    }\n    return this._adjustSize(prefSize);\n  }\n  _adjustSize(prefSize) {\n    let popupSize = new Dimension(),\n      maxSize = this._calcMaxSize();\n\n    // Ensure the popup is not larger than max size\n    popupSize.width = Math.min(maxSize.width, prefSize.width);\n    popupSize.height = Math.min(maxSize.height, prefSize.height);\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Dimension}\n   */\n  _calcMaxSize() {\n    let maxWidth,\n      maxHeight,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      windowSize = this.popup.getWindowSize();\n    maxWidth = windowSize.width - popupMargins.horizontal() - windowPaddingX;\n    maxHeight = windowSize.height - popupMargins.vertical() - windowPaddingY;\n    return new Dimension(maxWidth, maxHeight);\n  }\n  _adjustSizeWithAnchor(prefSize) {\n    let popupSize = new Dimension(),\n      maxSize = this._calcMaxSizeAroundAnchor(),\n      windowSize = this._calcMaxSize(),\n      Alignment = Popup.Alignment,\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment;\n\n    // Decide whether the prefSize can be used or the popup needs to be shrunken so that it fits into the viewport\n    // The decision is based on the preferred opening direction\n    // Example: The popup would like to be opened leftedge and bottom\n    // If there is enough space on the right and on the bottom -> pref size is used\n    // If there is not enough space on the right it checks whether there is enough space on the left\n    // If there is enough space on the left -> use preferred width -> The opening direction will be switched using position() at the end\n    // If there is not enough space on the left as well, the greater width is used -> Position() will either switch the direction or not, depending on the size of the popup\n    // The same happens for y direction if there is not enough space on the bottom\n    popupSize.width = prefSize.width;\n    if (this.popup.trimWidth) {\n      if (this.popup.horizontalSwitch) {\n        if (prefSize.width > maxSize.right && prefSize.width > maxSize.left) {\n          popupSize.width = Math.max(maxSize.right, maxSize.left);\n        }\n      } else {\n        if (horizontalAlignment === Alignment.RIGHT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.right);\n        } else if (horizontalAlignment === Alignment.LEFT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.left);\n        } else {\n          popupSize.width = Math.min(popupSize.width, windowSize.width);\n        }\n      }\n    }\n    popupSize.height = prefSize.height;\n    if (this.popup.trimHeight) {\n      if (this.popup.verticalSwitch) {\n        if (prefSize.height > maxSize.bottom && prefSize.height > maxSize.top) {\n          popupSize.height = Math.max(maxSize.bottom, maxSize.top);\n        }\n      } else {\n        if (verticalAlignment === Alignment.BOTTOM) {\n          popupSize.height = Math.min(popupSize.height, maxSize.bottom);\n        } else if (verticalAlignment === Alignment.TOP) {\n          popupSize.height = Math.min(popupSize.height, maxSize.top);\n        } else {\n          popupSize.height = Math.min(popupSize.height, windowSize.height);\n        }\n      }\n    }\n\n    // On CENTER alignment, the anchor must ne be considered. Instead make sure the popup does not exceed window boundaries (same as in adjustSize)\n    if (verticalAlignment === Alignment.CENTER || horizontalAlignment === Alignment.CENTER) {\n      if (horizontalAlignment === Alignment.CENTER) {\n        popupSize.width = Math.min(windowSize.width, prefSize.width);\n      }\n      if (verticalAlignment === Alignment.CENTER) {\n        popupSize.height = Math.min(windowSize.height, prefSize.height);\n      }\n    }\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Insets}\n   */\n  _calcMaxSizeAroundAnchor() {\n    let maxWidthLeft,\n      maxWidthRight,\n      maxHeightDown,\n      maxHeightUp,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      anchorBounds = this.popup.getAnchorBounds(),\n      windowSize = this.popup.getWindowSize(),\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment,\n      Alignment = Popup.Alignment;\n    if (scout.isOneOf(horizontalAlignment, Alignment.LEFTEDGE, Alignment.RIGHTEDGE)) {\n      maxWidthRight = windowSize.width - anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n    } else {\n      // LEFT or RIGHT\n      maxWidthRight = windowSize.width - anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n    }\n    if (scout.isOneOf(verticalAlignment, Alignment.BOTTOMEDGE, Alignment.TOPEDGE)) {\n      maxHeightDown = windowSize.height - anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n    } else {\n      // BOTTOM or TOP\n      maxHeightDown = windowSize.height - anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n    }\n    return new Insets(maxHeightUp, maxWidthRight, maxHeightDown, maxWidthLeft);\n  }\n  disableAutoPosition() {\n    if (this._autoPositionOrig === null) {\n      this._autoPositionOrig = this.autoPosition;\n      this.autoPosition = false;\n    }\n  }\n  resetAutoPosition() {\n    this.autoPosition = this._autoPositionOrig;\n    this._autoPositionOrig = null;\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","graphics","Insets","Popup","Rectangle","scout","PopupLayout","constructor","popup","doubleCalcPrefSize","autoPosition","autoSize","resizeAnimationRunning","resizeAnimationDuration","_autoPositionOrig","layout","$container","isOpeningAnimationRunning","oneAnimationEnd","bind","removalPending","removing","rendered","_setSize","htmlComp","size","exact","currentBounds","bounds","$comp","prefSize","preferredLayoutSize","onlyWidth","adjustSize","widthHint","width","insets","horizontal","layouted","animateResize","_resizeAnimated","_position","prefPosition","position","prefBounds","left","top","Math","ceil","height","equals","stop","cssHeight","cssWidth","cssLeft","x","cssTop","y","animate","duration","complete","switchIfNecessary","setSize","_adjustPrefSizeWithMinMaxSize","boundToAnchor","anchorBounds","$anchor","_adjustSizeWithAnchor","_adjustSize","popupSize","maxSize","_calcMaxSize","min","maxWidth","maxHeight","windowPaddingX","windowPaddingY","popupMargins","margins","windowSize","getWindowSize","vertical","_calcMaxSizeAroundAnchor","Alignment","horizontalAlignment","verticalAlignment","trimWidth","horizontalSwitch","right","max","RIGHT","LEFT","trimHeight","verticalSwitch","bottom","BOTTOM","TOP","CENTER","maxWidthLeft","maxWidthRight","maxHeightDown","maxHeightUp","getAnchorBounds","isOneOf","LEFTEDGE","RIGHTEDGE","BOTTOMEDGE","TOPEDGE","disableAutoPosition","resetAutoPosition"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/popup/PopupLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, Insets, Popup, Rectangle, scout} from '../index';\n\nexport default class PopupLayout extends AbstractLayout {\n\n  constructor(popup) {\n    super();\n    this.popup = popup;\n    this.doubleCalcPrefSize = true; // enables popups with a height which depends on the width (= popups with wrapping content)\n    this.autoPosition = true;\n    this.autoSize = true;\n    this.resizeAnimationRunning = false;\n    this.resizeAnimationDuration = null; // default\n    this._autoPositionOrig = null;\n  }\n\n  layout($container) {\n    if (this.popup.isOpeningAnimationRunning()) {\n      this.popup.$container.oneAnimationEnd(this.layout.bind(this, $container));\n      return;\n    }\n    if (this.popup.removalPending || this.popup.removing || !this.popup.rendered) {\n      return;\n    }\n    if (!this.autoSize) {\n      // Just layout the popup with the current size\n      this._setSize(this.popup.htmlComp.size({exact: true}));\n      return;\n    }\n\n    let htmlComp = this.popup.htmlComp;\n    // Read current bounds before calling pref size, because pref size may change position (_calcMaxSize)\n    let currentBounds = graphics.bounds(htmlComp.$comp);\n    let prefSize = this.preferredLayoutSize($container, {\n      exact: true,\n      onlyWidth: this.doubleCalcPrefSize\n    });\n\n    prefSize = this.adjustSize(prefSize);\n    if (this.doubleCalcPrefSize) {\n      prefSize = this.preferredLayoutSize($container, {\n        exact: true,\n        widthHint: prefSize.width - htmlComp.insets().horizontal()\n      });\n      prefSize = this.adjustSize(prefSize);\n    }\n\n    this._setSize(prefSize);\n\n    if (htmlComp.layouted && this.popup.animateResize) {\n      this._resizeAnimated(currentBounds, prefSize);\n    }\n  }\n\n  _resizeAnimated(currentBounds, prefSize) {\n    this._position();\n    let htmlComp = this.popup.htmlComp;\n    let prefPosition = htmlComp.$comp.position();\n\n    // Preferred size are exact, current bounds are rounded -> round preferred size up to make compare work\n    let prefBounds = new Rectangle(prefPosition.left, prefPosition.top, Math.ceil(prefSize.width), Math.ceil(prefSize.height));\n    if (currentBounds.equals(prefBounds)) {\n      // Bounds did not change -> do nothing\n      return;\n    }\n    this.resizeAnimationRunning = true;\n    htmlComp.$comp\n      .stop(true)\n      .cssHeight(currentBounds.height)\n      .cssWidth(currentBounds.width)\n      .cssLeft(currentBounds.x)\n      .cssTop(currentBounds.y)\n      .animate({\n        height: prefSize.height,\n        width: prefSize.width,\n        left: prefPosition.left,\n        top: prefPosition.top\n      }, {\n        duration: this.resizeAnimationDuration,\n        complete: () => {\n          this.resizeAnimationRunning = false;\n          if (!this.popup.rendered) {\n            return;\n          }\n          // Ensure the arrow is at the correct position after the animation\n          this._position();\n        }\n      });\n  }\n\n  _position(switchIfNecessary) {\n    if (this.autoPosition) {\n      this.popup.position(switchIfNecessary);\n    }\n  }\n\n  _setSize(prefSize) {\n    graphics.setSize(this.popup.htmlComp.$comp, prefSize);\n  }\n\n  adjustSize(prefSize) {\n    // Consider CSS min/max rules\n    this.popup.htmlComp._adjustPrefSizeWithMinMaxSize(prefSize);\n\n    // Consider window boundaries\n    if (this.popup.boundToAnchor && (this.popup.anchorBounds || this.popup.$anchor)) {\n      return this._adjustSizeWithAnchor(prefSize);\n    }\n    return this._adjustSize(prefSize);\n  }\n\n  _adjustSize(prefSize) {\n    let popupSize = new Dimension(),\n      maxSize = this._calcMaxSize();\n\n    // Ensure the popup is not larger than max size\n    popupSize.width = Math.min(maxSize.width, prefSize.width);\n    popupSize.height = Math.min(maxSize.height, prefSize.height);\n\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Dimension}\n   */\n  _calcMaxSize() {\n    let maxWidth, maxHeight,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      windowSize = this.popup.getWindowSize();\n\n    maxWidth = (windowSize.width - popupMargins.horizontal() - windowPaddingX);\n    maxHeight = (windowSize.height - popupMargins.vertical() - windowPaddingY);\n\n    return new Dimension(maxWidth, maxHeight);\n  }\n\n  _adjustSizeWithAnchor(prefSize) {\n    let popupSize = new Dimension(),\n      maxSize = this._calcMaxSizeAroundAnchor(),\n      windowSize = this._calcMaxSize(),\n      Alignment = Popup.Alignment,\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment;\n\n    // Decide whether the prefSize can be used or the popup needs to be shrunken so that it fits into the viewport\n    // The decision is based on the preferred opening direction\n    // Example: The popup would like to be opened leftedge and bottom\n    // If there is enough space on the right and on the bottom -> pref size is used\n    // If there is not enough space on the right it checks whether there is enough space on the left\n    // If there is enough space on the left -> use preferred width -> The opening direction will be switched using position() at the end\n    // If there is not enough space on the left as well, the greater width is used -> Position() will either switch the direction or not, depending on the size of the popup\n    // The same happens for y direction if there is not enough space on the bottom\n    popupSize.width = prefSize.width;\n    if (this.popup.trimWidth) {\n      if (this.popup.horizontalSwitch) {\n        if (prefSize.width > maxSize.right && prefSize.width > maxSize.left) {\n          popupSize.width = Math.max(maxSize.right, maxSize.left);\n        }\n      } else {\n        if (horizontalAlignment === Alignment.RIGHT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.right);\n        } else if (horizontalAlignment === Alignment.LEFT) {\n          popupSize.width = Math.min(popupSize.width, maxSize.left);\n        } else {\n          popupSize.width = Math.min(popupSize.width, windowSize.width);\n        }\n      }\n    }\n    popupSize.height = prefSize.height;\n    if (this.popup.trimHeight) {\n      if (this.popup.verticalSwitch) {\n        if (prefSize.height > maxSize.bottom && prefSize.height > maxSize.top) {\n          popupSize.height = Math.max(maxSize.bottom, maxSize.top);\n        }\n      } else {\n        if (verticalAlignment === Alignment.BOTTOM) {\n          popupSize.height = Math.min(popupSize.height, maxSize.bottom);\n        } else if (verticalAlignment === Alignment.TOP) {\n          popupSize.height = Math.min(popupSize.height, maxSize.top);\n        } else {\n          popupSize.height = Math.min(popupSize.height, windowSize.height);\n        }\n      }\n    }\n\n    // On CENTER alignment, the anchor must ne be considered. Instead make sure the popup does not exceed window boundaries (same as in adjustSize)\n    if (verticalAlignment === Alignment.CENTER || horizontalAlignment === Alignment.CENTER) {\n      if (horizontalAlignment === Alignment.CENTER) {\n        popupSize.width = Math.min(windowSize.width, prefSize.width);\n      }\n      if (verticalAlignment === Alignment.CENTER) {\n        popupSize.height = Math.min(windowSize.height, prefSize.height);\n      }\n    }\n\n    return popupSize;\n  }\n\n  /**\n   * Considers window boundaries.\n   *\n   * @returns {Insets}\n   */\n  _calcMaxSizeAroundAnchor() {\n    let maxWidthLeft, maxWidthRight, maxHeightDown, maxHeightUp,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      windowPaddingY = this.popup.windowPaddingY,\n      popupMargins = htmlComp.margins(),\n      anchorBounds = this.popup.getAnchorBounds(),\n      windowSize = this.popup.getWindowSize(),\n      horizontalAlignment = this.popup.horizontalAlignment,\n      verticalAlignment = this.popup.verticalAlignment,\n      Alignment = Popup.Alignment;\n\n    if (scout.isOneOf(horizontalAlignment, Alignment.LEFTEDGE, Alignment.RIGHTEDGE)) {\n      maxWidthRight = windowSize.width - anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n    } else { // LEFT or RIGHT\n      maxWidthRight = windowSize.width - anchorBounds.right() - popupMargins.horizontal() - windowPaddingX;\n      maxWidthLeft = anchorBounds.x - popupMargins.horizontal() - windowPaddingX;\n    }\n\n    if (scout.isOneOf(verticalAlignment, Alignment.BOTTOMEDGE, Alignment.TOPEDGE)) {\n      maxHeightDown = windowSize.height - anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n    } else { // BOTTOM or TOP\n      maxHeightDown = windowSize.height - anchorBounds.bottom() - popupMargins.vertical() - windowPaddingY;\n      maxHeightUp = anchorBounds.y - popupMargins.vertical() - windowPaddingY;\n    }\n\n    return new Insets(maxHeightUp, maxWidthRight, maxHeightDown, maxWidthLeft);\n  }\n\n  disableAutoPosition() {\n    if (this._autoPositionOrig === null) {\n      this._autoPositionOrig = this.autoPosition;\n      this.autoPosition = false;\n    }\n  }\n\n  resetAutoPosition() {\n    this.autoPosition = this._autoPositionOrig;\n    this._autoPositionOrig = null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}