{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, HtmlComponent, Rectangle, SplitBox } from '../../../index';\nimport $ from 'jquery';\nexport default class SplitBoxLayout extends AbstractLayout {\n  constructor(splitBox) {\n    super();\n    this.splitBox = splitBox;\n  }\n  layout($container) {\n    // Extract components\n    let htmlContainer = HtmlComponent.get($container),\n      // = split-area\n      $splitter = $container.children('.splitter'),\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1)),\n      // Calculate available size for split area\n      splitXAxis = this.splitBox.splitHorizontal;\n    $splitter.removeClass('hidden');\n    let firstFieldSize,\n      secondFieldSize,\n      firstFieldBounds,\n      secondFieldBounds,\n      availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets()),\n      hasFirstField = htmlFirstField && htmlFirstField.isVisible(),\n      hasSecondField = htmlSecondField && htmlSecondField.isVisible(),\n      hasTwoFields = hasFirstField && hasSecondField,\n      hasOneField = !hasTwoFields && (hasFirstField || hasSecondField),\n      splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // remove splitter size from available with, only when both fields are visible\n    // otherwise the splitter is invisible and requires no space.\n    let availableSizeForFields = new Dimension(availableSize);\n    if (hasTwoFields) {\n      if (splitXAxis) {\n        // \"|\"\n        availableSizeForFields.width -= htmlFirstField.margins().right;\n      } else {\n        // \"--\"\n        availableSizeForFields.height -= htmlFirstField.margins().bottom;\n      }\n    }\n\n    // Default case: two fields\n    if (hasTwoFields) {\n      // Distribute available size to the two fields according to the splitter position ratio\n      firstFieldSize = new Dimension(availableSizeForFields);\n      secondFieldSize = new Dimension(availableSizeForFields);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition);\n\n      // Calculate and set bounds (splitter and second field have to be moved)\n      firstFieldBounds = new Rectangle(0, 0, firstFieldSize.width, firstFieldSize.height);\n      secondFieldBounds = new Rectangle(0, 0, secondFieldSize.width, secondFieldSize.height);\n      if (splitXAxis) {\n        // \"|\"\n        $splitter.cssLeft(firstFieldBounds.width);\n        secondFieldBounds.x = firstFieldBounds.width + htmlFirstField.margins().right;\n      } else {\n        // \"--\"\n        $splitter.cssTop(firstFieldBounds.height);\n        secondFieldBounds.y = firstFieldBounds.height + htmlFirstField.margins().bottom;\n      }\n      htmlFirstField.setBounds(firstFieldBounds);\n      htmlSecondField.setBounds(secondFieldBounds);\n    } else {\n      // Special case: only one field (or none at all)\n      if (hasOneField) {\n        let singleField = hasFirstField ? htmlFirstField : htmlSecondField,\n          singleFieldSize = availableSize.subtract(singleField.margins());\n        singleField.setBounds(new Rectangle(0, 0, singleFieldSize.width, singleFieldSize.height));\n      }\n      $splitter.addClass('hidden');\n    }\n\n    // Calculate collapse button position\n    if (this.splitBox._collapseHandle) {\n      let $collapseHandle = this.splitBox._collapseHandle.$container;\n\n      // Show collapse handle, if split box has two fields which are visible (one field may be collapsed)\n      let collapseHandleVisible = this.splitBox.firstField && this.splitBox.firstField.visible && this.splitBox.secondField && this.splitBox.secondField.visible;\n      $collapseHandle.setVisible(collapseHandleVisible);\n      let x = null;\n      if (hasTwoFields) {\n        // - if 1st field is collapsible -> align button on the right side of the field (there is not enough space on the left side)\n        // - if 2nd field is collapsible -> button is always aligned on the right side using CSS\n        if (this.splitBox.collapsibleField === this.splitBox.firstField) {\n          let collapseHandleSize = graphics.size($collapseHandle);\n          x = firstFieldBounds.width - collapseHandleSize.width;\n        }\n      }\n      $collapseHandle.cssLeft(x);\n    }\n  }\n  preferredLayoutSize($container, options) {\n    // Extract components\n    let htmlContainer = HtmlComponent.get($container),\n      // = split-area\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1));\n    let splitXAxis = this.splitBox.splitHorizontal;\n    let splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // compute width hints\n    let firstFieldOptions = $.extend({}, options);\n    let secondFieldOptions = $.extend({}, options);\n    if (options.widthHint) {\n      let firstFieldSizeHint = new Dimension(options.widthHint, 0);\n      let secondFieldSizeHint = new Dimension(options.widthHint, 0);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSizeHint, secondFieldSizeHint, splitterPosition);\n      firstFieldOptions.widthHint = firstFieldSizeHint.width;\n      secondFieldOptions.widthHint = secondFieldSizeHint.width;\n    }\n\n    // Get preferred size of fields\n    let firstFieldSize = new Dimension(0, 0);\n    if (htmlFirstField) {\n      firstFieldSize = htmlFirstField.prefSize(firstFieldOptions).add(htmlFirstField.margins());\n    }\n    let secondFieldSize = new Dimension(0, 0);\n    if (htmlSecondField) {\n      secondFieldSize = htmlSecondField.prefSize(secondFieldOptions).add(htmlSecondField.margins());\n    }\n\n    // Calculate prefSize\n    let prefSize;\n    if (splitXAxis) {\n      // \"|\"\n      prefSize = new Dimension(firstFieldSize.width + secondFieldSize.width, Math.max(firstFieldSize.height, secondFieldSize.height));\n    } else {\n      // \"--\"\n      prefSize = new Dimension(Math.max(firstFieldSize.width, secondFieldSize.width), firstFieldSize.height + secondFieldSize.height);\n    }\n    prefSize = prefSize.add(htmlContainer.insets());\n    return prefSize;\n  }\n\n  /**\n   * Distributes the available size according to the split axis and the splitter position\n   *\n   * @param splitXAxis truthy if the splitter splits vertical |, falsy if the splitter splits horizontal --\n   * @param firstFieldSize initialize with the total available space. Will be adjusted to the available size of the first field.\n   * @param secondFieldSize initialize with the total available space. Will be adjusted to the available size of the second field.\n   * @param splitterPosition effective splitter position\n   */\n  computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition) {\n    if (splitXAxis) {\n      // \"|\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.width = Math.floor(firstFieldSize.width * splitterPosition);\n        secondFieldSize.width -= firstFieldSize.width;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.width = Math.floor(secondFieldSize.width * splitterPosition);\n        firstFieldSize.width -= secondFieldSize.width;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.width);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.width = firstFieldSize.width - splitterPosition;\n          secondFieldSize.width = splitterPosition;\n        } else {\n          firstFieldSize.width = splitterPosition;\n          secondFieldSize.width = secondFieldSize.width - splitterPosition;\n        }\n      }\n    } else {\n      // \"--\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.height = Math.floor(firstFieldSize.height * splitterPosition);\n        secondFieldSize.height -= firstFieldSize.height;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.height = Math.floor(secondFieldSize.height * splitterPosition);\n        firstFieldSize.height -= secondFieldSize.height;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.height);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.height = firstFieldSize.height - splitterPosition;\n          secondFieldSize.height = splitterPosition;\n        } else {\n          firstFieldSize.height = splitterPosition;\n          secondFieldSize.height = secondFieldSize.height - splitterPosition;\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","graphics","HtmlComponent","Rectangle","SplitBox","$","SplitBoxLayout","constructor","splitBox","layout","$container","htmlContainer","get","$splitter","children","$fields","htmlFirstField","optGet","eq","htmlSecondField","splitXAxis","splitHorizontal","removeClass","firstFieldSize","secondFieldSize","firstFieldBounds","secondFieldBounds","availableSize","subtract","insets","hasFirstField","isVisible","hasSecondField","hasTwoFields","hasOneField","splitterPosition","getEffectiveSplitterPosition","availableSizeForFields","width","margins","right","height","bottom","computeInnerFieldsDimensions","cssLeft","x","cssTop","y","setBounds","singleField","singleFieldSize","addClass","_collapseHandle","$collapseHandle","collapseHandleVisible","firstField","visible","secondField","setVisible","collapsibleField","collapseHandleSize","size","preferredLayoutSize","options","firstFieldOptions","extend","secondFieldOptions","widthHint","firstFieldSizeHint","secondFieldSizeHint","prefSize","add","Math","max","splitterPositionType","SPLITTER_POSITION_TYPE_RELATIVE_FIRST","floor","SPLITTER_POSITION_TYPE_RELATIVE_SECOND","min","SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/splitbox/SplitBoxLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, HtmlComponent, Rectangle, SplitBox} from '../../../index';\nimport $ from 'jquery';\n\nexport default class SplitBoxLayout extends AbstractLayout {\n\n  constructor(splitBox) {\n    super();\n    this.splitBox = splitBox;\n  }\n\n  layout($container) {\n    // Extract components\n    let htmlContainer = HtmlComponent.get($container), // = split-area\n      $splitter = $container.children('.splitter'),\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1)),\n      // Calculate available size for split area\n      splitXAxis = this.splitBox.splitHorizontal;\n\n    $splitter.removeClass('hidden');\n\n    let firstFieldSize, secondFieldSize, firstFieldBounds, secondFieldBounds,\n      availableSize = htmlContainer.availableSize().subtract(htmlContainer.insets()),\n      hasFirstField = (htmlFirstField && htmlFirstField.isVisible()),\n      hasSecondField = (htmlSecondField && htmlSecondField.isVisible()),\n      hasTwoFields = hasFirstField && hasSecondField,\n      hasOneField = !hasTwoFields && (hasFirstField || hasSecondField),\n      splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // remove splitter size from available with, only when both fields are visible\n    // otherwise the splitter is invisible and requires no space.\n    let availableSizeForFields = new Dimension(availableSize);\n    if (hasTwoFields) {\n      if (splitXAxis) { // \"|\"\n        availableSizeForFields.width -= htmlFirstField.margins().right;\n      } else { // \"--\"\n        availableSizeForFields.height -= htmlFirstField.margins().bottom;\n      }\n    }\n\n    // Default case: two fields\n    if (hasTwoFields) {\n      // Distribute available size to the two fields according to the splitter position ratio\n      firstFieldSize = new Dimension(availableSizeForFields);\n      secondFieldSize = new Dimension(availableSizeForFields);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition);\n\n      // Calculate and set bounds (splitter and second field have to be moved)\n      firstFieldBounds = new Rectangle(0, 0, firstFieldSize.width, firstFieldSize.height);\n      secondFieldBounds = new Rectangle(0, 0, secondFieldSize.width, secondFieldSize.height);\n      if (splitXAxis) { // \"|\"\n        $splitter.cssLeft(firstFieldBounds.width);\n        secondFieldBounds.x = firstFieldBounds.width + htmlFirstField.margins().right;\n      } else { // \"--\"\n        $splitter.cssTop(firstFieldBounds.height);\n        secondFieldBounds.y = firstFieldBounds.height + htmlFirstField.margins().bottom;\n      }\n      htmlFirstField.setBounds(firstFieldBounds);\n      htmlSecondField.setBounds(secondFieldBounds);\n    } else {\n      // Special case: only one field (or none at all)\n      if (hasOneField) {\n        let singleField = hasFirstField ? htmlFirstField : htmlSecondField,\n          singleFieldSize = availableSize.subtract(singleField.margins());\n        singleField.setBounds(new Rectangle(0, 0, singleFieldSize.width, singleFieldSize.height));\n      }\n      $splitter.addClass('hidden');\n    }\n\n    // Calculate collapse button position\n    if (this.splitBox._collapseHandle) {\n      let $collapseHandle = this.splitBox._collapseHandle.$container;\n\n      // Show collapse handle, if split box has two fields which are visible (one field may be collapsed)\n      let collapseHandleVisible = this.splitBox.firstField && this.splitBox.firstField.visible && this.splitBox.secondField && this.splitBox.secondField.visible;\n      $collapseHandle.setVisible(collapseHandleVisible);\n\n      let x = null;\n      if (hasTwoFields) {\n        // - if 1st field is collapsible -> align button on the right side of the field (there is not enough space on the left side)\n        // - if 2nd field is collapsible -> button is always aligned on the right side using CSS\n        if (this.splitBox.collapsibleField === this.splitBox.firstField) {\n          let collapseHandleSize = graphics.size($collapseHandle);\n          x = firstFieldBounds.width - collapseHandleSize.width;\n        }\n      }\n      $collapseHandle.cssLeft(x);\n    }\n  }\n\n  preferredLayoutSize($container, options) {\n    // Extract components\n    let htmlContainer = HtmlComponent.get($container), // = split-area\n      $fields = $container.children('.form-field'),\n      htmlFirstField = HtmlComponent.optGet($fields.eq(0)),\n      htmlSecondField = HtmlComponent.optGet($fields.eq(1));\n\n    let splitXAxis = this.splitBox.splitHorizontal;\n    let splitterPosition = this.splitBox.getEffectiveSplitterPosition();\n\n    // compute width hints\n    let firstFieldOptions = $.extend({}, options);\n    let secondFieldOptions = $.extend({}, options);\n\n    if (options.widthHint) {\n      let firstFieldSizeHint = new Dimension(options.widthHint, 0);\n      let secondFieldSizeHint = new Dimension(options.widthHint, 0);\n      this.computeInnerFieldsDimensions(splitXAxis, firstFieldSizeHint, secondFieldSizeHint, splitterPosition);\n\n      firstFieldOptions.widthHint = firstFieldSizeHint.width;\n      secondFieldOptions.widthHint = secondFieldSizeHint.width;\n    }\n\n    // Get preferred size of fields\n    let firstFieldSize = new Dimension(0, 0);\n    if (htmlFirstField) {\n      firstFieldSize = htmlFirstField.prefSize(firstFieldOptions)\n        .add(htmlFirstField.margins());\n    }\n    let secondFieldSize = new Dimension(0, 0);\n    if (htmlSecondField) {\n      secondFieldSize = htmlSecondField.prefSize(secondFieldOptions)\n        .add(htmlSecondField.margins());\n    }\n\n    // Calculate prefSize\n    let prefSize;\n    if (splitXAxis) { // \"|\"\n      prefSize = new Dimension(\n        firstFieldSize.width + secondFieldSize.width,\n        Math.max(firstFieldSize.height, secondFieldSize.height)\n      );\n    } else { // \"--\"\n      prefSize = new Dimension(\n        Math.max(firstFieldSize.width, secondFieldSize.width),\n        firstFieldSize.height + secondFieldSize.height\n      );\n    }\n    prefSize = prefSize.add(htmlContainer.insets());\n\n    return prefSize;\n  }\n\n  /**\n   * Distributes the available size according to the split axis and the splitter position\n   *\n   * @param splitXAxis truthy if the splitter splits vertical |, falsy if the splitter splits horizontal --\n   * @param firstFieldSize initialize with the total available space. Will be adjusted to the available size of the first field.\n   * @param secondFieldSize initialize with the total available space. Will be adjusted to the available size of the second field.\n   * @param splitterPosition effective splitter position\n   */\n  computeInnerFieldsDimensions(splitXAxis, firstFieldSize, secondFieldSize, splitterPosition) {\n    if (splitXAxis) { // \"|\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.width = Math.floor(firstFieldSize.width * splitterPosition);\n        secondFieldSize.width -= firstFieldSize.width;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.width = Math.floor(secondFieldSize.width * splitterPosition);\n        firstFieldSize.width -= secondFieldSize.width;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.width);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.width = firstFieldSize.width - splitterPosition;\n          secondFieldSize.width = splitterPosition;\n        } else {\n          firstFieldSize.width = splitterPosition;\n          secondFieldSize.width = secondFieldSize.width - splitterPosition;\n        }\n      }\n    } else { // \"--\"\n      if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_FIRST) {\n        // Relative first\n        firstFieldSize.height = Math.floor(firstFieldSize.height * splitterPosition);\n        secondFieldSize.height -= firstFieldSize.height;\n      } else if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_RELATIVE_SECOND) {\n        // Relative second\n        secondFieldSize.height = Math.floor(secondFieldSize.height * splitterPosition);\n        firstFieldSize.height -= secondFieldSize.height;\n      } else {\n        // Absolute\n        splitterPosition = Math.min(splitterPosition, firstFieldSize.height);\n        if (this.splitBox.splitterPositionType === SplitBox.SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND) {\n          firstFieldSize.height = firstFieldSize.height - splitterPosition;\n          secondFieldSize.height = splitterPosition;\n        } else {\n          firstFieldSize.height = splitterPosition;\n          secondFieldSize.height = secondFieldSize.height - splitterPosition;\n        }\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}