{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { events, graphics, Insets, scout, scrollbars, Widget } from '../index';\nimport $ from 'jquery';\nexport default class Scrollbar extends Widget {\n  constructor() {\n    super();\n\n    // jQuery Elements\n    this.$container = null; // Scrollbar <div>\n    this.$thumb = null; // thumb body for layout purposes <div>\n    this.$thumbHandle = null; // thumb handle <div>\n\n    // Defaults\n    this.axis = 'y';\n    this.borderless = false;\n    this.mouseWheelNeedsShift = false;\n\n    // Varaibles for calculation\n    this._scrollSize = null;\n    this._offsetSize = null;\n\n    // Axis based helper variables (y)\n    this._dim = 'Height'; // x: 'Width'\n    this._dir = 'top'; // x: 'left'\n    this._dirReverse = 'bottom'; // x: 'right'\n    this._scrollDir = 'scrollTop'; // x: 'scrollLeft\n    this._thumbClipping = new Insets(0, 0, 0, 0);\n\n    // Event Handling\n    this._onScrollHandler = this._onScroll.bind(this);\n    this._onScrollWheelHandler = this._onScrollWheel.bind(this);\n    this._onScrollbarMouseDownHandler = this._onScrollbarMouseDown.bind(this);\n    this._onTouchStartHandler = this._onTouchStart.bind(this);\n    this._onThumbMouseDownHandler = this._onThumbMouseDown.bind(this);\n    this._onDocumentMousemoveHandler = this._onDocumentMousemove.bind(this);\n    this._onDocumentMouseUpHandler = this._onDocumentMouseUp.bind(this);\n    this._onAncestorScrollOrResizeHandler = this.update.bind(this);\n\n    // Fix Scrollbar\n    this._fixScrollbarHandler = this._fixScrollbar.bind(this);\n    this._unfixScrollbarHandler = this._unfixScrollbar.bind(this);\n  }\n  _render() {\n    this._ensureParentPosition();\n\n    // Create scrollbar and thumb\n    this.$container = this.$parent.appendDiv('scrollbar').addClass(this.axis + '-axis');\n    this._$thumb = this.$container.appendDiv('scrollbar-thumb').addClass(this.axis + '-axis');\n    this._$thumbHandle = this._$thumb.appendDiv('scrollbar-thumb-handle').addClass(this.axis + '-axis');\n    if (this.borderless) {\n      this.$container.addClass('borderless');\n    }\n\n    // Init helper variables based on axis (x/y)\n    this._dim = this.axis === 'x' ? 'Width' : 'Height';\n    this._dir = this.axis === 'x' ? 'left' : 'top';\n    this._dirReverse = this.axis === 'x' ? 'right' : 'bottom';\n    this._scrollDir = this.axis === 'x' ? 'scrollLeft' : 'scrollTop';\n\n    // Install listeners\n    let scrollbars = this.$parent.data('scrollbars');\n    if (!scrollbars) {\n      throw new Error('Data \"scrollbars\" missing in ' + graphics.debugOutput(this.$parent) + '\\nAncestors: ' + this.ancestorsToString(1));\n    }\n    this.$parent.on('DOMMouseScroll mousewheel', this._onScrollWheelHandler).on('scroll', this._onScrollHandler).onPassive('touchstart', this._onTouchStartHandler);\n    scrollbars.forEach(scrollbar => {\n      scrollbar.on('scrollStart', this._fixScrollbarHandler);\n      scrollbar.on('scrollEnd', this._unfixScrollbarHandler);\n    });\n    this.$container.on('mousedown', this._onScrollbarMouseDownHandler);\n    this._$thumb.on('mousedown', this._onThumbMouseDownHandler);\n    // Scrollbar might be clipped to prevent overlapping an ancestor. In order to reset this clipping the scrollbar needs\n    // an update whenever a parent div is scrolled ore resized.\n    this._$ancestors = this.$container.parents('div').on('scroll resize', this._onAncestorScrollOrResizeHandler);\n  }\n  _remove() {\n    // Uninstall listeners\n    let scrollbars = this.$parent.data('scrollbars');\n    this.$parent.off('DOMMouseScroll mousewheel', this._onScrollWheelHandler).off('scroll', this._onScrollHandler).offPassive('touchstart', this._onTouchStartHandler);\n    scrollbars.forEach(scrollbar => {\n      scrollbar.off('scrollStart', this._fixScrollbarHandler);\n      scrollbar.off('scrollEnd', this._unfixScrollbarHandler);\n    });\n    this.$container.off('mousedown', this._onScrollbarMouseDownHandler);\n    this._$thumb.off('mousedown', '', this._onThumbMouseDownHandler);\n    this._$ancestors.off('scroll resize', this._onAncestorScrollOrResizeHandler);\n    this._$ancestors = null;\n    super._remove();\n  }\n  _renderOnAttach() {\n    super._renderOnAttach();\n    this._ensureParentPosition();\n  }\n  _ensureParentPosition() {\n    // Container with JS scrollbars must have either relative or absolute position\n    // otherwise we cannot determine the correct dimension of the scrollbars\n    if (this.$parent && this.$parent.isAttached()) {\n      let cssPosition = this.$parent.css('position');\n      if (!scout.isOneOf(cssPosition, 'relative', 'absolute')) {\n        this.$parent.css('position', 'relative');\n      }\n    }\n  }\n\n  /**\n   * scroll by \"diff\" in px (positive and negative)\n   */\n  scroll(diff) {\n    let posOld = Math.max(0, this.$parent[this._scrollDir]());\n    this._scrollToAbsolutePoint(posOld + diff);\n  }\n\n  /**\n   * scroll to absolute point (expressed as absolute point in px)\n   */\n  _scrollToAbsolutePoint(absolutePoint) {\n    let scrollPos = Math.min(this._scrollSize - this._offsetSize + 1,\n    // scrollPos can't be larger than the start of last page. Add +1 because at least chrome has issues to scroll to the very bottom if scrollTop is fractional\n    Math.max(0, Math.round(absolutePoint))); // scrollPos can't be negative\n\n    this.$parent[this._scrollDir](scrollPos);\n  }\n\n  /**\n   * do not use this internal method (triggered by scroll event)\n   */\n  update() {\n    if (!this.rendered) {\n      return;\n    }\n    let margin = this.$container['cssMargin' + this.axis.toUpperCase()]();\n    let scrollPos = this.$parent[this._scrollDir]();\n    let scrollLeft = this.$parent.scrollLeft();\n    let scrollTop = this.$parent.scrollTop();\n    this.reset();\n    this._offsetSize = this.$parent[0]['offset' + this._dim];\n    this._scrollSize = this.$parent[0]['scroll' + this._dim];\n\n    // calc size and range of thumb\n    let thumbSize = Math.max(this._offsetSize * this._offsetSize / this._scrollSize - margin, 25);\n    let thumbRange = this._offsetSize - thumbSize - margin;\n\n    // set size of thumb\n    this._$thumb.css(this._dim.toLowerCase(), thumbSize);\n\n    // set location of thumb\n    let posNew = scrollPos / (this._scrollSize - this._offsetSize) * thumbRange;\n    this._$thumb.css(this._dir, posNew);\n\n    // Add 1px to make sure scroll bar is not shown if width is a floating point value.\n    // Even if we were using getBoundingClientRect().width to get an exact width,\n    // it would not help because scroll size is always an integer\n    let offsetFix = 1;\n\n    // show scrollbar\n    if (this._offsetSize + offsetFix >= this._scrollSize) {\n      this.$container.css('display', 'none');\n    } else {\n      this.$container.css('display', '');\n\n      // indicate that thumb movement is not possible\n      if (this._isContainerTooSmallForThumb()) {\n        this._$thumb.addClass('container-too-small-for-thumb');\n      } else {\n        this._$thumb.removeClass('container-too-small-for-thumb');\n      }\n    }\n    this._clipWhenOverlappingAncestor();\n\n    // Position the scrollbar(s)\n    // Always update both to make sure every scrollbar (x and y) is positioned correctly\n    this.$container.cssRight(-1 * scrollLeft);\n    this.$container.cssBottom(-1 * scrollTop);\n  }\n  _resetClipping() {\n    // Only reset dimension and position for the secondary axis,\n    // for the scroll-axis these properties are set during update()\n    if (this.axis === 'y') {\n      this._$thumb.css('width', '').css('left', '');\n    } else {\n      this._$thumb.css('height', '').css('top', '');\n    }\n    this._$thumb.removeClass('clipped-left clipped-right clipped-top clipped-bottom');\n    this._thumbClipping = new Insets(0, 0, 0, 0);\n  }\n\n  /**\n   * Make sure scrollbar does not appear outside an ancestor when fixed\n   */\n  _clipWhenOverlappingAncestor() {\n    this._resetClipping();\n\n    // Clipping is only needed when scrollbar has a fixed position.\n    // Otherwise the over-size is handled by 'overflow: hidden;'.\n    if (this.$container.css('position') === 'fixed') {\n      let thumbBounds = graphics.offsetBounds(this._$thumb);\n      let thumbWidth = thumbBounds.width;\n      let thumbHeight = thumbBounds.height;\n      let thumbEndX = thumbBounds.x + thumbBounds.width;\n      let thumbEndY = thumbBounds.y + thumbBounds.height;\n      let biggestAncestorBeginX = 0;\n      let biggestAncestorBeginY = 0;\n      let smallestAncestorEndX = thumbEndX;\n      let smallestAncestorEndY = thumbEndY;\n\n      // Find nearest clip boundaries: It is not necessarily the boundary of the closest ancestor-div in the DOM,\n      // because ancestor-divs themselves may be scrolled.\n      this.$container.parents('div').each(function () {\n        let $ancestor = $(this);\n        let ancestorBounds = graphics.offsetBounds($ancestor);\n        if ($ancestor.css('overflow-x') !== 'visible') {\n          if (ancestorBounds.x > biggestAncestorBeginX) {\n            biggestAncestorBeginX = ancestorBounds.x;\n          }\n          let ancestorEndX = ancestorBounds.x + ancestorBounds.width;\n          if (ancestorEndX < smallestAncestorEndX) {\n            smallestAncestorEndX = ancestorEndX;\n          }\n        }\n        if ($ancestor.css('overflow-y') !== 'visible') {\n          if (ancestorBounds.y > biggestAncestorBeginY) {\n            biggestAncestorBeginY = ancestorBounds.y;\n          }\n          let ancestorEndY = ancestorBounds.y + ancestorBounds.height;\n          if (ancestorEndY < smallestAncestorEndY) {\n            smallestAncestorEndY = ancestorEndY;\n          }\n        }\n      });\n      let clipLeft = 0;\n      let clipRight = 0;\n      let clipTop = 0;\n      let clipBottom = 0;\n\n      // clip left\n      if (biggestAncestorBeginX > thumbBounds.x) {\n        clipLeft = biggestAncestorBeginX - thumbBounds.x;\n        thumbWidth -= clipLeft;\n        this._$thumb.css('width', thumbWidth).css('left', graphics.bounds(this._$thumb).x + clipLeft).addClass('clipped-left');\n      }\n\n      // clip top\n      if (biggestAncestorBeginY > thumbBounds.y) {\n        clipTop = biggestAncestorBeginY - thumbBounds.y;\n        thumbHeight -= clipTop;\n        this._$thumb.css('height', thumbHeight).css('top', graphics.bounds(this._$thumb).y + clipTop).addClass('clipped-top');\n      }\n\n      // clip right\n      if (thumbEndX > smallestAncestorEndX) {\n        clipRight = thumbEndX - smallestAncestorEndX;\n        this._$thumb.css('width', thumbWidth - clipRight).addClass('clipped-right');\n      }\n\n      // clip bottom\n      if (thumbEndY > smallestAncestorEndY) {\n        clipBottom = thumbEndY - smallestAncestorEndY;\n        this._$thumb.css('height', thumbHeight - clipBottom).addClass('clipped-bottom');\n      }\n      this._thumbClipping = new Insets(clipTop, clipRight, clipBottom, clipLeft);\n    }\n  }\n\n  /**\n   * Resets thumb size and scrollbar position to make sure it does not extend the scrollSize\n   */\n  reset() {\n    this._$thumb.css(this._dim.toLowerCase(), 0);\n    this.$container.cssRight(0);\n    this.$container.cssBottom(0);\n  }\n\n  /*\n   * EVENT HANDLING\n   */\n\n  _onScroll(event) {\n    this.update();\n  }\n  _onTouchStart(event) {\n    // In hybrid mode scroll bar is moved by the scroll event.\n    // On a mobile device scroll events are fired delayed so the update will be delayed as well.\n    // This will lead to flickering and could be prevented by calling fixScrollbar. But unfortunately calling fix will stop the scroll pane from scrolling immediately, at least in Edge.\n    // In order to reduce the flickering the current approach is to hide the scrollbars while scrolling (only in this specific hybrid touch scrolling)\n    events.onScrollStartEndDuringTouch(this.$parent, () => {\n      if (!this.rendered) {\n        return;\n      }\n      this.$container.css('opacity', 0);\n    }, () => {\n      if (!this.rendered) {\n        return;\n      }\n      this.$container.css('opacity', '');\n    });\n  }\n  _onScrollWheel(event) {\n    if (!this.$container.isVisible()) {\n      return true; // ignore scroll wheel event if there is no scroll bar visible\n    }\n\n    if (event.ctrlKey) {\n      return true; // allow ctrl + mousewheel to zoom the page\n    }\n\n    if (this.mouseWheelNeedsShift !== event.shiftKey) {\n      return true; // only scroll if shift modifier matches\n    }\n\n    event = event.originalEvent || this.$container.window(true).event.originalEvent;\n    let w = event.wheelDelta ? -event.wheelDelta / 2 : event.detail * 20;\n    this.notifyBeforeScroll();\n    this.scroll(w);\n    this.notifyAfterScroll();\n    return false;\n  }\n  _onScrollbarMouseDown(event) {\n    this.notifyBeforeScroll();\n    let clickableAreaSize = this.$container[this._dim.toLowerCase()]();\n    let offset = this.$container.offset()[this._dir];\n    let clicked = (this.axis === 'x' ? event.pageX : event.pageY) - offset;\n    let percentage;\n    if (this._isContainerTooSmallForThumb()) {\n      percentage = Math.min(1, Math.max(0, clicked / clickableAreaSize)); // percentage can't be larger than 1, nor negative\n      this._scrollToAbsolutePoint(percentage * this._scrollSize - Math.round(this._offsetSize / 2));\n    } else {\n      // move the thumb center to clicked point\n      let thumbSize = this._$thumb['outer' + this._dim](true);\n      let minPossible = Math.round(thumbSize / 2);\n      let maxPossible = clickableAreaSize - Math.round(thumbSize / 2);\n      let rawPercentage = (clicked - minPossible) * (1 / (maxPossible - minPossible));\n      percentage = Math.min(1, Math.max(0, rawPercentage)); // percentage can't be larger than 1, nor negative\n\n      this._scrollToAbsolutePoint(percentage * (this._scrollSize - this._offsetSize));\n    }\n    this.notifyAfterScroll();\n  }\n  _onThumbMouseDown(event) {\n    // ignore event if container is too small for thumb movement\n    if (this._isContainerTooSmallForThumb()) {\n      return true; // let _onScrollbarMouseDown handle the click event\n    }\n\n    this.notifyBeforeScroll();\n    // calculate thumbCenterOffset in px (offset from clicked point to thumb center)\n    let clipped = this.axis === 'x' ? this._thumbClipping.horizontal() : this._thumbClipping.vertical();\n    let thumbSize = clipped + this._$thumb['outer' + this._dim](true); // including border, margin and padding\n    let thumbClippingOffset = this.axis === 'x' ? this._thumbClipping.left : this._thumbClipping.top;\n    let thumbCenter = this._$thumb.offset()[this._dir] + Math.floor(thumbSize / 2) - thumbClippingOffset;\n    let thumbCenterOffset = Math.round((this.axis === 'x' ? event.pageX : event.pageY) - thumbCenter);\n    this._$thumb.addClass('scrollbar-thumb-move');\n    this._$thumb.document().on('mousemove', {\n      'thumbCenterOffset': thumbCenterOffset\n    }, this._onDocumentMousemoveHandler).one('mouseup', this._onDocumentMouseUpHandler);\n    return false;\n  }\n  _onDocumentMousemove(event) {\n    // Scrollbar may be removed in the meantime\n    if (!this.rendered) {\n      return;\n    }\n\n    // represents offset in px of clicked point in thumb to the center of the thumb (positive and negative)\n    let thumbCenterOffset = event.data.thumbCenterOffset;\n    let clipped = this.axis === 'x' ? this._thumbClipping.horizontal() : this._thumbClipping.vertical();\n    let thumbSize = clipped + this._$thumb['outer' + this._dim](true); // including border, margin and padding\n    let size = this.$container[this._dim.toLowerCase()]() - thumbSize; // size of div excluding margin/padding/border\n    let offset = this.$container.offset()[this._dir] + thumbSize / 2;\n    let movedTo = Math.min(size, Math.max(0, (this.axis === 'x' ? event.pageX : event.pageY) - offset - thumbCenterOffset));\n    let percentage = Math.min(1,\n    // percentage can't be larger than 1\n    Math.max(0, movedTo / size)); // percentage can't be negative\n\n    let posNew = percentage * (this._scrollSize - this._offsetSize);\n    this._scrollToAbsolutePoint(posNew);\n  }\n  _onDocumentMouseUp(event) {\n    let $document = $(event.currentTarget);\n    $document.off('mousemove', this._onDocumentMousemoveHandler);\n    if (this.rendered) {\n      this._$thumb.removeClass('scrollbar-thumb-move');\n    }\n    this.notifyAfterScroll();\n    return false;\n  }\n  notifyBeforeScroll() {\n    this.trigger('scrollStart');\n  }\n  notifyAfterScroll() {\n    this.trigger('scrollEnd');\n  }\n\n  /*\n   * Fix Scrollbar\n   */\n\n  /**\n   * Sets the position to fixed and updates left and top position\n   * (This is necessary to prevent flickering in IE)\n   */\n  _fixScrollbar() {\n    scrollbars.fix(this.$container);\n    this.update();\n  }\n\n  /**\n   * Reverts the changes made by _fixScrollbar\n   */\n  _unfixScrollbar() {\n    // true = do it immediately without a timeout.\n    // This is important because scrollTop may be set during layout but before the element is positioned correctly (e.g. popup)\n    // which could have the effect that the scroll bar is drown outside the widget\n    scrollbars.unfix(this.$container, null, true);\n    this.update();\n  }\n\n  /*\n   * INTERNAL METHODS\n   */\n\n  /**\n   * If the thumb gets bigger than its container this method will return true, otherwise false\n   */\n  _isContainerTooSmallForThumb() {\n    let thumbSize = this._$thumb['outer' + this._dim](true);\n    let thumbMovableAreaSize = this.$container[this._dim.toLowerCase()]();\n    return thumbSize >= thumbMovableAreaSize;\n  }\n}","map":{"version":3,"names":["events","graphics","Insets","scout","scrollbars","Widget","$","Scrollbar","constructor","$container","$thumb","$thumbHandle","axis","borderless","mouseWheelNeedsShift","_scrollSize","_offsetSize","_dim","_dir","_dirReverse","_scrollDir","_thumbClipping","_onScrollHandler","_onScroll","bind","_onScrollWheelHandler","_onScrollWheel","_onScrollbarMouseDownHandler","_onScrollbarMouseDown","_onTouchStartHandler","_onTouchStart","_onThumbMouseDownHandler","_onThumbMouseDown","_onDocumentMousemoveHandler","_onDocumentMousemove","_onDocumentMouseUpHandler","_onDocumentMouseUp","_onAncestorScrollOrResizeHandler","update","_fixScrollbarHandler","_fixScrollbar","_unfixScrollbarHandler","_unfixScrollbar","_render","_ensureParentPosition","$parent","appendDiv","addClass","_$thumb","_$thumbHandle","data","Error","debugOutput","ancestorsToString","on","onPassive","forEach","scrollbar","_$ancestors","parents","_remove","off","offPassive","_renderOnAttach","isAttached","cssPosition","css","isOneOf","scroll","diff","posOld","Math","max","_scrollToAbsolutePoint","absolutePoint","scrollPos","min","round","rendered","margin","toUpperCase","scrollLeft","scrollTop","reset","thumbSize","thumbRange","toLowerCase","posNew","offsetFix","_isContainerTooSmallForThumb","removeClass","_clipWhenOverlappingAncestor","cssRight","cssBottom","_resetClipping","thumbBounds","offsetBounds","thumbWidth","width","thumbHeight","height","thumbEndX","x","thumbEndY","y","biggestAncestorBeginX","biggestAncestorBeginY","smallestAncestorEndX","smallestAncestorEndY","each","$ancestor","ancestorBounds","ancestorEndX","ancestorEndY","clipLeft","clipRight","clipTop","clipBottom","bounds","event","onScrollStartEndDuringTouch","isVisible","ctrlKey","shiftKey","originalEvent","window","w","wheelDelta","detail","notifyBeforeScroll","notifyAfterScroll","clickableAreaSize","offset","clicked","pageX","pageY","percentage","minPossible","maxPossible","rawPercentage","clipped","horizontal","vertical","thumbClippingOffset","left","top","thumbCenter","floor","thumbCenterOffset","document","one","size","movedTo","$document","currentTarget","trigger","fix","unfix","thumbMovableAreaSize"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/scrollbar/Scrollbar.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {events, graphics, Insets, scout, scrollbars, Widget} from '../index';\nimport $ from 'jquery';\n\nexport default class Scrollbar extends Widget {\n\n  constructor() {\n    super();\n\n    // jQuery Elements\n    this.$container = null; // Scrollbar <div>\n    this.$thumb = null; // thumb body for layout purposes <div>\n    this.$thumbHandle = null; // thumb handle <div>\n\n    // Defaults\n    this.axis = 'y';\n    this.borderless = false;\n    this.mouseWheelNeedsShift = false;\n\n    // Varaibles for calculation\n    this._scrollSize = null;\n    this._offsetSize = null;\n\n    // Axis based helper variables (y)\n    this._dim = 'Height'; // x: 'Width'\n    this._dir = 'top'; // x: 'left'\n    this._dirReverse = 'bottom'; // x: 'right'\n    this._scrollDir = 'scrollTop'; // x: 'scrollLeft\n    this._thumbClipping = new Insets(0, 0, 0, 0);\n\n    // Event Handling\n    this._onScrollHandler = this._onScroll.bind(this);\n    this._onScrollWheelHandler = this._onScrollWheel.bind(this);\n    this._onScrollbarMouseDownHandler = this._onScrollbarMouseDown.bind(this);\n    this._onTouchStartHandler = this._onTouchStart.bind(this);\n    this._onThumbMouseDownHandler = this._onThumbMouseDown.bind(this);\n    this._onDocumentMousemoveHandler = this._onDocumentMousemove.bind(this);\n    this._onDocumentMouseUpHandler = this._onDocumentMouseUp.bind(this);\n    this._onAncestorScrollOrResizeHandler = this.update.bind(this);\n\n    // Fix Scrollbar\n    this._fixScrollbarHandler = this._fixScrollbar.bind(this);\n    this._unfixScrollbarHandler = this._unfixScrollbar.bind(this);\n  }\n\n  _render() {\n    this._ensureParentPosition();\n\n    // Create scrollbar and thumb\n    this.$container = this.$parent\n      .appendDiv('scrollbar')\n      .addClass(this.axis + '-axis');\n    this._$thumb = this.$container\n      .appendDiv('scrollbar-thumb')\n      .addClass(this.axis + '-axis');\n    this._$thumbHandle = this._$thumb\n      .appendDiv('scrollbar-thumb-handle')\n      .addClass(this.axis + '-axis');\n\n    if (this.borderless) {\n      this.$container.addClass('borderless');\n    }\n\n    // Init helper variables based on axis (x/y)\n    this._dim = this.axis === 'x' ? 'Width' : 'Height';\n    this._dir = this.axis === 'x' ? 'left' : 'top';\n    this._dirReverse = this.axis === 'x' ? 'right' : 'bottom';\n    this._scrollDir = this.axis === 'x' ? 'scrollLeft' : 'scrollTop';\n\n    // Install listeners\n    let scrollbars = this.$parent.data('scrollbars');\n    if (!scrollbars) {\n      throw new Error('Data \"scrollbars\" missing in ' + graphics.debugOutput(this.$parent) + '\\nAncestors: ' + this.ancestorsToString(1));\n    }\n    this.$parent\n      .on('DOMMouseScroll mousewheel', this._onScrollWheelHandler)\n      .on('scroll', this._onScrollHandler)\n      .onPassive('touchstart', this._onTouchStartHandler);\n    scrollbars.forEach(scrollbar => {\n      scrollbar.on('scrollStart', this._fixScrollbarHandler);\n      scrollbar.on('scrollEnd', this._unfixScrollbarHandler);\n    });\n    this.$container.on('mousedown', this._onScrollbarMouseDownHandler);\n    this._$thumb.on('mousedown', this._onThumbMouseDownHandler);\n    // Scrollbar might be clipped to prevent overlapping an ancestor. In order to reset this clipping the scrollbar needs\n    // an update whenever a parent div is scrolled ore resized.\n    this._$ancestors = this.$container.parents('div')\n      .on('scroll resize', this._onAncestorScrollOrResizeHandler);\n  }\n\n  _remove() {\n    // Uninstall listeners\n    let scrollbars = this.$parent.data('scrollbars');\n    this.$parent\n      .off('DOMMouseScroll mousewheel', this._onScrollWheelHandler)\n      .off('scroll', this._onScrollHandler)\n      .offPassive('touchstart', this._onTouchStartHandler);\n    scrollbars.forEach(scrollbar => {\n      scrollbar.off('scrollStart', this._fixScrollbarHandler);\n      scrollbar.off('scrollEnd', this._unfixScrollbarHandler);\n    });\n    this.$container.off('mousedown', this._onScrollbarMouseDownHandler);\n    this._$thumb.off('mousedown', '', this._onThumbMouseDownHandler);\n    this._$ancestors.off('scroll resize', this._onAncestorScrollOrResizeHandler);\n    this._$ancestors = null;\n\n    super._remove();\n  }\n\n  _renderOnAttach() {\n    super._renderOnAttach();\n    this._ensureParentPosition();\n  }\n\n  _ensureParentPosition() {\n    // Container with JS scrollbars must have either relative or absolute position\n    // otherwise we cannot determine the correct dimension of the scrollbars\n    if (this.$parent && this.$parent.isAttached()) {\n      let cssPosition = this.$parent.css('position');\n      if (!scout.isOneOf(cssPosition, 'relative', 'absolute')) {\n        this.$parent.css('position', 'relative');\n      }\n    }\n  }\n\n  /**\n   * scroll by \"diff\" in px (positive and negative)\n   */\n  scroll(diff) {\n    let posOld = Math.max(0, this.$parent[this._scrollDir]());\n    this._scrollToAbsolutePoint(posOld + diff);\n  }\n\n  /**\n   * scroll to absolute point (expressed as absolute point in px)\n   */\n  _scrollToAbsolutePoint(absolutePoint) {\n    let scrollPos = Math.min(\n      (this._scrollSize - this._offsetSize + 1), // scrollPos can't be larger than the start of last page. Add +1 because at least chrome has issues to scroll to the very bottom if scrollTop is fractional\n      Math.max(0, Math.round(absolutePoint))); // scrollPos can't be negative\n\n    this.$parent[this._scrollDir](scrollPos);\n  }\n\n  /**\n   * do not use this internal method (triggered by scroll event)\n   */\n  update() {\n    if (!this.rendered) {\n      return;\n    }\n    let margin = this.$container['cssMargin' + this.axis.toUpperCase()]();\n    let scrollPos = this.$parent[this._scrollDir]();\n    let scrollLeft = this.$parent.scrollLeft();\n    let scrollTop = this.$parent.scrollTop();\n\n    this.reset();\n\n    this._offsetSize = this.$parent[0]['offset' + this._dim];\n    this._scrollSize = this.$parent[0]['scroll' + this._dim];\n\n    // calc size and range of thumb\n    let thumbSize = Math.max(this._offsetSize * this._offsetSize / this._scrollSize - margin, 25);\n    let thumbRange = this._offsetSize - thumbSize - margin;\n\n    // set size of thumb\n    this._$thumb.css(this._dim.toLowerCase(), thumbSize);\n\n    // set location of thumb\n    let posNew = scrollPos / (this._scrollSize - this._offsetSize) * thumbRange;\n    this._$thumb.css(this._dir, posNew);\n\n    // Add 1px to make sure scroll bar is not shown if width is a floating point value.\n    // Even if we were using getBoundingClientRect().width to get an exact width,\n    // it would not help because scroll size is always an integer\n    let offsetFix = 1;\n\n    // show scrollbar\n    if (this._offsetSize + offsetFix >= this._scrollSize) {\n      this.$container.css('display', 'none');\n    } else {\n      this.$container.css('display', '');\n\n      // indicate that thumb movement is not possible\n      if (this._isContainerTooSmallForThumb()) {\n        this._$thumb.addClass('container-too-small-for-thumb');\n      } else {\n        this._$thumb.removeClass('container-too-small-for-thumb');\n      }\n    }\n\n    this._clipWhenOverlappingAncestor();\n\n    // Position the scrollbar(s)\n    // Always update both to make sure every scrollbar (x and y) is positioned correctly\n    this.$container.cssRight(-1 * scrollLeft);\n    this.$container.cssBottom(-1 * scrollTop);\n  }\n\n  _resetClipping() {\n    // Only reset dimension and position for the secondary axis,\n    // for the scroll-axis these properties are set during update()\n    if (this.axis === 'y') {\n      this._$thumb\n        .css('width', '')\n        .css('left', '');\n    } else {\n      this._$thumb\n        .css('height', '')\n        .css('top', '');\n    }\n    this._$thumb.removeClass('clipped-left clipped-right clipped-top clipped-bottom');\n    this._thumbClipping = new Insets(0, 0, 0, 0);\n  }\n\n  /**\n   * Make sure scrollbar does not appear outside an ancestor when fixed\n   */\n  _clipWhenOverlappingAncestor() {\n    this._resetClipping();\n\n    // Clipping is only needed when scrollbar has a fixed position.\n    // Otherwise the over-size is handled by 'overflow: hidden;'.\n    if (this.$container.css('position') === 'fixed') {\n      let thumbBounds = graphics.offsetBounds(this._$thumb);\n      let thumbWidth = thumbBounds.width;\n      let thumbHeight = thumbBounds.height;\n      let thumbEndX = thumbBounds.x + thumbBounds.width;\n      let thumbEndY = thumbBounds.y + thumbBounds.height;\n      let biggestAncestorBeginX = 0;\n      let biggestAncestorBeginY = 0;\n      let smallestAncestorEndX = thumbEndX;\n      let smallestAncestorEndY = thumbEndY;\n\n      // Find nearest clip boundaries: It is not necessarily the boundary of the closest ancestor-div in the DOM,\n      // because ancestor-divs themselves may be scrolled.\n      this.$container.parents('div').each(function() {\n        let $ancestor = $(this);\n        let ancestorBounds = graphics.offsetBounds($ancestor);\n        if ($ancestor.css('overflow-x') !== 'visible') {\n          if (ancestorBounds.x > biggestAncestorBeginX) {\n            biggestAncestorBeginX = ancestorBounds.x;\n          }\n          let ancestorEndX = ancestorBounds.x + ancestorBounds.width;\n          if (ancestorEndX < smallestAncestorEndX) {\n            smallestAncestorEndX = ancestorEndX;\n          }\n        }\n        if ($ancestor.css('overflow-y') !== 'visible') {\n          if (ancestorBounds.y > biggestAncestorBeginY) {\n            biggestAncestorBeginY = ancestorBounds.y;\n          }\n          let ancestorEndY = ancestorBounds.y + ancestorBounds.height;\n          if (ancestorEndY < smallestAncestorEndY) {\n            smallestAncestorEndY = ancestorEndY;\n          }\n        }\n      });\n\n      let clipLeft = 0;\n      let clipRight = 0;\n      let clipTop = 0;\n      let clipBottom = 0;\n\n      // clip left\n      if (biggestAncestorBeginX > thumbBounds.x) {\n        clipLeft = biggestAncestorBeginX - thumbBounds.x;\n        thumbWidth -= clipLeft;\n        this._$thumb\n          .css('width', thumbWidth)\n          .css('left', graphics.bounds(this._$thumb).x + clipLeft)\n          .addClass('clipped-left');\n      }\n\n      // clip top\n      if (biggestAncestorBeginY > thumbBounds.y) {\n        clipTop = biggestAncestorBeginY - thumbBounds.y;\n        thumbHeight -= clipTop;\n        this._$thumb\n          .css('height', thumbHeight)\n          .css('top', graphics.bounds(this._$thumb).y + clipTop)\n          .addClass('clipped-top');\n      }\n\n      // clip right\n      if (thumbEndX > smallestAncestorEndX) {\n        clipRight = thumbEndX - smallestAncestorEndX;\n        this._$thumb\n          .css('width', thumbWidth - clipRight)\n          .addClass('clipped-right');\n      }\n\n      // clip bottom\n      if (thumbEndY > smallestAncestorEndY) {\n        clipBottom = thumbEndY - smallestAncestorEndY;\n        this._$thumb\n          .css('height', thumbHeight - clipBottom)\n          .addClass('clipped-bottom');\n      }\n\n      this._thumbClipping = new Insets(clipTop, clipRight, clipBottom, clipLeft);\n    }\n  }\n\n  /**\n   * Resets thumb size and scrollbar position to make sure it does not extend the scrollSize\n   */\n  reset() {\n    this._$thumb.css(this._dim.toLowerCase(), 0);\n    this.$container.cssRight(0);\n    this.$container.cssBottom(0);\n  }\n\n  /*\n   * EVENT HANDLING\n   */\n\n  _onScroll(event) {\n    this.update();\n  }\n\n  _onTouchStart(event) {\n    // In hybrid mode scroll bar is moved by the scroll event.\n    // On a mobile device scroll events are fired delayed so the update will be delayed as well.\n    // This will lead to flickering and could be prevented by calling fixScrollbar. But unfortunately calling fix will stop the scroll pane from scrolling immediately, at least in Edge.\n    // In order to reduce the flickering the current approach is to hide the scrollbars while scrolling (only in this specific hybrid touch scrolling)\n    events.onScrollStartEndDuringTouch(this.$parent, () => {\n      if (!this.rendered) {\n        return;\n      }\n      this.$container.css('opacity', 0);\n    }, () => {\n      if (!this.rendered) {\n        return;\n      }\n      this.$container.css('opacity', '');\n    });\n  }\n\n  _onScrollWheel(event) {\n    if (!this.$container.isVisible()) {\n      return true; // ignore scroll wheel event if there is no scroll bar visible\n    }\n    if (event.ctrlKey) {\n      return true; // allow ctrl + mousewheel to zoom the page\n    }\n    if (this.mouseWheelNeedsShift !== event.shiftKey) {\n      return true; // only scroll if shift modifier matches\n    }\n    event = event.originalEvent || this.$container.window(true).event.originalEvent;\n    let w = event.wheelDelta ? -event.wheelDelta / 2 : event.detail * 20;\n\n    this.notifyBeforeScroll();\n    this.scroll(w);\n    this.notifyAfterScroll();\n\n    return false;\n  }\n\n  _onScrollbarMouseDown(event) {\n    this.notifyBeforeScroll();\n\n    let clickableAreaSize = this.$container[this._dim.toLowerCase()]();\n\n    let offset = this.$container.offset()[this._dir];\n    let clicked = (this.axis === 'x' ? event.pageX : event.pageY) - offset;\n\n    let percentage;\n\n    if (this._isContainerTooSmallForThumb()) {\n      percentage = Math.min(1, Math.max(0, (clicked / clickableAreaSize))); // percentage can't be larger than 1, nor negative\n      this._scrollToAbsolutePoint((percentage * this._scrollSize) - Math.round(this._offsetSize / 2));\n    } else { // move the thumb center to clicked point\n      let thumbSize = this._$thumb['outer' + this._dim](true);\n      let minPossible = Math.round(thumbSize / 2);\n      let maxPossible = clickableAreaSize - Math.round(thumbSize / 2);\n\n      let rawPercentage = ((clicked - minPossible) * (1 / (maxPossible - minPossible)));\n      percentage = Math.min(1, Math.max(0, rawPercentage)); // percentage can't be larger than 1, nor negative\n\n      this._scrollToAbsolutePoint(percentage * (this._scrollSize - this._offsetSize));\n    }\n\n    this.notifyAfterScroll();\n  }\n\n  _onThumbMouseDown(event) {\n    // ignore event if container is too small for thumb movement\n    if (this._isContainerTooSmallForThumb()) {\n      return true; // let _onScrollbarMouseDown handle the click event\n    }\n    this.notifyBeforeScroll();\n    // calculate thumbCenterOffset in px (offset from clicked point to thumb center)\n    let clipped = (this.axis === 'x' ? this._thumbClipping.horizontal() : this._thumbClipping.vertical());\n    let thumbSize = clipped + this._$thumb['outer' + this._dim](true); // including border, margin and padding\n    let thumbClippingOffset = (this.axis === 'x' ? this._thumbClipping.left : this._thumbClipping.top);\n    let thumbCenter = this._$thumb.offset()[this._dir] + Math.floor(thumbSize / 2) - thumbClippingOffset;\n    let thumbCenterOffset = Math.round((this.axis === 'x' ? event.pageX : event.pageY) - thumbCenter);\n\n    this._$thumb.addClass('scrollbar-thumb-move');\n    this._$thumb\n      .document()\n      .on('mousemove', {\n        'thumbCenterOffset': thumbCenterOffset\n      }, this._onDocumentMousemoveHandler)\n      .one('mouseup', this._onDocumentMouseUpHandler);\n\n    return false;\n  }\n\n  _onDocumentMousemove(event) {\n    // Scrollbar may be removed in the meantime\n    if (!this.rendered) {\n      return;\n    }\n\n    // represents offset in px of clicked point in thumb to the center of the thumb (positive and negative)\n    let thumbCenterOffset = event.data.thumbCenterOffset;\n\n    let clipped = (this.axis === 'x' ? this._thumbClipping.horizontal() : this._thumbClipping.vertical());\n    let thumbSize = clipped + this._$thumb['outer' + this._dim](true); // including border, margin and padding\n    let size = this.$container[this._dim.toLowerCase()]() - thumbSize; // size of div excluding margin/padding/border\n    let offset = this.$container.offset()[this._dir] + (thumbSize / 2);\n\n    let movedTo = Math.min(\n      size,\n      Math.max(0, (this.axis === 'x' ? event.pageX : event.pageY) - offset - thumbCenterOffset));\n\n    let percentage = Math.min(\n      1, // percentage can't be larger than 1\n      Math.max(0, (movedTo / size))); // percentage can't be negative\n\n    let posNew = (percentage * (this._scrollSize - this._offsetSize));\n    this._scrollToAbsolutePoint(posNew);\n  }\n\n  _onDocumentMouseUp(event) {\n    let $document = $(event.currentTarget);\n    $document.off('mousemove', this._onDocumentMousemoveHandler);\n    if (this.rendered) {\n      this._$thumb.removeClass('scrollbar-thumb-move');\n    }\n    this.notifyAfterScroll();\n    return false;\n  }\n\n  notifyBeforeScroll() {\n    this.trigger('scrollStart');\n  }\n\n  notifyAfterScroll() {\n    this.trigger('scrollEnd');\n  }\n\n  /*\n   * Fix Scrollbar\n   */\n\n  /**\n   * Sets the position to fixed and updates left and top position\n   * (This is necessary to prevent flickering in IE)\n   */\n  _fixScrollbar() {\n    scrollbars.fix(this.$container);\n    this.update();\n  }\n\n  /**\n   * Reverts the changes made by _fixScrollbar\n   */\n  _unfixScrollbar() {\n    // true = do it immediately without a timeout.\n    // This is important because scrollTop may be set during layout but before the element is positioned correctly (e.g. popup)\n    // which could have the effect that the scroll bar is drown outside the widget\n    scrollbars.unfix(this.$container, null, true);\n    this.update();\n  }\n\n  /*\n   * INTERNAL METHODS\n   */\n\n  /**\n   * If the thumb gets bigger than its container this method will return true, otherwise false\n   */\n  _isContainerTooSmallForThumb() {\n    let thumbSize = this._$thumb['outer' + this._dim](true);\n    let thumbMovableAreaSize = this.$container[this._dim.toLowerCase()]();\n    return thumbSize >= thumbMovableAreaSize;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}