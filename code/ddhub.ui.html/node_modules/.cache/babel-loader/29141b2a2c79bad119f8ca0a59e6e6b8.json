{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Device, graphics, HtmlComponent, NumberColumn, Point, Popup, RowLayout, scout, scrollbars, Table, TableHeaderMenuGroup, TableHeaderMenuLayout } from '../index';\nexport default class TableHeaderMenu extends Popup {\n  constructor() {\n    super();\n    this.column = null;\n    this.tableHeader = null;\n    this.table = null;\n    this.filter = null;\n    this.filterCheckedMode = TableHeaderMenu.CheckedMode.ALL;\n    this.filterSortMode = TableHeaderMenu.SortMode.ALPHABETICALLY;\n    this.hasFilterTable = false;\n    this.hasFilterFields = false;\n    this.animateOpening = true;\n    this.animateRemoval = true;\n    this.focusableContainer = true;\n    this.leftGroups = [];\n    this.moveGroup = null;\n    this.toBeginButton = null;\n    this.forwardButton = null;\n    this.backwardButton = null;\n    this.toEndButton = null;\n    this.sortingGroup = null;\n    this.sortDescButton = null;\n    this.sortAscAddButton = null;\n    this.sortDescAddButton = null;\n    this.columnActionsGroup = null;\n    this.addColumnButton = null;\n    this.removeColumnButton = null;\n    this.modifyColumnButton = null;\n    this.groupButton = null;\n    this.groupAddButton = null;\n    this.barChartButton = null;\n    this.colorGradient1Button = null;\n    this.colorGradient2Button = null;\n    this.$rightGroups = [];\n    this.$headerItem = null;\n    this.$columnActions = null;\n    this.$columnFilters = null;\n    this.$filterTableGroup = null;\n    this.$filterToggleChecked = null;\n    this.$filterTableGroupTitle = null;\n    this.$filterSortOrder = null;\n    this.$filterFieldsGroup = null;\n    this._onColumnMovedHandler = this._onColumnMoved.bind(this);\n    this._tableHeaderScrollHandler = this._onAnchorScroll.bind(this);\n    this.on('locationChange', this._onLocationChange.bind(this));\n\n    // Make sure the actions are not disabled even if the table is disabled\n    // To disable the menu use headerEnabled or headerMenusEnabled\n    this.inheritAccessibility = false;\n  }\n  _init(options) {\n    options.scrollType = options.scrollType || 'none';\n    super._init(options);\n    this.tableHeader = options.tableHeader;\n    this.column = options.column;\n    this.table = this.tableHeader.table;\n    this.$headerItem = this.$anchor;\n    this.table.on('columnMoved', this._onColumnMovedHandler);\n    // Filtering\n    this.filter = this.table.getFilter(this.column.id);\n    if (!this.filter) {\n      this.filter = this.column.createFilter();\n    }\n    // always recalculate available values to make sure new/updated/deleted rows are considered\n    this.filter.calculate();\n    this.filter.on('filterFieldsChanged', this._updateFilterTable.bind(this));\n    this._updateFilterTableCheckedMode();\n    this.hasFilterTable = this.filter.availableValues.length > 0;\n    this.hasFilterFields = this.filter.hasFilterFields;\n    if (this.hasFilterTable) {\n      this._tableFilterHandler = this._onFilterTableChanged.bind(this);\n      this.table.on('filterAdded', this._tableFilterHandler);\n      this.table.on('filterRemoved', this._tableFilterHandler);\n      this._filterTableRowsCheckedHandler = this._onFilterTableRowsChecked.bind(this);\n    }\n  }\n  _createLayout() {\n    return new TableHeaderMenuLayout(this);\n  }\n  _render() {\n    this.leftGroups = [];\n    this.$rightGroups = [];\n    this.$headerItem.select(true);\n    this.$container = this.$parent.appendDiv('popup table-header-menu');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(this._createLayout());\n    this.$body = this.$container.appendDiv('table-header-menu-body');\n    HtmlComponent.install(this.$body, this.session);\n    this._installScrollbars({\n      axis: 'y',\n      scrollShadow: 'none'\n    });\n    this.$columnActions = this.$body.appendDiv('table-header-menu-actions');\n\n    // only add right column if filter has a filter-table or filter-fields\n    if (this.hasFilterTable || this.hasFilterFields) {\n      this.$columnFilters = this.$body.appendDiv('table-header-menu-filters');\n      let htmlColumnFilters = HtmlComponent.install(this.$columnFilters, this.session);\n      htmlColumnFilters.setLayout(new RowLayout());\n    }\n    this.tableHeader.$container.on('scroll', this._tableHeaderScrollHandler);\n\n    // -- Left column -- //\n    // Moving\n    let movableColumns = this.table.visibleColumns().filter(column => {\n      return !column.fixedPosition;\n    });\n    if (movableColumns.length > 1 && !this.column.fixedPosition) {\n      this.leftGroups.push(this._renderMovingGroup());\n    }\n    // Sorting\n    if (this.table.sortEnabled) {\n      this.leftGroups.push(this._renderSortingGroup());\n    }\n    // Add/remove/change columns\n    if (this._isColumnActionsGroupVisible()) {\n      this.leftGroups.push(this._renderColumnActionsGroup());\n    }\n    // Grouping\n    // column.grouped check necessary to make ungroup possible, even if grouping is not possible anymore\n    if (this.table.isGroupingPossible(this.column) || this.column.grouped) {\n      this.leftGroups.push(this._renderGroupingGroup());\n    }\n\n    // Expand/Collapse\n    this.leftGroups.push(this._renderHierarchyGruop());\n\n    // Aggregation\n    if (this.table.isAggregationPossible(this.column)) {\n      this.leftGroups.push(this._renderAggregationGroup());\n    }\n    // Coloring\n    if (this.column instanceof NumberColumn) {\n      this.leftGroups.push(this._renderColoringGroup());\n    }\n\n    // -- Right column -- //\n    // Filter table\n    if (this.hasFilterTable) {\n      this.$rightGroups.push(this._renderFilterTable());\n    }\n    // Filter fields\n    if (this.hasFilterFields) {\n      this.$rightGroups.push(this._renderFilterFields());\n    }\n    this._onColumnMoved();\n\n    // Set table style to focused, so that it looks as it still has the focus.\n    if (this.table.enabled) {\n      this.table.$container.addClass('focused');\n    }\n  }\n  validateFocus() {\n    if (this.filterFieldsGroupBox) {\n      this.filterFieldsGroupBox.focus();\n    }\n    // Super call will focus container if no element has been focused yet\n    super.validateFocus();\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$body;\n  }\n  _updateFirstLast() {\n    addFirstLastClass(this.leftGroups.filter(group => {\n      return group.isVisible();\n    }));\n    addFirstLastClass(this.$rightGroups);\n    function addFirstLastClass(groups) {\n      groups.forEach((group, index, arr) => {\n        toggleCssClass(group, 'first', index === 0);\n        toggleCssClass(group, 'last', index === arr.length - 1);\n      }, this);\n    }\n\n    // Note: we should refactor code for filter-fields and filter-table so they could also\n    // work with a model-class (like the button menu groups). Currently this would cause\n    // to much work.\n    function toggleCssClass(group, cssClass, condition) {\n      let $container = group instanceof TableHeaderMenuGroup ? group.$container : group;\n      $container.toggleClass(cssClass, condition);\n    }\n  }\n  _remove() {\n    if (this.filterTable) {\n      this.filterTable.off('rowsChecked', this._filterTableRowsCheckedHandler);\n    }\n    if (this.tableHeader.rendered) {\n      this.tableHeader.$container.off('scroll', this._tableHeaderScrollHandler);\n    }\n    this.$headerItem.select(false);\n    this.table.off('columnMoved', this._onColumnMovedHandler);\n    this.table.off('filterAdded', this._tableFilterHandler);\n    this.table.off('filterRemoved', this._tableFilterHandler);\n    super._remove();\n\n    // table may have been removed in the meantime\n    if (this.table.rendered) {\n      this.table.$container.removeClass('focused');\n    }\n  }\n  _renderMovingGroup() {\n    let table = this.table,\n      column = this.column,\n      pos = table.visibleColumns().indexOf(column);\n    this.moveGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Move',\n      cssClass: 'first'\n    });\n    this.toBeginButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.toBegin}',\n      cssClass: 'move move-top'\n    });\n    this.toBeginButton.on('action', () => {\n      table.moveColumn(column, pos, 0);\n      pos = table.visibleColumns().indexOf(column);\n    });\n    this.forwardButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.forward}',\n      cssClass: 'move move-up'\n    });\n    this.forwardButton.on('action', () => {\n      table.moveColumn(column, pos, Math.max(pos - 1, 0));\n      pos = table.visibleColumns().indexOf(column);\n    });\n    this.backwardButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.backward}',\n      cssClass: 'move move-down'\n    });\n    this.backwardButton.on('action', () => {\n      table.moveColumn(column, pos, Math.min(pos + 1, table.header.findHeaderItems().length - 1));\n      pos = table.visibleColumns().indexOf(column);\n    });\n    this.toEndButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.toEnd}',\n      cssClass: 'move move-bottom'\n    });\n    this.toEndButton.on('action', () => {\n      table.moveColumn(column, pos, table.header.findHeaderItems().length - 1);\n      pos = table.visibleColumns().indexOf(column);\n    });\n    this.moveGroup.render(this.$columnActions);\n    return this.moveGroup;\n  }\n  _onColumnMoved() {\n    let table = this.table,\n      column = this.column;\n    if (this.moveGroup) {\n      let visibleColumns = table.visibleColumns();\n      let columnIndex = table.visibleColumns().indexOf(column);\n      let forwardEnabled = visibleColumns[columnIndex - 1] && !visibleColumns[columnIndex - 1].fixedPosition;\n      let backwardEnabled = visibleColumns[columnIndex + 1] && !visibleColumns[columnIndex + 1].fixedPosition;\n      this.toBeginButton.setEnabled(forwardEnabled);\n      this.forwardButton.setEnabled(forwardEnabled);\n      this.backwardButton.setEnabled(backwardEnabled);\n      this.toEndButton.setEnabled(backwardEnabled);\n    }\n    this.hierarchyGroup.setVisible(this.table.isTableNodeColumn(column));\n    this._updateFirstLast();\n  }\n  _isColumnActionsGroupVisible() {\n    return this.table.columnAddable || this.column.removable || this.column.modifiable;\n  }\n  _renderColumnActionsGroup() {\n    let column = this.column,\n      menuPopup = this;\n    this.columnActionsGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Column'\n    });\n    this.addColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.addColumn}',\n      cssClass: 'add-column',\n      visible: this.table.columnAddable\n    });\n    this.addColumnButton.on('action', onClick.bind(this, 'add'));\n    this.removeColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.removeColumn}',\n      cssClass: 'remove-column',\n      visible: this.column.removable\n    });\n    this.removeColumnButton.on('action', onClick.bind(this, 'remove'));\n    this.modifyColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.changeColumn}',\n      cssClass: 'change-column',\n      visible: this.column.modifiable\n    });\n    this.modifyColumnButton.on('action', onClick.bind(this, 'modify'));\n    this.columnActionsGroup.render(this.$columnActions);\n    return this.columnActionsGroup;\n    function onClick(action) {\n      menuPopup.close();\n      this.table.trigger('columnOrganizeAction', {\n        action: action,\n        column: column\n      });\n    }\n  }\n  onColumnActionsChanged(event) {\n    this.addColumnButton.setVisible(event.addVisible);\n    this.removeColumnButton.setVisible(event.removeVisible);\n    this.modifyColumnButton.setVisible(event.modifyVisible);\n    let groupVisible = this.columnActionsGroup.children.some(button => {\n      return button.visible;\n    });\n    this.columnActionsGroup.setVisible(groupVisible);\n  }\n  _renderSortingGroup() {\n    let table = this.table,\n      column = this.column,\n      menuPopup = this;\n    this.sortingGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ColumnSorting'\n    });\n    if (!table.hasPermanentHeadOrTailSortColumns()) {\n      this.sortAscButton = scout.create('TableHeaderMenuButton', {\n        parent: this.sortingGroup,\n        text: '${textKey:ui.ascending}',\n        cssClass: 'sort sort-asc',\n        direction: 'asc',\n        toggleAction: true\n      });\n      this.sortAscButton.on('action', onSortClick.bind(this.sortAscButton));\n      this.sortDescButton = scout.create('TableHeaderMenuButton', {\n        parent: this.sortingGroup,\n        text: '${textKey:ui.descending}',\n        cssClass: 'sort sort-desc',\n        direction: 'desc',\n        toggleAction: true\n      });\n      this.sortDescButton.on('action', onSortClick.bind(this.sortDescButton));\n    }\n    this.sortAscAddButton = scout.create('TableHeaderMenuButton', {\n      parent: this.sortingGroup,\n      text: '${textKey:ui.ascendingAdditionally}',\n      cssClass: 'sort sort-asc-add',\n      direction: 'asc',\n      toggleAction: true\n    });\n    this.sortAscAddButton.on('action', onSortAdditionalClick.bind(this.sortAscAddButton));\n    this.sortDescAddButton = scout.create('TableHeaderMenuButton', {\n      parent: this.sortingGroup,\n      text: '${textKey:ui.descendingAdditionally}',\n      cssClass: 'sort sort-desc-add',\n      direction: 'desc',\n      toggleAction: true\n    });\n    this.sortDescAddButton.on('action', onSortAdditionalClick.bind(this.sortDescAddButton));\n    this._updateSortingSelectedState();\n    this.sortingGroup.render(this.$columnActions);\n    return this.sortingGroup;\n    function onSortClick() {\n      menuPopup.close();\n      sort(this.direction, false, !this.selected);\n    }\n    function onSortAdditionalClick() {\n      menuPopup.close();\n      sort(this.direction, true, !this.selected);\n    }\n    function sort(direction, multiSort, remove) {\n      table.sort(column, direction, multiSort, remove);\n      menuPopup._updateSortingSelectedState();\n    }\n  }\n  _updateSortingSelectedState() {\n    if (!this.table.sortEnabled) {\n      return;\n    }\n    let addIcon,\n      showAddCommands = false,\n      sortCount = this._sortColumnCount();\n    this.sortingGroup.children.forEach(button => {\n      button.setSelected(false);\n    });\n    if (sortCount === 1 && !this.table.hasPermanentHeadOrTailSortColumns()) {\n      if (this.column.sortActive) {\n        if (this.column.sortAscending) {\n          this.sortAscButton.setSelected(true);\n        } else {\n          this.sortDescButton.setSelected(true);\n        }\n      } else {\n        showAddCommands = true;\n      }\n    } else if (sortCount > 1 || this.table.hasPermanentHeadOrTailSortColumns()) {\n      showAddCommands = true;\n      if (this.column.sortActive) {\n        if (this.column.sortAscending) {\n          this.sortAscAddButton.setSelected(true);\n        } else {\n          this.sortDescAddButton.setSelected(true);\n        }\n        addIcon = this.column.sortIndex + 1;\n        this.sortAscAddButton.setIconId(addIcon);\n        this.sortDescAddButton.setIconId(addIcon);\n      }\n    }\n    this.sortAscAddButton.setVisible(showAddCommands);\n    this.sortDescAddButton.setVisible(showAddCommands);\n  }\n  _renderGroupingGroup() {\n    let menuPopup = this,\n      table = this.table,\n      column = this.column,\n      groupCount = this._groupColumnCount();\n    let group = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Grouping'\n    });\n    this.groupButton = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.groupingApply}',\n      cssClass: 'group',\n      additional: false,\n      toggleAction: true\n    });\n    this.groupButton.on('action', groupColumn.bind(this.groupButton));\n    this.groupAddButton = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.additionally}',\n      cssClass: 'group-add',\n      additional: true,\n      toggleAction: true\n    });\n    this.groupAddButton.on('action', groupColumn.bind(this.groupAddButton));\n    if (groupCount === 0) {\n      this.groupAddButton.setVisible(false);\n    } else if (groupCount === 1 && this.column.grouped) {\n      this.groupButton.setSelected(true);\n      this.groupAddButton.setVisible(false);\n    } else if (groupCount > 1) {\n      this.groupAddButton.setVisible(true);\n    }\n    if (table.hasPermanentHeadOrTailSortColumns() && groupCount > 0) {\n      // If table has permanent head columns, other columns may not be grouped exclusively -> only enable add button (equally done for sort buttons)\n      this.groupButton.setVisible(false);\n      this.groupAddButton.setVisible(true);\n    }\n    if (this.column.grouped) {\n      if (groupCount === 1) {\n        this.groupAddButton.setSelected(true);\n      } else if (groupCount > 1) {\n        this.groupAddButton.setSelected(true);\n        this.groupAddButton.setIconId(this.column.sortIndex + 1);\n      }\n    }\n    group.render(this.$columnActions);\n    return group;\n    function groupColumn() {\n      let direction = column.sortIndex >= 0 && !column.sortAscending ? 'desc' : 'asc';\n      menuPopup.close();\n      table.groupColumn(column, this.additional, direction, !this.selected);\n    }\n  }\n  _renderHierarchyGruop() {\n    let table = this.table,\n      menuPopup = this;\n    this.hierarchyGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Hierarchy',\n      visible: this.table.isTableNodeColumn(this.column)\n    });\n    let collapseAllButton = scout.create('TableHeaderMenuButton', {\n      parent: this.hierarchyGroup,\n      text: '${textKey:ui.CollapseAll}',\n      cssClass: 'hierarchy-collapse-all',\n      enabled: !!arrays.find(table.rows, row => {\n        return row.expanded && !arrays.empty(row.childRows);\n      })\n    });\n    collapseAllButton.on('action', () => {\n      menuPopup.close();\n      table.collapseAll();\n    });\n    let expandAllButton = scout.create('TableHeaderMenuButton', {\n      parent: this.hierarchyGroup,\n      text: '${textKey:ui.ExpandAll}',\n      cssClass: 'hierarchy-expand-all',\n      enabled: !!arrays.find(table.rows, row => {\n        return !row.expanded && !arrays.empty(row.childRows);\n      })\n    });\n    expandAllButton.on('action', () => {\n      menuPopup.close();\n      table.expandAll();\n    });\n    this.hierarchyGroup.render(this.$columnActions);\n    return this.hierarchyGroup;\n  }\n  _renderAggregationGroup() {\n    let table = this.table,\n      column = this.column,\n      aggregation = column.aggregationFunction,\n      menuPopup = this,\n      group = scout.create('TableHeaderMenuGroup', {\n        parent: this,\n        textKey: 'ui.Aggregation'\n      }),\n      allowedAggregationFunctions = arrays.ensure(column.allowedAggregationFunctions),\n      isAggregationNoneAllowed = allowedAggregationFunctions.indexOf('none') !== -1;\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Sum}', 'sum');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Average}', 'avg');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Minimum}', 'min');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Maximum}', 'max');\n    group.children.forEach(button => {\n      button.setSelected(button.aggregation === aggregation);\n    });\n    group.render(this.$columnActions);\n    return group;\n    function createHeaderMenuButtonForAggregationFunction(text, aggregation) {\n      if (allowedAggregationFunctions.indexOf(aggregation) !== -1) {\n        let aggrButton = scout.create('TableHeaderMenuButton', {\n          parent: group,\n          text: text,\n          cssClass: 'aggregation-function ' + aggregation,\n          aggregation: aggregation,\n          toggleAction: isAggregationNoneAllowed\n        });\n        aggrButton.on('action', onClick.bind(aggrButton));\n      }\n    }\n    function onClick() {\n      menuPopup.close();\n      table.changeAggregation(column, this.aggregation === aggregation ? 'none' : this.aggregation);\n    }\n  }\n  _renderColoringGroup() {\n    let table = this.table,\n      column = this.column,\n      menuPopup = this,\n      backgroundEffect = column.backgroundEffect,\n      group = scout.create('TableHeaderMenuGroup', {\n        parent: this,\n        textKey: 'ui.Coloring'\n      });\n    this.colorGradient1Button = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.fromRedToGreen}',\n      cssClass: 'color color-gradient1',\n      backgroundEffect: 'colorGradient1',\n      toggleAction: true\n    });\n    this.colorGradient1Button.on('action', onClick.bind(this.colorGradient1Button));\n    this.colorGradient2Button = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.fromGreenToRed}',\n      cssClass: 'color color-gradient2',\n      backgroundEffect: 'colorGradient2',\n      toggleAction: true\n    });\n    this.colorGradient2Button.on('action', onClick.bind(this.colorGradient2Button));\n    if (Device.get().supportsCssGradient()) {\n      this.barChartButton = scout.create('TableHeaderMenuButton', {\n        parent: group,\n        text: '${textKey:ui.withBarChart}',\n        cssClass: 'color color-bar-chart',\n        backgroundEffect: 'barChart',\n        toggleAction: true\n      });\n      this.barChartButton.on('action', onClick.bind(this.barChartButton));\n    }\n    group.children.forEach(button => {\n      button.setSelected(button.backgroundEffect === backgroundEffect);\n    });\n    group.render(this.$columnActions);\n    return group;\n    function onClick() {\n      menuPopup.close();\n      table.setColumnBackgroundEffect(column, !this.selected ? null : this.backgroundEffect);\n    }\n  }\n  _renderFilterTable() {\n    let $filterActions;\n    this.$filterTableGroup = this.$columnFilters.appendDiv('table-header-menu-group first');\n    let htmlComp = HtmlComponent.install(this.$filterTableGroup, this.session);\n    htmlComp.setLayout(new RowLayout());\n    $filterActions = this.$filterTableGroup.appendDiv('table-header-menu-filter-actions');\n    this.$filterSortOrder = $filterActions.appendDiv('link table-header-menu-toggle-sort-order').on('click', this._onSortModeClick.bind(this)).addClass(this.filterSortMode.cssClass);\n    this.$filterToggleChecked = $filterActions.appendDiv('link table-header-menu-filter-toggle-checked').text(this.session.text(this.filterCheckedMode.text)).on('click', this._onFilterCheckedModeClick.bind(this));\n    this.$filterTableGroupTitle = this.$filterTableGroup.appendDiv('table-header-menu-group-text').text(this._filterByText());\n    HtmlComponent.install(this.$filterTableGroupTitle, this.session);\n    this.filterTable = this._createFilterTable();\n    this.filterTable.on('rowsChecked', this._filterTableRowsCheckedHandler);\n    let tableRow,\n      tableRows = [];\n    this.filter.availableValues.forEach(function (filterValue) {\n      tableRow = {\n        cells: [scout.create('Cell', {\n          text: this.filter.column.objectType === 'NumberColumn' ? filterValue.text : null,\n          value: this.filter.column.objectType === 'NumberColumn' ? filterValue.key : filterValue.text,\n          iconId: filterValue.iconId,\n          htmlEnabled: filterValue.htmlEnabled,\n          cssClass: filterValue.cssClass\n        }), filterValue.count, filterValue.key === null ? 1 : 0 // empty cell should always be at the bottom\n        ],\n\n        checked: this.filter.selectedValues.indexOf(filterValue.key) > -1,\n        dataMap: {\n          filterValue: filterValue\n        }\n      };\n      tableRows.push(tableRow);\n    }, this);\n    this.filterTable.insertRows(tableRows);\n    this.filterTable.render(this.$filterTableGroup);\n\n    // must do this in a setTimeout, since table/popup is not visible yet (same as Table#revealSelection).\n    setTimeout(this.filterTable.revealChecked.bind(this.filterTable));\n    return this.$filterTableGroup;\n  }\n  _createFilterTable() {\n    let objectType = 'Column';\n    if (this.column.objectType === 'NumberColumn') {\n      objectType = this.column.objectType;\n    }\n    return scout.create('Table', {\n      parent: this,\n      headerVisible: false,\n      multiSelect: false,\n      autoResizeColumns: true,\n      checkable: true,\n      cssClass: 'table-header-menu-filter-table',\n      checkableStyle: Table.CheckableStyle.TABLE_ROW,\n      // column-texts are not visible since header is not visible\n      columns: [{\n        objectType: objectType,\n        text: 'filter-value',\n        width: 120,\n        sortActive: true,\n        sortIndex: 1,\n        horizontalAlignment: -1\n      }, {\n        objectType: 'NumberColumn',\n        text: 'aggregate-count',\n        cssClass: 'table-header-menu-filter-number-column',\n        width: 50,\n        minWidth: 32,\n        autoOptimizeWidth: true\n      }, {\n        objectType: 'NumberColumn',\n        displayable: false,\n        sortActive: true,\n        sortIndex: 0\n      }]\n    });\n  }\n\n  /**\n   * @returns {string} the title-text used for the filter-table\n   */\n  _filterByText() {\n    let text = this.session.text('ui.Filter'),\n      numSelected = this.filter.selectedValues.length,\n      numFilters = this.filter.availableValues.length;\n    if (numSelected && numFilters) {\n      text += ' ' + this.session.text('ui.FilterInfoXOfY', numSelected, numFilters);\n    } else if (numFilters) {\n      text += ' ' + this.session.text('ui.FilterInfoCount', numFilters);\n    }\n    return text;\n  }\n  _onFilterCheckedModeClick() {\n    let checkedMode = TableHeaderMenu.CheckedMode;\n    let checkAll = this.filterCheckedMode.checkAll;\n    this.filter.selectedValues = [];\n    if (this.filterCheckedMode === checkedMode.ALL) {\n      this.filterCheckedMode = checkedMode.NONE;\n      this.filter.availableValues.forEach(function (filterValue) {\n        this.filter.selectedValues.push(filterValue.key);\n      }, this);\n    } else {\n      this.filterCheckedMode = checkedMode.ALL;\n    }\n    this.filterTable.checkAll(checkAll);\n    this._updateFilterTableActions();\n  }\n  _onSortModeClick() {\n    let sortMode = TableHeaderMenu.SortMode;\n    if (this.filterSortMode === sortMode.ALPHABETICALLY) {\n      // sort by amount\n      this.filterTable.sort(this.filterTable.columns[1], 'desc');\n      this.filterSortMode = sortMode.AMOUNT;\n    } else {\n      // sort alphabetically (first by invisible column to make sure empty cells are always at the bottom)\n      this.filterTable.sort(this.filterTable.columns[2], 'asc');\n      this.filterTable.sort(this.filterTable.columns[0], 'asc', true);\n      this.filterSortMode = sortMode.ALPHABETICALLY;\n    }\n    this._updateFilterTableActions();\n  }\n  _updateFilterTable() {\n    if (this.filter.filterActive()) {\n      this.table.addFilter(this.filter);\n    } else {\n      this.table.removeFilterByKey(this.column.id);\n    }\n  }\n  _updateFilterTableActions() {\n    // checked mode\n    this.$filterToggleChecked.text(this.session.text(this.filterCheckedMode.text));\n    // sort mode\n    let sortMode = TableHeaderMenu.SortMode;\n    let sortAlphabetically = this.filterSortMode === TableHeaderMenu.SortMode.ALPHABETICALLY;\n    this.$filterSortOrder.toggleClass(sortMode.ALPHABETICALLY.cssClass, sortAlphabetically);\n    this.$filterSortOrder.toggleClass(sortMode.AMOUNT.cssClass, !sortAlphabetically);\n  }\n  _renderFilterFields() {\n    this.filterFieldsGroupBox = scout.create('GroupBox:FilterFields', {\n      parent: this,\n      column: this.column,\n      filter: this.filter\n    });\n    this.$filterFieldsGroup = this.$columnFilters.appendDiv('table-header-menu-group');\n    let htmlComp = HtmlComponent.install(this.$filterFieldsGroup, this.session);\n    htmlComp.setLayout(new RowLayout());\n    let $filterFieldsText = this.$filterFieldsGroup.appendDiv('table-header-menu-group-text').text(this.filter.filterFieldsTitle());\n    htmlComp = HtmlComponent.install($filterFieldsText, this.session);\n    this.filterFieldsGroupBox.render(this.$filterFieldsGroup);\n    return this.$filterFieldsGroup;\n  }\n  isOpenFor($headerItem) {\n    return this.rendered && this.belongsTo($headerItem);\n  }\n  _countColumns(propertyName) {\n    return this.table.visibleColumns().reduce((sum, column) => {\n      return sum + (column[propertyName] ? 1 : 0);\n    }, 0);\n  }\n  _sortColumnCount() {\n    return this._countColumns('sortActive');\n  }\n  _groupColumnCount() {\n    return this._countColumns('grouped');\n  }\n  _renderCompact() {\n    this.$body.toggleClass('compact', this.compact);\n    this.invalidateLayoutTree();\n  }\n  setCompact(compact) {\n    this.setProperty('compact', compact);\n  }\n  _onLocationChange(event) {\n    let inView,\n      containerBounds,\n      isLocationInView = scrollbars.isLocationInView,\n      headerItemBounds = graphics.offsetBounds(this.$headerItem),\n      $tableHeaderContainer = this.tableHeader.$container;\n    this.$container.setVisible(true);\n    containerBounds = graphics.offsetBounds(this.$container);\n\n    // menu must only be visible if the header item is in view (menu gets repositioned when the table gets scrolled -> make sure it won't be displayed outside of the table)\n    // check left side of the header item (necessary if header item is moved outside on the left side of the table)\n    inView = isLocationInView(new Point(headerItemBounds.x, headerItemBounds.y), $tableHeaderContainer);\n    if (!inView) {\n      // if left side of the header is not in view, check if right side of the header and the menu, both must be visible)\n      // check right side of the header item (necessary if header item is moved outside on the right side of the table)\n      inView = isLocationInView(new Point(headerItemBounds.x + headerItemBounds.width, headerItemBounds.y + headerItemBounds.height), $tableHeaderContainer);\n      // check right side of the menu (necessary if header item is larger than menu, and if header item is moved outside on the left side of the table)\n      inView = inView && isLocationInView(new Point(containerBounds.x + containerBounds.width, containerBounds.y), $tableHeaderContainer);\n    }\n    this.$container.setVisible(inView);\n  }\n  _onAnchorScroll(event) {\n    this.position();\n  }\n  _onFilterTableRowsChecked(event) {\n    this.filter.selectedValues = [];\n    this.filterTable.rows.forEach(function (row) {\n      if (row.checked) {\n        this.filter.selectedValues.push(row.dataMap.filterValue.key);\n      }\n    }, this);\n    this._updateFilterTable();\n  }\n  _onFilterTableChanged() {\n    this.$filterTableGroupTitle.text(this._filterByText());\n    this._updateFilterTableCheckedMode();\n    this._updateFilterTableActions();\n  }\n\n  // When no filter value is selected, we change the selection mode to ALL\n  // since it makes no sense to choose NONE when no value is currently selected\n  _updateFilterTableCheckedMode() {\n    if (this.filter.selectedValues.length === 0) {\n      this.filterCheckedMode = TableHeaderMenu.CheckedMode.ALL;\n    } else {\n      this.filterCheckedMode = TableHeaderMenu.CheckedMode.NONE;\n    }\n  }\n  _onMouseDownOutside(event) {\n    // close popup only if source of event is not $headerItem or one of it's children.\n    if (this.$headerItem.isOrHas(event.target)) {\n      return;\n    }\n    this.close();\n  }\n}\n_defineProperty(TableHeaderMenu, \"CheckedMode\", {\n  ALL: {\n    checkAll: true,\n    text: 'ui.SelectAllFilter'\n  },\n  NONE: {\n    checkAll: false,\n    text: 'ui.SelectNoneFilter'\n  }\n});\n_defineProperty(TableHeaderMenu, \"SortMode\", {\n  ALPHABETICALLY: {\n    text: 'ui.SortAlphabeticallyFilter',\n    cssClass: 'table-header-menu-toggle-sort-order-alphabetically'\n  },\n  AMOUNT: {\n    text: 'ui.SortByAmountFilter',\n    cssClass: 'table-header-menu-toggle-sort-order-amount'\n  }\n});","map":{"version":3,"names":["arrays","Device","graphics","HtmlComponent","NumberColumn","Point","Popup","RowLayout","scout","scrollbars","Table","TableHeaderMenuGroup","TableHeaderMenuLayout","TableHeaderMenu","constructor","column","tableHeader","table","filter","filterCheckedMode","CheckedMode","ALL","filterSortMode","SortMode","ALPHABETICALLY","hasFilterTable","hasFilterFields","animateOpening","animateRemoval","focusableContainer","leftGroups","moveGroup","toBeginButton","forwardButton","backwardButton","toEndButton","sortingGroup","sortDescButton","sortAscAddButton","sortDescAddButton","columnActionsGroup","addColumnButton","removeColumnButton","modifyColumnButton","groupButton","groupAddButton","barChartButton","colorGradient1Button","colorGradient2Button","$rightGroups","$headerItem","$columnActions","$columnFilters","$filterTableGroup","$filterToggleChecked","$filterTableGroupTitle","$filterSortOrder","$filterFieldsGroup","_onColumnMovedHandler","_onColumnMoved","bind","_tableHeaderScrollHandler","_onAnchorScroll","on","_onLocationChange","inheritAccessibility","_init","options","scrollType","$anchor","getFilter","id","createFilter","calculate","_updateFilterTable","_updateFilterTableCheckedMode","availableValues","length","_tableFilterHandler","_onFilterTableChanged","_filterTableRowsCheckedHandler","_onFilterTableRowsChecked","_createLayout","_render","select","$container","$parent","appendDiv","htmlComp","install","session","setLayout","$body","_installScrollbars","axis","scrollShadow","htmlColumnFilters","movableColumns","visibleColumns","fixedPosition","push","_renderMovingGroup","sortEnabled","_renderSortingGroup","_isColumnActionsGroupVisible","_renderColumnActionsGroup","isGroupingPossible","grouped","_renderGroupingGroup","_renderHierarchyGruop","isAggregationPossible","_renderAggregationGroup","_renderColoringGroup","_renderFilterTable","_renderFilterFields","enabled","addClass","validateFocus","filterFieldsGroupBox","focus","get$Scrollable","_updateFirstLast","addFirstLastClass","group","isVisible","groups","forEach","index","arr","toggleCssClass","cssClass","condition","toggleClass","_remove","filterTable","off","rendered","removeClass","pos","indexOf","create","parent","textKey","text","moveColumn","Math","max","min","header","findHeaderItems","render","columnIndex","forwardEnabled","backwardEnabled","setEnabled","hierarchyGroup","setVisible","isTableNodeColumn","columnAddable","removable","modifiable","menuPopup","visible","onClick","action","close","trigger","onColumnActionsChanged","event","addVisible","removeVisible","modifyVisible","groupVisible","children","some","button","hasPermanentHeadOrTailSortColumns","sortAscButton","direction","toggleAction","onSortClick","onSortAdditionalClick","_updateSortingSelectedState","sort","selected","multiSort","remove","addIcon","showAddCommands","sortCount","_sortColumnCount","setSelected","sortActive","sortAscending","sortIndex","setIconId","groupCount","_groupColumnCount","additional","groupColumn","collapseAllButton","find","rows","row","expanded","empty","childRows","collapseAll","expandAllButton","expandAll","aggregation","aggregationFunction","allowedAggregationFunctions","ensure","isAggregationNoneAllowed","createHeaderMenuButtonForAggregationFunction","aggrButton","changeAggregation","backgroundEffect","get","supportsCssGradient","setColumnBackgroundEffect","$filterActions","_onSortModeClick","_onFilterCheckedModeClick","_filterByText","_createFilterTable","tableRow","tableRows","filterValue","cells","objectType","value","key","iconId","htmlEnabled","count","checked","selectedValues","dataMap","insertRows","setTimeout","revealChecked","headerVisible","multiSelect","autoResizeColumns","checkable","checkableStyle","CheckableStyle","TABLE_ROW","columns","width","horizontalAlignment","minWidth","autoOptimizeWidth","displayable","numSelected","numFilters","checkedMode","checkAll","NONE","_updateFilterTableActions","sortMode","AMOUNT","filterActive","addFilter","removeFilterByKey","sortAlphabetically","$filterFieldsText","filterFieldsTitle","isOpenFor","belongsTo","_countColumns","propertyName","reduce","sum","_renderCompact","compact","invalidateLayoutTree","setCompact","setProperty","inView","containerBounds","isLocationInView","headerItemBounds","offsetBounds","$tableHeaderContainer","x","y","height","position","_onMouseDownOutside","isOrHas","target"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableHeaderMenu.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Device, graphics, HtmlComponent, NumberColumn, Point, Popup, RowLayout, scout, scrollbars, Table, TableHeaderMenuGroup, TableHeaderMenuLayout} from '../index';\n\nexport default class TableHeaderMenu extends Popup {\n\n  constructor() {\n    super();\n    this.column = null;\n    this.tableHeader = null;\n    this.table = null;\n    this.filter = null;\n    this.filterCheckedMode = TableHeaderMenu.CheckedMode.ALL;\n    this.filterSortMode = TableHeaderMenu.SortMode.ALPHABETICALLY;\n    this.hasFilterTable = false;\n    this.hasFilterFields = false;\n    this.animateOpening = true;\n    this.animateRemoval = true;\n    this.focusableContainer = true;\n\n    this.leftGroups = [];\n    this.moveGroup = null;\n    this.toBeginButton = null;\n    this.forwardButton = null;\n    this.backwardButton = null;\n    this.toEndButton = null;\n    this.sortingGroup = null;\n    this.sortDescButton = null;\n    this.sortAscAddButton = null;\n    this.sortDescAddButton = null;\n    this.columnActionsGroup = null;\n    this.addColumnButton = null;\n    this.removeColumnButton = null;\n    this.modifyColumnButton = null;\n    this.groupButton = null;\n    this.groupAddButton = null;\n    this.barChartButton = null;\n    this.colorGradient1Button = null;\n    this.colorGradient2Button = null;\n\n    this.$rightGroups = [];\n    this.$headerItem = null;\n    this.$columnActions = null;\n    this.$columnFilters = null;\n    this.$filterTableGroup = null;\n    this.$filterToggleChecked = null;\n    this.$filterTableGroupTitle = null;\n    this.$filterSortOrder = null;\n    this.$filterFieldsGroup = null;\n\n    this._onColumnMovedHandler = this._onColumnMoved.bind(this);\n    this._tableHeaderScrollHandler = this._onAnchorScroll.bind(this);\n    this.on('locationChange', this._onLocationChange.bind(this));\n\n    // Make sure the actions are not disabled even if the table is disabled\n    // To disable the menu use headerEnabled or headerMenusEnabled\n    this.inheritAccessibility = false;\n  }\n\n  static CheckedMode = {\n    ALL: {\n      checkAll: true,\n      text: 'ui.SelectAllFilter'\n    },\n    NONE: {\n      checkAll: false,\n      text: 'ui.SelectNoneFilter'\n    }\n  };\n\n  static SortMode = {\n    ALPHABETICALLY: {\n      text: 'ui.SortAlphabeticallyFilter',\n      cssClass: 'table-header-menu-toggle-sort-order-alphabetically'\n    },\n    AMOUNT: {\n      text: 'ui.SortByAmountFilter',\n      cssClass: 'table-header-menu-toggle-sort-order-amount'\n    }\n  };\n\n  _init(options) {\n    options.scrollType = options.scrollType || 'none';\n    super._init(options);\n\n    this.tableHeader = options.tableHeader;\n    this.column = options.column;\n    this.table = this.tableHeader.table;\n    this.$headerItem = this.$anchor;\n\n    this.table.on('columnMoved', this._onColumnMovedHandler);\n    // Filtering\n    this.filter = this.table.getFilter(this.column.id);\n    if (!this.filter) {\n      this.filter = this.column.createFilter();\n    }\n    // always recalculate available values to make sure new/updated/deleted rows are considered\n    this.filter.calculate();\n    this.filter.on('filterFieldsChanged', this._updateFilterTable.bind(this));\n    this._updateFilterTableCheckedMode();\n\n    this.hasFilterTable = this.filter.availableValues.length > 0;\n    this.hasFilterFields = this.filter.hasFilterFields;\n\n    if (this.hasFilterTable) {\n      this._tableFilterHandler = this._onFilterTableChanged.bind(this);\n      this.table.on('filterAdded', this._tableFilterHandler);\n      this.table.on('filterRemoved', this._tableFilterHandler);\n      this._filterTableRowsCheckedHandler = this._onFilterTableRowsChecked.bind(this);\n    }\n  }\n\n  _createLayout() {\n    return new TableHeaderMenuLayout(this);\n  }\n\n  _render() {\n    this.leftGroups = [];\n    this.$rightGroups = [];\n\n    this.$headerItem.select(true);\n\n    this.$container = this.$parent.appendDiv('popup table-header-menu');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(this._createLayout());\n    this.$body = this.$container.appendDiv('table-header-menu-body');\n    HtmlComponent.install(this.$body, this.session);\n    this._installScrollbars({\n      axis: 'y',\n      scrollShadow: 'none'\n    });\n    this.$columnActions = this.$body.appendDiv('table-header-menu-actions');\n\n    // only add right column if filter has a filter-table or filter-fields\n    if (this.hasFilterTable || this.hasFilterFields) {\n      this.$columnFilters = this.$body.appendDiv('table-header-menu-filters');\n      let htmlColumnFilters = HtmlComponent.install(this.$columnFilters, this.session);\n      htmlColumnFilters.setLayout(new RowLayout());\n    }\n\n    this.tableHeader.$container.on('scroll', this._tableHeaderScrollHandler);\n\n    // -- Left column -- //\n    // Moving\n    let movableColumns = this.table.visibleColumns().filter(column => {\n      return !column.fixedPosition;\n    });\n    if (movableColumns.length > 1 && !this.column.fixedPosition) {\n      this.leftGroups.push(this._renderMovingGroup());\n    }\n    // Sorting\n    if (this.table.sortEnabled) {\n      this.leftGroups.push(this._renderSortingGroup());\n    }\n    // Add/remove/change columns\n    if (this._isColumnActionsGroupVisible()) {\n      this.leftGroups.push(this._renderColumnActionsGroup());\n    }\n    // Grouping\n    // column.grouped check necessary to make ungroup possible, even if grouping is not possible anymore\n    if (this.table.isGroupingPossible(this.column) || this.column.grouped) {\n      this.leftGroups.push(this._renderGroupingGroup());\n    }\n\n    // Expand/Collapse\n    this.leftGroups.push(this._renderHierarchyGruop());\n\n    // Aggregation\n    if (this.table.isAggregationPossible(this.column)) {\n      this.leftGroups.push(this._renderAggregationGroup());\n    }\n    // Coloring\n    if (this.column instanceof NumberColumn) {\n      this.leftGroups.push(this._renderColoringGroup());\n    }\n\n    // -- Right column -- //\n    // Filter table\n    if (this.hasFilterTable) {\n      this.$rightGroups.push(this._renderFilterTable());\n    }\n    // Filter fields\n    if (this.hasFilterFields) {\n      this.$rightGroups.push(this._renderFilterFields());\n    }\n\n    this._onColumnMoved();\n\n    // Set table style to focused, so that it looks as it still has the focus.\n    if (this.table.enabled) {\n      this.table.$container.addClass('focused');\n    }\n  }\n\n  validateFocus() {\n    if (this.filterFieldsGroupBox) {\n      this.filterFieldsGroupBox.focus();\n    }\n    // Super call will focus container if no element has been focused yet\n    super.validateFocus();\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$body;\n  }\n\n  _updateFirstLast() {\n    addFirstLastClass(this.leftGroups.filter(group => {\n      return group.isVisible();\n    }));\n    addFirstLastClass(this.$rightGroups);\n\n    function addFirstLastClass(groups) {\n      groups.forEach((group, index, arr) => {\n        toggleCssClass(group, 'first', index === 0);\n        toggleCssClass(group, 'last', index === arr.length - 1);\n      }, this);\n    }\n\n    // Note: we should refactor code for filter-fields and filter-table so they could also\n    // work with a model-class (like the button menu groups). Currently this would cause\n    // to much work.\n    function toggleCssClass(group, cssClass, condition) {\n      let $container = group instanceof TableHeaderMenuGroup ? group.$container : group;\n      $container.toggleClass(cssClass, condition);\n    }\n  }\n\n  _remove() {\n    if (this.filterTable) {\n      this.filterTable.off('rowsChecked', this._filterTableRowsCheckedHandler);\n    }\n    if (this.tableHeader.rendered) {\n      this.tableHeader.$container.off('scroll', this._tableHeaderScrollHandler);\n    }\n    this.$headerItem.select(false);\n    this.table.off('columnMoved', this._onColumnMovedHandler);\n    this.table.off('filterAdded', this._tableFilterHandler);\n    this.table.off('filterRemoved', this._tableFilterHandler);\n    super._remove();\n\n    // table may have been removed in the meantime\n    if (this.table.rendered) {\n      this.table.$container.removeClass('focused');\n    }\n  }\n\n  _renderMovingGroup() {\n    let table = this.table,\n      column = this.column,\n      pos = table.visibleColumns().indexOf(column);\n\n    this.moveGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Move',\n      cssClass: 'first'\n    });\n    this.toBeginButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.toBegin}',\n      cssClass: 'move move-top'\n    });\n    this.toBeginButton.on('action', () => {\n      table.moveColumn(column, pos, 0);\n      pos = table.visibleColumns().indexOf(column);\n    });\n\n    this.forwardButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.forward}',\n      cssClass: 'move move-up'\n    });\n    this.forwardButton.on('action', () => {\n      table.moveColumn(column, pos, Math.max(pos - 1, 0));\n      pos = table.visibleColumns().indexOf(column);\n    });\n\n    this.backwardButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.backward}',\n      cssClass: 'move move-down'\n    });\n    this.backwardButton.on('action', () => {\n      table.moveColumn(column, pos, Math.min(pos + 1, table.header.findHeaderItems().length - 1));\n      pos = table.visibleColumns().indexOf(column);\n    });\n\n    this.toEndButton = scout.create('TableHeaderMenuButton', {\n      parent: this.moveGroup,\n      text: '${textKey:ui.toEnd}',\n      cssClass: 'move move-bottom'\n    });\n    this.toEndButton.on('action', () => {\n      table.moveColumn(column, pos, table.header.findHeaderItems().length - 1);\n      pos = table.visibleColumns().indexOf(column);\n    });\n\n    this.moveGroup.render(this.$columnActions);\n    return this.moveGroup;\n  }\n\n  _onColumnMoved() {\n    let table = this.table,\n      column = this.column;\n\n    if (this.moveGroup) {\n      let visibleColumns = table.visibleColumns();\n      let columnIndex = table.visibleColumns().indexOf(column);\n      let forwardEnabled = visibleColumns[columnIndex - 1] && !visibleColumns[columnIndex - 1].fixedPosition;\n      let backwardEnabled = visibleColumns[columnIndex + 1] && !visibleColumns[columnIndex + 1].fixedPosition;\n\n      this.toBeginButton.setEnabled(forwardEnabled);\n      this.forwardButton.setEnabled(forwardEnabled);\n      this.backwardButton.setEnabled(backwardEnabled);\n      this.toEndButton.setEnabled(backwardEnabled);\n    }\n\n    this.hierarchyGroup.setVisible(this.table.isTableNodeColumn(column));\n    this._updateFirstLast();\n  }\n\n  _isColumnActionsGroupVisible() {\n    return this.table.columnAddable || this.column.removable || this.column.modifiable;\n  }\n\n  _renderColumnActionsGroup() {\n    let column = this.column,\n      menuPopup = this;\n\n    this.columnActionsGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Column'\n    });\n\n    this.addColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.addColumn}',\n      cssClass: 'add-column',\n      visible: this.table.columnAddable\n    });\n    this.addColumnButton.on('action', onClick.bind(this, 'add'));\n\n    this.removeColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.removeColumn}',\n      cssClass: 'remove-column',\n      visible: this.column.removable\n    });\n    this.removeColumnButton.on('action', onClick.bind(this, 'remove'));\n\n    this.modifyColumnButton = scout.create('TableHeaderMenuButton', {\n      parent: this.columnActionsGroup,\n      text: '${textKey:ui.changeColumn}',\n      cssClass: 'change-column',\n      visible: this.column.modifiable\n    });\n    this.modifyColumnButton.on('action', onClick.bind(this, 'modify'));\n\n    this.columnActionsGroup.render(this.$columnActions);\n    return this.columnActionsGroup;\n\n    function onClick(action) {\n      menuPopup.close();\n      this.table.trigger('columnOrganizeAction', {\n        action: action,\n        column: column\n      });\n    }\n  }\n\n  onColumnActionsChanged(event) {\n    this.addColumnButton.setVisible(event.addVisible);\n    this.removeColumnButton.setVisible(event.removeVisible);\n    this.modifyColumnButton.setVisible(event.modifyVisible);\n    let groupVisible = this.columnActionsGroup.children.some(button => {\n      return button.visible;\n    });\n    this.columnActionsGroup.setVisible(groupVisible);\n  }\n\n  _renderSortingGroup() {\n    let table = this.table,\n      column = this.column,\n      menuPopup = this;\n\n    this.sortingGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ColumnSorting'\n    });\n\n    if (!table.hasPermanentHeadOrTailSortColumns()) {\n      this.sortAscButton = scout.create('TableHeaderMenuButton', {\n        parent: this.sortingGroup,\n        text: '${textKey:ui.ascending}',\n        cssClass: 'sort sort-asc',\n        direction: 'asc',\n        toggleAction: true\n      });\n      this.sortAscButton.on('action', onSortClick.bind(this.sortAscButton));\n\n      this.sortDescButton = scout.create('TableHeaderMenuButton', {\n        parent: this.sortingGroup,\n        text: '${textKey:ui.descending}',\n        cssClass: 'sort sort-desc',\n        direction: 'desc',\n        toggleAction: true\n      });\n      this.sortDescButton.on('action', onSortClick.bind(this.sortDescButton));\n    }\n\n    this.sortAscAddButton = scout.create('TableHeaderMenuButton', {\n      parent: this.sortingGroup,\n      text: '${textKey:ui.ascendingAdditionally}',\n      cssClass: 'sort sort-asc-add',\n      direction: 'asc',\n      toggleAction: true\n    });\n    this.sortAscAddButton.on('action', onSortAdditionalClick.bind(this.sortAscAddButton));\n\n    this.sortDescAddButton = scout.create('TableHeaderMenuButton', {\n      parent: this.sortingGroup,\n      text: '${textKey:ui.descendingAdditionally}',\n      cssClass: 'sort sort-desc-add',\n      direction: 'desc',\n      toggleAction: true\n    });\n    this.sortDescAddButton.on('action', onSortAdditionalClick.bind(this.sortDescAddButton));\n\n    this._updateSortingSelectedState();\n    this.sortingGroup.render(this.$columnActions);\n    return this.sortingGroup;\n\n    function onSortClick() {\n      menuPopup.close();\n      sort(this.direction, false, !this.selected);\n    }\n\n    function onSortAdditionalClick() {\n      menuPopup.close();\n      sort(this.direction, true, !this.selected);\n    }\n\n    function sort(direction, multiSort, remove) {\n      table.sort(column, direction, multiSort, remove);\n      menuPopup._updateSortingSelectedState();\n    }\n  }\n\n  _updateSortingSelectedState() {\n    if (!this.table.sortEnabled) {\n      return;\n    }\n\n    let addIcon,\n      showAddCommands = false,\n      sortCount = this._sortColumnCount();\n\n    this.sortingGroup.children.forEach(button => {\n      button.setSelected(false);\n    });\n\n    if (sortCount === 1 && !this.table.hasPermanentHeadOrTailSortColumns()) {\n      if (this.column.sortActive) {\n        if (this.column.sortAscending) {\n          this.sortAscButton.setSelected(true);\n        } else {\n          this.sortDescButton.setSelected(true);\n        }\n      } else {\n        showAddCommands = true;\n      }\n    } else if (sortCount > 1 || this.table.hasPermanentHeadOrTailSortColumns()) {\n      showAddCommands = true;\n      if (this.column.sortActive) {\n        if (this.column.sortAscending) {\n          this.sortAscAddButton.setSelected(true);\n        } else {\n          this.sortDescAddButton.setSelected(true);\n        }\n        addIcon = this.column.sortIndex + 1;\n        this.sortAscAddButton.setIconId(addIcon);\n        this.sortDescAddButton.setIconId(addIcon);\n      }\n    }\n\n    this.sortAscAddButton.setVisible(showAddCommands);\n    this.sortDescAddButton.setVisible(showAddCommands);\n  }\n\n  _renderGroupingGroup() {\n    let menuPopup = this,\n      table = this.table,\n      column = this.column,\n      groupCount = this._groupColumnCount();\n\n    let group = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Grouping'\n    });\n\n    this.groupButton = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.groupingApply}',\n      cssClass: 'group',\n      additional: false,\n      toggleAction: true\n    });\n    this.groupButton.on('action', groupColumn.bind(this.groupButton));\n\n    this.groupAddButton = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.additionally}',\n      cssClass: 'group-add',\n      additional: true,\n      toggleAction: true\n    });\n    this.groupAddButton.on('action', groupColumn.bind(this.groupAddButton));\n\n    if (groupCount === 0) {\n      this.groupAddButton.setVisible(false);\n    } else if (groupCount === 1 && this.column.grouped) {\n      this.groupButton.setSelected(true);\n      this.groupAddButton.setVisible(false);\n    } else if (groupCount > 1) {\n      this.groupAddButton.setVisible(true);\n    }\n\n    if (table.hasPermanentHeadOrTailSortColumns() && groupCount > 0) {\n      // If table has permanent head columns, other columns may not be grouped exclusively -> only enable add button (equally done for sort buttons)\n      this.groupButton.setVisible(false);\n      this.groupAddButton.setVisible(true);\n    }\n\n    if (this.column.grouped) {\n      if (groupCount === 1) {\n        this.groupAddButton.setSelected(true);\n      } else if (groupCount > 1) {\n        this.groupAddButton.setSelected(true);\n        this.groupAddButton.setIconId(this.column.sortIndex + 1);\n      }\n    }\n\n    group.render(this.$columnActions);\n    return group;\n\n    function groupColumn() {\n      let direction = (column.sortIndex >= 0 && !column.sortAscending) ? 'desc' : 'asc';\n      menuPopup.close();\n      table.groupColumn(column, this.additional, direction, !this.selected);\n    }\n  }\n\n  _renderHierarchyGruop() {\n    let table = this.table,\n      menuPopup = this;\n    this.hierarchyGroup = scout.create('TableHeaderMenuGroup', {\n      parent: this,\n      textKey: 'ui.Hierarchy',\n      visible: this.table.isTableNodeColumn(this.column)\n    });\n\n    let collapseAllButton = scout.create('TableHeaderMenuButton', {\n      parent: this.hierarchyGroup,\n      text: '${textKey:ui.CollapseAll}',\n      cssClass: 'hierarchy-collapse-all',\n      enabled: !!arrays.find(table.rows, row => {\n        return row.expanded && !arrays.empty(row.childRows);\n      })\n    });\n    collapseAllButton.on('action', () => {\n      menuPopup.close();\n      table.collapseAll();\n    });\n\n    let expandAllButton = scout.create('TableHeaderMenuButton', {\n      parent: this.hierarchyGroup,\n      text: '${textKey:ui.ExpandAll}',\n      cssClass: 'hierarchy-expand-all',\n      enabled: !!arrays.find(table.rows, row => {\n        return !row.expanded && !arrays.empty(row.childRows);\n      })\n    });\n    expandAllButton.on('action', () => {\n      menuPopup.close();\n      table.expandAll();\n    });\n\n    this.hierarchyGroup.render(this.$columnActions);\n    return this.hierarchyGroup;\n  }\n\n  _renderAggregationGroup() {\n    let table = this.table,\n      column = this.column,\n      aggregation = column.aggregationFunction,\n      menuPopup = this,\n      group = scout.create('TableHeaderMenuGroup', {\n        parent: this,\n        textKey: 'ui.Aggregation'\n      }),\n      allowedAggregationFunctions = arrays.ensure(column.allowedAggregationFunctions),\n      isAggregationNoneAllowed = allowedAggregationFunctions.indexOf('none') !== -1;\n\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Sum}', 'sum');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Average}', 'avg');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Minimum}', 'min');\n    createHeaderMenuButtonForAggregationFunction('${textKey:ui.Maximum}', 'max');\n\n    group.children.forEach(button => {\n      button.setSelected(button.aggregation === aggregation);\n    });\n    group.render(this.$columnActions);\n    return group;\n\n    function createHeaderMenuButtonForAggregationFunction(text, aggregation) {\n      if (allowedAggregationFunctions.indexOf(aggregation) !== -1) {\n        let aggrButton = scout.create('TableHeaderMenuButton', {\n          parent: group,\n          text: text,\n          cssClass: 'aggregation-function ' + aggregation,\n          aggregation: aggregation,\n          toggleAction: isAggregationNoneAllowed\n        });\n        aggrButton.on('action', onClick.bind(aggrButton));\n      }\n    }\n\n    function onClick() {\n      menuPopup.close();\n      table.changeAggregation(column, this.aggregation === aggregation ? 'none' : this.aggregation);\n    }\n  }\n\n  _renderColoringGroup() {\n    let table = this.table,\n      column = this.column,\n      menuPopup = this,\n      backgroundEffect = column.backgroundEffect,\n      group = scout.create('TableHeaderMenuGroup', {\n        parent: this,\n        textKey: 'ui.Coloring'\n      });\n\n    this.colorGradient1Button = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.fromRedToGreen}',\n      cssClass: 'color color-gradient1',\n      backgroundEffect: 'colorGradient1',\n      toggleAction: true\n    });\n    this.colorGradient1Button.on('action', onClick.bind(this.colorGradient1Button));\n\n    this.colorGradient2Button = scout.create('TableHeaderMenuButton', {\n      parent: group,\n      text: '${textKey:ui.fromGreenToRed}',\n      cssClass: 'color color-gradient2',\n      backgroundEffect: 'colorGradient2',\n      toggleAction: true\n    });\n    this.colorGradient2Button.on('action', onClick.bind(this.colorGradient2Button));\n\n    if (Device.get().supportsCssGradient()) {\n      this.barChartButton = scout.create('TableHeaderMenuButton', {\n        parent: group,\n        text: '${textKey:ui.withBarChart}',\n        cssClass: 'color color-bar-chart',\n        backgroundEffect: 'barChart',\n        toggleAction: true\n      });\n      this.barChartButton.on('action', onClick.bind(this.barChartButton));\n    }\n\n    group.children.forEach(button => {\n      button.setSelected(button.backgroundEffect === backgroundEffect);\n    });\n    group.render(this.$columnActions);\n    return group;\n\n    function onClick() {\n      menuPopup.close();\n      table.setColumnBackgroundEffect(column, !this.selected ? null : this.backgroundEffect);\n    }\n  }\n\n  _renderFilterTable() {\n    let $filterActions;\n\n    this.$filterTableGroup = this.$columnFilters\n      .appendDiv('table-header-menu-group first');\n    let htmlComp = HtmlComponent.install(this.$filterTableGroup, this.session);\n    htmlComp.setLayout(new RowLayout());\n\n    $filterActions = this.$filterTableGroup\n      .appendDiv('table-header-menu-filter-actions');\n\n    this.$filterSortOrder = $filterActions\n      .appendDiv('link table-header-menu-toggle-sort-order')\n      .on('click', this._onSortModeClick.bind(this))\n      .addClass(this.filterSortMode.cssClass);\n\n    this.$filterToggleChecked = $filterActions\n      .appendDiv('link table-header-menu-filter-toggle-checked')\n      .text(this.session.text(this.filterCheckedMode.text))\n      .on('click', this._onFilterCheckedModeClick.bind(this));\n\n    this.$filterTableGroupTitle = this.$filterTableGroup\n      .appendDiv('table-header-menu-group-text')\n      .text(this._filterByText());\n    HtmlComponent.install(this.$filterTableGroupTitle, this.session);\n\n    this.filterTable = this._createFilterTable();\n    this.filterTable.on('rowsChecked', this._filterTableRowsCheckedHandler);\n    let tableRow, tableRows = [];\n    this.filter.availableValues.forEach(function(filterValue) {\n      tableRow = {\n        cells: [\n          scout.create('Cell', {\n            text: (this.filter.column.objectType === 'NumberColumn') ? filterValue.text : null,\n            value: (this.filter.column.objectType === 'NumberColumn') ? filterValue.key : filterValue.text,\n            iconId: filterValue.iconId,\n            htmlEnabled: filterValue.htmlEnabled,\n            cssClass: filterValue.cssClass\n          }),\n          filterValue.count,\n          filterValue.key === null ? 1 : 0 // empty cell should always be at the bottom\n        ],\n        checked: this.filter.selectedValues.indexOf(filterValue.key) > -1,\n        dataMap: {\n          filterValue: filterValue\n        }\n      };\n      tableRows.push(tableRow);\n    }, this);\n    this.filterTable.insertRows(tableRows);\n    this.filterTable.render(this.$filterTableGroup);\n\n    // must do this in a setTimeout, since table/popup is not visible yet (same as Table#revealSelection).\n    setTimeout(this.filterTable.revealChecked.bind(this.filterTable));\n\n    return this.$filterTableGroup;\n  }\n\n  _createFilterTable() {\n    let objectType = 'Column';\n    if (this.column.objectType === 'NumberColumn') {\n      objectType = this.column.objectType;\n    }\n\n    return scout.create('Table', {\n      parent: this,\n      headerVisible: false,\n      multiSelect: false,\n      autoResizeColumns: true,\n      checkable: true,\n      cssClass: 'table-header-menu-filter-table',\n      checkableStyle: Table.CheckableStyle.TABLE_ROW,\n      // column-texts are not visible since header is not visible\n      columns: [{\n        objectType: objectType,\n        text: 'filter-value',\n        width: 120,\n        sortActive: true,\n        sortIndex: 1,\n        horizontalAlignment: -1\n      }, {\n        objectType: 'NumberColumn',\n        text: 'aggregate-count',\n        cssClass: 'table-header-menu-filter-number-column',\n        width: 50,\n        minWidth: 32,\n        autoOptimizeWidth: true\n      }, {\n        objectType: 'NumberColumn',\n        displayable: false,\n        sortActive: true,\n        sortIndex: 0\n      }]\n    });\n  }\n\n  /**\n   * @returns {string} the title-text used for the filter-table\n   */\n  _filterByText() {\n    let text = this.session.text('ui.Filter'),\n      numSelected = this.filter.selectedValues.length,\n      numFilters = this.filter.availableValues.length;\n\n    if (numSelected && numFilters) {\n      text += ' ' + this.session.text('ui.FilterInfoXOfY', numSelected, numFilters);\n    } else if (numFilters) {\n      text += ' ' + this.session.text('ui.FilterInfoCount', numFilters);\n    }\n    return text;\n  }\n\n  _onFilterCheckedModeClick() {\n    let checkedMode = TableHeaderMenu.CheckedMode;\n    let checkAll = this.filterCheckedMode.checkAll;\n    this.filter.selectedValues = [];\n    if (this.filterCheckedMode === checkedMode.ALL) {\n      this.filterCheckedMode = checkedMode.NONE;\n      this.filter.availableValues.forEach(function(filterValue) {\n        this.filter.selectedValues.push(filterValue.key);\n      }, this);\n    } else {\n      this.filterCheckedMode = checkedMode.ALL;\n    }\n    this.filterTable.checkAll(checkAll);\n    this._updateFilterTableActions();\n  }\n\n  _onSortModeClick() {\n    let sortMode = TableHeaderMenu.SortMode;\n    if (this.filterSortMode === sortMode.ALPHABETICALLY) {\n      // sort by amount\n      this.filterTable.sort(this.filterTable.columns[1], 'desc');\n      this.filterSortMode = sortMode.AMOUNT;\n    } else {\n      // sort alphabetically (first by invisible column to make sure empty cells are always at the bottom)\n      this.filterTable.sort(this.filterTable.columns[2], 'asc');\n      this.filterTable.sort(this.filterTable.columns[0], 'asc', true);\n      this.filterSortMode = sortMode.ALPHABETICALLY;\n    }\n    this._updateFilterTableActions();\n  }\n\n  _updateFilterTable() {\n    if (this.filter.filterActive()) {\n      this.table.addFilter(this.filter);\n    } else {\n      this.table.removeFilterByKey(this.column.id);\n    }\n  }\n\n  _updateFilterTableActions() {\n    // checked mode\n    this.$filterToggleChecked.text(this.session.text(this.filterCheckedMode.text));\n    // sort mode\n    let sortMode = TableHeaderMenu.SortMode;\n    let sortAlphabetically = this.filterSortMode === TableHeaderMenu.SortMode.ALPHABETICALLY;\n    this.$filterSortOrder.toggleClass(sortMode.ALPHABETICALLY.cssClass, sortAlphabetically);\n    this.$filterSortOrder.toggleClass(sortMode.AMOUNT.cssClass, !sortAlphabetically);\n  }\n\n  _renderFilterFields() {\n    this.filterFieldsGroupBox = scout.create('GroupBox:FilterFields', {\n      parent: this,\n      column: this.column,\n      filter: this.filter\n    });\n    this.$filterFieldsGroup = this.$columnFilters.appendDiv('table-header-menu-group');\n    let htmlComp = HtmlComponent.install(this.$filterFieldsGroup, this.session);\n    htmlComp.setLayout(new RowLayout());\n    let $filterFieldsText = this.$filterFieldsGroup\n      .appendDiv('table-header-menu-group-text')\n      .text(this.filter.filterFieldsTitle());\n    htmlComp = HtmlComponent.install($filterFieldsText, this.session);\n    this.filterFieldsGroupBox.render(this.$filterFieldsGroup);\n    return this.$filterFieldsGroup;\n  }\n\n  isOpenFor($headerItem) {\n    return this.rendered && this.belongsTo($headerItem);\n  }\n\n  _countColumns(propertyName) {\n    return this.table.visibleColumns().reduce((sum, column) => {\n      return sum + (column[propertyName] ? 1 : 0);\n    }, 0);\n  }\n\n  _sortColumnCount() {\n    return this._countColumns('sortActive');\n  }\n\n  _groupColumnCount() {\n    return this._countColumns('grouped');\n  }\n\n  _renderCompact() {\n    this.$body.toggleClass('compact', this.compact);\n    this.invalidateLayoutTree();\n  }\n\n  setCompact(compact) {\n    this.setProperty('compact', compact);\n  }\n\n  _onLocationChange(event) {\n    let inView, containerBounds,\n      isLocationInView = scrollbars.isLocationInView,\n      headerItemBounds = graphics.offsetBounds(this.$headerItem),\n      $tableHeaderContainer = this.tableHeader.$container;\n\n    this.$container.setVisible(true);\n    containerBounds = graphics.offsetBounds(this.$container);\n\n    // menu must only be visible if the header item is in view (menu gets repositioned when the table gets scrolled -> make sure it won't be displayed outside of the table)\n    // check left side of the header item (necessary if header item is moved outside on the left side of the table)\n    inView = isLocationInView(new Point(headerItemBounds.x, headerItemBounds.y), $tableHeaderContainer);\n    if (!inView) {\n      // if left side of the header is not in view, check if right side of the header and the menu, both must be visible)\n      // check right side of the header item (necessary if header item is moved outside on the right side of the table)\n      inView = isLocationInView(new Point(headerItemBounds.x + headerItemBounds.width, headerItemBounds.y + headerItemBounds.height), $tableHeaderContainer);\n      // check right side of the menu (necessary if header item is larger than menu, and if header item is moved outside on the left side of the table)\n      inView = inView && isLocationInView(new Point(containerBounds.x + containerBounds.width, containerBounds.y), $tableHeaderContainer);\n    }\n    this.$container.setVisible(inView);\n  }\n\n  _onAnchorScroll(event) {\n    this.position();\n  }\n\n  _onFilterTableRowsChecked(event) {\n    this.filter.selectedValues = [];\n    this.filterTable.rows.forEach(function(row) {\n      if (row.checked) {\n        this.filter.selectedValues.push(row.dataMap.filterValue.key);\n      }\n    }, this);\n    this._updateFilterTable();\n  }\n\n  _onFilterTableChanged() {\n    this.$filterTableGroupTitle.text(this._filterByText());\n    this._updateFilterTableCheckedMode();\n    this._updateFilterTableActions();\n  }\n\n  // When no filter value is selected, we change the selection mode to ALL\n  // since it makes no sense to choose NONE when no value is currently selected\n  _updateFilterTableCheckedMode() {\n    if (this.filter.selectedValues.length === 0) {\n      this.filterCheckedMode = TableHeaderMenu.CheckedMode.ALL;\n    } else {\n      this.filterCheckedMode = TableHeaderMenu.CheckedMode.NONE;\n    }\n  }\n\n  _onMouseDownOutside(event) {\n    // close popup only if source of event is not $headerItem or one of it's children.\n    if (this.$headerItem.isOrHas(event.target)) {\n      return;\n    }\n    this.close();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}