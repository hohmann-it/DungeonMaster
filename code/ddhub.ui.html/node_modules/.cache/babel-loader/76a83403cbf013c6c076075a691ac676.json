{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, strings } from '../index';\n\n/**\n * A NullLogger instance is installed when Log4Javascript is not active (the popup\n * is not opened). In that case we write WARN, ERROR and FATAL to the console output\n * because otherwise some errors are hard to track. This is true especially for errors\n * that occur in a Promise. A developer should at least log these errors.\n */\nexport default class NullLogger {\n  constructor() {}\n  trace() {\n    // NOP - don't log trace, we don't want to spam the browser console\n  }\n  debug() {\n    // NOP - don't log debug, we don't want to spam the browser console\n  }\n  info() {\n    for (var _len = arguments.length, logArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      logArgs[_key] = arguments[_key];\n    }\n    this._log('info', logArgs);\n  }\n  warn() {\n    for (var _len2 = arguments.length, logArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      logArgs[_key2] = arguments[_key2];\n    }\n    this._log('warn', logArgs);\n  }\n  error() {\n    for (var _len3 = arguments.length, logArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      logArgs[_key3] = arguments[_key3];\n    }\n    this._log('error', logArgs);\n  }\n  fatal() {\n    for (var _len4 = arguments.length, logArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      logArgs[_key4] = arguments[_key4];\n    }\n    this._log('fatal', logArgs);\n  }\n  isEnabledFor() {\n    return false;\n  }\n  isTraceEnabled() {\n    return false;\n  }\n  isDebugEnabled() {\n    return false;\n  }\n  isInfoEnabled() {\n    return false;\n  }\n  isWarnEnabled() {\n    return false;\n  }\n  isErrorEnabled() {\n    return false;\n  }\n  isFatalEnabled() {\n    return false;\n  }\n  _log(level, logArgs) {\n    // check if console is available\n    let myConsole = objects.optProperty(window, 'console');\n    if (!myConsole) {\n      return;\n    }\n\n    // map level to log function\n    let funcName;\n    if ('fatal' === level) {\n      funcName = 'error';\n    } else {\n      funcName = level;\n    }\n\n    // check if log function exists on console\n    let logFunc = myConsole[funcName];\n    if (!logFunc) {\n      return;\n    }\n\n    // log the message\n    if (logArgs.length > 0) {\n      logArgs[0] = this._formatTime() + ' [' + level.toUpperCase() + '] ' + logArgs[0];\n    }\n    try {\n      logFunc.apply(myConsole, logArgs);\n    } catch (e) {\n      // NOP - this seems a bit paranoid, because we've already checked that the error function exists,\n      // but some restrictive security settings in Internet Explorer may cause an Error when the function\n      // is called. Our logger should not produce additional errors #249626.\n    }\n  }\n  _formatTime() {\n    let date = new Date();\n    return strings.padZeroLeft(date.getHours(), 2) + ':' + strings.padZeroLeft(date.getMinutes(), 2) + ':' + strings.padZeroLeft(date.getSeconds(), 2) + '.' + strings.padZeroLeft(date.getMilliseconds(), 3);\n  }\n}","map":{"version":3,"names":["objects","strings","NullLogger","constructor","trace","debug","info","logArgs","_log","warn","error","fatal","isEnabledFor","isTraceEnabled","isDebugEnabled","isInfoEnabled","isWarnEnabled","isErrorEnabled","isFatalEnabled","level","myConsole","optProperty","window","funcName","logFunc","length","_formatTime","toUpperCase","apply","e","date","Date","padZeroLeft","getHours","getMinutes","getSeconds","getMilliseconds"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/logging/NullLogger.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, strings} from '../index';\n\n/**\n * A NullLogger instance is installed when Log4Javascript is not active (the popup\n * is not opened). In that case we write WARN, ERROR and FATAL to the console output\n * because otherwise some errors are hard to track. This is true especially for errors\n * that occur in a Promise. A developer should at least log these errors.\n */\nexport default class NullLogger {\n\n  constructor() {\n  }\n\n  trace() {\n    // NOP - don't log trace, we don't want to spam the browser console\n  }\n\n  debug() {\n    // NOP - don't log debug, we don't want to spam the browser console\n  }\n\n  info(...logArgs) {\n    this._log('info', logArgs);\n  }\n\n  warn(...logArgs) {\n    this._log('warn', logArgs);\n  }\n\n  error(...logArgs) {\n    this._log('error', logArgs);\n  }\n\n  fatal(...logArgs) {\n    this._log('fatal', logArgs);\n  }\n\n  isEnabledFor() {\n    return false;\n  }\n\n  isTraceEnabled() {\n    return false;\n  }\n\n  isDebugEnabled() {\n    return false;\n  }\n\n  isInfoEnabled() {\n    return false;\n  }\n\n  isWarnEnabled() {\n    return false;\n  }\n\n  isErrorEnabled() {\n    return false;\n  }\n\n  isFatalEnabled() {\n    return false;\n  }\n\n  _log(level, logArgs) {\n    // check if console is available\n    let myConsole = objects.optProperty(window, 'console');\n    if (!myConsole) {\n      return;\n    }\n\n    // map level to log function\n    let funcName;\n    if ('fatal' === level) {\n      funcName = 'error';\n    } else {\n      funcName = level;\n    }\n\n    // check if log function exists on console\n    let logFunc = myConsole[funcName];\n    if (!logFunc) {\n      return;\n    }\n\n    // log the message\n    if (logArgs.length > 0) {\n      logArgs[0] = this._formatTime() + ' [' + level.toUpperCase() + '] ' + logArgs[0];\n    }\n    try {\n      logFunc.apply(myConsole, logArgs);\n    } catch (e) {\n      // NOP - this seems a bit paranoid, because we've already checked that the error function exists,\n      // but some restrictive security settings in Internet Explorer may cause an Error when the function\n      // is called. Our logger should not produce additional errors #249626.\n    }\n  }\n\n  _formatTime() {\n    let date = new Date();\n    return strings.padZeroLeft(date.getHours(), 2) + ':' +\n      strings.padZeroLeft(date.getMinutes(), 2) + ':' +\n      strings.padZeroLeft(date.getSeconds(), 2) + '.' +\n      strings.padZeroLeft(date.getMilliseconds(), 3);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,OAAO,EAAEC,OAAO,QAAO,UAAU;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,UAAU,CAAC;EAE9BC,WAAW,GAAG,CACd;EAEAC,KAAK,GAAG;IACN;EAAA;EAGFC,KAAK,GAAG;IACN;EAAA;EAGFC,IAAI,GAAa;IAAA,kCAATC,OAAO;MAAPA,OAAO;IAAA;IACb,IAAI,CAACC,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;EAC5B;EAEAE,IAAI,GAAa;IAAA,mCAATF,OAAO;MAAPA,OAAO;IAAA;IACb,IAAI,CAACC,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;EAC5B;EAEAG,KAAK,GAAa;IAAA,mCAATH,OAAO;MAAPA,OAAO;IAAA;IACd,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC;EAC7B;EAEAI,KAAK,GAAa;IAAA,mCAATJ,OAAO;MAAPA,OAAO;IAAA;IACd,IAAI,CAACC,IAAI,CAAC,OAAO,EAAED,OAAO,CAAC;EAC7B;EAEAK,YAAY,GAAG;IACb,OAAO,KAAK;EACd;EAEAC,cAAc,GAAG;IACf,OAAO,KAAK;EACd;EAEAC,cAAc,GAAG;IACf,OAAO,KAAK;EACd;EAEAC,aAAa,GAAG;IACd,OAAO,KAAK;EACd;EAEAC,aAAa,GAAG;IACd,OAAO,KAAK;EACd;EAEAC,cAAc,GAAG;IACf,OAAO,KAAK;EACd;EAEAC,cAAc,GAAG;IACf,OAAO,KAAK;EACd;EAEAV,IAAI,CAACW,KAAK,EAAEZ,OAAO,EAAE;IACnB;IACA,IAAIa,SAAS,GAAGpB,OAAO,CAACqB,WAAW,CAACC,MAAM,EAAE,SAAS,CAAC;IACtD,IAAI,CAACF,SAAS,EAAE;MACd;IACF;;IAEA;IACA,IAAIG,QAAQ;IACZ,IAAI,OAAO,KAAKJ,KAAK,EAAE;MACrBI,QAAQ,GAAG,OAAO;IACpB,CAAC,MAAM;MACLA,QAAQ,GAAGJ,KAAK;IAClB;;IAEA;IACA,IAAIK,OAAO,GAAGJ,SAAS,CAACG,QAAQ,CAAC;IACjC,IAAI,CAACC,OAAO,EAAE;MACZ;IACF;;IAEA;IACA,IAAIjB,OAAO,CAACkB,MAAM,GAAG,CAAC,EAAE;MACtBlB,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAACmB,WAAW,EAAE,GAAG,IAAI,GAAGP,KAAK,CAACQ,WAAW,EAAE,GAAG,IAAI,GAAGpB,OAAO,CAAC,CAAC,CAAC;IAClF;IACA,IAAI;MACFiB,OAAO,CAACI,KAAK,CAACR,SAAS,EAAEb,OAAO,CAAC;IACnC,CAAC,CAAC,OAAOsB,CAAC,EAAE;MACV;MACA;MACA;IAAA;EAEJ;EAEAH,WAAW,GAAG;IACZ,IAAII,IAAI,GAAG,IAAIC,IAAI,EAAE;IACrB,OAAO9B,OAAO,CAAC+B,WAAW,CAACF,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAClDhC,OAAO,CAAC+B,WAAW,CAACF,IAAI,CAACI,UAAU,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAC/CjC,OAAO,CAAC+B,WAAW,CAACF,IAAI,CAACK,UAAU,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAC/ClC,OAAO,CAAC+B,WAAW,CAACF,IAAI,CAACM,eAAe,EAAE,EAAE,CAAC,CAAC;EAClD;AACF"},"metadata":{},"sourceType":"module"}