{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, arrays, BooleanColumn, Column, ColumnUserFilter, defaultValues, ModelAdapter, objects, scout, Table, TableUserFilter } from '../index';\nimport $ from 'jquery';\nexport default class TableAdapter extends ModelAdapter {\n  constructor() {\n    super();\n    this._addRemoteProperties(['contextColumn']);\n  }\n  _initProperties(model) {\n    super._initProperties(model);\n    model.compactHandler = null; // Disable Scout JS compact handling, will be done on the server\n  }\n\n  _postCreateWidget() {\n    // if a newly created table has already a userfilter defined, we need to fire the filter event after creation\n    // because the original event had been fired before the eventhandler was registered.\n    if (this.widget.hasUserFilter()) {\n      this._onWidgetFilter();\n    }\n  }\n  _sendRowsSelected(rowIds, debounceSend) {\n    let eventData = {\n      rowIds: rowIds\n    };\n\n    // send delayed to avoid a lot of requests while selecting\n    // coalesce: only send the latest selection changed event for a field\n    this._send('rowsSelected', eventData, {\n      delay: debounceSend ? 250 : 0,\n      coalesce: function (previous) {\n        return this.target === previous.target && this.type === previous.type;\n      }\n    });\n  }\n  _sendRowClick(rowId, mouseButton, columnId) {\n    let data = {\n      rowId: rowId,\n      columnId: columnId,\n      mouseButton: mouseButton\n    };\n    this._send('rowClick', data);\n  }\n  _onWidgetRowsSelected(event) {\n    let rowIds = this.widget._rowsToIds(this.widget.selectedRows);\n    this._sendRowsSelected(rowIds, event.debounce);\n  }\n  _onWidgetRowClick(event) {\n    let columnId;\n    if (event.column !== undefined) {\n      columnId = event.column.id;\n    }\n    this._sendRowClick(event.row.id, event.mouseButton, columnId);\n  }\n  _onWidgetFilterAdded(event) {\n    let filter = event.filter;\n    if (!(filter instanceof TableUserFilter) || filter instanceof ColumnUserFilter && filter.column.guiOnly) {\n      return;\n    }\n    this._send('filterAdded', filter.createFilterAddedEventData());\n  }\n  _onWidgetFilterRemoved(event) {\n    let filter = event.filter;\n    if (!(filter instanceof TableUserFilter) || filter instanceof ColumnUserFilter && filter.column.guiOnly) {\n      return;\n    }\n    this._send('filterRemoved', filter.createFilterRemovedEventData());\n  }\n  _onWidgetColumnResized(event) {\n    this._sendColumnResized(event.column);\n  }\n  _sendColumnResized(column) {\n    if (column.fixedWidth || column.guiOnly || this.widget.autoResizeColumns) {\n      return;\n    }\n    let eventData = {\n      columnId: column.id,\n      width: column.width\n    };\n\n    // send delayed to avoid a lot of requests while resizing\n    // coalesce: only send the latest resize event for a column\n    this._send('columnResized', eventData, {\n      delay: 750,\n      coalesce: function (previous) {\n        return this.target === previous.target && this.type === previous.type && this.columnId === previous.columnId;\n      },\n      showBusyIndicator: false\n    });\n  }\n  _onWidgetAggregationFunctionChanged(event) {\n    this._sendAggregationFunctionChanged(event.column);\n  }\n  _sendAggregationFunctionChanged(column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      aggregationFunction: column.aggregationFunction\n    };\n    this._send('aggregationFunctionChanged', data);\n  }\n  _onWidgetColumnBackgroundEffectChanged(event) {\n    this._sendColumnBackgroundEffectChanged(event.column);\n  }\n  _sendColumnBackgroundEffectChanged(column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      backgroundEffect: column.backgroundEffect\n    };\n    this._send('columnBackgroundEffectChanged', data);\n  }\n  _onWidgetColumnOrganizeAction(event) {\n    this._send('columnOrganizeAction', {\n      action: event.action,\n      columnId: event.column.id\n    });\n  }\n  _onWidgetColumnMoved(event) {\n    let index = event.newPos;\n    this.widget.columns.forEach((iteratingColumn, i) => {\n      // Adjust index if column is only known on the gui\n      if (iteratingColumn.guiOnly) {\n        index--;\n      }\n    });\n    this._sendColumnMoved(event.column, index);\n  }\n  _sendColumnMoved(column, index) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      index: index\n    };\n    this._send('columnMoved', data);\n  }\n  _onWidgetPrepareCellEdit(event) {\n    event.preventDefault();\n    this._sendPrepareCellEdit(event.row, event.column);\n  }\n  _sendPrepareCellEdit(row, column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      rowId: row.id,\n      columnId: column.id\n    };\n    this._send('prepareCellEdit', data);\n  }\n  _onWidgetCompleteCellEdit(event) {\n    event.preventDefault();\n    this._sendCompleteCellEdit();\n  }\n  _sendCompleteCellEdit() {\n    this._send('completeCellEdit');\n  }\n  _onWidgetCancelCellEdit(event) {\n    event.preventDefault();\n    this._sendCancelCellEdit();\n  }\n  _sendCancelCellEdit() {\n    this._send('cancelCellEdit');\n  }\n  _onWidgetRowsChecked(event) {\n    this._sendRowsChecked(event.rows);\n  }\n  _sendRowsChecked(rows) {\n    let data = {\n      rows: []\n    };\n    for (let i = 0; i < rows.length; i++) {\n      data.rows.push({\n        rowId: rows[i].id,\n        checked: rows[i].checked\n      });\n    }\n    this._send('rowsChecked', data);\n  }\n  _onWidgetRowsExpanded(event) {\n    this._sendRowsExpanded(event.rows);\n  }\n  _sendRowsExpanded(rows) {\n    let data = {\n      rows: rows.map(row => {\n        return {\n          rowId: row.id,\n          expanded: row.expanded\n        };\n      })\n    };\n    this._send('rowsExpanded', data);\n  }\n  _onWidgetFilter(event) {\n    let rowIds = this.widget._rowsToIds(this.widget.filteredRows());\n    this._sendFilter(rowIds);\n  }\n  _sendFilter(rowIds) {\n    let eventData = {};\n    if (rowIds.length === this.widget.rows.length) {\n      eventData.remove = true;\n    } else {\n      eventData.rowIds = rowIds;\n    }\n\n    // send with timeout, mainly for incremental load of a large table\n    // coalesce: only send last event (don't coalesce remove and 'add' events, the UI server needs both)\n    this._send('filter', eventData, {\n      delay: 250,\n      coalesce: function (previous) {\n        return this.target === previous.target && this.type === previous.type && this.remove === previous.remove;\n      },\n      showBusyIndicator: false\n    });\n  }\n  _onWidgetSort(event) {\n    if (event.column.guiOnly) {\n      return;\n    }\n    this._send('sort', {\n      columnId: event.column.id,\n      sortAscending: event.sortAscending,\n      sortingRemoved: event.sortingRemoved,\n      multiSort: event.multiSort,\n      sortingRequested: event.sortingRequested\n    });\n  }\n  _onWidgetGroup(event) {\n    if (event.column.guiOnly) {\n      return;\n    }\n    this._send('group', {\n      columnId: event.column.id,\n      groupAscending: event.groupAscending,\n      groupingRemoved: event.groupingRemoved,\n      multiGroup: event.multiGroup,\n      groupingRequested: event.groupingRequested\n    });\n  }\n  _onWidgetRowAction(event) {\n    this._sendRowAction(event.row, event.column);\n  }\n  _sendRowAction(row, column) {\n    if (column.guiOnly) {\n      // Send row action with a real column\n      // If there is only one guiOnly column (e.g. CompactColumn), sent column will be null\n      column = arrays.find(this.columns, col => {\n        return !col.guiOnly;\n      });\n    }\n    let columnId = column ? column.id : null;\n    this._send('rowAction', {\n      rowId: row.id,\n      columnId: columnId\n    });\n  }\n  _onWidgetAppLinkAction(event) {\n    this._sendAppLinkAction(event.column, event.ref);\n  }\n  _sendAppLinkAction(column, ref) {\n    this._send('appLinkAction', {\n      columnId: column.id,\n      ref: ref\n    });\n  }\n  _sendContextColumn(contextColumn) {\n    if (contextColumn.guiOnly) {\n      contextColumn = null;\n      this.widget.contextColumn = null;\n    }\n    let columnId = null;\n    if (contextColumn) {\n      columnId = contextColumn.id;\n    }\n    this._send('property', {\n      contextColumn: columnId\n    });\n  }\n  _onWidgetReload(event) {\n    let data = {\n      reloadReason: event.reloadReason\n    };\n    this._send('reload', data);\n  }\n  _onWidgetExportToClipboard(event) {\n    this._send('clipboardExport');\n    event.preventDefault();\n  }\n  _onWidgetEvent(event) {\n    if (event.type === 'rowsSelected') {\n      this._onWidgetRowsSelected(event);\n    } else if (event.type === 'rowsChecked') {\n      this._onWidgetRowsChecked(event);\n    } else if (event.type === 'rowsExpanded') {\n      this._onWidgetRowsExpanded(event);\n    } else if (event.type === 'filter') {\n      this._onWidgetFilter(event);\n    } else if (event.type === 'sort') {\n      this._onWidgetSort(event);\n    } else if (event.type === 'group') {\n      this._onWidgetGroup(event);\n    } else if (event.type === 'rowClick') {\n      this._onWidgetRowClick(event);\n    } else if (event.type === 'rowAction') {\n      this._onWidgetRowAction(event);\n    } else if (event.type === 'prepareCellEdit') {\n      this._onWidgetPrepareCellEdit(event);\n    } else if (event.type === 'completeCellEdit') {\n      this._onWidgetCompleteCellEdit(event);\n    } else if (event.type === 'cancelCellEdit') {\n      this._onWidgetCancelCellEdit(event);\n    } else if (event.type === 'appLinkAction') {\n      this._onWidgetAppLinkAction(event);\n    } else if (event.type === 'clipboardExport') {\n      this._onWidgetExportToClipboard(event);\n    } else if (event.type === 'reload') {\n      this._onWidgetReload(event);\n    } else if (event.type === 'filterAdded') {\n      this._onWidgetFilterAdded(event);\n    } else if (event.type === 'filterRemoved') {\n      this._onWidgetFilterRemoved(event);\n    } else if (event.type === 'columnResized') {\n      this._onWidgetColumnResized(event);\n    } else if (event.type === 'columnMoved') {\n      this._onWidgetColumnMoved(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onWidgetColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'columnOrganizeAction') {\n      this._onWidgetColumnOrganizeAction(event);\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onWidgetAggregationFunctionChanged(event);\n    } else if (event.type === 'drop' && this.widget.dragAndDropHandler) {\n      this.widget.dragAndDropHandler.uploadFiles(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n  _onRowsInserted(rows) {\n    this.widget.insertRows(rows);\n    this._rebuildingTable = false;\n  }\n  _onRowsDeleted(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteRows(rows);\n  }\n  _onAllRowsDeleted() {\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteAllRows();\n  }\n  _onRowsUpdated(rows) {\n    this.widget.updateRows(rows);\n  }\n  _onRowsSelected(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.selectRows(rows);\n    // TODO [7.0] cgu what is this for? seems wrong here\n    this.widget.selectionHandler.clearLastSelectedRowMarker();\n  }\n  _onRowsChecked(rows) {\n    let checkedRows = [],\n      uncheckedRows = [];\n    rows.forEach(function (rowData) {\n      let row = this.widget._rowById(rowData.id);\n      if (rowData.checked) {\n        checkedRows.push(row);\n      } else {\n        uncheckedRows.push(row);\n      }\n    }, this);\n    this.addFilterForWidgetEventType('rowsChecked');\n    this.widget.checkRows(checkedRows, {\n      checked: true,\n      checkOnlyEnabled: false\n    });\n    this.widget.uncheckRows(uncheckedRows, {\n      checkOnlyEnabled: false\n    });\n  }\n  _onRowsExpanded(rows) {\n    let expandedRows = [],\n      collapsedRows = [];\n    rows.forEach(function (rowData) {\n      let row = this.widget._rowById(rowData.id);\n      if (rowData.expanded) {\n        expandedRows.push(row);\n      } else {\n        collapsedRows.push(row);\n      }\n    }, this);\n    this.addFilterForWidgetEventType('rowsExpanded');\n    this.widget.expandRows(expandedRows);\n    this.widget.collapseRows(collapsedRows);\n  }\n  _onRowOrderChanged(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.widget.updateRowOrder(rows);\n  }\n  _onColumnStructureChanged(columns) {\n    this._rebuildingTable = true;\n    this.widget.updateColumnStructure(columns);\n  }\n  _onColumnOrderChanged(columnIds) {\n    let columns = this.widget.columnsByIds(columnIds);\n    this.widget.updateColumnOrder(columns);\n  }\n  _onColumnHeadersUpdated(columns) {\n    columns.forEach(column => {\n      defaultValues.applyTo(column);\n    });\n    this.widget.updateColumnHeaders(columns);\n    if (this.widget.tileMode && this.widget.tableTileGridMediator) {\n      // grouping might have changed, trigger reinit of the groups on the tileGrid in tileMode\n      this.widget.tableTileGridMediator._onTableGroup();\n      // removing of a group column doesn't cause a rowOrderChange, nonetheless aggregation columns might need to be removed.\n      this.widget.updateRowOrder(this.widget.rows);\n    }\n  }\n  _onStartCellEdit(columnId, rowId, fieldId) {\n    let column = this.widget.columnById(columnId),\n      row = this.widget._rowById(rowId),\n      field = this.session.getOrCreateWidget(fieldId, this.widget);\n    this.widget.startCellEdit(column, row, field);\n  }\n  _onEndCellEdit(fieldId) {\n    let field = this.session.getModelAdapter(fieldId);\n    if (!field) {\n      throw new Error('Field adapter could not be resolved. Id: ' + fieldId);\n    }\n    this.widget.endCellEdit(field.widget);\n  }\n  _onRequestFocus() {\n    this.widget.focus();\n  }\n  _onScrollToSelection() {\n    this.widget.revealSelection();\n  }\n  _onColumnBackgroundEffectChanged(event) {\n    event.eventParts.forEach(function (eventPart) {\n      let column = this.widget.columnById(eventPart.columnId),\n        backgroundEffect = eventPart.backgroundEffect;\n      this.addFilterForWidgetEvent(widgetEvent => {\n        return widgetEvent.type === 'columnBackgroundEffectChanged' && widgetEvent.column.id === column.id && widgetEvent.column.backgroundEffect === backgroundEffect;\n      });\n      column.setBackgroundEffect(backgroundEffect);\n    }, this);\n  }\n  _onRequestFocusInCell(event) {\n    let row = this.widget._rowById(event.rowId),\n      column = this.widget.columnById(event.columnId);\n    this.widget.focusCell(column, row);\n  }\n  _onAggregationFunctionChanged(event) {\n    let columns = [],\n      functions = [];\n    event.eventParts.forEach(function (eventPart) {\n      let func = eventPart.aggregationFunction,\n        column = this.widget.columnById(eventPart.columnId);\n      this.addFilterForWidgetEvent(widgetEvent => {\n        return widgetEvent.type === 'aggregationFunctionChanged' && widgetEvent.column.id === column.id && widgetEvent.column.aggregationFunction === func;\n      });\n      columns.push(column);\n      functions.push(func);\n    }, this);\n    this.widget.changeAggregations(columns, functions);\n  }\n  _onFiltersChanged(filters) {\n    this.addFilterForWidgetEventType('filterAdded');\n    this.addFilterForWidgetEventType('filterRemoved');\n    this.widget.setFilters(filters);\n    // do not refilter while the table is being rebuilt (because column.index in filter and row.cells may be inconsistent)\n    if (!this._rebuildingTable) {\n      this.widget.filter();\n    }\n  }\n  onModelAction(event) {\n    if (event.type === 'rowsInserted') {\n      this._onRowsInserted(event.rows);\n    } else if (event.type === 'rowsDeleted') {\n      this._onRowsDeleted(event.rowIds);\n    } else if (event.type === 'allRowsDeleted') {\n      this._onAllRowsDeleted();\n    } else if (event.type === 'rowsSelected') {\n      this._onRowsSelected(event.rowIds);\n    } else if (event.type === 'rowOrderChanged') {\n      this._onRowOrderChanged(event.rowIds);\n    } else if (event.type === 'rowsUpdated') {\n      this._onRowsUpdated(event.rows);\n    } else if (event.type === 'filtersChanged') {\n      this._onFiltersChanged(event.filters);\n    } else if (event.type === 'rowsChecked') {\n      this._onRowsChecked(event.rows);\n    } else if (event.type === 'rowsExpanded') {\n      this._onRowsExpanded(event.rows);\n    } else if (event.type === 'columnStructureChanged') {\n      this._onColumnStructureChanged(event.columns);\n    } else if (event.type === 'columnOrderChanged') {\n      this._onColumnOrderChanged(event.columnIds);\n    } else if (event.type === 'columnHeadersUpdated') {\n      this._onColumnHeadersUpdated(event.columns);\n    } else if (event.type === 'startCellEdit') {\n      this._onStartCellEdit(event.columnId, event.rowId, event.fieldId);\n    } else if (event.type === 'endCellEdit') {\n      this._onEndCellEdit(event.fieldId);\n    } else if (event.type === 'requestFocus') {\n      this._onRequestFocus();\n    } else if (event.type === 'scrollToSelection') {\n      this._onScrollToSelection();\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onAggregationFunctionChanged(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'requestFocusInCell') {\n      this._onRequestFocusInCell(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  exportAdapterData(adapterData) {\n    adapterData = super.exportAdapterData(adapterData);\n    delete adapterData.selectedRows;\n    adapterData.rows = [];\n    adapterData.columns.forEach(column => {\n      delete column.classId;\n      delete column.modelClass;\n    });\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Table.\n   */\n  static modifyTablePrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _sortAfterInsert\n    objects.replacePrototypeFunction(Table, '_sortAfterInsert', function (wasEmpty) {\n      if (this.modelAdapter) {\n        // There will only be a row order changed event if table was not empty.\n        // If it was empty, there will be NO row order changed event (tableEventBuffer) -> inserted rows are already in correct order -> no sort necessary but group is\n        if (wasEmpty) {\n          this._group();\n        }\n      } else {\n        this._sortAfterInsertOrig(wasEmpty);\n      }\n    }, true);\n\n    // _sortAfterUpdate\n    objects.replacePrototypeFunction(Table, '_sortAfterUpdate', function () {\n      if (this.modelAdapter) {\n        this._group();\n      } else {\n        this._sortAfterUpdateOrig();\n      }\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Table, '_isSortingPossible', function (sortColumns) {\n      if (this.modelAdapter) {\n        // In a JS only app the flag 'uiSortPossible' is never set and thus defaults to true. Additionally we check if each column can install\n        // its comparator used to sort. If installation failed for some reason, sorting is not possible. In a remote app the server sets the\n        // 'uiSortPossible' flag, which decides if the column must be sorted by the server or can be sorted by the client.\n        let uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this._isSortingPossibleOrig(sortColumns);\n      }\n      return this._isSortingPossibleOrig(sortColumns);\n    }, true);\n\n    // sort\n    objects.replacePrototypeFunction(Table, 'sort', function (column, direction, multiSort, remove) {\n      if (this.modelAdapter && column.guiOnly) {\n        return;\n      }\n      this.sortOrig(column, direction, multiSort, remove);\n    }, true);\n\n    // no js default tileTableHeader in classic mode\n    objects.replacePrototypeFunction(Table, '_createTileTableHeader', function () {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this._createTileTableHeaderOrig();\n    }, true);\n\n    // not used in classic mode since tiles are created by the server\n    objects.replacePrototypeFunction(Table, 'createTiles', function (rows) {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this.createTilesOrig(rows);\n    }, true);\n  }\n  static modifyColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // init\n    objects.replacePrototypeFunction(Column, 'init', function (model) {\n      if (model.table && model.table.modelAdapter) {\n        // Fill in the missing default values only in remote case, don't do it JS case to not accidentally set undefined properties (e.g. uiSortEnabled)\n        model = $.extend({}, model);\n        defaultValues.applyTo(model);\n      }\n      this.initOrig(model);\n    }, true);\n\n    // _ensureCell\n    objects.replacePrototypeFunction(Column, '_ensureCell', function (vararg) {\n      if (this.table.modelAdapter) {\n        // Note: we do almost the same thing as in _ensureCellOrig, the difference is that\n        // we treat a plain object always as cell-model and we always must apply defaultValues\n        // to this cell model. In the JS only case a plain-object has no special meaning and\n        // can be used as cell-value in the same way as a scalar value. Also we must not apply\n        // defaultValues in JS only case, because it would destroy the 'undefined' state of the\n        // cell properties, which is required because the Column checks, whether it should apply\n        // defaults from the Column instance to a cell, or use the values from the cell.\n        let model;\n        if (objects.isPlainObject(vararg)) {\n          model = vararg;\n          model.value = this._parseValue(model.value);\n          // Parse the value if a text but no value is provided. The server does only set the text if value and text are equal.\n          // It is also necessary for custom columns which don't have a UI representation and never send the value.\n          // Do not parse the value if there is an error status.\n          // If editing fails, the display text will be the user input, the value unchanged, and the server will set the error status.\n          if (model.text && model.value === undefined && !model.errorStatus) {\n            model.value = this._parseValue(model.text);\n          }\n          // use null instead of undefined\n          if (model.value === undefined) {\n            model.value = null;\n          }\n        } else {\n          model = {\n            value: this._parseValue(vararg)\n          };\n        }\n        defaultValues.applyTo(model, 'Cell');\n        return scout.create('Cell', model);\n      }\n      return this._ensureCellOrig(vararg);\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Column, 'isSortingPossible', function () {\n      if (this.table.modelAdapter) {\n        // Returns whether or not this column can be used to sort on the client side. In a JS only app the flag 'uiSortPossible'\n        // is never set and defaults to true. As a side effect of this function a comparator is installed.\n        // The comparator returns false if it could not be installed which means sorting should be delegated to server (e.g. collator is not available).\n        // In a remote app the server sets the 'uiSortPossible' flag, which decides if the column must be sorted by the\n        // server or can be sorted by the client.\n        let uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this.installComparator();\n      }\n      return this.isSortingPossibleOrig();\n    }, true);\n  }\n  static modifyBooleanColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _toggleCellValue\n    objects.replacePrototypeFunction(BooleanColumn, '_toggleCellValue', function (row, cell) {\n      if (this.table.modelAdapter) {\n        // NOP - do nothing, since server will handle the click, see Java AbstractTable#interceptRowClickSingleObserver\n      } else {\n        this._toggleCellValueOrig(row, cell);\n      }\n    }, true);\n  }\n}\nApp.addListener('bootstrap', TableAdapter.modifyTablePrototype);\nApp.addListener('bootstrap', TableAdapter.modifyColumnPrototype);\nApp.addListener('bootstrap', TableAdapter.modifyBooleanColumnPrototype);","map":{"version":3,"names":["App","arrays","BooleanColumn","Column","ColumnUserFilter","defaultValues","ModelAdapter","objects","scout","Table","TableUserFilter","$","TableAdapter","constructor","_addRemoteProperties","_initProperties","model","compactHandler","_postCreateWidget","widget","hasUserFilter","_onWidgetFilter","_sendRowsSelected","rowIds","debounceSend","eventData","_send","delay","coalesce","previous","target","type","_sendRowClick","rowId","mouseButton","columnId","data","_onWidgetRowsSelected","event","_rowsToIds","selectedRows","debounce","_onWidgetRowClick","column","undefined","id","row","_onWidgetFilterAdded","filter","guiOnly","createFilterAddedEventData","_onWidgetFilterRemoved","createFilterRemovedEventData","_onWidgetColumnResized","_sendColumnResized","fixedWidth","autoResizeColumns","width","showBusyIndicator","_onWidgetAggregationFunctionChanged","_sendAggregationFunctionChanged","aggregationFunction","_onWidgetColumnBackgroundEffectChanged","_sendColumnBackgroundEffectChanged","backgroundEffect","_onWidgetColumnOrganizeAction","action","_onWidgetColumnMoved","index","newPos","columns","forEach","iteratingColumn","i","_sendColumnMoved","_onWidgetPrepareCellEdit","preventDefault","_sendPrepareCellEdit","_onWidgetCompleteCellEdit","_sendCompleteCellEdit","_onWidgetCancelCellEdit","_sendCancelCellEdit","_onWidgetRowsChecked","_sendRowsChecked","rows","length","push","checked","_onWidgetRowsExpanded","_sendRowsExpanded","map","expanded","filteredRows","_sendFilter","remove","_onWidgetSort","sortAscending","sortingRemoved","multiSort","sortingRequested","_onWidgetGroup","groupAscending","groupingRemoved","multiGroup","groupingRequested","_onWidgetRowAction","_sendRowAction","find","col","_onWidgetAppLinkAction","_sendAppLinkAction","ref","_sendContextColumn","contextColumn","_onWidgetReload","reloadReason","_onWidgetExportToClipboard","_onWidgetEvent","dragAndDropHandler","uploadFiles","_onRowsInserted","insertRows","_rebuildingTable","_onRowsDeleted","_rowsByIds","addFilterForWidgetEventType","deleteRows","_onAllRowsDeleted","deleteAllRows","_onRowsUpdated","updateRows","_onRowsSelected","selectRows","selectionHandler","clearLastSelectedRowMarker","_onRowsChecked","checkedRows","uncheckedRows","rowData","_rowById","checkRows","checkOnlyEnabled","uncheckRows","_onRowsExpanded","expandedRows","collapsedRows","expandRows","collapseRows","_onRowOrderChanged","updateRowOrder","_onColumnStructureChanged","updateColumnStructure","_onColumnOrderChanged","columnIds","columnsByIds","updateColumnOrder","_onColumnHeadersUpdated","applyTo","updateColumnHeaders","tileMode","tableTileGridMediator","_onTableGroup","_onStartCellEdit","fieldId","columnById","field","session","getOrCreateWidget","startCellEdit","_onEndCellEdit","getModelAdapter","Error","endCellEdit","_onRequestFocus","focus","_onScrollToSelection","revealSelection","_onColumnBackgroundEffectChanged","eventParts","eventPart","addFilterForWidgetEvent","widgetEvent","setBackgroundEffect","_onRequestFocusInCell","focusCell","_onAggregationFunctionChanged","functions","func","changeAggregations","_onFiltersChanged","filters","setFilters","onModelAction","exportAdapterData","adapterData","classId","modelClass","modifyTablePrototype","get","remote","replacePrototypeFunction","wasEmpty","modelAdapter","_group","_sortAfterInsertOrig","_sortAfterUpdateOrig","sortColumns","uiSortPossible","nvl","_isSortingPossibleOrig","direction","sortOrig","_createTileTableHeaderOrig","createTilesOrig","modifyColumnPrototype","table","extend","initOrig","vararg","isPlainObject","value","_parseValue","text","errorStatus","create","_ensureCellOrig","installComparator","isSortingPossibleOrig","modifyBooleanColumnPrototype","cell","_toggleCellValueOrig","addListener"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, arrays, BooleanColumn, Column, ColumnUserFilter, defaultValues, ModelAdapter, objects, scout, Table, TableUserFilter} from '../index';\nimport $ from 'jquery';\n\nexport default class TableAdapter extends ModelAdapter {\n\n  constructor() {\n    super();\n    this._addRemoteProperties(['contextColumn']);\n  }\n\n  _initProperties(model) {\n    super._initProperties(model);\n    model.compactHandler = null; // Disable Scout JS compact handling, will be done on the server\n  }\n\n  _postCreateWidget() {\n    // if a newly created table has already a userfilter defined, we need to fire the filter event after creation\n    // because the original event had been fired before the eventhandler was registered.\n    if (this.widget.hasUserFilter()) {\n      this._onWidgetFilter();\n    }\n  }\n\n  _sendRowsSelected(rowIds, debounceSend) {\n    let eventData = {\n      rowIds: rowIds\n    };\n\n    // send delayed to avoid a lot of requests while selecting\n    // coalesce: only send the latest selection changed event for a field\n    this._send('rowsSelected', eventData, {\n      delay: debounceSend ? 250 : 0,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type;\n      }\n    });\n  }\n\n  _sendRowClick(rowId, mouseButton, columnId) {\n    let data = {\n      rowId: rowId,\n      columnId: columnId,\n      mouseButton: mouseButton\n    };\n    this._send('rowClick', data);\n  }\n\n  _onWidgetRowsSelected(event) {\n    let rowIds = this.widget._rowsToIds(this.widget.selectedRows);\n    this._sendRowsSelected(rowIds, event.debounce);\n  }\n\n  _onWidgetRowClick(event) {\n    let columnId;\n    if (event.column !== undefined) {\n      columnId = event.column.id;\n    }\n\n    this._sendRowClick(event.row.id, event.mouseButton, columnId);\n  }\n\n  _onWidgetFilterAdded(event) {\n    let filter = event.filter;\n    if (!(filter instanceof TableUserFilter) || (filter instanceof ColumnUserFilter && filter.column.guiOnly)) {\n      return;\n    }\n    this._send('filterAdded', filter.createFilterAddedEventData());\n  }\n\n  _onWidgetFilterRemoved(event) {\n    let filter = event.filter;\n    if (!(filter instanceof TableUserFilter) || (filter instanceof ColumnUserFilter && filter.column.guiOnly)) {\n      return;\n    }\n    this._send('filterRemoved', filter.createFilterRemovedEventData());\n  }\n\n  _onWidgetColumnResized(event) {\n    this._sendColumnResized(event.column);\n  }\n\n  _sendColumnResized(column) {\n    if (column.fixedWidth || column.guiOnly || this.widget.autoResizeColumns) {\n      return;\n    }\n\n    let eventData = {\n      columnId: column.id,\n      width: column.width\n    };\n\n    // send delayed to avoid a lot of requests while resizing\n    // coalesce: only send the latest resize event for a column\n    this._send('columnResized', eventData, {\n      delay: 750,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type && this.columnId === previous.columnId;\n      },\n      showBusyIndicator: false\n    });\n  }\n\n  _onWidgetAggregationFunctionChanged(event) {\n    this._sendAggregationFunctionChanged(event.column);\n  }\n\n  _sendAggregationFunctionChanged(column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      aggregationFunction: column.aggregationFunction\n    };\n    this._send('aggregationFunctionChanged', data);\n  }\n\n  _onWidgetColumnBackgroundEffectChanged(event) {\n    this._sendColumnBackgroundEffectChanged(event.column);\n  }\n\n  _sendColumnBackgroundEffectChanged(column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      backgroundEffect: column.backgroundEffect\n    };\n    this._send('columnBackgroundEffectChanged', data);\n  }\n\n  _onWidgetColumnOrganizeAction(event) {\n    this._send('columnOrganizeAction', {\n      action: event.action,\n      columnId: event.column.id\n    });\n  }\n\n  _onWidgetColumnMoved(event) {\n    let index = event.newPos;\n    this.widget.columns.forEach((iteratingColumn, i) => {\n      // Adjust index if column is only known on the gui\n      if (iteratingColumn.guiOnly) {\n        index--;\n      }\n    });\n    this._sendColumnMoved(event.column, index);\n  }\n\n  _sendColumnMoved(column, index) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      columnId: column.id,\n      index: index\n    };\n    this._send('columnMoved', data);\n  }\n\n  _onWidgetPrepareCellEdit(event) {\n    event.preventDefault();\n    this._sendPrepareCellEdit(event.row, event.column);\n  }\n\n  _sendPrepareCellEdit(row, column) {\n    if (column.guiOnly) {\n      return;\n    }\n    let data = {\n      rowId: row.id,\n      columnId: column.id\n    };\n    this._send('prepareCellEdit', data);\n  }\n\n  _onWidgetCompleteCellEdit(event) {\n    event.preventDefault();\n    this._sendCompleteCellEdit();\n  }\n\n  _sendCompleteCellEdit() {\n    this._send('completeCellEdit');\n  }\n\n  _onWidgetCancelCellEdit(event) {\n    event.preventDefault();\n    this._sendCancelCellEdit();\n  }\n\n  _sendCancelCellEdit() {\n    this._send('cancelCellEdit');\n  }\n\n  _onWidgetRowsChecked(event) {\n    this._sendRowsChecked(event.rows);\n  }\n\n  _sendRowsChecked(rows) {\n    let data = {\n      rows: []\n    };\n\n    for (let i = 0; i < rows.length; i++) {\n      data.rows.push({\n        rowId: rows[i].id,\n        checked: rows[i].checked\n      });\n    }\n\n    this._send('rowsChecked', data);\n  }\n\n  _onWidgetRowsExpanded(event) {\n    this._sendRowsExpanded(event.rows);\n  }\n\n  _sendRowsExpanded(rows) {\n    let data = {\n      rows: rows.map(row => {\n        return {\n          rowId: row.id,\n          expanded: row.expanded\n        };\n      })\n    };\n    this._send('rowsExpanded', data);\n  }\n\n  _onWidgetFilter(event) {\n    let rowIds = this.widget._rowsToIds(this.widget.filteredRows());\n    this._sendFilter(rowIds);\n  }\n\n  _sendFilter(rowIds) {\n    let eventData = {};\n    if (rowIds.length === this.widget.rows.length) {\n      eventData.remove = true;\n    } else {\n      eventData.rowIds = rowIds;\n    }\n\n    // send with timeout, mainly for incremental load of a large table\n    // coalesce: only send last event (don't coalesce remove and 'add' events, the UI server needs both)\n    this._send('filter', eventData, {\n      delay: 250,\n      coalesce: function(previous) {\n        return this.target === previous.target && this.type === previous.type && this.remove === previous.remove;\n      },\n      showBusyIndicator: false\n    });\n  }\n\n  _onWidgetSort(event) {\n    if (event.column.guiOnly) {\n      return;\n    }\n    this._send('sort', {\n      columnId: event.column.id,\n      sortAscending: event.sortAscending,\n      sortingRemoved: event.sortingRemoved,\n      multiSort: event.multiSort,\n      sortingRequested: event.sortingRequested\n    });\n  }\n\n  _onWidgetGroup(event) {\n    if (event.column.guiOnly) {\n      return;\n    }\n    this._send('group', {\n      columnId: event.column.id,\n      groupAscending: event.groupAscending,\n      groupingRemoved: event.groupingRemoved,\n      multiGroup: event.multiGroup,\n      groupingRequested: event.groupingRequested\n    });\n  }\n\n  _onWidgetRowAction(event) {\n    this._sendRowAction(event.row, event.column);\n  }\n\n  _sendRowAction(row, column) {\n    if (column.guiOnly) {\n      // Send row action with a real column\n      // If there is only one guiOnly column (e.g. CompactColumn), sent column will be null\n      column = arrays.find(this.columns, col => {\n        return !col.guiOnly;\n      });\n    }\n    let columnId = column ? column.id : null;\n    this._send('rowAction', {\n      rowId: row.id,\n      columnId: columnId\n    });\n  }\n\n  _onWidgetAppLinkAction(event) {\n    this._sendAppLinkAction(event.column, event.ref);\n  }\n\n  _sendAppLinkAction(column, ref) {\n    this._send('appLinkAction', {\n      columnId: column.id,\n      ref: ref\n    });\n  }\n\n  _sendContextColumn(contextColumn) {\n    if (contextColumn.guiOnly) {\n      contextColumn = null;\n      this.widget.contextColumn = null;\n    }\n    let columnId = null;\n    if (contextColumn) {\n      columnId = contextColumn.id;\n    }\n    this._send('property', {\n      contextColumn: columnId\n    });\n  }\n\n  _onWidgetReload(event) {\n    let data = {\n      reloadReason: event.reloadReason\n    };\n    this._send('reload', data);\n  }\n\n  _onWidgetExportToClipboard(event) {\n    this._send('clipboardExport');\n    event.preventDefault();\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'rowsSelected') {\n      this._onWidgetRowsSelected(event);\n    } else if (event.type === 'rowsChecked') {\n      this._onWidgetRowsChecked(event);\n    } else if (event.type === 'rowsExpanded') {\n      this._onWidgetRowsExpanded(event);\n    } else if (event.type === 'filter') {\n      this._onWidgetFilter(event);\n    } else if (event.type === 'sort') {\n      this._onWidgetSort(event);\n    } else if (event.type === 'group') {\n      this._onWidgetGroup(event);\n    } else if (event.type === 'rowClick') {\n      this._onWidgetRowClick(event);\n    } else if (event.type === 'rowAction') {\n      this._onWidgetRowAction(event);\n    } else if (event.type === 'prepareCellEdit') {\n      this._onWidgetPrepareCellEdit(event);\n    } else if (event.type === 'completeCellEdit') {\n      this._onWidgetCompleteCellEdit(event);\n    } else if (event.type === 'cancelCellEdit') {\n      this._onWidgetCancelCellEdit(event);\n    } else if (event.type === 'appLinkAction') {\n      this._onWidgetAppLinkAction(event);\n    } else if (event.type === 'clipboardExport') {\n      this._onWidgetExportToClipboard(event);\n    } else if (event.type === 'reload') {\n      this._onWidgetReload(event);\n    } else if (event.type === 'filterAdded') {\n      this._onWidgetFilterAdded(event);\n    } else if (event.type === 'filterRemoved') {\n      this._onWidgetFilterRemoved(event);\n    } else if (event.type === 'columnResized') {\n      this._onWidgetColumnResized(event);\n    } else if (event.type === 'columnMoved') {\n      this._onWidgetColumnMoved(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onWidgetColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'columnOrganizeAction') {\n      this._onWidgetColumnOrganizeAction(event);\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onWidgetAggregationFunctionChanged(event);\n    } else if (event.type === 'drop' && this.widget.dragAndDropHandler) {\n      this.widget.dragAndDropHandler.uploadFiles(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n\n  _onRowsInserted(rows) {\n    this.widget.insertRows(rows);\n    this._rebuildingTable = false;\n  }\n\n  _onRowsDeleted(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteRows(rows);\n  }\n\n  _onAllRowsDeleted() {\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.deleteAllRows();\n  }\n\n  _onRowsUpdated(rows) {\n    this.widget.updateRows(rows);\n  }\n\n  _onRowsSelected(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.addFilterForWidgetEventType('rowsSelected');\n    this.widget.selectRows(rows);\n    // TODO [7.0] cgu what is this for? seems wrong here\n    this.widget.selectionHandler.clearLastSelectedRowMarker();\n  }\n\n  _onRowsChecked(rows) {\n    let checkedRows = [],\n      uncheckedRows = [];\n\n    rows.forEach(function(rowData) {\n      let row = this.widget._rowById(rowData.id);\n      if (rowData.checked) {\n        checkedRows.push(row);\n      } else {\n        uncheckedRows.push(row);\n      }\n    }, this);\n\n    this.addFilterForWidgetEventType('rowsChecked');\n    this.widget.checkRows(checkedRows, {\n      checked: true,\n      checkOnlyEnabled: false\n    });\n    this.widget.uncheckRows(uncheckedRows, {\n      checkOnlyEnabled: false\n    });\n  }\n\n  _onRowsExpanded(rows) {\n    let expandedRows = [],\n      collapsedRows = [];\n    rows.forEach(function(rowData) {\n      let row = this.widget._rowById(rowData.id);\n      if (rowData.expanded) {\n        expandedRows.push(row);\n      } else {\n        collapsedRows.push(row);\n      }\n    }, this);\n    this.addFilterForWidgetEventType('rowsExpanded');\n\n    this.widget.expandRows(expandedRows);\n    this.widget.collapseRows(collapsedRows);\n  }\n\n  _onRowOrderChanged(rowIds) {\n    let rows = this.widget._rowsByIds(rowIds);\n    this.widget.updateRowOrder(rows);\n  }\n\n  _onColumnStructureChanged(columns) {\n    this._rebuildingTable = true;\n    this.widget.updateColumnStructure(columns);\n  }\n\n  _onColumnOrderChanged(columnIds) {\n    let columns = this.widget.columnsByIds(columnIds);\n    this.widget.updateColumnOrder(columns);\n  }\n\n  _onColumnHeadersUpdated(columns) {\n    columns.forEach(column => {\n      defaultValues.applyTo(column);\n    });\n    this.widget.updateColumnHeaders(columns);\n\n    if (this.widget.tileMode && this.widget.tableTileGridMediator) {\n      // grouping might have changed, trigger reinit of the groups on the tileGrid in tileMode\n      this.widget.tableTileGridMediator._onTableGroup();\n      // removing of a group column doesn't cause a rowOrderChange, nonetheless aggregation columns might need to be removed.\n      this.widget.updateRowOrder(this.widget.rows);\n    }\n  }\n\n  _onStartCellEdit(columnId, rowId, fieldId) {\n    let column = this.widget.columnById(columnId),\n      row = this.widget._rowById(rowId),\n      field = this.session.getOrCreateWidget(fieldId, this.widget);\n\n    this.widget.startCellEdit(column, row, field);\n  }\n\n  _onEndCellEdit(fieldId) {\n    let field = this.session.getModelAdapter(fieldId);\n    if (!field) {\n      throw new Error('Field adapter could not be resolved. Id: ' + fieldId);\n    }\n    this.widget.endCellEdit(field.widget);\n  }\n\n  _onRequestFocus() {\n    this.widget.focus();\n  }\n\n  _onScrollToSelection() {\n    this.widget.revealSelection();\n  }\n\n  _onColumnBackgroundEffectChanged(event) {\n    event.eventParts.forEach(function(eventPart) {\n      let column = this.widget.columnById(eventPart.columnId),\n        backgroundEffect = eventPart.backgroundEffect;\n\n      this.addFilterForWidgetEvent(widgetEvent => {\n        return (widgetEvent.type === 'columnBackgroundEffectChanged' &&\n          widgetEvent.column.id === column.id &&\n          widgetEvent.column.backgroundEffect === backgroundEffect);\n      });\n\n      column.setBackgroundEffect(backgroundEffect);\n    }, this);\n  }\n\n  _onRequestFocusInCell(event) {\n    let row = this.widget._rowById(event.rowId),\n      column = this.widget.columnById(event.columnId);\n\n    this.widget.focusCell(column, row);\n  }\n\n  _onAggregationFunctionChanged(event) {\n    let columns = [],\n      functions = [];\n\n    event.eventParts.forEach(function(eventPart) {\n      let func = eventPart.aggregationFunction,\n        column = this.widget.columnById(eventPart.columnId);\n\n      this.addFilterForWidgetEvent(widgetEvent => {\n        return (widgetEvent.type === 'aggregationFunctionChanged' &&\n          widgetEvent.column.id === column.id &&\n          widgetEvent.column.aggregationFunction === func);\n      });\n\n      columns.push(column);\n      functions.push(func);\n    }, this);\n\n    this.widget.changeAggregations(columns, functions);\n  }\n\n  _onFiltersChanged(filters) {\n    this.addFilterForWidgetEventType('filterAdded');\n    this.addFilterForWidgetEventType('filterRemoved');\n\n    this.widget.setFilters(filters);\n    // do not refilter while the table is being rebuilt (because column.index in filter and row.cells may be inconsistent)\n    if (!this._rebuildingTable) {\n      this.widget.filter();\n    }\n  }\n\n  onModelAction(event) {\n    if (event.type === 'rowsInserted') {\n      this._onRowsInserted(event.rows);\n    } else if (event.type === 'rowsDeleted') {\n      this._onRowsDeleted(event.rowIds);\n    } else if (event.type === 'allRowsDeleted') {\n      this._onAllRowsDeleted();\n    } else if (event.type === 'rowsSelected') {\n      this._onRowsSelected(event.rowIds);\n    } else if (event.type === 'rowOrderChanged') {\n      this._onRowOrderChanged(event.rowIds);\n    } else if (event.type === 'rowsUpdated') {\n      this._onRowsUpdated(event.rows);\n    } else if (event.type === 'filtersChanged') {\n      this._onFiltersChanged(event.filters);\n    } else if (event.type === 'rowsChecked') {\n      this._onRowsChecked(event.rows);\n    } else if (event.type === 'rowsExpanded') {\n      this._onRowsExpanded(event.rows);\n    } else if (event.type === 'columnStructureChanged') {\n      this._onColumnStructureChanged(event.columns);\n    } else if (event.type === 'columnOrderChanged') {\n      this._onColumnOrderChanged(event.columnIds);\n    } else if (event.type === 'columnHeadersUpdated') {\n      this._onColumnHeadersUpdated(event.columns);\n    } else if (event.type === 'startCellEdit') {\n      this._onStartCellEdit(event.columnId, event.rowId, event.fieldId);\n    } else if (event.type === 'endCellEdit') {\n      this._onEndCellEdit(event.fieldId);\n    } else if (event.type === 'requestFocus') {\n      this._onRequestFocus();\n    } else if (event.type === 'scrollToSelection') {\n      this._onScrollToSelection();\n    } else if (event.type === 'aggregationFunctionChanged') {\n      this._onAggregationFunctionChanged(event);\n    } else if (event.type === 'columnBackgroundEffectChanged') {\n      this._onColumnBackgroundEffectChanged(event);\n    } else if (event.type === 'requestFocusInCell') {\n      this._onRequestFocusInCell(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  exportAdapterData(adapterData) {\n    adapterData = super.exportAdapterData(adapterData);\n    delete adapterData.selectedRows;\n    adapterData.rows = [];\n    adapterData.columns.forEach(column => {\n      delete column.classId;\n      delete column.modelClass;\n    });\n    return adapterData;\n  }\n\n  /**\n   * Static method to modify the prototype of Table.\n   */\n  static modifyTablePrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _sortAfterInsert\n    objects.replacePrototypeFunction(Table, '_sortAfterInsert', function(wasEmpty) {\n      if (this.modelAdapter) {\n        // There will only be a row order changed event if table was not empty.\n        // If it was empty, there will be NO row order changed event (tableEventBuffer) -> inserted rows are already in correct order -> no sort necessary but group is\n        if (wasEmpty) {\n          this._group();\n        }\n      } else {\n        this._sortAfterInsertOrig(wasEmpty);\n      }\n    }, true);\n\n    // _sortAfterUpdate\n    objects.replacePrototypeFunction(Table, '_sortAfterUpdate', function() {\n      if (this.modelAdapter) {\n        this._group();\n      } else {\n        this._sortAfterUpdateOrig();\n      }\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Table, '_isSortingPossible', function(sortColumns) {\n      if (this.modelAdapter) {\n        // In a JS only app the flag 'uiSortPossible' is never set and thus defaults to true. Additionally we check if each column can install\n        // its comparator used to sort. If installation failed for some reason, sorting is not possible. In a remote app the server sets the\n        // 'uiSortPossible' flag, which decides if the column must be sorted by the server or can be sorted by the client.\n        let uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this._isSortingPossibleOrig(sortColumns);\n      }\n      return this._isSortingPossibleOrig(sortColumns);\n    }, true);\n\n    // sort\n    objects.replacePrototypeFunction(Table, 'sort', function(column, direction, multiSort, remove) {\n      if (this.modelAdapter && column.guiOnly) {\n        return;\n      }\n      this.sortOrig(column, direction, multiSort, remove);\n    }, true);\n\n    // no js default tileTableHeader in classic mode\n    objects.replacePrototypeFunction(Table, '_createTileTableHeader', function() {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this._createTileTableHeaderOrig();\n    }, true);\n\n    // not used in classic mode since tiles are created by the server\n    objects.replacePrototypeFunction(Table, 'createTiles', function(rows) {\n      if (this.modelAdapter) {\n        // nop in classic mode\n        return;\n      }\n      return this.createTilesOrig(rows);\n    }, true);\n  }\n\n  static modifyColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // init\n    objects.replacePrototypeFunction(Column, 'init', function(model) {\n      if (model.table && model.table.modelAdapter) {\n        // Fill in the missing default values only in remote case, don't do it JS case to not accidentally set undefined properties (e.g. uiSortEnabled)\n        model = $.extend({}, model);\n        defaultValues.applyTo(model);\n      }\n      this.initOrig(model);\n    }, true);\n\n    // _ensureCell\n    objects.replacePrototypeFunction(Column, '_ensureCell', function(vararg) {\n      if (this.table.modelAdapter) {\n        // Note: we do almost the same thing as in _ensureCellOrig, the difference is that\n        // we treat a plain object always as cell-model and we always must apply defaultValues\n        // to this cell model. In the JS only case a plain-object has no special meaning and\n        // can be used as cell-value in the same way as a scalar value. Also we must not apply\n        // defaultValues in JS only case, because it would destroy the 'undefined' state of the\n        // cell properties, which is required because the Column checks, whether it should apply\n        // defaults from the Column instance to a cell, or use the values from the cell.\n        let model;\n        if (objects.isPlainObject(vararg)) {\n          model = vararg;\n          model.value = this._parseValue(model.value);\n          // Parse the value if a text but no value is provided. The server does only set the text if value and text are equal.\n          // It is also necessary for custom columns which don't have a UI representation and never send the value.\n          // Do not parse the value if there is an error status.\n          // If editing fails, the display text will be the user input, the value unchanged, and the server will set the error status.\n          if (model.text && model.value === undefined && !model.errorStatus) {\n            model.value = this._parseValue(model.text);\n          }\n          // use null instead of undefined\n          if (model.value === undefined) {\n            model.value = null;\n          }\n        } else {\n          model = {\n            value: this._parseValue(vararg)\n          };\n        }\n        defaultValues.applyTo(model, 'Cell');\n        return scout.create('Cell', model);\n      }\n      return this._ensureCellOrig(vararg);\n    }, true);\n\n    // uiSortPossible\n    objects.replacePrototypeFunction(Column, 'isSortingPossible', function() {\n      if (this.table.modelAdapter) {\n        // Returns whether or not this column can be used to sort on the client side. In a JS only app the flag 'uiSortPossible'\n        // is never set and defaults to true. As a side effect of this function a comparator is installed.\n        // The comparator returns false if it could not be installed which means sorting should be delegated to server (e.g. collator is not available).\n        // In a remote app the server sets the 'uiSortPossible' flag, which decides if the column must be sorted by the\n        // server or can be sorted by the client.\n        let uiSortPossible = scout.nvl(this.uiSortPossible, true);\n        return uiSortPossible && this.installComparator();\n      }\n      return this.isSortingPossibleOrig();\n    }, true);\n  }\n\n  static modifyBooleanColumnPrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    // _toggleCellValue\n    objects.replacePrototypeFunction(BooleanColumn, '_toggleCellValue', function(row, cell) {\n      if (this.table.modelAdapter) {\n        // NOP - do nothing, since server will handle the click, see Java AbstractTable#interceptRowClickSingleObserver\n      } else {\n        this._toggleCellValueOrig(row, cell);\n      }\n    }, true);\n  }\n}\n\nApp.addListener('bootstrap', TableAdapter.modifyTablePrototype);\nApp.addListener('bootstrap', TableAdapter.modifyColumnPrototype);\nApp.addListener('bootstrap', TableAdapter.modifyBooleanColumnPrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}