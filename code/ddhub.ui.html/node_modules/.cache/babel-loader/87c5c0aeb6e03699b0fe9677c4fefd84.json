{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, EventSupport, MessageBox, MessageBoxes, objects, scout, Status } from '../index';\nimport $ from 'jquery';\n\n/**\n * Abstract base class for validation lifecycles as used for forms.\n * A subclass must set the properties, in order to display messages:\n * - emptyMandatoryElementsTextKey\n * - invalidElementsTextKey\n * - saveChangesQuestionTextKey\n *\n * @class\n * @constructor\n * @abstract\n */\nexport default class Lifecycle {\n  constructor() {\n    this.widget = null;\n    this.validationFailedTextKey = null;\n    this.validationFailedText = null;\n    this.emptyMandatoryElementsTextKey = null;\n    this.emptyMandatoryElementsText = null;\n    this.invalidElementsTextKey = null;\n    this.invalidElementsText = null;\n    this.saveChangesQuestionTextKey = null;\n    this.askIfNeedSave = true;\n    this.askIfNeedSaveText = null; // Java: cancelVerificationText\n\n    this.events = new EventSupport();\n    this.handlers = {\n      'load': this._defaultLoad.bind(this),\n      'save': this._defaultSave.bind(this)\n    };\n  }\n\n  // Info: doExportXml, doImportXml, doSaveWithoutMarkerChange is not supported in Html UI\n\n  init(model) {\n    scout.assertParameter('widget', model.widget);\n    $.extend(this, model);\n    if (objects.isNullOrUndefined(this.validationFailedText)) {\n      this.validationFailedText = this.session().text(this.validationFailedTextKey);\n    }\n    if (objects.isNullOrUndefined(this.emptyMandatoryElementsText)) {\n      this.emptyMandatoryElementsText = this.session().text(this.emptyMandatoryElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.invalidElementsText)) {\n      this.invalidElementsText = this.session().text(this.invalidElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.askIfNeedSaveText)) {\n      this.askIfNeedSaveText = this.session().text(this.saveChangesQuestionTextKey);\n    }\n  }\n  load() {\n    return this._load().then(() => {\n      this.markAsSaved();\n      this.events.trigger('postLoad');\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _load() {\n    return this.handlers.load().then(status => {\n      this.events.trigger('load');\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultLoad() {\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  ok() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate).then(invalid => {\n      if (invalid) {\n        return;\n      }\n\n      // 2.) check if save is required\n      if (!this.requiresSave()) {\n        return this.close();\n      }\n\n      // 3.) perform save operation\n      return this._whenInvalid(this._save).then(invalid => {\n        if (invalid) {\n          return;\n        }\n        this.markAsSaved();\n        return this.close();\n      });\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  cancel() {\n    let showMessageBox = this.requiresSave() && this.askIfNeedSave;\n    if (showMessageBox) {\n      return this._showYesNoCancelMessageBox(this.askIfNeedSaveText, this.ok.bind(this), this.close.bind(this));\n    }\n    return this.close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  reset() {\n    this._reset();\n\n    // reload the state\n    return this.load().then(() => {\n      this.events.trigger('reset');\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close() {\n    return this._close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _close() {\n    this.events.trigger('close');\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  save() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate).then(invalid => {\n      // 2.) invalid or form has not been changed\n      if (invalid || !this.requiresSave()) {\n        return;\n      }\n\n      // 3.) perform save operation\n      return this._whenInvalid(this._save).then(invalid => {\n        if (invalid) {\n          return;\n        }\n        this.markAsSaved();\n      });\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _save() {\n    return this.handlers.save().then(status => {\n      this.events.trigger('save');\n      return status;\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultSave() {\n    return $.resolvedPromise();\n  }\n  markAsSaved() {\n    // NOP\n  }\n\n  /**\n   * Override this function to check if any data has changed and saving is required.\n   * @returns {boolean}\n   */\n  requiresSave() {\n    return false;\n  }\n  setAskIfNeedSave(askIfNeedSave) {\n    this.askIfNeedSave = askIfNeedSave;\n  }\n\n  /**\n   * Helper function to deal with functions that return a Status object.\n   * Makes it easier to return early when that function returns an invalid status (= less code to write).\n   *\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    If the status returned by 'func' is absent or Status.Severity.OK, a promise resolved with\n   *                    \"false\" is returned. Otherwise, the promise returned by _showStatusMessageBox() is returned.\n   */\n  _whenInvalid(func) {\n    return func.call(this).then(status => {\n      if (!status || status.severity === Status.Severity.OK) {\n        return $.resolvedPromise(false); // invalid=false\n      }\n\n      return this._showStatusMessageBox(status);\n    }).catch(error => {\n      return this._showStatusMessageBox(errorToStatus(error));\n    });\n\n    // See ValueField#_createInvalidValueStatus, has similar code to transform error to status\n    function errorToStatus(error) {\n      if (error instanceof Status) {\n        return error;\n      }\n      if (typeof error === 'string') {\n        return Status.error({\n          message: error\n        });\n      }\n      return Status.error({\n        message: error.message\n      });\n    }\n  }\n  _showYesNoCancelMessageBox(message, yesAction, noAction) {\n    return MessageBoxes.createYesNoCancel(this.widget).withHeader(message).buildAndOpen().then(option => {\n      if (option === MessageBox.Buttons.YES) {\n        return yesAction();\n      } else if (option === MessageBox.Buttons.NO) {\n        return noAction();\n      }\n      return $.resolvedPromise();\n    });\n  }\n\n  /**\n   * @param status\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    By default, a promise that is resolved with \"true\" is returned.\n   */\n  _showStatusMessageBox(status) {\n    return MessageBoxes.createOk(this.widget).withSeverity(status.severity).withHeader(this.validationFailedText).withBody(status.message, true).buildAndOpen().then(() => {\n      let invalid = status.severity === Status.Severity.ERROR;\n      return $.resolvedPromise(invalid);\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _validate() {\n    let status = this._validateElements();\n    if (status.isValid()) {\n      status = this._validateWidget();\n    }\n    return $.resolvedPromise(status);\n  }\n\n  /**\n   * Validates all elements (i.e form-fields) covered by the lifecycle and checks for missing or invalid elements.\n   *\n   * @return Status\n   */\n  _validateElements() {\n    let elements = this._invalidElements();\n    let status = new Status();\n    if (elements.missingElements.length === 0 && elements.invalidElements.length === 0) {\n      status.severity = Status.Severity.OK;\n    } else {\n      status.severity = Status.Severity.ERROR;\n      status.message = this._createInvalidElementsMessageHtml(elements.missingElements, elements.invalidElements);\n      this._revealInvalidElement(arrays.first(elements.missingElements) || arrays.first(elements.invalidElements));\n    }\n    return status;\n  }\n  _revealInvalidElement(invalidElement) {\n    // NOP\n  }\n\n  /**\n   * Validates the widget (i.e. form) associated with this lifecycle. This function is only called when there are\n   * no missing or invalid elements. It is used to implement an overall-validate logic which has nothing to do\n   * with a specific element or field. For instance you could validate if an internal member variable of a Lifecycle\n   * or Form is set.\n   *\n   * @return Status\n   */\n  _validateWidget() {\n    return Status.ok();\n  }\n\n  /**\n   * Override this function to check for invalid elements on the parent which prevent\n   * saving of the parent.(eg. check if all mandatory elements contain a value)\n   *\n   * @returns Object with\n   * missingElements: Elements which should have a value\n   * invalidElements: Elements which have an invalid value\n   */\n  _invalidElements() {\n    return {\n      missingElements: [],\n      invalidElements: []\n    };\n  }\n\n  /**\n   * Creates a HTML message used to display missing and invalid fields in a message box.\n   */\n  _createInvalidElementsMessageHtml(missing, invalid) {\n    let $div = $('<div>'),\n      hasMissing = missing.length > 0,\n      hasInvalid = invalid.length > 0;\n    if (hasMissing) {\n      appendTitleAndList.call(this, $div, this.emptyMandatoryElementsText, missing, this._missingElementText);\n    }\n    if (hasMissing && hasInvalid) {\n      $div.appendElement('<br>');\n    }\n    if (hasInvalid) {\n      appendTitleAndList.call(this, $div, this.invalidElementsText, invalid, this._invalidElementText);\n    }\n    return $div.html();\n\n    // ----- Helper function -----\n\n    function appendTitleAndList($div, title, elements, elementTextFunc) {\n      $div.appendDiv().text(title);\n      let $ul = $div.appendElement('<ul>');\n      elements.forEach(function (element) {\n        $ul.appendElement('<li>').text(elementTextFunc.call(this, element));\n      }, this);\n    }\n  }\n\n  /**\n   * Override this function to retrieve the text of an invalid element\n   * @param element\n   * @returns {String}\n   */\n  _invalidElementText(element) {\n    return '';\n  }\n\n  /**\n   * Override this function to retrieve the text of an missing mandatory element\n   * @param element\n   * @returns {String}\n   */\n  _missingElementText(element) {\n    return '';\n  }\n  session() {\n    return this.widget.session;\n  }\n\n  /**\n   * Register a handler function for save actions.\n   * All handler functions must return a Status. In case of an error a Status object with severity error must be returned.\n   * Note: in contrast to events, handlers can control the flow of the lifecycle. They also have a return value where events have none.\n   *   Only one handler can be registered for each type.\n   */\n  handle(type, func) {\n    let supportedTypes = ['load', 'save'];\n    if (supportedTypes.indexOf(type) === -1) {\n      throw new Error('Cannot register handler for unsupported type \\'' + type + '\\'');\n    }\n    this.handlers[type] = func;\n  }\n\n  /**\n   * Register an event handler for the given type.\n   * Event handlers don't have a return value. They do not have any influence on the lifecycle flow. There can be multiple event\n   * handler for each type.\n   */\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n  off(type, func) {\n    return this.events.off(type, func);\n  }\n}","map":{"version":3,"names":["arrays","EventSupport","MessageBox","MessageBoxes","objects","scout","Status","$","Lifecycle","constructor","widget","validationFailedTextKey","validationFailedText","emptyMandatoryElementsTextKey","emptyMandatoryElementsText","invalidElementsTextKey","invalidElementsText","saveChangesQuestionTextKey","askIfNeedSave","askIfNeedSaveText","events","handlers","_defaultLoad","bind","_defaultSave","init","model","assertParameter","extend","isNullOrUndefined","session","text","load","_load","then","markAsSaved","trigger","status","resolvedPromise","ok","_whenInvalid","_validate","invalid","requiresSave","close","_save","cancel","showMessageBox","_showYesNoCancelMessageBox","reset","_reset","_close","save","setAskIfNeedSave","func","call","severity","Severity","OK","_showStatusMessageBox","catch","error","errorToStatus","message","yesAction","noAction","createYesNoCancel","withHeader","buildAndOpen","option","Buttons","YES","NO","createOk","withSeverity","withBody","ERROR","_validateElements","isValid","_validateWidget","elements","_invalidElements","missingElements","length","invalidElements","_createInvalidElementsMessageHtml","_revealInvalidElement","first","invalidElement","missing","$div","hasMissing","hasInvalid","appendTitleAndList","_missingElementText","appendElement","_invalidElementText","html","title","elementTextFunc","appendDiv","$ul","forEach","element","handle","type","supportedTypes","indexOf","Error","on","off"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/lifecycle/Lifecycle.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, EventSupport, MessageBox, MessageBoxes, objects, scout, Status} from '../index';\nimport $ from 'jquery';\n\n/**\n * Abstract base class for validation lifecycles as used for forms.\n * A subclass must set the properties, in order to display messages:\n * - emptyMandatoryElementsTextKey\n * - invalidElementsTextKey\n * - saveChangesQuestionTextKey\n *\n * @class\n * @constructor\n * @abstract\n */\nexport default class Lifecycle {\n\n  constructor() {\n    this.widget = null;\n    this.validationFailedTextKey = null;\n    this.validationFailedText = null;\n\n    this.emptyMandatoryElementsTextKey = null;\n    this.emptyMandatoryElementsText = null;\n\n    this.invalidElementsTextKey = null;\n    this.invalidElementsText = null;\n\n    this.saveChangesQuestionTextKey = null;\n    this.askIfNeedSave = true;\n    this.askIfNeedSaveText = null; // Java: cancelVerificationText\n\n    this.events = new EventSupport();\n    this.handlers = {\n      'load': this._defaultLoad.bind(this),\n      'save': this._defaultSave.bind(this)\n    };\n  }\n\n  // Info: doExportXml, doImportXml, doSaveWithoutMarkerChange is not supported in Html UI\n\n  init(model) {\n    scout.assertParameter('widget', model.widget);\n    $.extend(this, model);\n    if (objects.isNullOrUndefined(this.validationFailedText)) {\n      this.validationFailedText = this.session().text(this.validationFailedTextKey);\n    }\n    if (objects.isNullOrUndefined(this.emptyMandatoryElementsText)) {\n      this.emptyMandatoryElementsText = this.session().text(this.emptyMandatoryElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.invalidElementsText)) {\n      this.invalidElementsText = this.session().text(this.invalidElementsTextKey);\n    }\n    if (objects.isNullOrUndefined(this.askIfNeedSaveText)) {\n      this.askIfNeedSaveText = this.session().text(this.saveChangesQuestionTextKey);\n    }\n  }\n\n  load() {\n    return this._load().then(() => {\n      this.markAsSaved();\n      this.events.trigger('postLoad');\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _load() {\n    return this.handlers.load()\n      .then(status => {\n        this.events.trigger('load');\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultLoad() {\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  ok() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate)\n      .then(invalid => {\n        if (invalid) {\n          return;\n        }\n\n        // 2.) check if save is required\n        if (!this.requiresSave()) {\n          return this.close();\n        }\n\n        // 3.) perform save operation\n        return this._whenInvalid(this._save)\n          .then(invalid => {\n            if (invalid) {\n              return;\n            }\n\n            this.markAsSaved();\n            return this.close();\n          });\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  cancel() {\n    let showMessageBox = this.requiresSave() && this.askIfNeedSave;\n    if (showMessageBox) {\n      return this._showYesNoCancelMessageBox(\n        this.askIfNeedSaveText,\n        this.ok.bind(this),\n        this.close.bind(this));\n    }\n    return this.close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  reset() {\n    this._reset();\n\n    // reload the state\n    return this.load().then(() => {\n      this.events.trigger('reset');\n    });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close() {\n    return this._close();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _close() {\n    this.events.trigger('close');\n    return $.resolvedPromise();\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  save() {\n    // 1.) validate form\n    return this._whenInvalid(this._validate)\n      .then(invalid => {\n\n        // 2.) invalid or form has not been changed\n        if (invalid || !this.requiresSave()) {\n          return;\n        }\n\n        // 3.) perform save operation\n        return this._whenInvalid(this._save)\n          .then(invalid => {\n            if (invalid) {\n              return;\n            }\n\n            this.markAsSaved();\n          });\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _save() {\n    return this.handlers.save()\n      .then(status => {\n        this.events.trigger('save');\n        return status;\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _defaultSave() {\n    return $.resolvedPromise();\n  }\n\n  markAsSaved() {\n    // NOP\n  }\n\n  /**\n   * Override this function to check if any data has changed and saving is required.\n   * @returns {boolean}\n   */\n  requiresSave() {\n    return false;\n  }\n\n  setAskIfNeedSave(askIfNeedSave) {\n    this.askIfNeedSave = askIfNeedSave;\n  }\n\n  /**\n   * Helper function to deal with functions that return a Status object.\n   * Makes it easier to return early when that function returns an invalid status (= less code to write).\n   *\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    If the status returned by 'func' is absent or Status.Severity.OK, a promise resolved with\n   *                    \"false\" is returned. Otherwise, the promise returned by _showStatusMessageBox() is returned.\n   */\n  _whenInvalid(func) {\n    return func.call(this)\n      .then(status => {\n        if (!status || status.severity === Status.Severity.OK) {\n          return $.resolvedPromise(false); // invalid=false\n        }\n        return this._showStatusMessageBox(status);\n      })\n      .catch(error => {\n        return this._showStatusMessageBox(errorToStatus(error));\n      });\n\n    // See ValueField#_createInvalidValueStatus, has similar code to transform error to status\n    function errorToStatus(error) {\n      if (error instanceof Status) {\n        return error;\n      }\n      if (typeof error === 'string') {\n        return Status.error({\n          message: error\n        });\n      }\n      return Status.error({\n        message: error.message\n      });\n    }\n  }\n\n  _showYesNoCancelMessageBox(message, yesAction, noAction) {\n    return MessageBoxes.createYesNoCancel(this.widget)\n      .withHeader(message)\n      .buildAndOpen()\n      .then(option => {\n        if (option === MessageBox.Buttons.YES) {\n          return yesAction();\n        } else if (option === MessageBox.Buttons.NO) {\n          return noAction();\n        }\n        return $.resolvedPromise();\n      });\n  }\n\n  /**\n   * @param status\n   * @returns {Promise} If the resulting promise is resolved with \"true\", the life cycle is considered invalid.\n   *                    Otherwise, the life cycle is considered valid and the store/save operation continues.\n   *                    By default, a promise that is resolved with \"true\" is returned.\n   */\n  _showStatusMessageBox(status) {\n    return MessageBoxes.createOk(this.widget)\n      .withSeverity(status.severity)\n      .withHeader(this.validationFailedText)\n      .withBody(status.message, true)\n      .buildAndOpen()\n      .then(() => {\n        let invalid = (status.severity === Status.Severity.ERROR);\n        return $.resolvedPromise(invalid);\n      });\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  _validate() {\n    let status = this._validateElements();\n    if (status.isValid()) {\n      status = this._validateWidget();\n    }\n    return $.resolvedPromise(status);\n  }\n\n  /**\n   * Validates all elements (i.e form-fields) covered by the lifecycle and checks for missing or invalid elements.\n   *\n   * @return Status\n   */\n  _validateElements() {\n    let elements = this._invalidElements();\n    let status = new Status();\n    if (elements.missingElements.length === 0 && elements.invalidElements.length === 0) {\n      status.severity = Status.Severity.OK;\n    } else {\n      status.severity = Status.Severity.ERROR;\n      status.message = this._createInvalidElementsMessageHtml(elements.missingElements, elements.invalidElements);\n      this._revealInvalidElement(arrays.first(elements.missingElements) || arrays.first(elements.invalidElements));\n    }\n    return status;\n  }\n\n  _revealInvalidElement(invalidElement) {\n    // NOP\n  }\n\n  /**\n   * Validates the widget (i.e. form) associated with this lifecycle. This function is only called when there are\n   * no missing or invalid elements. It is used to implement an overall-validate logic which has nothing to do\n   * with a specific element or field. For instance you could validate if an internal member variable of a Lifecycle\n   * or Form is set.\n   *\n   * @return Status\n   */\n  _validateWidget() {\n    return Status.ok();\n  }\n\n  /**\n   * Override this function to check for invalid elements on the parent which prevent\n   * saving of the parent.(eg. check if all mandatory elements contain a value)\n   *\n   * @returns Object with\n   * missingElements: Elements which should have a value\n   * invalidElements: Elements which have an invalid value\n   */\n  _invalidElements() {\n    return {\n      missingElements: [],\n      invalidElements: []\n    };\n  }\n\n  /**\n   * Creates a HTML message used to display missing and invalid fields in a message box.\n   */\n  _createInvalidElementsMessageHtml(missing, invalid) {\n    let $div = $('<div>'),\n      hasMissing = missing.length > 0,\n      hasInvalid = invalid.length > 0;\n    if (hasMissing) {\n      appendTitleAndList.call(this, $div, this.emptyMandatoryElementsText, missing, this._missingElementText);\n    }\n    if (hasMissing && hasInvalid) {\n      $div.appendElement('<br>');\n    }\n    if (hasInvalid) {\n      appendTitleAndList.call(this, $div, this.invalidElementsText, invalid, this._invalidElementText);\n    }\n    return $div.html();\n\n    // ----- Helper function -----\n\n    function appendTitleAndList($div, title, elements, elementTextFunc) {\n      $div.appendDiv().text(title);\n      let $ul = $div.appendElement('<ul>');\n      elements.forEach(function(element) {\n        $ul.appendElement('<li>').text(elementTextFunc.call(this, element));\n      }, this);\n    }\n  }\n\n  /**\n   * Override this function to retrieve the text of an invalid element\n   * @param element\n   * @returns {String}\n   */\n  _invalidElementText(element) {\n    return '';\n  }\n\n  /**\n   * Override this function to retrieve the text of an missing mandatory element\n   * @param element\n   * @returns {String}\n   */\n  _missingElementText(element) {\n    return '';\n  }\n\n  session() {\n    return this.widget.session;\n  }\n\n  /**\n   * Register a handler function for save actions.\n   * All handler functions must return a Status. In case of an error a Status object with severity error must be returned.\n   * Note: in contrast to events, handlers can control the flow of the lifecycle. They also have a return value where events have none.\n   *   Only one handler can be registered for each type.\n   */\n  handle(type, func) {\n    let supportedTypes = ['load', 'save'];\n    if (supportedTypes.indexOf(type) === -1) {\n      throw new Error('Cannot register handler for unsupported type \\'' + type + '\\'');\n    }\n    this.handlers[type] = func;\n  }\n\n  /**\n   * Register an event handler for the given type.\n   * Event handlers don't have a return value. They do not have any influence on the lifecycle flow. There can be multiple event\n   * handler for each type.\n   */\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    return this.events.off(type, func);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}