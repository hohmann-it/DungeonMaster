{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout } from '../index';\nexport default class ModeSelectorLayout extends AbstractLayout {\n  constructor(modeSelector) {\n    super();\n    this.modeSelector = modeSelector;\n  }\n  layout($container) {\n    super.layout($container);\n    if (this.modeSelector.$slider) {\n      // Hide slider here so that size changes triggered by the layout are not animated (css changes applied while an element is hidden are not animated).\n      // The slider will then become visible again (if necessary) in _updateSlider()\n      this.modeSelector.$slider.setVisible(false);\n    }\n    this.modeSelector._updateSlider();\n  }\n  preferredLayoutSize($container, options) {\n    let prefSize = super.preferredLayoutSize($container, options);\n    let oldStyle = this.modeSelector.$container.attr('style');\n    this.modeSelector.$container.css({\n      'width': 'auto',\n      'height': 'auto'\n    });\n    let maxWidth = 0;\n    this.modeSelector.modes.filter(mode => mode.rendered).forEach(mode => {\n      let oldModeStyle = mode.$container.attr('style');\n      mode.$container.css('flex', 'none');\n      let modeWidth = mode.htmlComp.prefSize().width;\n      if (modeWidth > maxWidth) {\n        maxWidth = modeWidth;\n      }\n      mode.$container.attrOrRemove('style', oldModeStyle);\n    });\n    this.modeSelector.$container.attrOrRemove('style', oldStyle);\n    prefSize.width = maxWidth * this.modeSelector.modes.length + this.modeSelector.htmlComp.insets().horizontal();\n    return prefSize;\n  }\n}","map":{"version":3,"names":["AbstractLayout","ModeSelectorLayout","constructor","modeSelector","layout","$container","$slider","setVisible","_updateSlider","preferredLayoutSize","options","prefSize","oldStyle","attr","css","maxWidth","modes","filter","mode","rendered","forEach","oldModeStyle","modeWidth","htmlComp","width","attrOrRemove","length","insets","horizontal"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/modeselector/ModeSelectorLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout} from '../index';\n\nexport default class ModeSelectorLayout extends AbstractLayout {\n\n  constructor(modeSelector) {\n    super();\n    this.modeSelector = modeSelector;\n  }\n\n  layout($container) {\n    super.layout($container);\n\n    if (this.modeSelector.$slider) {\n      // Hide slider here so that size changes triggered by the layout are not animated (css changes applied while an element is hidden are not animated).\n      // The slider will then become visible again (if necessary) in _updateSlider()\n      this.modeSelector.$slider.setVisible(false);\n    }\n    this.modeSelector._updateSlider();\n  }\n\n  preferredLayoutSize($container, options) {\n    let prefSize = super.preferredLayoutSize($container, options);\n\n    let oldStyle = this.modeSelector.$container.attr('style');\n    this.modeSelector.$container.css({\n      'width': 'auto',\n      'height': 'auto'\n    });\n\n    let maxWidth = 0;\n    this.modeSelector.modes\n      .filter(mode => mode.rendered)\n      .forEach(mode => {\n        let oldModeStyle = mode.$container.attr('style');\n        mode.$container.css('flex', 'none');\n        let modeWidth = mode.htmlComp.prefSize().width;\n        if (modeWidth > maxWidth) {\n          maxWidth = modeWidth;\n        }\n        mode.$container.attrOrRemove('style', oldModeStyle);\n      });\n\n    this.modeSelector.$container.attrOrRemove('style', oldStyle);\n\n    prefSize.width = maxWidth * this.modeSelector.modes.length + this.modeSelector.htmlComp.insets().horizontal();\n    return prefSize;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAc,QAAO,UAAU;AAEvC,eAAe,MAAMC,kBAAkB,SAASD,cAAc,CAAC;EAE7DE,WAAW,CAACC,YAAY,EAAE;IACxB,KAAK,EAAE;IACP,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEAC,MAAM,CAACC,UAAU,EAAE;IACjB,KAAK,CAACD,MAAM,CAACC,UAAU,CAAC;IAExB,IAAI,IAAI,CAACF,YAAY,CAACG,OAAO,EAAE;MAC7B;MACA;MACA,IAAI,CAACH,YAAY,CAACG,OAAO,CAACC,UAAU,CAAC,KAAK,CAAC;IAC7C;IACA,IAAI,CAACJ,YAAY,CAACK,aAAa,EAAE;EACnC;EAEAC,mBAAmB,CAACJ,UAAU,EAAEK,OAAO,EAAE;IACvC,IAAIC,QAAQ,GAAG,KAAK,CAACF,mBAAmB,CAACJ,UAAU,EAAEK,OAAO,CAAC;IAE7D,IAAIE,QAAQ,GAAG,IAAI,CAACT,YAAY,CAACE,UAAU,CAACQ,IAAI,CAAC,OAAO,CAAC;IACzD,IAAI,CAACV,YAAY,CAACE,UAAU,CAACS,GAAG,CAAC;MAC/B,OAAO,EAAE,MAAM;MACf,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAI,CAACZ,YAAY,CAACa,KAAK,CACpBC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,CAC7BC,OAAO,CAACF,IAAI,IAAI;MACf,IAAIG,YAAY,GAAGH,IAAI,CAACb,UAAU,CAACQ,IAAI,CAAC,OAAO,CAAC;MAChDK,IAAI,CAACb,UAAU,CAACS,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;MACnC,IAAIQ,SAAS,GAAGJ,IAAI,CAACK,QAAQ,CAACZ,QAAQ,EAAE,CAACa,KAAK;MAC9C,IAAIF,SAAS,GAAGP,QAAQ,EAAE;QACxBA,QAAQ,GAAGO,SAAS;MACtB;MACAJ,IAAI,CAACb,UAAU,CAACoB,YAAY,CAAC,OAAO,EAAEJ,YAAY,CAAC;IACrD,CAAC,CAAC;IAEJ,IAAI,CAAClB,YAAY,CAACE,UAAU,CAACoB,YAAY,CAAC,OAAO,EAAEb,QAAQ,CAAC;IAE5DD,QAAQ,CAACa,KAAK,GAAGT,QAAQ,GAAG,IAAI,CAACZ,YAAY,CAACa,KAAK,CAACU,MAAM,GAAG,IAAI,CAACvB,YAAY,CAACoB,QAAQ,CAACI,MAAM,EAAE,CAACC,UAAU,EAAE;IAC7G,OAAOjB,QAAQ;EACjB;AACF"},"metadata":{},"sourceType":"module"}