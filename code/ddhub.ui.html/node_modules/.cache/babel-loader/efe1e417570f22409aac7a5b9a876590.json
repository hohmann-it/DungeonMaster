{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, arrays, Dimension, graphics, HtmlComponent, MenuBar, scout } from '../../index';\nexport default class MenuBarLayout extends AbstractLayout {\n  constructor(menuBar) {\n    super();\n    this._menuBar = menuBar;\n    this._overflowMenuItems = [];\n    this._ellipsis = null;\n    this.collapsed = false;\n  }\n  layout($container) {\n    let menuItems = this._menuBar.orderedMenuItems.left.concat(this._menuBar.orderedMenuItems.right);\n    let visibleMenuItems = this.visibleMenuItems();\n    let htmlContainer = HtmlComponent.get($container);\n    let ellipsis = arrays.find(menuItems, menuItem => menuItem.ellipsis);\n    this._setFirstLastMenuMarker(visibleMenuItems); // is required to determine available size correctly\n    this.preferredLayoutSize($container, {\n      widthHint: htmlContainer.availableSize().width,\n      undo: false\n    });\n\n    // first set visible to ensure the correct menu gets the tabindex. Therefore the ellipsis visibility is split.\n    if (ellipsis && this._overflowMenuItems.length > 0) {\n      ellipsis.setHidden(false);\n    }\n    visibleMenuItems.forEach(menuItem => menuItem._setOverflown(false));\n    this._overflowMenuItems.forEach(menuItem => menuItem._setOverflown(true));\n    if (ellipsis && this._overflowMenuItems.length === 0) {\n      ellipsis.setHidden(true);\n    }\n    // remove all separators\n    this._overflowMenuItems = this._overflowMenuItems.filter(menuItem => !menuItem.separator);\n    if (ellipsis) {\n      ellipsis._closePopup();\n      ellipsis.setChildActions(this._overflowMenuItems);\n    }\n\n    // trigger menu items layout\n    visibleMenuItems.forEach(menuItem => menuItem.validateLayout());\n    visibleMenuItems.forEach(menuItem => {\n      // Make sure open popups are at the correct position after layouting\n      if (menuItem.popup) {\n        menuItem.popup.position();\n      }\n    });\n  }\n  preferredLayoutSize($container, options) {\n    this._overflowMenuItems = [];\n    if (!this._menuBar.isVisible()) {\n      return new Dimension(0, 0);\n    }\n    let visibleMenuItems = this.visibleMenuItems();\n    let overflowMenuItems = visibleMenuItems.filter(menuItem => {\n      let overflown = menuItem.overflown;\n      menuItem._setOverflown(false);\n      return overflown;\n    });\n    let shrinkedMenuItems = visibleMenuItems.filter(menuItem => {\n      let shrinked = !menuItem.textVisible;\n      this.undoShrink([menuItem]);\n      return shrinked;\n    });\n    let notShrinkedMenuItems = [...visibleMenuItems];\n    let htmlComp = HtmlComponent.get($container);\n    let prefSize = new Dimension(0, 0);\n    let prefWidth = Number.MAX_VALUE;\n\n    // consider avoid falsy 0 in tabboxes a 0 withHint will be used to calculate the minimum width\n    if (options.widthHint === 0 || options.widthHint) {\n      prefWidth = options.widthHint - htmlComp.insets().horizontal();\n    }\n    if (prefWidth <= 0) {\n      // shortcut for minimum size.\n      prefSize = this._minSize(visibleMenuItems);\n    } else {\n      prefSize = this._prefSize(visibleMenuItems);\n      if (prefSize.width > prefWidth) {\n        this.shrink(visibleMenuItems);\n      }\n      prefSize = this._prefSizeWithOverflow(visibleMenuItems, prefWidth);\n    }\n    if (scout.nvl(options.undo, true)) {\n      // Reset state\n      this.undoOverflow(overflowMenuItems);\n      this.undoShrink(notShrinkedMenuItems);\n      this.shrink(shrinkedMenuItems);\n    }\n    return prefSize.add(htmlComp.insets());\n  }\n\n  /**\n   * Moves menu items into _overflowMenuItems until prefSize.width is smaller than prefWidth.\n   * The moved menu items will be removed from the given visibleMenuItems parameter.\n   * @returns {Dimension} the calculated preferred size\n   */\n  _prefSizeWithOverflow(visibleMenuItems, prefWidth) {\n    let overflowableIndexes = [];\n    visibleMenuItems.forEach((menuItem, index) => {\n      if (menuItem.stackable) {\n        overflowableIndexes.push(index);\n      }\n    });\n    let overflowIndex = -1;\n    this._setFirstLastMenuMarker(visibleMenuItems);\n    let prefSize = this._prefSize(visibleMenuItems);\n    while (prefSize.width > prefWidth && overflowableIndexes.length > 0) {\n      if (this._menuBar.ellipsisPosition === MenuBar.EllipsisPosition.RIGHT) {\n        overflowIndex = overflowableIndexes.splice(-1)[0];\n      } else {\n        overflowIndex = overflowableIndexes.splice(0, 1)[0] - this._overflowMenuItems.length;\n      }\n      this._overflowMenuItems.splice(0, 0, visibleMenuItems[overflowIndex]);\n      visibleMenuItems.splice(overflowIndex, 1);\n      this._setFirstLastMenuMarker(visibleMenuItems);\n      prefSize = this._prefSize(visibleMenuItems);\n    }\n    return prefSize;\n  }\n  _minSize(visibleMenuItems) {\n    let minVisibleMenuItems = visibleMenuItems.filter(menuItem => !menuItem.stackable);\n    this.shrink(visibleMenuItems);\n    this._setFirstLastMenuMarker(minVisibleMenuItems, true);\n    return this._prefSize(minVisibleMenuItems, true);\n  }\n  _prefSize(menuItems, considerEllipsis) {\n    let prefSize = new Dimension(0, 0);\n    considerEllipsis = scout.nvl(considerEllipsis, this._overflowMenuItems.length > 0);\n    this._setFirstLastMenuMarker(menuItems, considerEllipsis);\n    menuItems.forEach(menuItem => {\n      let itemSize = new Dimension(0, 0);\n      if (menuItem.ellipsis) {\n        if (considerEllipsis) {\n          itemSize = this._menuItemSize(menuItem);\n        }\n      } else {\n        itemSize = this._menuItemSize(menuItem);\n      }\n      prefSize.height = Math.max(prefSize.height, itemSize.height);\n      prefSize.width += itemSize.width;\n    });\n    return prefSize;\n  }\n  _menuItemSize(menuItem) {\n    let classList = menuItem.$container.attr('class');\n    menuItem.$container.removeClass('overflown');\n    menuItem.$container.removeClass('hidden');\n    menuItem.htmlComp.invalidateLayout();\n    let prefSize = menuItem.htmlComp.prefSize({\n      useCssSize: true,\n      exact: true\n    }).add(graphics.margins(menuItem.$container));\n    menuItem.$container.attrOrRemove('class', classList);\n    return prefSize;\n  }\n  _setFirstLastMenuMarker(visibleMenuItems, considerEllipsis) {\n    let menuItems = visibleMenuItems;\n    considerEllipsis = scout.nvl(considerEllipsis, this._overflowMenuItems.length > 0);\n\n    // reset\n    this._menuBar.orderedMenuItems.all.forEach(menuItem => {\n      menuItem.$container.removeClass('first last');\n    });\n\n    // set first and last\n    if (!considerEllipsis) {\n      // remove ellipsis\n      menuItems = menuItems.filter(menuItem => {\n        return !menuItem.ellipsis;\n      });\n    }\n    if (menuItems.length > 0) {\n      menuItems[0].$container.addClass('first');\n      menuItems[menuItems.length - 1].$container.addClass('last');\n    }\n  }\n  undoOverflow(overflowMenuItems) {\n    overflowMenuItems.forEach(menuItem => {\n      menuItem._setOverflown(true);\n    });\n  }\n\n  /**\n   * Makes the text invisible of all shrinkable menus with an icon\n   */\n  shrink(menus) {\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig !== undefined) {\n        // already done\n        return;\n      }\n      if (menu.shrinkable && menu.icon) {\n        menu.textVisibleOrig = menu.textVisible;\n        menu.htmlComp.suppressInvalidate = true;\n        menu.setTextVisible(false);\n        menu.htmlComp.suppressInvalidate = false;\n      }\n    }, this);\n  }\n  undoShrink(menus) {\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig === undefined) {\n        return;\n      }\n      // Restore old text visible state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setTextVisible(menu.textVisibleOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.textVisibleOrig = undefined;\n    }, this);\n  }\n  visibleMenuItems() {\n    return this._menuBar.orderedMenuItems.all.filter(menuItem => {\n      return menuItem.visible;\n    }, this);\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @memberOf MenuBarLayout\n   */\n  static size(htmlMenuBar, containerSize) {\n    let menuBarSize = htmlMenuBar.prefSize({\n      widthHint: containerSize.width\n    });\n    menuBarSize.width = containerSize.width;\n    menuBarSize = menuBarSize.subtract(htmlMenuBar.margins());\n    return menuBarSize;\n  }\n}","map":{"version":3,"names":["AbstractLayout","arrays","Dimension","graphics","HtmlComponent","MenuBar","scout","MenuBarLayout","constructor","menuBar","_menuBar","_overflowMenuItems","_ellipsis","collapsed","layout","$container","menuItems","orderedMenuItems","left","concat","right","visibleMenuItems","htmlContainer","get","ellipsis","find","menuItem","_setFirstLastMenuMarker","preferredLayoutSize","widthHint","availableSize","width","undo","length","setHidden","forEach","_setOverflown","filter","separator","_closePopup","setChildActions","validateLayout","popup","position","options","isVisible","overflowMenuItems","overflown","shrinkedMenuItems","shrinked","textVisible","undoShrink","notShrinkedMenuItems","htmlComp","prefSize","prefWidth","Number","MAX_VALUE","insets","horizontal","_minSize","_prefSize","shrink","_prefSizeWithOverflow","nvl","undoOverflow","add","overflowableIndexes","index","stackable","push","overflowIndex","ellipsisPosition","EllipsisPosition","RIGHT","splice","minVisibleMenuItems","considerEllipsis","itemSize","_menuItemSize","height","Math","max","classList","attr","removeClass","invalidateLayout","useCssSize","exact","margins","attrOrRemove","all","addClass","menus","menu","textVisibleOrig","undefined","shrinkable","icon","suppressInvalidate","setTextVisible","visible","size","htmlMenuBar","containerSize","menuBarSize","subtract"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/menu/menubar/MenuBarLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, arrays, Dimension, graphics, HtmlComponent, MenuBar, scout} from '../../index';\n\nexport default class MenuBarLayout extends AbstractLayout {\n\n  constructor(menuBar) {\n    super();\n    this._menuBar = menuBar;\n\n    this._overflowMenuItems = [];\n    this._ellipsis = null;\n    this.collapsed = false;\n  }\n\n  layout($container) {\n    let menuItems = this._menuBar.orderedMenuItems.left.concat(this._menuBar.orderedMenuItems.right);\n    let visibleMenuItems = this.visibleMenuItems();\n    let htmlContainer = HtmlComponent.get($container);\n    let ellipsis = arrays.find(menuItems, menuItem => menuItem.ellipsis);\n\n    this._setFirstLastMenuMarker(visibleMenuItems); // is required to determine available size correctly\n    this.preferredLayoutSize($container, {\n      widthHint: htmlContainer.availableSize().width,\n      undo: false\n    });\n\n    // first set visible to ensure the correct menu gets the tabindex. Therefore the ellipsis visibility is split.\n    if (ellipsis && this._overflowMenuItems.length > 0) {\n      ellipsis.setHidden(false);\n    }\n    visibleMenuItems.forEach(menuItem => menuItem._setOverflown(false));\n    this._overflowMenuItems.forEach(menuItem => menuItem._setOverflown(true));\n    if (ellipsis && this._overflowMenuItems.length === 0) {\n      ellipsis.setHidden(true);\n    }\n    // remove all separators\n    this._overflowMenuItems = this._overflowMenuItems.filter(menuItem => !menuItem.separator);\n\n    if (ellipsis) {\n      ellipsis._closePopup();\n      ellipsis.setChildActions(this._overflowMenuItems);\n    }\n\n    // trigger menu items layout\n    visibleMenuItems.forEach(menuItem => menuItem.validateLayout());\n\n    visibleMenuItems.forEach(menuItem => {\n      // Make sure open popups are at the correct position after layouting\n      if (menuItem.popup) {\n        menuItem.popup.position();\n      }\n    });\n  }\n\n  preferredLayoutSize($container, options) {\n    this._overflowMenuItems = [];\n    if (!this._menuBar.isVisible()) {\n      return new Dimension(0, 0);\n    }\n    let visibleMenuItems = this.visibleMenuItems();\n    let overflowMenuItems = visibleMenuItems.filter(menuItem => {\n      let overflown = menuItem.overflown;\n      menuItem._setOverflown(false);\n      return overflown;\n    });\n    let shrinkedMenuItems = visibleMenuItems.filter(menuItem => {\n      let shrinked = !menuItem.textVisible;\n      this.undoShrink([menuItem]);\n      return shrinked;\n    });\n    let notShrinkedMenuItems = [...visibleMenuItems];\n    let htmlComp = HtmlComponent.get($container);\n    let prefSize = new Dimension(0, 0);\n    let prefWidth = Number.MAX_VALUE;\n\n    // consider avoid falsy 0 in tabboxes a 0 withHint will be used to calculate the minimum width\n    if (options.widthHint === 0 || options.widthHint) {\n      prefWidth = options.widthHint - htmlComp.insets().horizontal();\n    }\n    if (prefWidth <= 0) {\n      // shortcut for minimum size.\n      prefSize = this._minSize(visibleMenuItems);\n    } else {\n      prefSize = this._prefSize(visibleMenuItems);\n      if (prefSize.width > prefWidth) {\n        this.shrink(visibleMenuItems);\n      }\n      prefSize = this._prefSizeWithOverflow(visibleMenuItems, prefWidth);\n    }\n\n    if (scout.nvl(options.undo, true)) {\n      // Reset state\n      this.undoOverflow(overflowMenuItems);\n      this.undoShrink(notShrinkedMenuItems);\n      this.shrink(shrinkedMenuItems);\n    }\n\n    return prefSize.add(htmlComp.insets());\n  }\n\n  /**\n   * Moves menu items into _overflowMenuItems until prefSize.width is smaller than prefWidth.\n   * The moved menu items will be removed from the given visibleMenuItems parameter.\n   * @returns {Dimension} the calculated preferred size\n   */\n  _prefSizeWithOverflow(visibleMenuItems, prefWidth) {\n    let overflowableIndexes = [];\n    visibleMenuItems.forEach((menuItem, index) => {\n      if (menuItem.stackable) {\n        overflowableIndexes.push(index);\n      }\n    });\n\n    let overflowIndex = -1;\n    this._setFirstLastMenuMarker(visibleMenuItems);\n    let prefSize = this._prefSize(visibleMenuItems);\n    while (prefSize.width > prefWidth && overflowableIndexes.length > 0) {\n      if (this._menuBar.ellipsisPosition === MenuBar.EllipsisPosition.RIGHT) {\n        overflowIndex = overflowableIndexes.splice(-1)[0];\n      } else {\n        overflowIndex = overflowableIndexes.splice(0, 1)[0] - this._overflowMenuItems.length;\n      }\n      this._overflowMenuItems.splice(0, 0, visibleMenuItems[overflowIndex]);\n      visibleMenuItems.splice(overflowIndex, 1);\n      this._setFirstLastMenuMarker(visibleMenuItems);\n      prefSize = this._prefSize(visibleMenuItems);\n    }\n    return prefSize;\n  }\n\n  _minSize(visibleMenuItems) {\n    let minVisibleMenuItems = visibleMenuItems.filter(menuItem => !menuItem.stackable);\n    this.shrink(visibleMenuItems);\n    this._setFirstLastMenuMarker(minVisibleMenuItems, true);\n    return this._prefSize(minVisibleMenuItems, true);\n  }\n\n  _prefSize(menuItems, considerEllipsis) {\n    let prefSize = new Dimension(0, 0);\n    considerEllipsis = scout.nvl(considerEllipsis, this._overflowMenuItems.length > 0);\n    this._setFirstLastMenuMarker(menuItems, considerEllipsis);\n    menuItems.forEach(menuItem => {\n      let itemSize = new Dimension(0, 0);\n      if (menuItem.ellipsis) {\n        if (considerEllipsis) {\n          itemSize = this._menuItemSize(menuItem);\n        }\n      } else {\n        itemSize = this._menuItemSize(menuItem);\n      }\n      prefSize.height = Math.max(prefSize.height, itemSize.height);\n      prefSize.width += itemSize.width;\n    });\n    return prefSize;\n  }\n\n  _menuItemSize(menuItem) {\n    let classList = menuItem.$container.attr('class');\n\n    menuItem.$container.removeClass('overflown');\n    menuItem.$container.removeClass('hidden');\n\n    menuItem.htmlComp.invalidateLayout();\n    let prefSize = menuItem.htmlComp.prefSize({\n      useCssSize: true,\n      exact: true\n    }).add(graphics.margins(menuItem.$container));\n\n    menuItem.$container.attrOrRemove('class', classList);\n    return prefSize;\n  }\n\n  _setFirstLastMenuMarker(visibleMenuItems, considerEllipsis) {\n    let menuItems = visibleMenuItems;\n    considerEllipsis = scout.nvl(considerEllipsis, this._overflowMenuItems.length > 0);\n\n    // reset\n    this._menuBar.orderedMenuItems.all.forEach(menuItem => {\n      menuItem.$container.removeClass('first last');\n    });\n\n    // set first and last\n    if (!considerEllipsis) {\n      // remove ellipsis\n      menuItems = menuItems.filter(menuItem => {\n        return !menuItem.ellipsis;\n      });\n    }\n    if (menuItems.length > 0) {\n      menuItems[0].$container.addClass('first');\n      menuItems[menuItems.length - 1].$container.addClass('last');\n    }\n  }\n\n  undoOverflow(overflowMenuItems) {\n    overflowMenuItems.forEach(menuItem => {\n      menuItem._setOverflown(true);\n    });\n  }\n\n  /**\n   * Makes the text invisible of all shrinkable menus with an icon\n   */\n  shrink(menus) {\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig !== undefined) {\n        // already done\n        return;\n      }\n      if (menu.shrinkable && menu.icon) {\n        menu.textVisibleOrig = menu.textVisible;\n        menu.htmlComp.suppressInvalidate = true;\n        menu.setTextVisible(false);\n        menu.htmlComp.suppressInvalidate = false;\n      }\n    }, this);\n  }\n\n  undoShrink(menus) {\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig === undefined) {\n        return;\n      }\n      // Restore old text visible state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setTextVisible(menu.textVisibleOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.textVisibleOrig = undefined;\n    }, this);\n  }\n\n  visibleMenuItems() {\n    return this._menuBar.orderedMenuItems.all.filter(menuItem => {\n      return menuItem.visible;\n    }, this);\n  }\n\n  /* --- STATIC HELPERS ------------------------------------------------------------- */\n\n  /**\n   * @memberOf MenuBarLayout\n   */\n  static size(htmlMenuBar, containerSize) {\n    let menuBarSize = htmlMenuBar.prefSize({widthHint: containerSize.width});\n    menuBarSize.width = containerSize.width;\n    menuBarSize = menuBarSize.subtract(htmlMenuBar.margins());\n    return menuBarSize;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}