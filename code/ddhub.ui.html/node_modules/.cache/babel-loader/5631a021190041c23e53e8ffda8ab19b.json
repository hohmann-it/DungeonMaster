{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AjaxError, App, arrays, icons, logging, NullLogger, scout, strings } from './index';\nimport $ from 'jquery';\nimport sourcemappedStacktrace from 'sourcemapped-stacktrace';\nexport default class ErrorHandler {\n  constructor() {\n    this.logError = true;\n    this.displayError = true;\n    this.sendError = false;\n    this.windowErrorHandler = this._onWindowError.bind(this);\n    this.session = null;\n  }\n\n  /**\n   * Use this constant to configure whether or not all instances of the ErrorHandler should write\n   * to the console. When you've installed a console appender to log4javascript you can set the\n   * value to false, because the ErrorHandler also calls $.log.error and thus the appender has\n   * already written the message to the console. We don't want to see it twice.\n   */\n\n  init(options) {\n    $.extend(this, options);\n  }\n\n  // Signature matches the \"window.onerror\" event handler\n  // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n  _onWindowError(errorMessage, fileName, lineNumber, columnNumber, error) {\n    try {\n      if (this._isIgnorableScriptError(errorMessage, fileName, lineNumber, columnNumber, error)) {\n        this.handleErrorInfo({\n          log: \"Ignoring error. Message: \".concat(errorMessage),\n          level: logging.Level.INFO\n        });\n        return;\n      }\n      if (error instanceof Error) {\n        this.handle(error).catch(error => {\n          console.error('Error in global JavaScript error handler', error);\n        });\n        return;\n      }\n      let code = 'J00';\n      let log = errorMessage + ' at ' + fileName + ':' + lineNumber + '\\n(' + 'Code ' + code + ')';\n      this.handleErrorInfo({\n        code: code,\n        message: errorMessage,\n        log: log\n      });\n    } catch (err) {\n      throw new Error('Error in global JavaScript error handler: ' + err.message + ' (original error: ' + errorMessage + ' at ' + fileName + ':' + lineNumber + ')');\n    }\n  }\n  _isIgnorableScriptError(message, fileName, lineNumber, columnNumber, error) {\n    // Ignore errors caused by scripts from a different origin.\n    // Example: Firefox on iOS throws an error, probably caused by an internal Firefox script.\n    // The error does not affect the application and cannot be prevented by the app either since we don't know what script it is and what it does.\n    // In that case the error must no be shown to the user, instead just log it silently.\n    // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n    return message && message.toLowerCase().indexOf('script error') > -1 && !fileName && !lineNumber && !columnNumber && !error;\n  }\n\n  /**\n   * Handles unexpected JavaScript errors. The arguments are first analyzed and then handled.\n   *\n   * This method may be called by passing the arguments individually or as an array (or array-like object)\n   * in the first argument.\n   * Examples:\n   *   1. try { ... } catch (err) { handler.handle(err); }\n   *   2. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(jqXHR, textStatus, errorThrown); }\n   *   3. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(arguments); } // <-- recommended\n   *\n   * @param {object|arguments|[]} error or array or array-like object containing the error and other arguments\n   * @return {Promise} the analyzed errorInfo\n   */\n  handle(errorOrArgs) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    let error = errorOrArgs;\n    if (errorOrArgs && args.length === 0) {\n      if (String(errorOrArgs) === '[object Arguments]') {\n        error = errorOrArgs[0];\n        args = [...errorOrArgs].slice(1);\n      } else if (Array.isArray(errorOrArgs)) {\n        error = errorOrArgs[0];\n        args = errorOrArgs.slice(1);\n      }\n    }\n    return this.analyzeError(error, ...args).then(this.handleErrorInfo.bind(this));\n  }\n\n  /**\n   * Returns an \"errorInfo\" object for the given arguments. The following cases are handled:\n   * 1. Error objects           (code: computed by getJsErrorCode())\n   * 2. jQuery AJAX errors      (code: 'X' + HTTP status code)\n   * 3. Nothing                 (code: 'P3')\n   * 4. Everything else         (code: 'P4')\n   * @returns {Promise}\n   */\n  analyzeError(error) {\n    let errorInfo = {\n      code: null,\n      message: null,\n      stack: null,\n      mappedStack: null,\n      debugInfo: null,\n      log: null,\n      error: error\n    };\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return this._analyzeError(errorInfo, ...args);\n  }\n  _analyzeError(errorInfo) {\n    let error = errorInfo.error;\n    // 1. Regular errors\n    if (error instanceof Error) {\n      // Map stack first before analyzing the error\n      return this.mapStack(error.stack).catch(result => {\n        errorInfo.mappingError = result.message + '\\n' + result.error.message + '\\n' + result.error.stack;\n        return null;\n      }).then(mappedStack => {\n        errorInfo.mappedStack = mappedStack;\n        this._analyzeRegularError(errorInfo);\n        return errorInfo;\n      });\n    }\n\n    // 2. Ajax errors\n    if ($.isJqXHR(error) || Array.isArray(error) && $.isJqXHR(error[0]) || error instanceof AjaxError) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      this._analyzeAjaxError(errorInfo, ...args);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 3. No reason provided\n    if (!error) {\n      this._analyzeNoError(errorInfo);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 4. Everything else (e.g. when strings are thrown)\n    this._analyzeOtherError(errorInfo);\n    return $.resolvedPromise(errorInfo);\n  }\n  _analyzeRegularError(errorInfo) {\n    let error = errorInfo.error;\n    errorInfo.code = this.getJsErrorCode(error);\n    errorInfo.message = String(error.message || error);\n    if (error.stack) {\n      errorInfo.stack = String(error.stack);\n    }\n    if (error.debugInfo) {\n      // scout extension\n      errorInfo.debugInfo = error.debugInfo;\n    }\n    let stack = errorInfo.mappedStack || errorInfo.stack;\n    let log = [];\n    if (!stack || stack.indexOf(errorInfo.message) === -1) {\n      // Only log message if not already included in stack\n      log.push(errorInfo.message);\n    }\n    if (stack) {\n      log.push(stack);\n    }\n    if (errorInfo.mappingError) {\n      log.push(errorInfo.mappingError);\n    }\n    if (errorInfo.debugInfo) {\n      // Error throwers may put a \"debugInfo\" string on the error object that is then added to the log string (this is a scout extension).\n      log.push('----- Additional debug information: -----\\n' + errorInfo.debugInfo);\n    }\n    errorInfo.log = arrays.format(log, '\\n');\n  }\n  _analyzeAjaxError(errorInfo) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    let error = errorInfo.error;\n    let jqXHR, errorThrown, requestOptions;\n    if (error instanceof AjaxError) {\n      // Scout Ajax Error\n      jqXHR = error.jqXHR;\n      errorThrown = error.errorThrown;\n      requestOptions = error.requestOptions; // scout extension\n    } else {\n      // jQuery $.ajax() error (arguments of the fail handler are: jqXHR, textStatus, errorThrown, requestOptions)\n      // The first argument (jqXHR) is stored in errorInfo.error (may even be an array) -> create args array again and extract the parameters\n      args = arrays.ensure(error).concat(args);\n      jqXHR = args[0];\n      errorThrown = args[2];\n      requestOptions = args[3]; // scout extension\n    }\n\n    let ajaxRequest = requestOptions ? strings.join(' ', requestOptions.type, requestOptions.url) : '';\n    let ajaxStatus = jqXHR.status ? strings.join(' ', jqXHR.status, errorThrown) : 'Connection error';\n    errorInfo.code = 'X' + (jqXHR.status || '0');\n    errorInfo.message = 'AJAX call' + strings.box(' \"', ajaxRequest, '\"') + ' failed' + strings.box(' [', ajaxStatus, ']');\n    errorInfo.log = errorInfo.message;\n    if (jqXHR.responseText) {\n      errorInfo.debugInfo = 'Response text:\\n' + jqXHR.responseText;\n      errorInfo.log += '\\n' + errorInfo.debugInfo;\n    }\n  }\n  _analyzeOtherError(errorInfo) {\n    let error = errorInfo.error;\n    // Everything else (e.g. when strings are thrown)\n    let s = typeof error === 'string' || typeof error === 'number' ? String(error) : null;\n    errorInfo.code = 'P4';\n    errorInfo.message = s || 'Unexpected error';\n    if (!s) {\n      try {\n        s = JSON.stringify(error); // may throw \"cyclic object value\" error\n      } catch (err) {\n        s = String(error);\n      }\n    }\n    errorInfo.log = 'Unexpected error: ' + s;\n  }\n  _analyzeNoError(errorInfo) {\n    errorInfo.code = 'P3';\n    errorInfo.message = 'Unknown error';\n    errorInfo.log = 'Unexpected error (no reason provided)';\n  }\n  mapStack(stack) {\n    let deferred = $.Deferred();\n    try {\n      sourcemappedStacktrace.mapStackTrace(stack, mappedStack => {\n        deferred.resolve(arrays.format(mappedStack, '\\n'));\n      });\n    } catch (e) {\n      return $.rejectedPromise({\n        message: 'Exception mapping failed',\n        error: e\n      });\n    }\n    return deferred.promise();\n  }\n\n  /**\n   * Expects an object as returned by analyzeError() and handles it:\n   * - If the flag \"logError\" is set, the log message is printed to the console\n   * - If there is a scout session and the flag \"displayError\" is set, the error is shown in a a message box.\n   * - If there is a scout session and the flag \"sendError\" is set, the error is sent to the UI server.\n   */\n  handleErrorInfo(errorInfo) {\n    errorInfo.level = scout.nvl(errorInfo.level, logging.Level.ERROR);\n    if (this.logError && errorInfo.log) {\n      this._logErrorInfo(errorInfo);\n    }\n\n    // Note: The error handler is installed globally and we cannot tell in which scout session the error happened.\n    // We simply use the first scout session to display the message box and log the error. This is not ideal in the\n    // multi-session-case (portlet), but currently there is no other way. Besides, this feature is not in use yet.\n    let session = this.session || App.get().sessions[0];\n    if (session) {\n      if (this.displayError && errorInfo.level === logging.Level.ERROR) {\n        this._showMessageBox(session, errorInfo.message, errorInfo.code, errorInfo.log);\n      }\n      if (this.sendError) {\n        this._sendErrorMessage(session, errorInfo.log, errorInfo.level);\n      }\n    }\n    return errorInfo;\n  }\n  _logErrorInfo(errorInfo) {\n    switch (errorInfo.level) {\n      case logging.Level.TRACE:\n        $.log.trace(errorInfo.log);\n        break;\n      case logging.Level.DEBUG:\n        $.log.debug(errorInfo.log);\n        break;\n      case logging.Level.INFO:\n        $.log.info(errorInfo.log);\n        break;\n      case logging.Level.WARN:\n        $.log.warn(errorInfo.log);\n        break;\n      default:\n        $.log.error(errorInfo.log);\n    }\n\n    // Note: when the null-logger is active it has already written the error to the console\n    // when the $.log.error function has been called above, so we don't have to log again here.\n    let writeToConsole = ErrorHandler.CONSOLE_OUTPUT;\n    if ($.log instanceof NullLogger) {\n      writeToConsole = false;\n    }\n    if (writeToConsole && window && window.console) {\n      if (errorInfo.level === logging.Level.ERROR && window.console.error) {\n        window.console.error(errorInfo.log);\n      } else if (errorInfo.level === logging.Level.WARN && window.console.warn) {\n        window.console.warn(errorInfo.log);\n      } else if (window.console.log) {\n        window.console.log(errorInfo.log);\n      }\n    }\n  }\n\n  /**\n   * Generate a \"cool looking\" error code from the JS error object, that\n   * does not reveal too much technical information, but at least indicates\n   * that a JS runtime error has occurred. (In contrast, fatal errors from\n   * the server have numeric error codes.)\n   */\n  getJsErrorCode(error) {\n    if (error) {\n      if (error.name === 'EvalError') {\n        return 'E1';\n      }\n      if (error.name === 'InternalError') {\n        return 'I2';\n      }\n      if (error.name === 'RangeError') {\n        return 'A3';\n      }\n      if (error.name === 'ReferenceError') {\n        return 'R4';\n      }\n      if (error.name === 'SyntaxError') {\n        return 'S5';\n      }\n      if (error.name === 'TypeError') {\n        return 'T6';\n      }\n      if (error.name === 'URIError') {\n        return 'U7';\n      }\n    }\n    return 'J0';\n  }\n  _showMessageBox(session, errorMessage, errorCode, logMessage) {\n    let options = {\n      header: session.optText('ui.UnexpectedProblem', 'Internal UI Error'),\n      body: strings.join('\\n\\n', session.optText('ui.InternalUiErrorMsg', errorMessage, ' (' + session.optText('ui.ErrorCodeX', 'Code ' + errorCode, errorCode) + ')'), session.optText('ui.UiInconsistentMsg', '')),\n      yesButtonText: session.optText('ui.Reload', 'Reload'),\n      yesButtonAction: scout.reloadPage,\n      hiddenText: logMessage,\n      iconId: icons.SLIPPERY\n    };\n    if (session.inDevelopmentMode) {\n      options.noButtonText = session.optText('ui.Ignore', 'Ignore');\n    }\n    session.showFatalMessage(options, errorCode);\n  }\n  _sendErrorMessage(session, logMessage, logLevel) {\n    session.sendLogRequest(logMessage, logLevel);\n  }\n}\n_defineProperty(ErrorHandler, \"CONSOLE_OUTPUT\", true);","map":{"version":3,"names":["AjaxError","App","arrays","icons","logging","NullLogger","scout","strings","$","sourcemappedStacktrace","ErrorHandler","constructor","logError","displayError","sendError","windowErrorHandler","_onWindowError","bind","session","init","options","extend","errorMessage","fileName","lineNumber","columnNumber","error","_isIgnorableScriptError","handleErrorInfo","log","level","Level","INFO","Error","handle","catch","console","code","message","err","toLowerCase","indexOf","errorOrArgs","args","length","String","slice","Array","isArray","analyzeError","then","errorInfo","stack","mappedStack","debugInfo","_analyzeError","mapStack","result","mappingError","_analyzeRegularError","isJqXHR","_analyzeAjaxError","resolvedPromise","_analyzeNoError","_analyzeOtherError","getJsErrorCode","push","format","jqXHR","errorThrown","requestOptions","ensure","concat","ajaxRequest","join","type","url","ajaxStatus","status","box","responseText","s","JSON","stringify","deferred","Deferred","mapStackTrace","resolve","e","rejectedPromise","promise","nvl","ERROR","_logErrorInfo","get","sessions","_showMessageBox","_sendErrorMessage","TRACE","trace","DEBUG","debug","info","WARN","warn","writeToConsole","CONSOLE_OUTPUT","window","name","errorCode","logMessage","header","optText","body","yesButtonText","yesButtonAction","reloadPage","hiddenText","iconId","SLIPPERY","inDevelopmentMode","noButtonText","showFatalMessage","logLevel","sendLogRequest"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/ErrorHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AjaxError, App, arrays, icons, logging, NullLogger, scout, strings} from './index';\nimport $ from 'jquery';\nimport sourcemappedStacktrace from 'sourcemapped-stacktrace';\n\nexport default class ErrorHandler {\n\n  constructor() {\n    this.logError = true;\n    this.displayError = true;\n    this.sendError = false;\n    this.windowErrorHandler = this._onWindowError.bind(this);\n    this.session = null;\n  }\n\n  /**\n   * Use this constant to configure whether or not all instances of the ErrorHandler should write\n   * to the console. When you've installed a console appender to log4javascript you can set the\n   * value to false, because the ErrorHandler also calls $.log.error and thus the appender has\n   * already written the message to the console. We don't want to see it twice.\n   */\n  static CONSOLE_OUTPUT = true;\n\n  init(options) {\n    $.extend(this, options);\n  }\n\n  // Signature matches the \"window.onerror\" event handler\n  // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n  _onWindowError(errorMessage, fileName, lineNumber, columnNumber, error) {\n    try {\n      if (this._isIgnorableScriptError(errorMessage, fileName, lineNumber, columnNumber, error)) {\n        this.handleErrorInfo({\n          log: `Ignoring error. Message: ${errorMessage}`,\n          level: logging.Level.INFO\n        });\n        return;\n      }\n      if (error instanceof Error) {\n        this.handle(error)\n          .catch(error => {\n            console.error('Error in global JavaScript error handler', error);\n          });\n        return;\n      }\n      let code = 'J00';\n      let log = errorMessage + ' at ' + fileName + ':' + lineNumber + '\\n(' + 'Code ' + code + ')';\n      this.handleErrorInfo({\n        code: code,\n        message: errorMessage,\n        log: log\n      });\n    } catch (err) {\n      throw new Error('Error in global JavaScript error handler: ' + err.message + ' (original error: ' + errorMessage + ' at ' + fileName + ':' + lineNumber + ')');\n    }\n  }\n\n  _isIgnorableScriptError(message, fileName, lineNumber, columnNumber, error) {\n    // Ignore errors caused by scripts from a different origin.\n    // Example: Firefox on iOS throws an error, probably caused by an internal Firefox script.\n    // The error does not affect the application and cannot be prevented by the app either since we don't know what script it is and what it does.\n    // In that case the error must no be shown to the user, instead just log it silently.\n    // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror\n    return message && message.toLowerCase().indexOf('script error') > -1 && !fileName && !lineNumber && !columnNumber && !error;\n  }\n\n  /**\n   * Handles unexpected JavaScript errors. The arguments are first analyzed and then handled.\n   *\n   * This method may be called by passing the arguments individually or as an array (or array-like object)\n   * in the first argument.\n   * Examples:\n   *   1. try { ... } catch (err) { handler.handle(err); }\n   *   2. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(jqXHR, textStatus, errorThrown); }\n   *   3. $.get().fail(function(jqXHR, textStatus, errorThrown) { handler.handle(arguments); } // <-- recommended\n   *\n   * @param {object|arguments|[]} error or array or array-like object containing the error and other arguments\n   * @return {Promise} the analyzed errorInfo\n   */\n  handle(errorOrArgs, ...args) {\n    let error = errorOrArgs;\n    if (errorOrArgs && args.length === 0) {\n      if ((String(errorOrArgs) === '[object Arguments]')) {\n        error = errorOrArgs[0];\n        args = [...errorOrArgs].slice(1);\n      } else if (Array.isArray(errorOrArgs)) {\n        error = errorOrArgs[0];\n        args = errorOrArgs.slice(1);\n      }\n    }\n    return this.analyzeError(error, ...args)\n      .then(this.handleErrorInfo.bind(this));\n  }\n\n  /**\n   * Returns an \"errorInfo\" object for the given arguments. The following cases are handled:\n   * 1. Error objects           (code: computed by getJsErrorCode())\n   * 2. jQuery AJAX errors      (code: 'X' + HTTP status code)\n   * 3. Nothing                 (code: 'P3')\n   * 4. Everything else         (code: 'P4')\n   * @returns {Promise}\n   */\n  analyzeError(error, ...args) {\n    let errorInfo = {\n      code: null,\n      message: null,\n      stack: null,\n      mappedStack: null,\n      debugInfo: null,\n      log: null,\n      error: error\n    };\n\n    return this._analyzeError(errorInfo, ...args);\n  }\n\n  _analyzeError(errorInfo, ...args) {\n    let error = errorInfo.error;\n    // 1. Regular errors\n    if (error instanceof Error) {\n      // Map stack first before analyzing the error\n      return this.mapStack(error.stack)\n        .catch(result => {\n          errorInfo.mappingError = result.message + '\\n' + result.error.message + '\\n' + result.error.stack;\n          return null;\n        })\n        .then(mappedStack => {\n          errorInfo.mappedStack = mappedStack;\n          this._analyzeRegularError(errorInfo);\n          return errorInfo;\n        });\n    }\n\n    // 2. Ajax errors\n    if ($.isJqXHR(error) || (Array.isArray(error) && $.isJqXHR(error[0])) || error instanceof AjaxError) {\n      this._analyzeAjaxError(errorInfo, ...args);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 3. No reason provided\n    if (!error) {\n      this._analyzeNoError(errorInfo);\n      return $.resolvedPromise(errorInfo);\n    }\n\n    // 4. Everything else (e.g. when strings are thrown)\n    this._analyzeOtherError(errorInfo);\n    return $.resolvedPromise(errorInfo);\n  }\n\n  _analyzeRegularError(errorInfo) {\n    let error = errorInfo.error;\n    errorInfo.code = this.getJsErrorCode(error);\n    errorInfo.message = String(error.message || error);\n    if (error.stack) {\n      errorInfo.stack = String(error.stack);\n    }\n    if (error.debugInfo) { // scout extension\n      errorInfo.debugInfo = error.debugInfo;\n    }\n    let stack = errorInfo.mappedStack || errorInfo.stack;\n    let log = [];\n    if (!stack || stack.indexOf(errorInfo.message) === -1) {\n      // Only log message if not already included in stack\n      log.push(errorInfo.message);\n    }\n    if (stack) {\n      log.push(stack);\n    }\n    if (errorInfo.mappingError) {\n      log.push(errorInfo.mappingError);\n    }\n    if (errorInfo.debugInfo) {\n      // Error throwers may put a \"debugInfo\" string on the error object that is then added to the log string (this is a scout extension).\n      log.push('----- Additional debug information: -----\\n' + errorInfo.debugInfo);\n    }\n    errorInfo.log = arrays.format(log, '\\n');\n  }\n\n  _analyzeAjaxError(errorInfo, ...args) {\n    let error = errorInfo.error;\n    let jqXHR, errorThrown, requestOptions;\n    if (error instanceof AjaxError) {\n      // Scout Ajax Error\n      jqXHR = error.jqXHR;\n      errorThrown = error.errorThrown;\n      requestOptions = error.requestOptions; // scout extension\n    } else {\n      // jQuery $.ajax() error (arguments of the fail handler are: jqXHR, textStatus, errorThrown, requestOptions)\n      // The first argument (jqXHR) is stored in errorInfo.error (may even be an array) -> create args array again and extract the parameters\n      args = arrays.ensure(error).concat(args);\n      jqXHR = args[0];\n      errorThrown = args[2];\n      requestOptions = args[3]; // scout extension\n    }\n\n    let ajaxRequest = (requestOptions ? strings.join(' ', requestOptions.type, requestOptions.url) : '');\n    let ajaxStatus = (jqXHR.status ? strings.join(' ', jqXHR.status, errorThrown) : 'Connection error');\n\n    errorInfo.code = 'X' + (jqXHR.status || '0');\n    errorInfo.message = 'AJAX call' + strings.box(' \"', ajaxRequest, '\"') + ' failed' + strings.box(' [', ajaxStatus, ']');\n    errorInfo.log = errorInfo.message;\n    if (jqXHR.responseText) {\n      errorInfo.debugInfo = 'Response text:\\n' + jqXHR.responseText;\n      errorInfo.log += '\\n' + errorInfo.debugInfo;\n    }\n  }\n\n  _analyzeOtherError(errorInfo) {\n    let error = errorInfo.error;\n    // Everything else (e.g. when strings are thrown)\n    let s = (typeof error === 'string' || typeof error === 'number') ? String(error) : null;\n    errorInfo.code = 'P4';\n    errorInfo.message = s || 'Unexpected error';\n    if (!s) {\n      try {\n        s = JSON.stringify(error); // may throw \"cyclic object value\" error\n      } catch (err) {\n        s = String(error);\n      }\n    }\n    errorInfo.log = 'Unexpected error: ' + s;\n  }\n\n  _analyzeNoError(errorInfo) {\n    errorInfo.code = 'P3';\n    errorInfo.message = 'Unknown error';\n    errorInfo.log = 'Unexpected error (no reason provided)';\n  }\n\n  mapStack(stack) {\n    let deferred = $.Deferred();\n    try {\n      sourcemappedStacktrace.mapStackTrace(stack, mappedStack => {\n        deferred.resolve(arrays.format(mappedStack, '\\n'));\n      });\n    } catch (e) {\n      return $.rejectedPromise({message: 'Exception mapping failed', error: e});\n    }\n\n    return deferred.promise();\n  }\n\n  /**\n   * Expects an object as returned by analyzeError() and handles it:\n   * - If the flag \"logError\" is set, the log message is printed to the console\n   * - If there is a scout session and the flag \"displayError\" is set, the error is shown in a a message box.\n   * - If there is a scout session and the flag \"sendError\" is set, the error is sent to the UI server.\n   */\n  handleErrorInfo(errorInfo) {\n    errorInfo.level = scout.nvl(errorInfo.level, logging.Level.ERROR);\n    if (this.logError && errorInfo.log) {\n      this._logErrorInfo(errorInfo);\n    }\n\n    // Note: The error handler is installed globally and we cannot tell in which scout session the error happened.\n    // We simply use the first scout session to display the message box and log the error. This is not ideal in the\n    // multi-session-case (portlet), but currently there is no other way. Besides, this feature is not in use yet.\n    let session = this.session || App.get().sessions[0];\n    if (session) {\n      if (this.displayError && errorInfo.level === logging.Level.ERROR) {\n        this._showMessageBox(session, errorInfo.message, errorInfo.code, errorInfo.log);\n      }\n      if (this.sendError) {\n        this._sendErrorMessage(session, errorInfo.log, errorInfo.level);\n      }\n    }\n    return errorInfo;\n  }\n\n  _logErrorInfo(errorInfo) {\n    switch (errorInfo.level) {\n      case logging.Level.TRACE:\n        $.log.trace(errorInfo.log);\n        break;\n      case logging.Level.DEBUG:\n        $.log.debug(errorInfo.log);\n        break;\n      case logging.Level.INFO:\n        $.log.info(errorInfo.log);\n        break;\n      case logging.Level.WARN:\n        $.log.warn(errorInfo.log);\n        break;\n      default:\n        $.log.error(errorInfo.log);\n    }\n\n    // Note: when the null-logger is active it has already written the error to the console\n    // when the $.log.error function has been called above, so we don't have to log again here.\n    let writeToConsole = ErrorHandler.CONSOLE_OUTPUT;\n    if ($.log instanceof NullLogger) {\n      writeToConsole = false;\n    }\n    if (writeToConsole && window && window.console) {\n      if (errorInfo.level === logging.Level.ERROR && window.console.error) {\n        window.console.error(errorInfo.log);\n      } else if (errorInfo.level === logging.Level.WARN && window.console.warn) {\n        window.console.warn(errorInfo.log);\n      } else if (window.console.log) {\n        window.console.log(errorInfo.log);\n      }\n    }\n  }\n\n  /**\n   * Generate a \"cool looking\" error code from the JS error object, that\n   * does not reveal too much technical information, but at least indicates\n   * that a JS runtime error has occurred. (In contrast, fatal errors from\n   * the server have numeric error codes.)\n   */\n  getJsErrorCode(error) {\n    if (error) {\n      if (error.name === 'EvalError') {\n        return 'E1';\n      }\n      if (error.name === 'InternalError') {\n        return 'I2';\n      }\n      if (error.name === 'RangeError') {\n        return 'A3';\n      }\n      if (error.name === 'ReferenceError') {\n        return 'R4';\n      }\n      if (error.name === 'SyntaxError') {\n        return 'S5';\n      }\n      if (error.name === 'TypeError') {\n        return 'T6';\n      }\n      if (error.name === 'URIError') {\n        return 'U7';\n      }\n    }\n    return 'J0';\n  }\n\n  _showMessageBox(session, errorMessage, errorCode, logMessage) {\n    let options = {\n      header: session.optText('ui.UnexpectedProblem', 'Internal UI Error'),\n      body: strings.join('\\n\\n',\n        session.optText('ui.InternalUiErrorMsg', errorMessage, ' (' + session.optText('ui.ErrorCodeX', 'Code ' + errorCode, errorCode) + ')'),\n        session.optText('ui.UiInconsistentMsg', '')),\n      yesButtonText: session.optText('ui.Reload', 'Reload'),\n      yesButtonAction: scout.reloadPage,\n      hiddenText: logMessage,\n      iconId: icons.SLIPPERY\n    };\n\n    if (session.inDevelopmentMode) {\n      options.noButtonText = session.optText('ui.Ignore', 'Ignore');\n    }\n\n    session.showFatalMessage(options, errorCode);\n  }\n\n  _sendErrorMessage(session, logMessage, logLevel) {\n    session.sendLogRequest(logMessage, logLevel);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}