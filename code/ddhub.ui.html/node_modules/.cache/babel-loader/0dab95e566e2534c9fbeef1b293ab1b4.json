{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ColumnUserFilter, dates, TableMatrix } from '../../index';\nimport $ from 'jquery';\nexport default class DateColumnUserFilter extends ColumnUserFilter {\n  constructor() {\n    super();\n    this.dateFrom = null;\n    this.dateFromField = null;\n    this.dateTo = null;\n    this.dateToField = null;\n    this.hasFilterFields = true;\n  }\n\n  /**\n   * @override TableUserFilter.js\n   */\n  _init(model) {\n    super._init(model);\n    this.dateFrom = dates.parseJsonDate(this.dateFrom);\n    this.dateTo = dates.parseJsonDate(this.dateTo);\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  axisGroup() {\n    if (this.column.hasDate) {\n      // Default grouping for date columns is year\n      return TableMatrix.DateGroup.YEAR;\n    }\n    // No grouping for time columns\n    return TableMatrix.DateGroup.NONE;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  createFilterAddedEventData() {\n    let data = super.createFilterAddedEventData();\n    data.dateFrom = dates.toJsonDate(this.dateFrom);\n    data.dateTo = dates.toJsonDate(this.dateTo);\n    return data;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  fieldsFilterActive() {\n    return this.dateFrom || this.dateTo;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  acceptByFields(key, normKey, row) {\n    // if date is empty and dateFrom/dateTo is set, the row should never match\n    if (!key) {\n      return false;\n    }\n    let keyValue = key.valueOf(),\n      fromValue = this.dateFrom ? this.dateFrom.valueOf() : null,\n      // Shift the toValue to 1ms before midnight/next day. Thus any time of the selected day is accepted.\n      toValue = this.dateTo ? dates.shift(this.dateTo, 0, 0, 1).valueOf() - 1 : null;\n    if (fromValue && toValue) {\n      return keyValue >= fromValue && keyValue <= toValue;\n    } else if (fromValue) {\n      return keyValue >= fromValue;\n    } else if (toValue) {\n      return keyValue <= toValue;\n    }\n\n    // acceptByFields is only called when filter fields are active\n    throw new Error('illegal state');\n  }\n\n  /**\n   * @override\n   */\n  filterFieldsTitle() {\n    return this.session.text('ui.DateRange');\n  }\n\n  /**\n   * @override\n   */\n  addFilterFields(groupBox) {\n    this.dateFromField = groupBox.addFilterField('DateField', 'ui.from');\n    this.dateFromField.setValue(this.dateFrom);\n    this.dateFromField.on('propertyChange', this._onPropertyChange.bind(this));\n    this.dateToField = groupBox.addFilterField('DateField', 'ui.to');\n    this.dateToField.setValue(this.dateTo);\n    this.dateToField.on('propertyChange', this._onPropertyChange.bind(this));\n  }\n  _onPropertyChange(event) {\n    if (event.propertyName !== 'value') {\n      return;\n    }\n    this.dateFrom = this.dateFromField.value;\n    this.dateTo = this.dateToField.value;\n    $.log.isDebugEnabled() && $.log.debug('(DateColumnUserFilter#_onAcceptInput) dateFrom=' + this.dateFrom + ' dateTo=' + this.dateTo);\n    this.triggerFilterFieldsChanged(event);\n  }\n  modifyFilterFields() {\n    this.dateFromField.$field.on('input', '', $.debounce(this._onInput.bind(this)));\n    this.dateToField.$field.on('input', '', $.debounce(this._onInput.bind(this)));\n  }\n  _onInput(event) {\n    if (!this.dateFromField.rendered) {\n      // popup has been closed in the mean time\n      return;\n    }\n    this.dateFrom = this.dateFromField.value;\n    this.dateTo = this.dateToField.value;\n    this.triggerFilterFieldsChanged(event);\n  }\n}","map":{"version":3,"names":["ColumnUserFilter","dates","TableMatrix","$","DateColumnUserFilter","constructor","dateFrom","dateFromField","dateTo","dateToField","hasFilterFields","_init","model","parseJsonDate","axisGroup","column","hasDate","DateGroup","YEAR","NONE","createFilterAddedEventData","data","toJsonDate","fieldsFilterActive","acceptByFields","key","normKey","row","keyValue","valueOf","fromValue","toValue","shift","Error","filterFieldsTitle","session","text","addFilterFields","groupBox","addFilterField","setValue","on","_onPropertyChange","bind","event","propertyName","value","log","isDebugEnabled","debug","triggerFilterFieldsChanged","modifyFilterFields","$field","debounce","_onInput","rendered"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/userfilter/DateColumnUserFilter.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ColumnUserFilter, dates, TableMatrix} from '../../index';\nimport $ from 'jquery';\n\nexport default class DateColumnUserFilter extends ColumnUserFilter {\n\n  constructor() {\n    super();\n\n    this.dateFrom = null;\n    this.dateFromField = null;\n    this.dateTo = null;\n    this.dateToField = null;\n\n    this.hasFilterFields = true;\n  }\n\n  /**\n   * @override TableUserFilter.js\n   */\n  _init(model) {\n    super._init(model);\n    this.dateFrom = dates.parseJsonDate(this.dateFrom);\n    this.dateTo = dates.parseJsonDate(this.dateTo);\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  axisGroup() {\n    if (this.column.hasDate) {\n      // Default grouping for date columns is year\n      return TableMatrix.DateGroup.YEAR;\n    }\n    // No grouping for time columns\n    return TableMatrix.DateGroup.NONE;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  createFilterAddedEventData() {\n    let data = super.createFilterAddedEventData();\n    data.dateFrom = dates.toJsonDate(this.dateFrom);\n    data.dateTo = dates.toJsonDate(this.dateTo);\n    return data;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  fieldsFilterActive() {\n    return this.dateFrom || this.dateTo;\n  }\n\n  /**\n   * @override ColumnUserFilter.js\n   */\n  acceptByFields(key, normKey, row) {\n    // if date is empty and dateFrom/dateTo is set, the row should never match\n    if (!key) {\n      return false;\n    }\n\n    let\n      keyValue = key.valueOf(),\n      fromValue = this.dateFrom ? this.dateFrom.valueOf() : null,\n      // Shift the toValue to 1ms before midnight/next day. Thus any time of the selected day is accepted.\n      toValue = this.dateTo ? dates.shift(this.dateTo, 0, 0, 1).valueOf() - 1 : null;\n\n    if (fromValue && toValue) {\n      return keyValue >= fromValue && keyValue <= toValue;\n    } else if (fromValue) {\n      return keyValue >= fromValue;\n    } else if (toValue) {\n      return keyValue <= toValue;\n    }\n\n    // acceptByFields is only called when filter fields are active\n    throw new Error('illegal state');\n  }\n\n  /**\n   * @override\n   */\n  filterFieldsTitle() {\n    return this.session.text('ui.DateRange');\n  }\n\n  /**\n   * @override\n   */\n  addFilterFields(groupBox) {\n    this.dateFromField = groupBox.addFilterField('DateField', 'ui.from');\n    this.dateFromField.setValue(this.dateFrom);\n    this.dateFromField.on('propertyChange', this._onPropertyChange.bind(this));\n\n    this.dateToField = groupBox.addFilterField('DateField', 'ui.to');\n    this.dateToField.setValue(this.dateTo);\n    this.dateToField.on('propertyChange', this._onPropertyChange.bind(this));\n  }\n\n  _onPropertyChange(event) {\n    if (event.propertyName !== 'value') {\n      return;\n    }\n    this.dateFrom = this.dateFromField.value;\n    this.dateTo = this.dateToField.value;\n    $.log.isDebugEnabled() && $.log.debug('(DateColumnUserFilter#_onAcceptInput) dateFrom=' + this.dateFrom + ' dateTo=' + this.dateTo);\n    this.triggerFilterFieldsChanged(event);\n  }\n\n  modifyFilterFields() {\n    this.dateFromField.$field.on('input', '', $.debounce(this._onInput.bind(this)));\n    this.dateToField.$field.on('input', '', $.debounce(this._onInput.bind(this)));\n  }\n\n  _onInput(event) {\n    if (!this.dateFromField.rendered) {\n      // popup has been closed in the mean time\n      return;\n    }\n    this.dateFrom = this.dateFromField.value;\n    this.dateTo = this.dateToField.value;\n    this.triggerFilterFieldsChanged(event);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}