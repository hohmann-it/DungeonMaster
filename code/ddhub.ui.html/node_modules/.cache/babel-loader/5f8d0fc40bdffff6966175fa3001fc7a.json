{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { scout } from './index';\n\n/**\n * This class is used to extend an existing Scout object. In order to use the extension feature\n * you must subclass Extension an implement an init method where you register the methods\n * you want to extend. Example:\n *\n * scout.MyExtension.prototype.init = function() {\n *   this.extend(scout.MyStringField.prototype, '_init');\n *   this.extend(scout.MyStringField.prototype, '_renderProperties');\n * };\n *\n * Then you implement methods with the same name and signature on the extension class. Example:\n *\n * scout.MyExtension.prototype._init = function(model) {\n *   this.next(model);\n *   this.extended.setProperty('bar', 'foo');\n * };\n *\n * The extension feature sets two properties on the extension instance before the extended method\n * is called. Note: the function scope (this) is set to the extension instance when the extended\n * function is called:\n *\n *   next: is a reference to the next extended function or the original function of the extended\n *         object, in case the current extension is the last extension in the extension chain.\n *\n *   extended: is the extended or original object.\n */\nexport default class Extension {\n  extend(extended, funcName) {\n    let origFunc = extended[funcName];\n    let extension = this;\n    extended[funcName] = function () {\n      extension.extended = this;\n      extension.next = origFunc.bind(this);\n      return extension[funcName](...arguments);\n    };\n  }\n\n  /**\n   * Calls scout.create for each extension class in the given extensions array.\n   *\n   * @param {[string]} extensions an array of strings containing extension class names\n   * @static\n   */\n  static install(extensions) {\n    extensions.forEach(ext => {\n      scout.create(ext);\n    });\n  }\n}","map":{"version":3,"names":["scout","Extension","extend","extended","funcName","origFunc","extension","next","bind","install","extensions","forEach","ext","create"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/Extension.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {scout} from './index';\n\n/**\n * This class is used to extend an existing Scout object. In order to use the extension feature\n * you must subclass Extension an implement an init method where you register the methods\n * you want to extend. Example:\n *\n * scout.MyExtension.prototype.init = function() {\n *   this.extend(scout.MyStringField.prototype, '_init');\n *   this.extend(scout.MyStringField.prototype, '_renderProperties');\n * };\n *\n * Then you implement methods with the same name and signature on the extension class. Example:\n *\n * scout.MyExtension.prototype._init = function(model) {\n *   this.next(model);\n *   this.extended.setProperty('bar', 'foo');\n * };\n *\n * The extension feature sets two properties on the extension instance before the extended method\n * is called. Note: the function scope (this) is set to the extension instance when the extended\n * function is called:\n *\n *   next: is a reference to the next extended function or the original function of the extended\n *         object, in case the current extension is the last extension in the extension chain.\n *\n *   extended: is the extended or original object.\n */\nexport default class Extension {\n\n  extend(extended, funcName) {\n    let origFunc = extended[funcName];\n    let extension = this;\n    extended[funcName] = function(...args) {\n      extension.extended = this;\n      extension.next = origFunc.bind(this);\n      return extension[funcName](...args);\n    };\n  }\n\n  /**\n   * Calls scout.create for each extension class in the given extensions array.\n   *\n   * @param {[string]} extensions an array of strings containing extension class names\n   * @static\n   */\n  static install(extensions) {\n    extensions.forEach(ext => {\n      scout.create(ext);\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAK,QAAO,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,SAAS,CAAC;EAE7BC,MAAM,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACzB,IAAIC,QAAQ,GAAGF,QAAQ,CAACC,QAAQ,CAAC;IACjC,IAAIE,SAAS,GAAG,IAAI;IACpBH,QAAQ,CAACC,QAAQ,CAAC,GAAG,YAAkB;MACrCE,SAAS,CAACH,QAAQ,GAAG,IAAI;MACzBG,SAAS,CAACC,IAAI,GAAGF,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC;MACpC,OAAOF,SAAS,CAACF,QAAQ,CAAC,CAAC,YAAO,CAAC;IACrC,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,OAAOK,OAAO,CAACC,UAAU,EAAE;IACzBA,UAAU,CAACC,OAAO,CAACC,GAAG,IAAI;MACxBZ,KAAK,CAACa,MAAM,CAACD,GAAG,CAAC;IACnB,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module"}