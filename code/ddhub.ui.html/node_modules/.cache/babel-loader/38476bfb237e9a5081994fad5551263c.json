{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Device, Notification as ScoutNotification, scout, Status, strings } from '../../index';\nexport default class DesktopNotification extends ScoutNotification {\n  constructor() {\n    super();\n    this.closable = true;\n    this.duration = 5000;\n    this.removeTimeout = null;\n    this._removing = false;\n    this.nativeOnly = false;\n    this.nativeNotificationTitle = null;\n    this.nativeNotificationStatus = null; // holds native message & native icon\n    this.nativeNotificationVisibility = DesktopNotification.NativeNotificationVisibility.NONE;\n    this.nativeNotification = null;\n    this.nativeNotificationShown = false;\n  }\n  /**\n   * @typedef NativeNotificationDefaults\n   * @property {string} title\n   * @property {string} iconId\n   * @property {NativeNotificationVisibility} visibility\n   */\n\n  _init(model) {\n    super._init(model);\n    let defaults = this.session.desktop.nativeNotificationDefaults;\n    if (defaults) {\n      this.nativeNotificationTitle = model.nativeNotificationTitle !== undefined ? model.nativeNotificationTitle : defaults.title;\n      if (this.nativeNotificationStatus) {\n        this.nativeNotificationStatus.iconId = this.nativeNotificationStatus.iconId !== undefined ? this.nativeNotificationStatus.iconId : defaults.iconId;\n      } else {\n        this.nativeNotificationStatus = new Status({\n          iconId: defaults.iconId\n        });\n      }\n      this.nativeNotificationVisibility = scout.nvl(model.nativeNotificationVisibility !== undefined ? model.nativeNotificationVisibility : defaults.visibility, DesktopNotification.NativeNotificationVisibility.NONE);\n    }\n    this.resolveTextKeys(['nativeNotificationTitle']);\n  }\n  _render() {\n    this._initNativeNotification();\n    this.$container = this.$parent.prependDiv('desktop-notification');\n    this.$content = this.$container.appendDiv('desktop-notification-content');\n    this.$messageText = this.$content.appendDiv('desktop-notification-message');\n    this.$loader = this.$container.appendDiv('desktop-notification-loader');\n    if (Device.get().supportsCssAnimation()) {\n      this.$loader.addClass('animated');\n    }\n    if (this.nativeOnly) {\n      this.setVisible(false);\n    }\n  }\n\n  /**\n   *  @override\n   */\n  _renderLoading() {\n    this.$container.toggleClass('loading', this.loading);\n    this.$loader.setVisible(this.loading);\n  }\n  _destroy() {\n    if (this.nativeNotification) {\n      // No need to keep the native notification open if the regular one is closed (relevant if the user actively closes it)\n      this.nativeNotification.close();\n    }\n    super._destroy();\n  }\n  _isDocumentHidden() {\n    return document.hidden;\n  }\n  _showNativeNotification(permission) {\n    if (permission === 'denied' || permission === 'default') {\n      if (this.nativeOnly) {\n        // See comment in _initNativeNotification\n        this.hide();\n      }\n      return;\n    }\n    let title = scout.nvl(this.nativeNotificationTitle, '');\n    let body = (this.nativeNotificationStatus || {}).message;\n    if (strings.empty(body)) {\n      body = (this.status || {}).message;\n    }\n    if (!body) {\n      body = '';\n    }\n    if (this.htmlEnabled) {\n      body = strings.plainText(body, {\n        removeFontIcons: true\n      });\n    }\n    let iconId = (this.nativeNotificationStatus || {}).iconId;\n    if (strings.empty(iconId)) {\n      // icon must not be null or empty. If no icon it must be undefined\n      iconId = undefined;\n    }\n    this.nativeNotification = new Notification(title, {\n      body: body,\n      icon: iconId\n    });\n    this.nativeNotification.addEventListener('show', event => {\n      this._setNativeNotificationShown(true);\n    });\n    this.nativeNotification.addEventListener('click', event => {\n      window.focus();\n    });\n\n    // Native notifications are closed when the regular notification is closed (either by the user, the timeout or programmatically)\n    this.nativeNotification.addEventListener('close', event => {\n      if (this.nativeOnly) {\n        // Only close it if nativeOnly is true.\n        // If nativeOnly is false, clicking the notification should reveal the app incl. the original notification which could contain more information (e.g. a link).\n        this.hide();\n      }\n      this.nativeNotification = null;\n      this._setNativeNotificationShown(false);\n    });\n  }\n  _initNativeNotification() {\n    if (this.nativeNotificationShown) {\n      // Don't show the same notification twice (could happen if the user reloads the page and the notification is still open. Especially important for nativeOnly with infinite duration).\n      return;\n    }\n    if (this.nativeNotificationVisibility === DesktopNotification.NativeNotificationVisibility.NONE) {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n    if (this.nativeNotificationVisibility === DesktopNotification.NativeNotificationVisibility.BACKGROUND && !this._isDocumentHidden()) {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n    if (window.Notification && Notification.permission === 'denied') {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n    if (this._checkNotificationPromise()) {\n      Notification.requestPermission().then(this._showNativeNotification.bind(this));\n    } else {\n      // noinspection JSIgnoredPromiseFromCall\n      Notification.requestPermission(this._showNativeNotification.bind(this));\n    }\n  }\n  _hideLaterIfNativeOnly() {\n    if (!this.nativeOnly) {\n      return;\n    }\n    // If native notifications are not shown, there is no need to keep the (invisible) desktop notification open (prevent dom-leak)\n    setTimeout(() => this.hide()); // async because this method is called in render and removing the notification within render throws exception\n  }\n\n  /**\n   * Checks if browser supports the promise-based version of the method requestPermission. Safari only supports the older callback version.\n   */\n  _checkNotificationPromise() {\n    try {\n      Notification.requestPermission().then();\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  _onCloseIconClick() {\n    this.hide();\n  }\n\n  /**\n   * Displays the notification by adding it to the desktop and rendering it.\n   */\n  show() {\n    this.session.desktop.addNotification(this);\n  }\n\n  /**\n   * Closes the notification by removing it from the desktop and destroying it. Also triggers a close event.\n   */\n  hide() {\n    if (this._removing) {\n      return;\n    }\n    this.trigger('close');\n    this.session.desktop.removeNotification(this);\n  }\n  fadeIn($parent) {\n    this.render($parent);\n    if (!Device.get().supportsCssAnimation()) {\n      return;\n    }\n    this.$container.addClassForAnimation('desktop-notification-slide-in');\n  }\n  fadeOut() {\n    // prevent fadeOut from running more than once (for instance from the click of a user).\n    if (this._removing) {\n      return;\n    }\n    this._removing = true;\n    if (!Device.get().supportsCssAnimation() || !this.rendered) {\n      this.destroy();\n      return;\n    }\n    if (!this.$container.isVisible()) {\n      // Destroy immediately if it is invisible because the animationend event would not be triggered (is the case if nativeOnly is true)\n      this.destroy();\n      return;\n    }\n    this.$container.addClass('desktop-notification-fade-out');\n    this.$container.oneAnimationEnd(() => {\n      this.destroy();\n    });\n  }\n\n  /**\n   * @override\n   */\n  invalidateLayoutTree() {\n    // called by notification.js. Since desktop notification has no htmlComp, no need to invalidate\n  }\n  _setNativeNotificationShown(shown) {\n    this._setProperty('nativeNotificationShown', shown);\n  }\n  setNativeNotificationTitle(title) {\n    this.setProperty('nativeNotificationTitle', title);\n  }\n  setNativeNotificationStatus(status) {\n    this.setProperty('nativeNotificationStatus', status);\n  }\n  _setNativeNotificationStatus(status) {\n    status = Status.ensure(status);\n    this._setProperty('nativeNotificationStatus', status);\n  }\n  setNativeNotificationVisibility(visibility) {\n    this.setProperty('nativeNotificationVisibility', visibility);\n  }\n}\n_defineProperty(DesktopNotification, \"NativeNotificationVisibility\", {\n  /**\n   * No native notification is shown.\n   */\n  NONE: 'none',\n  /**\n   * The native notification is only shown if the application is in background.\n   */\n  BACKGROUND: 'background',\n  /**\n   * The native notification is always shown.\n   */\n  ALWAYS: 'always'\n});\n_defineProperty(DesktopNotification, \"INFINITE\", -1);","map":{"version":3,"names":["Device","Notification","ScoutNotification","scout","Status","strings","DesktopNotification","constructor","closable","duration","removeTimeout","_removing","nativeOnly","nativeNotificationTitle","nativeNotificationStatus","nativeNotificationVisibility","NativeNotificationVisibility","NONE","nativeNotification","nativeNotificationShown","_init","model","defaults","session","desktop","nativeNotificationDefaults","undefined","title","iconId","nvl","visibility","resolveTextKeys","_render","_initNativeNotification","$container","$parent","prependDiv","$content","appendDiv","$messageText","$loader","get","supportsCssAnimation","addClass","setVisible","_renderLoading","toggleClass","loading","_destroy","close","_isDocumentHidden","document","hidden","_showNativeNotification","permission","hide","body","message","empty","status","htmlEnabled","plainText","removeFontIcons","icon","addEventListener","event","_setNativeNotificationShown","window","focus","_hideLaterIfNativeOnly","BACKGROUND","_checkNotificationPromise","requestPermission","then","bind","setTimeout","e","_onCloseIconClick","show","addNotification","trigger","removeNotification","fadeIn","render","addClassForAnimation","fadeOut","rendered","destroy","isVisible","oneAnimationEnd","invalidateLayoutTree","shown","_setProperty","setNativeNotificationTitle","setProperty","setNativeNotificationStatus","_setNativeNotificationStatus","ensure","setNativeNotificationVisibility","ALWAYS"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/notification/DesktopNotification.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Device, Notification as ScoutNotification, scout, Status, strings} from '../../index';\n\nexport default class DesktopNotification extends ScoutNotification {\n\n  constructor() {\n    super();\n    this.closable = true;\n    this.duration = 5000;\n    this.removeTimeout = null;\n    this._removing = false;\n    this.nativeOnly = false;\n    this.nativeNotificationTitle = null;\n    this.nativeNotificationStatus = null; // holds native message & native icon\n    this.nativeNotificationVisibility = DesktopNotification.NativeNotificationVisibility.NONE;\n    this.nativeNotification = null;\n    this.nativeNotificationShown = false;\n  }\n\n  static NativeNotificationVisibility = {\n    /**\n     * No native notification is shown.\n     */\n    NONE: 'none',\n    /**\n     * The native notification is only shown if the application is in background.\n     */\n    BACKGROUND: 'background',\n    /**\n     * The native notification is always shown.\n     */\n    ALWAYS: 'always'\n  };\n\n  /**\n   * When duration is set to INFINITE, the notification is not removed automatically.\n   */\n  static INFINITE = -1;\n\n  /**\n   * @typedef NativeNotificationDefaults\n   * @property {string} title\n   * @property {string} iconId\n   * @property {NativeNotificationVisibility} visibility\n   */\n\n  _init(model) {\n    super._init(model);\n    let defaults = this.session.desktop.nativeNotificationDefaults;\n    if (defaults) {\n      this.nativeNotificationTitle = model.nativeNotificationTitle !== undefined ? model.nativeNotificationTitle : defaults.title;\n      if (this.nativeNotificationStatus) {\n        this.nativeNotificationStatus.iconId = this.nativeNotificationStatus.iconId !== undefined ? this.nativeNotificationStatus.iconId : defaults.iconId;\n      } else {\n        this.nativeNotificationStatus = new Status({\n          iconId: defaults.iconId\n        });\n      }\n      this.nativeNotificationVisibility = scout.nvl(model.nativeNotificationVisibility !== undefined ? model.nativeNotificationVisibility : defaults.visibility, DesktopNotification.NativeNotificationVisibility.NONE);\n    }\n    this.resolveTextKeys(['nativeNotificationTitle']);\n  }\n\n  _render() {\n    this._initNativeNotification();\n    this.$container = this.$parent.prependDiv('desktop-notification');\n    this.$content = this.$container.appendDiv('desktop-notification-content');\n    this.$messageText = this.$content.appendDiv('desktop-notification-message');\n    this.$loader = this.$container.appendDiv('desktop-notification-loader');\n\n    if (Device.get().supportsCssAnimation()) {\n      this.$loader.addClass('animated');\n    }\n    if (this.nativeOnly) {\n      this.setVisible(false);\n    }\n  }\n\n  /**\n   *  @override\n   */\n  _renderLoading() {\n    this.$container.toggleClass('loading', this.loading);\n    this.$loader.setVisible(this.loading);\n  }\n\n  _destroy() {\n    if (this.nativeNotification) {\n      // No need to keep the native notification open if the regular one is closed (relevant if the user actively closes it)\n      this.nativeNotification.close();\n    }\n    super._destroy();\n  }\n\n  _isDocumentHidden() {\n    return document.hidden;\n  }\n\n  _showNativeNotification(permission) {\n    if (permission === 'denied' || permission === 'default') {\n      if (this.nativeOnly) {\n        // See comment in _initNativeNotification\n        this.hide();\n      }\n      return;\n    }\n    let title = scout.nvl(this.nativeNotificationTitle, '');\n    let body = (this.nativeNotificationStatus || {}).message;\n    if (strings.empty(body)) {\n      body = (this.status || {}).message;\n    }\n    if (!body) {\n      body = '';\n    }\n    if (this.htmlEnabled) {\n      body = strings.plainText(body, {removeFontIcons: true});\n    }\n    let iconId = (this.nativeNotificationStatus || {}).iconId;\n    if (strings.empty(iconId)) {\n      // icon must not be null or empty. If no icon it must be undefined\n      iconId = undefined;\n    }\n    this.nativeNotification = new Notification(title, {\n      body: body,\n      icon: iconId\n    });\n\n    this.nativeNotification.addEventListener('show', event => {\n      this._setNativeNotificationShown(true);\n    });\n\n    this.nativeNotification.addEventListener('click', event => {\n      window.focus();\n    });\n\n    // Native notifications are closed when the regular notification is closed (either by the user, the timeout or programmatically)\n    this.nativeNotification.addEventListener('close', event => {\n      if (this.nativeOnly) {\n        // Only close it if nativeOnly is true.\n        // If nativeOnly is false, clicking the notification should reveal the app incl. the original notification which could contain more information (e.g. a link).\n        this.hide();\n      }\n      this.nativeNotification = null;\n      this._setNativeNotificationShown(false);\n    });\n  }\n\n  _initNativeNotification() {\n    if (this.nativeNotificationShown) {\n      // Don't show the same notification twice (could happen if the user reloads the page and the notification is still open. Especially important for nativeOnly with infinite duration).\n      return;\n    }\n    if (this.nativeNotificationVisibility === DesktopNotification.NativeNotificationVisibility.NONE) {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n\n    if (this.nativeNotificationVisibility === DesktopNotification.NativeNotificationVisibility.BACKGROUND && !this._isDocumentHidden()) {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n\n    if (window.Notification && Notification.permission === 'denied') {\n      this._hideLaterIfNativeOnly();\n      return;\n    }\n    if (this._checkNotificationPromise()) {\n      Notification.requestPermission().then(this._showNativeNotification.bind(this));\n    } else {\n      // noinspection JSIgnoredPromiseFromCall\n      Notification.requestPermission(this._showNativeNotification.bind(this));\n    }\n  }\n\n  _hideLaterIfNativeOnly() {\n    if (!this.nativeOnly) {\n      return;\n    }\n    // If native notifications are not shown, there is no need to keep the (invisible) desktop notification open (prevent dom-leak)\n    setTimeout(() => this.hide()); // async because this method is called in render and removing the notification within render throws exception\n  }\n\n  /**\n   * Checks if browser supports the promise-based version of the method requestPermission. Safari only supports the older callback version.\n   */\n  _checkNotificationPromise() {\n    try {\n      Notification.requestPermission().then();\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  _onCloseIconClick() {\n    this.hide();\n  }\n\n  /**\n   * Displays the notification by adding it to the desktop and rendering it.\n   */\n  show() {\n    this.session.desktop.addNotification(this);\n  }\n\n  /**\n   * Closes the notification by removing it from the desktop and destroying it. Also triggers a close event.\n   */\n  hide() {\n    if (this._removing) {\n      return;\n    }\n    this.trigger('close');\n    this.session.desktop.removeNotification(this);\n  }\n\n  fadeIn($parent) {\n    this.render($parent);\n    if (!Device.get().supportsCssAnimation()) {\n      return;\n    }\n    this.$container.addClassForAnimation('desktop-notification-slide-in');\n  }\n\n  fadeOut() {\n    // prevent fadeOut from running more than once (for instance from the click of a user).\n    if (this._removing) {\n      return;\n    }\n    this._removing = true;\n    if (!Device.get().supportsCssAnimation() || !this.rendered) {\n      this.destroy();\n      return;\n    }\n    if (!this.$container.isVisible()) {\n      // Destroy immediately if it is invisible because the animationend event would not be triggered (is the case if nativeOnly is true)\n      this.destroy();\n      return;\n    }\n    this.$container.addClass('desktop-notification-fade-out');\n    this.$container.oneAnimationEnd(() => {\n      this.destroy();\n    });\n  }\n\n  /**\n   * @override\n   */\n  invalidateLayoutTree() {\n    // called by notification.js. Since desktop notification has no htmlComp, no need to invalidate\n  }\n\n  _setNativeNotificationShown(shown) {\n    this._setProperty('nativeNotificationShown', shown);\n  }\n\n  setNativeNotificationTitle(title) {\n    this.setProperty('nativeNotificationTitle', title);\n  }\n\n  setNativeNotificationStatus(status) {\n    this.setProperty('nativeNotificationStatus', status);\n  }\n\n  _setNativeNotificationStatus(status) {\n    status = Status.ensure(status);\n    this._setProperty('nativeNotificationStatus', status);\n  }\n\n  setNativeNotificationVisibility(visibility) {\n    this.setProperty('nativeNotificationVisibility', visibility);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}