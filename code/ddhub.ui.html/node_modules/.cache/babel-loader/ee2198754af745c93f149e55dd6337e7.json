{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { HAlign, KeyStroke, keyStrokeModifier } from '../../index';\nexport default class AbstractTreeNavigationKeyStroke extends KeyStroke {\n  constructor(tree, modifierBitMask) {\n    super();\n    this.field = tree;\n    this.repeatable = true;\n    this.stopPropagation = true;\n    this.renderingHints.hAlign = HAlign.RIGHT;\n    this.ctrl = keyStrokeModifier.isCtrl(modifierBitMask);\n    this.shift = keyStrokeModifier.isShift(modifierBitMask);\n    this.alt = keyStrokeModifier.isAlt(modifierBitMask);\n    this.keyStrokeMode = KeyStroke.Mode.DOWN;\n    this.inheritAccessibility = false;\n  }\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    if (this.field.selectedNodes.length > 0) {\n      event._treeCurrentNode = this.field.selectedNodes[0];\n      event._$treeCurrentNode = event._treeCurrentNode.$node;\n    }\n    this.field.$container.addClass('keyboard-navigation');\n    return true;\n  }\n  handle(event) {\n    let newSelection = this._computeNewSelection(event._treeCurrentNode);\n    if (newSelection) {\n      this.selectNodesAndReveal(newSelection, true);\n    }\n  }\n  _computeNewSelection(currentNode) {\n    return [];\n  }\n  selectNodesAndReveal(newSelection, debounceSend) {\n    this.field.selectNodes(newSelection, debounceSend);\n    this.field.revealSelection();\n    if (!this.field.isFocused()) {\n      this.field.focus();\n    }\n  }\n}","map":{"version":3,"names":["HAlign","KeyStroke","keyStrokeModifier","AbstractTreeNavigationKeyStroke","constructor","tree","modifierBitMask","field","repeatable","stopPropagation","renderingHints","hAlign","RIGHT","ctrl","isCtrl","shift","isShift","alt","isAlt","keyStrokeMode","Mode","DOWN","inheritAccessibility","_accept","event","accepted","selectedNodes","length","_treeCurrentNode","_$treeCurrentNode","$node","$container","addClass","handle","newSelection","_computeNewSelection","selectNodesAndReveal","currentNode","debounceSend","selectNodes","revealSelection","isFocused","focus"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tree/keystrokes/AbstractTreeNavigationKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {HAlign, KeyStroke, keyStrokeModifier} from '../../index';\n\nexport default class AbstractTreeNavigationKeyStroke extends KeyStroke {\n\n  constructor(tree, modifierBitMask) {\n    super();\n    this.field = tree;\n    this.repeatable = true;\n    this.stopPropagation = true;\n    this.renderingHints.hAlign = HAlign.RIGHT;\n\n    this.ctrl = keyStrokeModifier.isCtrl(modifierBitMask);\n    this.shift = keyStrokeModifier.isShift(modifierBitMask);\n    this.alt = keyStrokeModifier.isAlt(modifierBitMask);\n\n    this.keyStrokeMode = KeyStroke.Mode.DOWN;\n    this.inheritAccessibility = false;\n  }\n\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n\n    if (this.field.selectedNodes.length > 0) {\n      event._treeCurrentNode = this.field.selectedNodes[0];\n      event._$treeCurrentNode = event._treeCurrentNode.$node;\n    }\n    this.field.$container.addClass('keyboard-navigation');\n    return true;\n  }\n\n  handle(event) {\n    let newSelection = this._computeNewSelection(event._treeCurrentNode);\n    if (newSelection) {\n      this.selectNodesAndReveal(newSelection, true);\n    }\n  }\n\n  _computeNewSelection(currentNode) {\n    return [];\n  }\n\n  selectNodesAndReveal(newSelection, debounceSend) {\n    this.field.selectNodes(newSelection, debounceSend);\n    this.field.revealSelection();\n    if (!this.field.isFocused()) {\n      this.field.focus();\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,SAAS,EAAEC,iBAAiB,QAAO,aAAa;AAEhE,eAAe,MAAMC,+BAA+B,SAASF,SAAS,CAAC;EAErEG,WAAW,CAACC,IAAI,EAAEC,eAAe,EAAE;IACjC,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGF,IAAI;IACjB,IAAI,CAACG,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,cAAc,CAACC,MAAM,GAAGX,MAAM,CAACY,KAAK;IAEzC,IAAI,CAACC,IAAI,GAAGX,iBAAiB,CAACY,MAAM,CAACR,eAAe,CAAC;IACrD,IAAI,CAACS,KAAK,GAAGb,iBAAiB,CAACc,OAAO,CAACV,eAAe,CAAC;IACvD,IAAI,CAACW,GAAG,GAAGf,iBAAiB,CAACgB,KAAK,CAACZ,eAAe,CAAC;IAEnD,IAAI,CAACa,aAAa,GAAGlB,SAAS,CAACmB,IAAI,CAACC,IAAI;IACxC,IAAI,CAACC,oBAAoB,GAAG,KAAK;EACnC;EAEAC,OAAO,CAACC,KAAK,EAAE;IACb,IAAIC,QAAQ,GAAG,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC;IACnC,IAAI,CAACC,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAAClB,KAAK,CAACmB,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;MACvCH,KAAK,CAACI,gBAAgB,GAAG,IAAI,CAACrB,KAAK,CAACmB,aAAa,CAAC,CAAC,CAAC;MACpDF,KAAK,CAACK,iBAAiB,GAAGL,KAAK,CAACI,gBAAgB,CAACE,KAAK;IACxD;IACA,IAAI,CAACvB,KAAK,CAACwB,UAAU,CAACC,QAAQ,CAAC,qBAAqB,CAAC;IACrD,OAAO,IAAI;EACb;EAEAC,MAAM,CAACT,KAAK,EAAE;IACZ,IAAIU,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACX,KAAK,CAACI,gBAAgB,CAAC;IACpE,IAAIM,YAAY,EAAE;MAChB,IAAI,CAACE,oBAAoB,CAACF,YAAY,EAAE,IAAI,CAAC;IAC/C;EACF;EAEAC,oBAAoB,CAACE,WAAW,EAAE;IAChC,OAAO,EAAE;EACX;EAEAD,oBAAoB,CAACF,YAAY,EAAEI,YAAY,EAAE;IAC/C,IAAI,CAAC/B,KAAK,CAACgC,WAAW,CAACL,YAAY,EAAEI,YAAY,CAAC;IAClD,IAAI,CAAC/B,KAAK,CAACiC,eAAe,EAAE;IAC5B,IAAI,CAAC,IAAI,CAACjC,KAAK,CAACkC,SAAS,EAAE,EAAE;MAC3B,IAAI,CAAClC,KAAK,CAACmC,KAAK,EAAE;IACpB;EACF;AACF"},"metadata":{},"sourceType":"module"}