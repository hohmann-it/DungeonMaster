{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Device, objects } from '../../index';\nimport $ from 'jquery';\n\n/**\n * Text comparator, used to compare strings with support for internationalization (i18n).\n * The collator object is only installed once.\n */\nconst TEXT = {\n  collator: null,\n  installed: false,\n  install: function (session) {\n    if (this.installed) {\n      return !!this.collator;\n    }\n\n    // set static collator variable once\n    if (Device.get().supportsInternationalization()) {\n      this.collator = new window.Intl.Collator(session.locale.languageTag);\n      $.log.isInfoEnabled() && $.log.info('(comparators.TEXT#install) Browser supports i18n - installed Intl.Collator, can sort in Browser');\n    } else {\n      $.log.isInfoEnabled() && $.log.info('(comparators.TEXT#install) Browser doesn\\'t support i18n. Must sort on server');\n    }\n    this.installed = true;\n    return !!this.collator;\n  },\n  compare: function (valueA, valueB) {\n    if (!valueA && !valueB) {\n      return 0;\n    }\n    if (!valueA) {\n      return -1;\n    }\n    if (!valueB) {\n      return 1;\n    }\n    if (!this.collator) {\n      // Fallback for browsers that don't support internationalization. This is only necessary\n      // for callers that call this method without check for internationalization support\n      // first (e.g. TableMatrix).\n      return valueA < valueB ? -1 : valueA > valueB ? 1 : 0;\n    }\n    // We don't check the installed flag here. It's a program error when we come here\n    // and the collator is not set. Either we forgot to call install() or we've called\n    // install but the browser does not support i18n.\n    return this.collator.compare(valueA, valueB);\n  },\n  compareIgnoreCase: function (valueA, valueB) {\n    if (!valueA) {\n      valueA = null;\n    }\n    if (!valueB) {\n      valueB = null;\n    }\n    if (valueA === valueB) {\n      return 0;\n    }\n    if (valueA === null) {\n      return -1;\n    }\n    if (valueB === null) {\n      return 1;\n    }\n    return this.compare(valueA.toLowerCase(), valueB.toLowerCase());\n  }\n};\n\n/**\n * Numeric comparator, used to compare numeric values. Used for numbers, dates, etc.\n */\nconst NUMERIC = {\n  install: session => {\n    // NOP\n    return true;\n  },\n  compare: (valueA, valueB) => {\n    if (objects.isNullOrUndefined(valueA) && objects.isNullOrUndefined(valueB)) {\n      return 0;\n    }\n    if (objects.isNullOrUndefined(valueA)) {\n      return -1;\n    }\n    if (objects.isNullOrUndefined(valueB)) {\n      return 1;\n    }\n    if (valueA < valueB) {\n      return -1;\n    } else if (valueA > valueB) {\n      return 1;\n    }\n    return 0;\n  }\n};\n\n/**\n * Alphanumeric comparator.\n */\nconst ALPHANUMERIC = {\n  collator: null,\n  installed: false,\n  install: function (session) {\n    TEXT.install(session);\n    this.collator = TEXT.collator;\n    return !!this.collator && NUMERIC.install(session);\n  },\n  compare: function (valueA, valueB) {\n    return this._compare(valueA, valueB, false);\n  },\n  compareIgnoreCase: function (valueA, valueB) {\n    return this._compare(valueA, valueB, true);\n  },\n  _compare: (valueA, valueB, ignoreCase) => {\n    if (!valueA && !valueB) {\n      return 0;\n    }\n    if (!valueA) {\n      return -1;\n    }\n    if (!valueB) {\n      return 1;\n    }\n    let pattern = '(([0-9]+)|([^0-9]+))';\n    let regexp1 = new RegExp(pattern, 'g');\n    let regexp2 = new RegExp(pattern, 'g');\n    let found1 = regexp1.exec(valueA);\n    let found2 = regexp2.exec(valueB);\n    while (found1 && found2) {\n      let n1 = parseInt(found1[1], 0);\n      let n2 = parseInt(found2[1], 0);\n      if (!isNaN(n1) && !isNaN(n2)) {\n        let numericResult = NUMERIC.compare(n1, n2);\n        if (numericResult !== 0) {\n          return numericResult;\n        }\n      } else {\n        let textResult = ignoreCase ? TEXT.compareIgnoreCase(found1[1], found2[1]) : TEXT.compare(found1[1], found2[1]);\n        if (textResult !== 0) {\n          return textResult;\n        }\n      }\n      found1 = regexp1.exec(valueA);\n      found2 = regexp2.exec(valueB);\n    }\n    if (!found1 && !found2) {\n      return 0;\n    }\n    if (!found1) {\n      return -1;\n    }\n    return 1;\n  }\n};\n\n/**\n * Applies the comparator to each pair until one pair doesn't return 0 or all pairs are compared.\n * @param {function(*, *): number} comparator a function that takes 2 parameters and returns -1, 0 or 1.\n * @param [[*]] pairs array of pairs, where a pair is an array with 2 values.\n * @return {number}\n */\nexport function compare(comparator) {\n  let result = 0;\n  for (var _len = arguments.length, pairs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pairs[_key - 1] = arguments[_key];\n  }\n  pairs.some(pair => {\n    if (pair.length !== 2) {\n      throw new Error('The pair must have exactly 2 elements');\n    }\n    result = comparator(pair[0], pair[1]);\n    if (result !== 0) {\n      return true;\n    }\n    return false;\n  });\n  return result;\n}\nexport default {\n  ALPHANUMERIC,\n  NUMERIC,\n  TEXT,\n  compare\n};","map":{"version":3,"names":["Device","objects","$","TEXT","collator","installed","install","session","get","supportsInternationalization","window","Intl","Collator","locale","languageTag","log","isInfoEnabled","info","compare","valueA","valueB","compareIgnoreCase","toLowerCase","NUMERIC","isNullOrUndefined","ALPHANUMERIC","_compare","ignoreCase","pattern","regexp1","RegExp","regexp2","found1","exec","found2","n1","parseInt","n2","isNaN","numericResult","textResult","comparator","result","pairs","some","pair","length","Error"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/columns/comparators.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Device, objects} from '../../index';\nimport $ from 'jquery';\n\n/**\n * Text comparator, used to compare strings with support for internationalization (i18n).\n * The collator object is only installed once.\n */\nconst TEXT = {\n  collator: null,\n  installed: false,\n  install: function(session) {\n    if (this.installed) {\n      return !!this.collator;\n    }\n\n    // set static collator variable once\n    if (Device.get().supportsInternationalization()) {\n      this.collator = new window.Intl.Collator(session.locale.languageTag);\n      $.log.isInfoEnabled() && $.log.info('(comparators.TEXT#install) Browser supports i18n - installed Intl.Collator, can sort in Browser');\n    } else {\n      $.log.isInfoEnabled() && $.log.info('(comparators.TEXT#install) Browser doesn\\'t support i18n. Must sort on server');\n    }\n\n    this.installed = true;\n    return !!this.collator;\n  },\n  compare: function(valueA, valueB) {\n    if (!valueA && !valueB) {\n      return 0;\n    }\n    if (!valueA) {\n      return -1;\n    }\n    if (!valueB) {\n      return 1;\n    }\n\n    if (!this.collator) {\n      // Fallback for browsers that don't support internationalization. This is only necessary\n      // for callers that call this method without check for internationalization support\n      // first (e.g. TableMatrix).\n      return (valueA < valueB ? -1 : ((valueA > valueB) ? 1 : 0));\n    }\n    // We don't check the installed flag here. It's a program error when we come here\n    // and the collator is not set. Either we forgot to call install() or we've called\n    // install but the browser does not support i18n.\n    return this.collator.compare(valueA, valueB);\n  },\n  compareIgnoreCase: function(valueA, valueB) {\n    if (!valueA) {\n      valueA = null;\n    }\n    if (!valueB) {\n      valueB = null;\n    }\n    if (valueA === valueB) {\n      return 0;\n    }\n    if (valueA === null) {\n      return -1;\n    }\n    if (valueB === null) {\n      return 1;\n    }\n    return this.compare(valueA.toLowerCase(), valueB.toLowerCase());\n  }\n};\n\n/**\n * Numeric comparator, used to compare numeric values. Used for numbers, dates, etc.\n */\nconst NUMERIC = {\n  install: session => {\n    // NOP\n    return true;\n  },\n  compare: (valueA, valueB) => {\n    if (objects.isNullOrUndefined(valueA) && objects.isNullOrUndefined(valueB)) {\n      return 0;\n    }\n    if (objects.isNullOrUndefined(valueA)) {\n      return -1;\n    }\n    if (objects.isNullOrUndefined(valueB)) {\n      return 1;\n    }\n\n    if (valueA < valueB) {\n      return -1;\n    } else if (valueA > valueB) {\n      return 1;\n    }\n    return 0;\n  }\n};\n\n/**\n * Alphanumeric comparator.\n */\nconst ALPHANUMERIC = {\n  collator: null,\n  installed: false,\n  install: function(session) {\n    TEXT.install(session);\n    this.collator = TEXT.collator;\n    return !!this.collator && NUMERIC.install(session);\n  },\n  compare: function(valueA, valueB) {\n    return this._compare(valueA, valueB, false);\n  },\n  compareIgnoreCase: function(valueA, valueB) {\n    return this._compare(valueA, valueB, true);\n  },\n  _compare: (valueA, valueB, ignoreCase) => {\n    if (!valueA && !valueB) {\n      return 0;\n    }\n    if (!valueA) {\n      return -1;\n    }\n    if (!valueB) {\n      return 1;\n    }\n\n    let pattern = '(([0-9]+)|([^0-9]+))';\n    let regexp1 = new RegExp(pattern, 'g');\n    let regexp2 = new RegExp(pattern, 'g');\n    let found1 = regexp1.exec(valueA);\n    let found2 = regexp2.exec(valueB);\n    while (found1 && found2) {\n      let n1 = parseInt(found1[1], 0);\n      let n2 = parseInt(found2[1], 0);\n      if (!isNaN(n1) && !isNaN(n2)) {\n        let numericResult = NUMERIC.compare(n1, n2);\n        if (numericResult !== 0) {\n          return numericResult;\n        }\n      } else {\n        let textResult = ignoreCase ? TEXT.compareIgnoreCase(found1[1], found2[1]) : TEXT.compare(found1[1], found2[1]);\n        if (textResult !== 0) {\n          return textResult;\n        }\n      }\n      found1 = regexp1.exec(valueA);\n      found2 = regexp2.exec(valueB);\n    }\n\n    if (!found1 && !found2) {\n      return 0;\n    }\n    if (!found1) {\n      return -1;\n    }\n    return 1;\n  }\n};\n\n/**\n * Applies the comparator to each pair until one pair doesn't return 0 or all pairs are compared.\n * @param {function(*, *): number} comparator a function that takes 2 parameters and returns -1, 0 or 1.\n * @param [[*]] pairs array of pairs, where a pair is an array with 2 values.\n * @return {number}\n */\nexport function compare(comparator, ...pairs) {\n  let result = 0;\n  pairs.some(pair => {\n    if (pair.length !== 2) {\n      throw new Error('The pair must have exactly 2 elements');\n    }\n    result = comparator(pair[0], pair[1]);\n    if (result !== 0) {\n      return true;\n    }\n    return false;\n  });\n  return result;\n}\n\nexport default {\n  ALPHANUMERIC,\n  NUMERIC,\n  TEXT,\n  compare\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}