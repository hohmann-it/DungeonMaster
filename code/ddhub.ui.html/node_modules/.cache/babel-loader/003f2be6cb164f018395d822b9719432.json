{"ast":null,"code":"/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, Point } from '../index';\n\n/**\n * JavaScript port from java.awt.Rectangle.\n */\nexport default class Rectangle {\n  constructor(vararg, y, width, height) {\n    if (vararg instanceof Rectangle) {\n      this.x = vararg.x;\n      this.y = vararg.y;\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.x = vararg || 0;\n      this.y = y || 0;\n      this.width = width || 0;\n      this.height = height || 0;\n    }\n  }\n  toString() {\n    return 'Rectangle[x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';\n  }\n  equals(o) {\n    if (!o) {\n      return false;\n    }\n    return this.x === o.x && this.y === o.y && this.width === o.width && this.height === o.height;\n  }\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n  center() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n  right() {\n    return this.x + this.width;\n  }\n  bottom() {\n    return this.y + this.height;\n  }\n  contains(x, y) {\n    return y >= this.y && y < this.y + this.height && x >= this.x && x < this.x + this.width;\n  }\n\n  /**\n   * Tests whether or not the specified rectangle intersects this rectangle.\n   * This means the two rectangles share at least one internal point.\n   *\n   * @param r the rectangle to test against\n   * @return {boolean} true if the specified rectangle intersects this one\n   */\n  intersects(r) {\n    if (!r) {\n      return false;\n    }\n    return r.width > 0 && r.height > 0 && this.width > 0 && this.height > 0 && r.x < this.right() && r.right() > this.x && r.y < this.bottom() && r.bottom() > this.y;\n  }\n\n  /**\n   * @returns {Rectangle}\n   */\n  subtract(insets) {\n    return new Rectangle(this.x + insets.left, this.y + insets.top, this.width - insets.horizontal(), this.height - insets.vertical());\n  }\n\n  /**\n   * Subtracts the insets only from the dimension properties (width and height)\n   * @returns {Rectangle}\n   */\n  subtractFromDimension(insets) {\n    return new scout.Rectangle(this.x, this.y, this.width - insets.horizontal(), this.height - insets.vertical());\n  }\n\n  /**\n   * Moves the rectangle the given distance.\n   * <p>\n   * @param dx the distance to move the rectangle along the x axis.\n   * @param dy the distance to move the rectangle along the y axis.\n   */\n  translate(dx, dy) {\n    return new Rectangle(this.x + dx, this.y + dy, this.width, this.height);\n  }\n\n  /**\n   * @returns {Point} property x and y of this instance as new Point instance\n   */\n  point() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * @returns {Dimension} property width and height of this instance as new Dimension instance\n   */\n  dimension() {\n    return new Dimension(this.width, this.height);\n  }\n  union(r) {\n    let tx2 = this.width;\n    let ty2 = this.height;\n    if (tx2 < 0 || ty2 < 0) {\n      // This rectangle has negative dimensions...\n      // If r has non-negative dimensions then it is the answer.\n      // If r is non-existant (has a negative dimension), then both\n      // are non-existant and we can return any non-existant rectangle\n      // as an answer.  Thus, returning r meets that criterion.\n      // Either way, r is our answer.\n      return new Rectangle(r.x, r.y, r.width, r.height);\n    }\n    let rx2 = r.width;\n    let ry2 = r.height;\n    if (rx2 < 0 || ry2 < 0) {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n    let tx1 = this.x;\n    let ty1 = this.y;\n    tx2 += tx1;\n    ty2 += ty1;\n    let rx1 = r.x;\n    let ry1 = r.y;\n    rx2 += rx1;\n    ry2 += ry1;\n    if (tx1 > rx1) {\n      tx1 = rx1;\n    }\n    if (ty1 > ry1) {\n      ty1 = ry1;\n    }\n    if (tx2 < rx2) {\n      tx2 = rx2;\n    }\n    if (ty2 < ry2) {\n      ty2 = ry2;\n    }\n    tx2 -= tx1;\n    ty2 -= ty1;\n    // tx2,ty2 will never underflow since both original rectangles\n    // were already proven to be non-empty\n    // they might overflow, though...\n    if (tx2 > Number.MAX_VALUE) {\n      tx2 = Number.MAX_VALUE;\n    }\n    if (ty2 > Number.MAX_VALUE) {\n      ty2 = Number.MAX_VALUE;\n    }\n    return new Rectangle(tx1, ty1, tx2, ty2);\n  }\n  floor() {\n    return new Rectangle(Math.floor(this.x), Math.floor(this.y), Math.floor(this.width), Math.floor(this.height));\n  }\n  ceil() {\n    return new Rectangle(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.width), Math.ceil(this.height));\n  }\n}","map":{"version":3,"names":["Dimension","Point","Rectangle","constructor","vararg","y","width","height","x","toString","equals","o","clone","center","right","bottom","contains","intersects","r","subtract","insets","left","top","horizontal","vertical","subtractFromDimension","scout","translate","dx","dy","point","dimension","union","tx2","ty2","rx2","ry2","tx1","ty1","rx1","ry1","Number","MAX_VALUE","floor","Math","ceil"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/layout/Rectangle.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, Point} from '../index';\n\n/**\n * JavaScript port from java.awt.Rectangle.\n */\nexport default class Rectangle {\n\n  constructor(vararg, y, width, height) {\n    if (vararg instanceof Rectangle) {\n      this.x = vararg.x;\n      this.y = vararg.y;\n      this.width = vararg.width;\n      this.height = vararg.height;\n    } else {\n      this.x = vararg || 0;\n      this.y = y || 0;\n      this.width = width || 0;\n      this.height = height || 0;\n    }\n  }\n\n  toString() {\n    return 'Rectangle[x=' + this.x + ' y=' + this.y + ' width=' + this.width + ' height=' + this.height + ']';\n  }\n\n  equals(o) {\n    if (!o) {\n      return false;\n    }\n    return (this.x === o.x && this.y === o.y && this.width === o.width && this.height === o.height);\n  }\n\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n\n  center() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  right() {\n    return this.x + this.width;\n  }\n\n  bottom() {\n    return this.y + this.height;\n  }\n\n  contains(x, y) {\n    return y >= this.y && y < this.y + this.height && x >= this.x && x < this.x + this.width;\n  }\n\n  /**\n   * Tests whether or not the specified rectangle intersects this rectangle.\n   * This means the two rectangles share at least one internal point.\n   *\n   * @param r the rectangle to test against\n   * @return {boolean} true if the specified rectangle intersects this one\n   */\n  intersects(r) {\n    if (!r) {\n      return false;\n    }\n    return r.width > 0 && r.height > 0 && this.width > 0 && this.height > 0 &&\n      r.x < this.right() && r.right() > this.x &&\n      r.y < this.bottom() && r.bottom() > this.y;\n  }\n\n  /**\n   * @returns {Rectangle}\n   */\n  subtract(insets) {\n    return new Rectangle(\n      this.x + insets.left,\n      this.y + insets.top,\n      this.width - insets.horizontal(),\n      this.height - insets.vertical());\n  }\n\n  /**\n   * Subtracts the insets only from the dimension properties (width and height)\n   * @returns {Rectangle}\n   */\n  subtractFromDimension(insets) {\n    return new scout.Rectangle(\n      this.x,\n      this.y,\n      this.width - insets.horizontal(),\n      this.height - insets.vertical());\n  }\n\n  /**\n   * Moves the rectangle the given distance.\n   * <p>\n   * @param dx the distance to move the rectangle along the x axis.\n   * @param dy the distance to move the rectangle along the y axis.\n   */\n  translate(dx, dy) {\n    return new Rectangle(\n      this.x + dx,\n      this.y + dy,\n      this.width,\n      this.height);\n  }\n\n  /**\n   * @returns {Point} property x and y of this instance as new Point instance\n   */\n  point() {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * @returns {Dimension} property width and height of this instance as new Dimension instance\n   */\n  dimension() {\n    return new Dimension(this.width, this.height);\n  }\n\n  union(r) {\n    let tx2 = this.width;\n    let ty2 = this.height;\n    if (tx2 < 0 || ty2 < 0) {\n      // This rectangle has negative dimensions...\n      // If r has non-negative dimensions then it is the answer.\n      // If r is non-existant (has a negative dimension), then both\n      // are non-existant and we can return any non-existant rectangle\n      // as an answer.  Thus, returning r meets that criterion.\n      // Either way, r is our answer.\n      return new Rectangle(r.x, r.y, r.width, r.height);\n    }\n    let rx2 = r.width;\n    let ry2 = r.height;\n    if (rx2 < 0 || ry2 < 0) {\n      return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n    let tx1 = this.x;\n    let ty1 = this.y;\n    tx2 += tx1;\n    ty2 += ty1;\n    let rx1 = r.x;\n    let ry1 = r.y;\n    rx2 += rx1;\n    ry2 += ry1;\n    if (tx1 > rx1) {\n      tx1 = rx1;\n    }\n    if (ty1 > ry1) {\n      ty1 = ry1;\n    }\n    if (tx2 < rx2) {\n      tx2 = rx2;\n    }\n    if (ty2 < ry2) {\n      ty2 = ry2;\n    }\n    tx2 -= tx1;\n    ty2 -= ty1;\n    // tx2,ty2 will never underflow since both original rectangles\n    // were already proven to be non-empty\n    // they might overflow, though...\n    if (tx2 > Number.MAX_VALUE) {\n      tx2 = Number.MAX_VALUE;\n    }\n    if (ty2 > Number.MAX_VALUE) {\n      ty2 = Number.MAX_VALUE;\n    }\n    return new Rectangle(tx1, ty1, tx2, ty2);\n  }\n\n  floor() {\n    return new Rectangle(Math.floor(this.x), Math.floor(this.y), Math.floor(this.width), Math.floor(this.height));\n  }\n\n  ceil() {\n    return new Rectangle(Math.ceil(this.x), Math.ceil(this.y), Math.ceil(this.width), Math.ceil(this.height));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}