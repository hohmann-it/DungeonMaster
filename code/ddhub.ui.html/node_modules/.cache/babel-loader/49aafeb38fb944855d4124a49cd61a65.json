{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Tile, Widget } from '../index';\n\n/**\n * A tile containing a widget.\n */\nexport default class WidgetTile extends Tile {\n  constructor() {\n    super();\n    // The referenced widget which will be rendered (it is not possible to just call it 'widget' due to the naming conflict with the widget function)\n    this.tileWidget = null;\n    this._addWidgetProperties(['tileWidget']);\n    this._widgetPropertyChangeHandler = this._onWidgetPropertyChange.bind(this);\n  }\n  _init(model) {\n    super._init(model);\n    this._setTileWidget(this.tileWidget);\n  }\n  _destroy() {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    super._destroy();\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderTileWidget();\n  }\n  _renderTileWidget() {\n    if (this.tileWidget) {\n      // render the tileWidget into the container of this tile.\n      this.tileWidget.render();\n    }\n  }\n  _removeTileWidget() {\n    if (this.tileWidget) {\n      this.tileWidget.remove();\n    }\n  }\n  _onWidgetPropertyChange(event) {\n    if (event.propertyName === 'visible') {\n      this.setVisible(event.newValue);\n    } else if (event.propertyName === 'enabled') {\n      this.setEnabled(event.newValue);\n    } else if (event.propertyName === 'disabledStyle') {\n      this.setDisabledStyle(event.newValue);\n    }\n  }\n  _setTileWidget(tileWidget) {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this._setProperty('tileWidget', tileWidget);\n    if (tileWidget) {\n      // Hide tile if tileWidget is made invisible (don't do it if visible is true to not accidentally override the visibility state)\n      if (!this.tileWidget.visible) {\n        this.setVisible(false);\n      }\n      if (!this.tileWidget.enabled) {\n        this.setEnabled(false);\n      }\n      if (this.tileWidget.disabledStyle !== Widget.DisabledStyle.DEFAULT) {\n        this.setDisabledStyle(this.tileWidget.disabledStyle);\n      }\n      this.tileWidget.on('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this.invalidateLayoutTree();\n  }\n}","map":{"version":3,"names":["Tile","Widget","WidgetTile","constructor","tileWidget","_addWidgetProperties","_widgetPropertyChangeHandler","_onWidgetPropertyChange","bind","_init","model","_setTileWidget","_destroy","off","_renderProperties","_renderTileWidget","render","_removeTileWidget","remove","event","propertyName","setVisible","newValue","setEnabled","setDisabledStyle","_setProperty","visible","enabled","disabledStyle","DisabledStyle","DEFAULT","on","invalidateLayoutTree"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/WidgetTile.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Tile, Widget} from '../index';\n\n/**\n * A tile containing a widget.\n */\nexport default class WidgetTile extends Tile {\n\n  constructor() {\n    super();\n    // The referenced widget which will be rendered (it is not possible to just call it 'widget' due to the naming conflict with the widget function)\n    this.tileWidget = null;\n    this._addWidgetProperties(['tileWidget']);\n    this._widgetPropertyChangeHandler = this._onWidgetPropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setTileWidget(this.tileWidget);\n  }\n\n  _destroy() {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    super._destroy();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderTileWidget();\n  }\n\n  _renderTileWidget() {\n    if (this.tileWidget) {\n      // render the tileWidget into the container of this tile.\n      this.tileWidget.render();\n    }\n  }\n\n  _removeTileWidget() {\n    if (this.tileWidget) {\n      this.tileWidget.remove();\n    }\n  }\n\n  _onWidgetPropertyChange(event) {\n    if (event.propertyName === 'visible') {\n      this.setVisible(event.newValue);\n    } else if (event.propertyName === 'enabled') {\n      this.setEnabled(event.newValue);\n    } else if (event.propertyName === 'disabledStyle') {\n      this.setDisabledStyle(event.newValue);\n    }\n  }\n\n  _setTileWidget(tileWidget) {\n    if (this.tileWidget) {\n      this.tileWidget.off('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this._setProperty('tileWidget', tileWidget);\n    if (tileWidget) {\n      // Hide tile if tileWidget is made invisible (don't do it if visible is true to not accidentally override the visibility state)\n      if (!this.tileWidget.visible) {\n        this.setVisible(false);\n      }\n      if (!this.tileWidget.enabled) {\n        this.setEnabled(false);\n      }\n      if (this.tileWidget.disabledStyle !== Widget.DisabledStyle.DEFAULT) {\n        this.setDisabledStyle(this.tileWidget.disabledStyle);\n      }\n      this.tileWidget.on('propertyChange', this._widgetPropertyChangeHandler);\n    }\n    this.invalidateLayoutTree();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,IAAI,EAAEC,MAAM,QAAO,UAAU;;AAErC;AACA;AACA;AACA,eAAe,MAAMC,UAAU,SAASF,IAAI,CAAC;EAE3CG,WAAW,GAAG;IACZ,KAAK,EAAE;IACP;IACA,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,oBAAoB,CAAC,CAAC,YAAY,CAAC,CAAC;IACzC,IAAI,CAACC,4BAA4B,GAAG,IAAI,CAACC,uBAAuB,CAACC,IAAI,CAAC,IAAI,CAAC;EAC7E;EAEAC,KAAK,CAACC,KAAK,EAAE;IACX,KAAK,CAACD,KAAK,CAACC,KAAK,CAAC;IAClB,IAAI,CAACC,cAAc,CAAC,IAAI,CAACP,UAAU,CAAC;EACtC;EAEAQ,QAAQ,GAAG;IACT,IAAI,IAAI,CAACR,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACS,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACP,4BAA4B,CAAC;IAC1E;IACA,KAAK,CAACM,QAAQ,EAAE;EAClB;EAEAE,iBAAiB,GAAG;IAClB,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB,GAAG;IAClB,IAAI,IAAI,CAACX,UAAU,EAAE;MACnB;MACA,IAAI,CAACA,UAAU,CAACY,MAAM,EAAE;IAC1B;EACF;EAEAC,iBAAiB,GAAG;IAClB,IAAI,IAAI,CAACb,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACc,MAAM,EAAE;IAC1B;EACF;EAEAX,uBAAuB,CAACY,KAAK,EAAE;IAC7B,IAAIA,KAAK,CAACC,YAAY,KAAK,SAAS,EAAE;MACpC,IAAI,CAACC,UAAU,CAACF,KAAK,CAACG,QAAQ,CAAC;IACjC,CAAC,MAAM,IAAIH,KAAK,CAACC,YAAY,KAAK,SAAS,EAAE;MAC3C,IAAI,CAACG,UAAU,CAACJ,KAAK,CAACG,QAAQ,CAAC;IACjC,CAAC,MAAM,IAAIH,KAAK,CAACC,YAAY,KAAK,eAAe,EAAE;MACjD,IAAI,CAACI,gBAAgB,CAACL,KAAK,CAACG,QAAQ,CAAC;IACvC;EACF;EAEAX,cAAc,CAACP,UAAU,EAAE;IACzB,IAAI,IAAI,CAACA,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,CAACS,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACP,4BAA4B,CAAC;IAC1E;IACA,IAAI,CAACmB,YAAY,CAAC,YAAY,EAAErB,UAAU,CAAC;IAC3C,IAAIA,UAAU,EAAE;MACd;MACA,IAAI,CAAC,IAAI,CAACA,UAAU,CAACsB,OAAO,EAAE;QAC5B,IAAI,CAACL,UAAU,CAAC,KAAK,CAAC;MACxB;MACA,IAAI,CAAC,IAAI,CAACjB,UAAU,CAACuB,OAAO,EAAE;QAC5B,IAAI,CAACJ,UAAU,CAAC,KAAK,CAAC;MACxB;MACA,IAAI,IAAI,CAACnB,UAAU,CAACwB,aAAa,KAAK3B,MAAM,CAAC4B,aAAa,CAACC,OAAO,EAAE;QAClE,IAAI,CAACN,gBAAgB,CAAC,IAAI,CAACpB,UAAU,CAACwB,aAAa,CAAC;MACtD;MACA,IAAI,CAACxB,UAAU,CAAC2B,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACzB,4BAA4B,CAAC;IACzE;IACA,IAAI,CAAC0B,oBAAoB,EAAE;EAC7B;AACF"},"metadata":{},"sourceType":"module"}