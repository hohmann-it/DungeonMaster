{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Column, comparators, DateFormat, dates, scout } from '../../index';\nexport default class DateColumn extends Column {\n  constructor() {\n    super();\n    this.format;\n    this.groupFormat = 'yyyy';\n    this.hasDate = true;\n    this.hasTime = false;\n    this.filterType = 'DateColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n  }\n  _init(model) {\n    super._init(model);\n    this._setFormat(this.format);\n    this._setGroupFormat(this.groupFormat);\n  }\n  setFormat(format) {\n    if (this.format === format) {\n      return;\n    }\n    this._setFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n  _setFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.format = format;\n  }\n  setGroupFormat(format) {\n    if (this.groupFormat === format) {\n      return;\n    }\n    this._setGroupFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n  _setGroupFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.groupFormat = format;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value, row) {\n    return this.format.format(value);\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _parseValue(text) {\n    return dates.ensure(text);\n  }\n  _getDefaultFormat(locale) {\n    if (this.hasDate && this.hasTime) {\n      return locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault;\n    }\n    if (this.hasDate) {\n      return locale.dateFormatPatternDefault;\n    }\n    return locale.timeFormatPatternDefault;\n  }\n  cellTextForGrouping(row) {\n    let val = this.table.cellValue(this, row);\n    return this.groupFormat.format(val);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('DateField', {\n      parent: this.table,\n      hasDate: this.hasDate,\n      hasTime: this.hasTime\n    });\n  }\n}","map":{"version":3,"names":["Column","comparators","DateFormat","dates","scout","DateColumn","constructor","format","groupFormat","hasDate","hasTime","filterType","comparator","NUMERIC","textBased","_init","model","_setFormat","_setGroupFormat","setFormat","initialized","table","rows","forEach","row","_updateCellText","cell","_getDefaultFormat","session","locale","ensure","setGroupFormat","_formatValue","value","_parseValue","text","dateFormatPatternDefault","timeFormatPatternDefault","cellTextForGrouping","val","cellValue","_createEditor","create","parent"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/columns/DateColumn.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Column, comparators, DateFormat, dates, scout} from '../../index';\n\nexport default class DateColumn extends Column {\n\n  constructor() {\n    super();\n    this.format;\n    this.groupFormat = 'yyyy';\n    this.hasDate = true;\n    this.hasTime = false;\n    this.filterType = 'DateColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n  }\n\n  _init(model) {\n    super._init(model);\n\n    this._setFormat(this.format);\n    this._setGroupFormat(this.groupFormat);\n  }\n\n  setFormat(format) {\n    if (this.format === format) {\n      return;\n    }\n    this._setFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n\n  _setFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.format = format;\n  }\n\n  setGroupFormat(format) {\n    if (this.groupFormat === format) {\n      return;\n    }\n    this._setGroupFormat(format);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n\n  _setGroupFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    format = DateFormat.ensure(this.session.locale, format);\n    this.groupFormat = format;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value, row) {\n    return this.format.format(value);\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _parseValue(text) {\n    return dates.ensure(text);\n  }\n\n  _getDefaultFormat(locale) {\n    if (this.hasDate && this.hasTime) {\n      return locale.dateFormatPatternDefault + ' ' + locale.timeFormatPatternDefault;\n    }\n    if (this.hasDate) {\n      return locale.dateFormatPatternDefault;\n    }\n    return locale.timeFormatPatternDefault;\n  }\n\n  cellTextForGrouping(row) {\n    let val = this.table.cellValue(this, row);\n    return this.groupFormat.format(val);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('DateField', {\n      parent: this.table,\n      hasDate: this.hasDate,\n      hasTime: this.hasTime\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}