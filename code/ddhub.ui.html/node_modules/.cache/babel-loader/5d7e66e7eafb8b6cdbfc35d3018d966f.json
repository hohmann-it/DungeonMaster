{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { BasicField, Calculator, DecimalFormat, fields, InputFieldKeyStrokeContext, numbers, objects } from '../../../index';\nexport default class NumberField extends BasicField {\n  constructor() {\n    super();\n    this.calc = new Calculator();\n    this.minValue = null;\n    this.maxValue = null;\n    this.decimalFormat = null;\n    this.invalidValueMessageKey = 'InvalidNumberMessageX';\n    this.gridDataHints.horizontalAlignment = 1; // number fields are right aligned by default.\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setMinValue(this.minValue);\n    this._setMaxValue(this.maxValue);\n    this._setDecimalFormat(this.decimalFormat);\n  }\n\n  /**\n   * Initializes the decimal format before calling set value.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    this._setDecimalFormat(this.decimalFormat);\n    super._initValue(value);\n  }\n\n  /**\n   * @override Widget.js\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n  _render() {\n    this.addContainer(this.$parent, 'number-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    let $field = fields.makeTextField(this.$parent);\n    this.addField($field);\n    this.addStatus();\n  }\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n  setDecimalFormat(decimalFormat) {\n    this.setProperty('decimalFormat', decimalFormat);\n  }\n  _setDecimalFormat(decimalFormat) {\n    if (!decimalFormat) {\n      decimalFormat = this._getDefaultFormat(this.session.locale);\n    }\n    decimalFormat = DecimalFormat.ensure(this.session.locale, decimalFormat);\n    this._setProperty('decimalFormat', decimalFormat);\n    if (this.initialized) {\n      // if format changes on the fly, just update the display text\n      this._updateDisplayText();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _parseValue(displayText) {\n    if (!displayText) {\n      return null;\n    }\n    return this.decimalFormat.parse(displayText, this._evaluateNumber.bind(this));\n  }\n  _evaluateNumber(normalizedNumberString) {\n    // Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n    // Only needed for calculator\n    // if only math symbols are in the input string...\n    if (this.calc.isFormula(normalizedNumberString)) {\n      // ...evaluate and return. If the display text changed, ValueField.js will make sure, the new display text is sent to the model.\n      let calculated = this.calc.evalFormula(normalizedNumberString);\n      if (isNaN(calculated)) {\n        // catch input that is not a valid expression (although it looks like one, e.g. \"1.2.3\")\n        throw new Error(normalizedNumberString + ' is not a valid expression');\n      }\n      return calculated;\n    }\n    return Number(normalizedNumberString);\n  }\n\n  /**\n   * @override\n   */\n  _ensureValue(value) {\n    return numbers.ensure(value);\n  }\n\n  /**\n   * @param {number} the number to validate\n   * @return {number} the validated number\n   * @override\n   */\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    if (!numbers.isNumber(value)) {\n      throw this.session.text(this.invalidValueMessageKey, value);\n    }\n    if (!objects.isNullOrUndefined(this.minValue) && value < this.minValue) {\n      this._onNumberTooSmall();\n    }\n    if (!objects.isNullOrUndefined(this.maxValue) && value > this.maxValue) {\n      this._onNumberTooLarge();\n    }\n    return value;\n  }\n  _onNumberTooLarge() {\n    if (objects.isNullOrUndefined(this.minValue)) {\n      throw this.session.text('NumberTooLargeMessageX', this._formatValue(this.maxValue));\n    }\n    throw this.session.text('NumberTooLargeMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n  _onNumberTooSmall() {\n    if (objects.isNullOrUndefined(this.maxValue)) {\n      throw this.session.text('NumberTooSmallMessageX', this._formatValue(this.minValue));\n    }\n    throw this.session.text('NumberTooSmallMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n\n  /**\n   * @override\n   */\n  _formatValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return '';\n    }\n    if (typeof value !== 'number') {\n      // if setValue() would be called with something other than a number don't try to format it\n      return value + '';\n    }\n    return this.decimalFormat.format(value, true);\n  }\n\n  /**\n   * Set the minimum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new minimum value is bigger than the current maxValue, the current maximum value is changed to the new minimum value.\n   * @param {number} the new minimum value\n   */\n  setMinValue(minValue) {\n    if (this.minValue === minValue) {\n      return;\n    }\n    this._setMinValue(minValue);\n    this.validate();\n  }\n  _setMinValue(minValue) {\n    this._setProperty('minValue', minValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && minValue > this.maxValue) {\n      this._setMaxValue(minValue);\n    }\n  }\n\n  /**\n   * Set the maximum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new maximum value is smaller than the current minValue, the current minimum value is changed to the new maximum value.\n   * @param {number} the new minimum value\n   */\n  setMaxValue(maxValue) {\n    if (this.maxValue === maxValue) {\n      return;\n    }\n    this._setMaxValue(maxValue);\n    this.validate();\n  }\n  _setMaxValue(maxValue) {\n    this._setProperty('maxValue', maxValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && maxValue < this.minValue) {\n      this._setMinValue(maxValue);\n    }\n  }\n}","map":{"version":3,"names":["BasicField","Calculator","DecimalFormat","fields","InputFieldKeyStrokeContext","numbers","objects","NumberField","constructor","calc","minValue","maxValue","decimalFormat","invalidValueMessageKey","gridDataHints","horizontalAlignment","_init","model","_setMinValue","_setMaxValue","_setDecimalFormat","_initValue","value","_createKeyStrokeContext","_render","addContainer","$parent","addLabel","addMandatoryIndicator","$field","makeTextField","addField","addStatus","_renderGridData","updateInnerAlignment","useHorizontalAlignment","_renderGridDataHints","_getDefaultFormat","locale","decimalFormatPatternDefault","setDecimalFormat","setProperty","session","ensure","_setProperty","initialized","_updateDisplayText","_parseValue","displayText","parse","_evaluateNumber","bind","normalizedNumberString","isFormula","calculated","evalFormula","isNaN","Error","Number","_ensureValue","_validateValue","isNullOrUndefined","isNumber","text","_onNumberTooSmall","_onNumberTooLarge","_formatValue","format","setMinValue","validate","setMaxValue"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/numberfield/NumberField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {BasicField, Calculator, DecimalFormat, fields, InputFieldKeyStrokeContext, numbers, objects} from '../../../index';\n\nexport default class NumberField extends BasicField {\n\n  constructor() {\n    super();\n    this.calc = new Calculator();\n    this.minValue = null;\n    this.maxValue = null;\n    this.decimalFormat = null;\n    this.invalidValueMessageKey = 'InvalidNumberMessageX';\n    this.gridDataHints.horizontalAlignment = 1; // number fields are right aligned by default.\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setMinValue(this.minValue);\n    this._setMaxValue(this.maxValue);\n    this._setDecimalFormat(this.decimalFormat);\n  }\n\n  /**\n   * Initializes the decimal format before calling set value.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    this._setDecimalFormat(this.decimalFormat);\n    super._initValue(value);\n  }\n\n  /**\n   * @override Widget.js\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'number-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    let $field = fields.makeTextField(this.$parent);\n    this.addField($field);\n    this.addStatus();\n  }\n\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n\n  setDecimalFormat(decimalFormat) {\n    this.setProperty('decimalFormat', decimalFormat);\n  }\n\n  _setDecimalFormat(decimalFormat) {\n    if (!decimalFormat) {\n      decimalFormat = this._getDefaultFormat(this.session.locale);\n    }\n    decimalFormat = DecimalFormat.ensure(this.session.locale, decimalFormat);\n    this._setProperty('decimalFormat', decimalFormat);\n\n    if (this.initialized) {\n      // if format changes on the fly, just update the display text\n      this._updateDisplayText();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _parseValue(displayText) {\n    if (!displayText) {\n      return null;\n    }\n\n    return this.decimalFormat.parse(displayText, this._evaluateNumber.bind(this));\n  }\n\n  _evaluateNumber(normalizedNumberString) {\n    // Convert to JS number format (remove groupingChar, replace decimalSeparatorChar with '.')\n    // Only needed for calculator\n    // if only math symbols are in the input string...\n    if (this.calc.isFormula(normalizedNumberString)) {\n      // ...evaluate and return. If the display text changed, ValueField.js will make sure, the new display text is sent to the model.\n      let calculated = this.calc.evalFormula(normalizedNumberString);\n      if (isNaN(calculated)) {\n        // catch input that is not a valid expression (although it looks like one, e.g. \"1.2.3\")\n        throw new Error(normalizedNumberString + ' is not a valid expression');\n      }\n      return calculated;\n    }\n\n    return Number(normalizedNumberString);\n  }\n\n  /**\n   * @override\n   */\n  _ensureValue(value) {\n    return numbers.ensure(value);\n  }\n\n  /**\n   * @param {number} the number to validate\n   * @return {number} the validated number\n   * @override\n   */\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    if (!numbers.isNumber(value)) {\n      throw this.session.text(this.invalidValueMessageKey, value);\n    }\n    if (!objects.isNullOrUndefined(this.minValue) && value < this.minValue) {\n      this._onNumberTooSmall();\n    }\n    if (!objects.isNullOrUndefined(this.maxValue) && value > this.maxValue) {\n      this._onNumberTooLarge();\n    }\n    return value;\n  }\n\n  _onNumberTooLarge() {\n    if (objects.isNullOrUndefined(this.minValue)) {\n      throw this.session.text('NumberTooLargeMessageX', this._formatValue(this.maxValue));\n    }\n    throw this.session.text('NumberTooLargeMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n\n  _onNumberTooSmall() {\n    if (objects.isNullOrUndefined(this.maxValue)) {\n      throw this.session.text('NumberTooSmallMessageX', this._formatValue(this.minValue));\n    }\n    throw this.session.text('NumberTooSmallMessageXY', this._formatValue(this.minValue), this._formatValue(this.maxValue));\n  }\n\n  /**\n   * @override\n   */\n  _formatValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return '';\n    }\n    if (typeof value !== 'number') {\n      // if setValue() would be called with something other than a number don't try to format it\n      return value + '';\n    }\n    return this.decimalFormat.format(value, true);\n  }\n\n  /**\n   * Set the minimum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new minimum value is bigger than the current maxValue, the current maximum value is changed to the new minimum value.\n   * @param {number} the new minimum value\n   */\n  setMinValue(minValue) {\n    if (this.minValue === minValue) {\n      return;\n    }\n    this._setMinValue(minValue);\n    this.validate();\n  }\n\n  _setMinValue(minValue) {\n    this._setProperty('minValue', minValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && minValue > this.maxValue) {\n      this._setMaxValue(minValue);\n    }\n  }\n\n  /**\n   * Set the maximum value. Value <code>null</code> means no limitation.\n   * <p>\n   * If the new maximum value is smaller than the current minValue, the current minimum value is changed to the new maximum value.\n   * @param {number} the new minimum value\n   */\n  setMaxValue(maxValue) {\n    if (this.maxValue === maxValue) {\n      return;\n    }\n    this._setMaxValue(maxValue);\n    this.validate();\n  }\n\n  _setMaxValue(maxValue) {\n    this._setProperty('maxValue', maxValue);\n    if (!objects.isNullOrUndefined(this.maxValue) && !objects.isNullOrUndefined(this.minValue) && maxValue < this.minValue) {\n      this._setMinValue(maxValue);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}