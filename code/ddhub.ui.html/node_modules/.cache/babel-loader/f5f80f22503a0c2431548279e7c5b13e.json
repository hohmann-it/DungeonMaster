{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { BooleanColumn, CompactBean, CompactLine, objects } from '../index';\nexport default class TableCompactHandler {\n  constructor(table) {\n    this.table = null;\n    this.useOnlyVisibleColumns = true;\n    this.maxContentLines = 3;\n    this._oldStates = objects.createMap();\n    this._updateHandler = null;\n  }\n  init(model) {\n    $.extend(this, model);\n  }\n  setUseOnlyVisibleColumns(useOnlyVisibleColumns) {\n    this.useOnlyVisibleColumns = useOnlyVisibleColumns;\n  }\n  setMaxContentLines(maxContentLines) {\n    this.maxContentLines = maxContentLines;\n  }\n  handle(compact) {\n    if (compact) {\n      this._compactColumns(true);\n      this._attachTableHandler();\n    } else {\n      this._detachTableHandler();\n      this._compactColumns(false);\n    }\n    this._adjustTable(compact);\n    if (compact) {\n      this.updateValues(this.table.rows);\n    }\n  }\n  _adjustTable(compact) {\n    if (compact) {\n      this._cacheAndSetProperty('headerVisible', () => this.table.headerVisible, () => this.table.setHeaderVisible(false));\n      this._cacheAndSetProperty('autoResizeColumns', () => this.table.autoResizeColumns, () => this.table.setAutoResizeColumns(true));\n    } else {\n      this._resetProperty('headerVisible', value => this.table.setHeaderVisible(value));\n      this._resetProperty('autoResizeColumns', value => this.table.setAutoResizeColumns(value));\n    }\n  }\n  _cacheAndSetProperty(propertyName, getter, setter) {\n    if (objects.isNullOrUndefined(this._oldStates[propertyName])) {\n      this._oldStates[propertyName] = getter();\n    }\n    setter();\n  }\n  _resetProperty(propertyName, setter) {\n    if (!objects.isNullOrUndefined(this._oldStates[propertyName])) {\n      setter(this._oldStates[propertyName]);\n      delete this._oldStates[propertyName];\n    }\n  }\n  _compactColumns(compact) {\n    this.table.displayableColumns(false).forEach(column => column.setCompacted(compact, false));\n    this.table.onColumnVisibilityChanged();\n  }\n  _attachTableHandler() {\n    if (this._updateHandler == null) {\n      this._updateHandler = this._onTableEvent.bind(this);\n      this.table.on('rowsInserted rowsUpdated columnStructureChanged', this._updateHandler);\n    }\n  }\n  _detachTableHandler() {\n    if (this._updateHandler != null) {\n      this.table.off('rowsInserted rowsUpdated columnStructureChanged', this._updateHandler);\n      this._updateHandler = null;\n    }\n  }\n  updateValues(rows) {\n    if (rows.length === 0) {\n      return;\n    }\n    let columns = this._getColumns();\n    rows.forEach(row => this._updateValue(columns, row));\n  }\n  _updateValue(columns, row) {\n    row.setCompactValue(this.buildValue(columns, row));\n  }\n  buildValue(columns, row) {\n    return this._buildValue(this._createBean(columns, row));\n  }\n  _createBean(columns, row) {\n    let bean = new CompactBean();\n    this._processColumns(columns, row, bean);\n    this._postProcessBean(bean);\n    return bean;\n  }\n  _processColumns(columns, row, bean) {\n    columns.forEach((column, i) => this._processColumn(column, i, row, bean));\n  }\n  _getColumns() {\n    return this.table.filterColumns(column => this._acceptColumn(column));\n  }\n  _acceptColumn(column) {\n    return !column.guiOnly && (!this.useOnlyVisibleColumns || column.visible && column.displayable);\n  }\n  _processColumn(column, index, row, bean) {\n    this._updateBean(bean, column, index, row);\n  }\n\n  /**\n   * @param {CompactBean} bean\n   *          the bean for the current row\n   * @param {Column} column\n   *          the currently processed column\n   * @param index\n   *          visible column index of the currently processed column\n   * @param {TableRow} row\n   *          the current row\n   */\n  _updateBean(bean, column, index, row) {\n    if (this._acceptColumnForTitle(column, index)) {\n      bean.setTitleLine(this._createCompactLine(column, index, row));\n    } else if (this._acceptColumnForTitleSuffix(column, index)) {\n      bean.setTitleSuffixLine(this._createCompactLine(column, index, row));\n    } else if (this._acceptColumnForSubtitle(column, index)) {\n      bean.setSubtitleLine(this._createCompactLine(column, index, row));\n    } else {\n      bean.addContentLine(this._createCompactLine(column, index, row));\n    }\n  }\n  _acceptColumnForTitle(column, index) {\n    return index === 0;\n  }\n  _acceptColumnForSubtitle(column, index) {\n    return index === 1;\n  }\n  _acceptColumnForTitleSuffix(column, index) {\n    return false;\n  }\n  _createCompactLine(column, index, row) {\n    let headerCell;\n    if (this._showLabel(column, index, row)) {\n      headerCell = column.headerCell();\n    }\n    let cell = column.cell(row);\n    let line = new CompactLine(headerCell, cell);\n    this._adaptCompactLine(line, column, headerCell, cell);\n    return line;\n  }\n  _showLabel(column, index, row) {\n    return !this._acceptColumnForTitle(column, index) && !this._acceptColumnForSubtitle(column, index) && !this._acceptColumnForTitleSuffix(column, index);\n  }\n  _adaptCompactLine(line, column, headerCell, cell) {\n    if (column instanceof BooleanColumn) {\n      let text = '';\n      let value = cell.value;\n      if (value) {\n        text = 'X';\n      } else if (value === null) {\n        text = '?';\n      }\n      line.textBlock.setText(text);\n    }\n  }\n\n  /**\n   * @param {CompactBean} bean\n   */\n  _postProcessBean(bean) {\n    bean.transform({\n      maxContentLines: this.maxContentLines\n    });\n\n    // If only title is set move it to content. A title without content does not look good.\n    if (bean.title && !bean.subtitle && !bean.titleSuffix && !bean.content) {\n      bean.setContent(bean.title);\n      bean.setTitle('');\n    }\n  }\n  _buildValue(bean) {\n    let hasHeader = bean.title + bean.titleSuffix + bean.subTitle ? ' has-header' : '';\n    let moreLink = bean.moreContent ? \"<div class=\\\"compact-cell-more\\\"><span class=\\\"more-link link\\\">\".concat(this.table.session.text('More'), \"</span></div>\") : '';\n    return \"\\n<div class=\\\"compact-cell-header\\\">\\n  <div class=\\\"compact-cell-title\\\">\\n    <span class=\\\"left\\\">\".concat(bean.title, \"</span>\\n    <span class=\\\"right\\\">\").concat(bean.titleSuffix, \"</span>\\n    </div>\\n  <div class=\\\"compact-cell-subtitle\\\">\").concat(bean.subtitle, \"</div>\\n</div>\\n<div class=\\\"compact-cell-content\").concat(hasHeader, \"\\\">\").concat(bean.content, \"</div>\\n<div class=\\\"compact-cell-more-content hidden\").concat(hasHeader, \"\\\">\").concat(bean.moreContent, \"</div>\\n  \").concat(moreLink);\n  }\n  _onTableEvent(event) {\n    let rows = event.rows;\n    if (event.type === 'columnStructureChanged') {\n      rows = this.table.rows;\n    }\n    this.updateValues(rows);\n  }\n}","map":{"version":3,"names":["BooleanColumn","CompactBean","CompactLine","objects","TableCompactHandler","constructor","table","useOnlyVisibleColumns","maxContentLines","_oldStates","createMap","_updateHandler","init","model","$","extend","setUseOnlyVisibleColumns","setMaxContentLines","handle","compact","_compactColumns","_attachTableHandler","_detachTableHandler","_adjustTable","updateValues","rows","_cacheAndSetProperty","headerVisible","setHeaderVisible","autoResizeColumns","setAutoResizeColumns","_resetProperty","value","propertyName","getter","setter","isNullOrUndefined","displayableColumns","forEach","column","setCompacted","onColumnVisibilityChanged","_onTableEvent","bind","on","off","length","columns","_getColumns","row","_updateValue","setCompactValue","buildValue","_buildValue","_createBean","bean","_processColumns","_postProcessBean","i","_processColumn","filterColumns","_acceptColumn","guiOnly","visible","displayable","index","_updateBean","_acceptColumnForTitle","setTitleLine","_createCompactLine","_acceptColumnForTitleSuffix","setTitleSuffixLine","_acceptColumnForSubtitle","setSubtitleLine","addContentLine","headerCell","_showLabel","cell","line","_adaptCompactLine","text","textBlock","setText","transform","title","subtitle","titleSuffix","content","setContent","setTitle","hasHeader","subTitle","moreLink","moreContent","session","event","type"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableCompactHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {BooleanColumn, CompactBean, CompactLine, objects} from '../index';\n\nexport default class TableCompactHandler {\n\n  constructor(table) {\n    this.table = null;\n    this.useOnlyVisibleColumns = true;\n    this.maxContentLines = 3;\n    this._oldStates = objects.createMap();\n    this._updateHandler = null;\n  }\n\n  init(model) {\n    $.extend(this, model);\n  }\n\n  setUseOnlyVisibleColumns(useOnlyVisibleColumns) {\n    this.useOnlyVisibleColumns = useOnlyVisibleColumns;\n  }\n\n  setMaxContentLines(maxContentLines) {\n    this.maxContentLines = maxContentLines;\n  }\n\n  handle(compact) {\n    if (compact) {\n      this._compactColumns(true);\n      this._attachTableHandler();\n    } else {\n      this._detachTableHandler();\n      this._compactColumns(false);\n    }\n    this._adjustTable(compact);\n    if (compact) {\n      this.updateValues(this.table.rows);\n    }\n  }\n\n  _adjustTable(compact) {\n    if (compact) {\n      this._cacheAndSetProperty('headerVisible', () => this.table.headerVisible, () => this.table.setHeaderVisible(false));\n      this._cacheAndSetProperty('autoResizeColumns', () => this.table.autoResizeColumns, () => this.table.setAutoResizeColumns(true));\n    } else {\n      this._resetProperty('headerVisible', value => this.table.setHeaderVisible(value));\n      this._resetProperty('autoResizeColumns', value => this.table.setAutoResizeColumns(value));\n    }\n  }\n\n  _cacheAndSetProperty(propertyName, getter, setter) {\n    if (objects.isNullOrUndefined(this._oldStates[propertyName])) {\n      this._oldStates[propertyName] = getter();\n    }\n    setter();\n  }\n\n  _resetProperty(propertyName, setter) {\n    if (!objects.isNullOrUndefined(this._oldStates[propertyName])) {\n      setter(this._oldStates[propertyName]);\n      delete this._oldStates[propertyName];\n    }\n  }\n\n  _compactColumns(compact) {\n    this.table.displayableColumns(false).forEach(column => column.setCompacted(compact, false));\n    this.table.onColumnVisibilityChanged();\n  }\n\n  _attachTableHandler() {\n    if (this._updateHandler == null) {\n      this._updateHandler = this._onTableEvent.bind(this);\n      this.table.on('rowsInserted rowsUpdated columnStructureChanged', this._updateHandler);\n    }\n  }\n\n  _detachTableHandler() {\n    if (this._updateHandler != null) {\n      this.table.off('rowsInserted rowsUpdated columnStructureChanged', this._updateHandler);\n      this._updateHandler = null;\n    }\n  }\n\n  updateValues(rows) {\n    if (rows.length === 0) {\n      return;\n    }\n    let columns = this._getColumns();\n    rows.forEach(row => this._updateValue(columns, row));\n  }\n\n  _updateValue(columns, row) {\n    row.setCompactValue(this.buildValue(columns, row));\n  }\n\n  buildValue(columns, row) {\n    return this._buildValue(this._createBean(columns, row));\n  }\n\n  _createBean(columns, row) {\n    let bean = new CompactBean();\n    this._processColumns(columns, row, bean);\n    this._postProcessBean(bean);\n    return bean;\n  }\n\n  _processColumns(columns, row, bean) {\n    columns.forEach((column, i) => this._processColumn(column, i, row, bean));\n  }\n\n  _getColumns() {\n    return this.table.filterColumns(column => this._acceptColumn(column));\n  }\n\n  _acceptColumn(column) {\n    return !column.guiOnly && (!this.useOnlyVisibleColumns || (column.visible && column.displayable));\n  }\n\n  _processColumn(column, index, row, bean) {\n    this._updateBean(bean, column, index, row);\n  }\n\n  /**\n   * @param {CompactBean} bean\n   *          the bean for the current row\n   * @param {Column} column\n   *          the currently processed column\n   * @param index\n   *          visible column index of the currently processed column\n   * @param {TableRow} row\n   *          the current row\n   */\n  _updateBean(bean, column, index, row) {\n    if (this._acceptColumnForTitle(column, index)) {\n      bean.setTitleLine(this._createCompactLine(column, index, row));\n    } else if (this._acceptColumnForTitleSuffix(column, index)) {\n      bean.setTitleSuffixLine(this._createCompactLine(column, index, row));\n    } else if (this._acceptColumnForSubtitle(column, index)) {\n      bean.setSubtitleLine(this._createCompactLine(column, index, row));\n    } else {\n      bean.addContentLine(this._createCompactLine(column, index, row));\n    }\n  }\n\n  _acceptColumnForTitle(column, index) {\n    return index === 0;\n  }\n\n  _acceptColumnForSubtitle(column, index) {\n    return index === 1;\n  }\n\n  _acceptColumnForTitleSuffix(column, index) {\n    return false;\n  }\n\n  _createCompactLine(column, index, row) {\n    let headerCell;\n    if (this._showLabel(column, index, row)) {\n      headerCell = column.headerCell();\n    }\n    let cell = column.cell(row);\n    let line = new CompactLine(headerCell, cell);\n    this._adaptCompactLine(line, column, headerCell, cell);\n    return line;\n  }\n\n  _showLabel(column, index, row) {\n    return !this._acceptColumnForTitle(column, index) && !this._acceptColumnForSubtitle(column, index) && !this._acceptColumnForTitleSuffix(column, index);\n  }\n\n  _adaptCompactLine(line, column, headerCell, cell) {\n    if (column instanceof BooleanColumn) {\n      let text = '';\n      let value = cell.value;\n      if (value) {\n        text = 'X';\n      } else if (value === null) {\n        text = '?';\n      }\n      line.textBlock.setText(text);\n    }\n  }\n\n  /**\n   * @param {CompactBean} bean\n   */\n  _postProcessBean(bean) {\n    bean.transform({maxContentLines: this.maxContentLines});\n\n    // If only title is set move it to content. A title without content does not look good.\n    if (bean.title && !bean.subtitle && !bean.titleSuffix && !bean.content) {\n      bean.setContent(bean.title);\n      bean.setTitle('');\n    }\n  }\n\n  _buildValue(bean) {\n    let hasHeader = (bean.title + bean.titleSuffix + bean.subTitle) ? ' has-header' : '';\n    let moreLink = bean.moreContent ? `<div class=\"compact-cell-more\"><span class=\"more-link link\">${this.table.session.text('More')}</span></div>` : '';\n\n    return `\n<div class=\"compact-cell-header\">\n  <div class=\"compact-cell-title\">\n    <span class=\"left\">${bean.title}</span>\n    <span class=\"right\">${bean.titleSuffix}</span>\n    </div>\n  <div class=\"compact-cell-subtitle\">${bean.subtitle}</div>\n</div>\n<div class=\"compact-cell-content${hasHeader}\">${bean.content}</div>\n<div class=\"compact-cell-more-content hidden${hasHeader}\">${bean.moreContent}</div>\n  ${moreLink}`;\n  }\n\n  _onTableEvent(event) {\n    let rows = event.rows;\n    if (event.type === 'columnStructureChanged') {\n      rows = this.table.rows;\n    }\n    this.updateValues(rows);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}