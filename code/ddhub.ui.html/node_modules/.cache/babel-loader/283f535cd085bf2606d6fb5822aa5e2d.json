{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractTreeNavigationKeyStroke, keys } from '../../index';\nexport default class TreeExpandOrDrillDownKeyStroke extends AbstractTreeNavigationKeyStroke {\n  constructor(tree, modifierBitMask) {\n    super(tree, modifierBitMask);\n    this.which = [keys.ADD];\n    this.renderingHints.text = '+';\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let currentNode = event._treeCurrentNode;\n      if (this.isNodeExpandable(currentNode)) {\n        return currentNode.$node;\n      } else if (currentNode.childNodes.length > 0) {\n        return currentNode.childNodes[0].$node;\n      }\n    };\n  }\n  _accept(event) {\n    let accepted = super._accept(event);\n    let currentNode = event._treeCurrentNode;\n    return accepted && currentNode && (this.isNodeExpandable(currentNode) || currentNode.childNodes.length > 0);\n  }\n  isNodeExpandable(node) {\n    return !node.expanded && !node.leaf;\n  }\n  handle(event) {\n    let currentNode = event._treeCurrentNode;\n    if (this.isNodeExpandable(currentNode)) {\n      this.field.expandNode(currentNode, {\n        lazy: false // always show all nodes on node double click\n      });\n    } else {\n      let visibleChildNodes = currentNode.childNodes.filter(function (node) {\n        // Filter using isFilterAccepted does not work because node.filterAccepted is wrong for visible child nodes of a lazy expanded node\n        return this.field.visibleNodesFlat.indexOf(node) > -1;\n      }, this);\n      if (visibleChildNodes.length > 0) {\n        this.selectNodesAndReveal(visibleChildNodes[0], true);\n      }\n    }\n  }\n}","map":{"version":3,"names":["AbstractTreeNavigationKeyStroke","keys","TreeExpandOrDrillDownKeyStroke","constructor","tree","modifierBitMask","which","ADD","renderingHints","text","$drawingArea","event","currentNode","_treeCurrentNode","isNodeExpandable","$node","childNodes","length","_accept","accepted","node","expanded","leaf","handle","field","expandNode","lazy","visibleChildNodes","filter","visibleNodesFlat","indexOf","selectNodesAndReveal"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tree/keystrokes/TreeExpandOrDrillDownKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractTreeNavigationKeyStroke, keys} from '../../index';\n\nexport default class TreeExpandOrDrillDownKeyStroke extends AbstractTreeNavigationKeyStroke {\n\n  constructor(tree, modifierBitMask) {\n    super(tree, modifierBitMask);\n    this.which = [keys.ADD];\n    this.renderingHints.text = '+';\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let currentNode = event._treeCurrentNode;\n      if (this.isNodeExpandable(currentNode)) {\n        return currentNode.$node;\n      } else if (currentNode.childNodes.length > 0) {\n        return currentNode.childNodes[0].$node;\n      }\n    };\n  }\n\n  _accept(event) {\n    let accepted = super._accept(event);\n    let currentNode = event._treeCurrentNode;\n    return accepted && currentNode && (this.isNodeExpandable(currentNode) || currentNode.childNodes.length > 0);\n  }\n\n  isNodeExpandable(node) {\n    return !node.expanded && !node.leaf;\n  }\n\n  handle(event) {\n    let currentNode = event._treeCurrentNode;\n    if (this.isNodeExpandable(currentNode)) {\n      this.field.expandNode(currentNode, {\n        lazy: false // always show all nodes on node double click\n      });\n    } else {\n      let visibleChildNodes = currentNode.childNodes.filter(function(node) {\n        // Filter using isFilterAccepted does not work because node.filterAccepted is wrong for visible child nodes of a lazy expanded node\n        return this.field.visibleNodesFlat.indexOf(node) > -1;\n      }, this);\n      if (visibleChildNodes.length > 0) {\n        this.selectNodesAndReveal(visibleChildNodes[0], true);\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,+BAA+B,EAAEC,IAAI,QAAO,aAAa;AAEjE,eAAe,MAAMC,8BAA8B,SAASF,+BAA+B,CAAC;EAE1FG,WAAW,CAACC,IAAI,EAAEC,eAAe,EAAE;IACjC,KAAK,CAACD,IAAI,EAAEC,eAAe,CAAC;IAC5B,IAAI,CAACC,KAAK,GAAG,CAACL,IAAI,CAACM,GAAG,CAAC;IACvB,IAAI,CAACC,cAAc,CAACC,IAAI,GAAG,GAAG;IAC9B,IAAI,CAACD,cAAc,CAACE,YAAY,GAAG,CAACA,YAAY,EAAEC,KAAK,KAAK;MAC1D,IAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAgB;MACxC,IAAI,IAAI,CAACC,gBAAgB,CAACF,WAAW,CAAC,EAAE;QACtC,OAAOA,WAAW,CAACG,KAAK;MAC1B,CAAC,MAAM,IAAIH,WAAW,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QAC5C,OAAOL,WAAW,CAACI,UAAU,CAAC,CAAC,CAAC,CAACD,KAAK;MACxC;IACF,CAAC;EACH;EAEAG,OAAO,CAACP,KAAK,EAAE;IACb,IAAIQ,QAAQ,GAAG,KAAK,CAACD,OAAO,CAACP,KAAK,CAAC;IACnC,IAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAgB;IACxC,OAAOM,QAAQ,IAAIP,WAAW,KAAK,IAAI,CAACE,gBAAgB,CAACF,WAAW,CAAC,IAAIA,WAAW,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC;EAC7G;EAEAH,gBAAgB,CAACM,IAAI,EAAE;IACrB,OAAO,CAACA,IAAI,CAACC,QAAQ,IAAI,CAACD,IAAI,CAACE,IAAI;EACrC;EAEAC,MAAM,CAACZ,KAAK,EAAE;IACZ,IAAIC,WAAW,GAAGD,KAAK,CAACE,gBAAgB;IACxC,IAAI,IAAI,CAACC,gBAAgB,CAACF,WAAW,CAAC,EAAE;MACtC,IAAI,CAACY,KAAK,CAACC,UAAU,CAACb,WAAW,EAAE;QACjCc,IAAI,EAAE,KAAK,CAAC;MACd,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAIC,iBAAiB,GAAGf,WAAW,CAACI,UAAU,CAACY,MAAM,CAAC,UAASR,IAAI,EAAE;QACnE;QACA,OAAO,IAAI,CAACI,KAAK,CAACK,gBAAgB,CAACC,OAAO,CAACV,IAAI,CAAC,GAAG,CAAC,CAAC;MACvD,CAAC,EAAE,IAAI,CAAC;MACR,IAAIO,iBAAiB,CAACV,MAAM,GAAG,CAAC,EAAE;QAChC,IAAI,CAACc,oBAAoB,CAACJ,iBAAiB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MACvD;IACF;EACF;AACF"},"metadata":{},"sourceType":"module"}