{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { icons } from '../index';\nexport default class IconDesc {\n  constructor() {\n    this.iconType = null;\n    this.font = null;\n    this.iconCharacter = null;\n    this.iconUrl = null;\n  }\n  /**\n   * Returns a CSS class based on the used font-name.\n   */\n  cssClass() {\n    if (this.isFontIcon() && this.font !== IconDesc.DEFAULT_FONT) {\n      return 'font-' + this.font;\n    }\n    return '';\n  }\n\n  /**\n   * Returns a CSS class string to be used with JQuery.add/removeClass().\n   */\n  appendCssClass(cssClass) {\n    let additionalCssClass = this.cssClass();\n    if (additionalCssClass.length > 0) {\n      return cssClass + ' ' + additionalCssClass;\n    }\n    return cssClass;\n  }\n  isFontIcon() {\n    return this.iconType === IconDesc.IconType.FONT_ICON;\n  }\n  isBitmap() {\n    return this.iconType === IconDesc.IconType.BITMAP;\n  }\n\n  /**\n   * Ensures that the given icon is of type {@link scout.iconDesc}. It a string is provided it is assumed that the string is the iconId which may be parsed to create the {@link IconDesc}.\n   * @param {(string|IconDesc)} icon\n   */\n  static ensure(icon) {\n    if (!icon) {\n      return icon;\n    }\n    if (icon instanceof IconDesc) {\n      return icon;\n    }\n    return icons.parseIconId(icon);\n  }\n}\n_defineProperty(IconDesc, \"IconType\", {\n  FONT_ICON: 0,\n  BITMAP: 1\n});\n_defineProperty(IconDesc, \"DEFAULT_FONT\", 'scoutIcons');","map":{"version":3,"names":["icons","IconDesc","constructor","iconType","font","iconCharacter","iconUrl","cssClass","isFontIcon","DEFAULT_FONT","appendCssClass","additionalCssClass","length","IconType","FONT_ICON","isBitmap","BITMAP","ensure","icon","parseIconId"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/image/IconDesc.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {icons} from '../index';\n\nexport default class IconDesc {\n\n  constructor() {\n    this.iconType = null;\n    this.font = null;\n    this.iconCharacter = null;\n    this.iconUrl = null;\n  }\n\n  static IconType = {\n    FONT_ICON: 0,\n    BITMAP: 1\n  };\n\n  static DEFAULT_FONT = 'scoutIcons';\n\n  /**\n   * Returns a CSS class based on the used font-name.\n   */\n  cssClass() {\n    if (this.isFontIcon() && this.font !== IconDesc.DEFAULT_FONT) {\n      return 'font-' + this.font;\n    }\n    return '';\n  }\n\n  /**\n   * Returns a CSS class string to be used with JQuery.add/removeClass().\n   */\n  appendCssClass(cssClass) {\n    let additionalCssClass = this.cssClass();\n    if (additionalCssClass.length > 0) {\n      return cssClass + ' ' + additionalCssClass;\n    }\n    return cssClass;\n  }\n\n  isFontIcon() {\n    return this.iconType === IconDesc.IconType.FONT_ICON;\n  }\n\n  isBitmap() {\n    return this.iconType === IconDesc.IconType.BITMAP;\n  }\n\n  /**\n   * Ensures that the given icon is of type {@link scout.iconDesc}. It a string is provided it is assumed that the string is the iconId which may be parsed to create the {@link IconDesc}.\n   * @param {(string|IconDesc)} icon\n   */\n  static ensure(icon) {\n    if (!icon) {\n      return icon;\n    }\n    if (icon instanceof IconDesc) {\n      return icon;\n    }\n    return icons.parseIconId(icon);\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,KAAK,QAAO,UAAU;AAE9B,eAAe,MAAMC,QAAQ,CAAC;EAE5BC,WAAW,GAAG;IACZ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,OAAO,GAAG,IAAI;EACrB;EASA;AACF;AACA;EACEC,QAAQ,GAAG;IACT,IAAI,IAAI,CAACC,UAAU,EAAE,IAAI,IAAI,CAACJ,IAAI,KAAKH,QAAQ,CAACQ,YAAY,EAAE;MAC5D,OAAO,OAAO,GAAG,IAAI,CAACL,IAAI;IAC5B;IACA,OAAO,EAAE;EACX;;EAEA;AACF;AACA;EACEM,cAAc,CAACH,QAAQ,EAAE;IACvB,IAAII,kBAAkB,GAAG,IAAI,CAACJ,QAAQ,EAAE;IACxC,IAAII,kBAAkB,CAACC,MAAM,GAAG,CAAC,EAAE;MACjC,OAAOL,QAAQ,GAAG,GAAG,GAAGI,kBAAkB;IAC5C;IACA,OAAOJ,QAAQ;EACjB;EAEAC,UAAU,GAAG;IACX,OAAO,IAAI,CAACL,QAAQ,KAAKF,QAAQ,CAACY,QAAQ,CAACC,SAAS;EACtD;EAEAC,QAAQ,GAAG;IACT,OAAO,IAAI,CAACZ,QAAQ,KAAKF,QAAQ,CAACY,QAAQ,CAACG,MAAM;EACnD;;EAEA;AACF;AACA;AACA;EACE,OAAOC,MAAM,CAACC,IAAI,EAAE;IAClB,IAAI,CAACA,IAAI,EAAE;MACT,OAAOA,IAAI;IACb;IACA,IAAIA,IAAI,YAAYjB,QAAQ,EAAE;MAC5B,OAAOiB,IAAI;IACb;IACA,OAAOlB,KAAK,CAACmB,WAAW,CAACD,IAAI,CAAC;EAChC;AACF;AAAC,gBA1DoBjB,QAAQ,cAST;EAChBa,SAAS,EAAE,CAAC;EACZE,MAAM,EAAE;AACV,CAAC;AAAA,gBAZkBf,QAAQ,kBAcL,YAAY"},"metadata":{},"sourceType":"module"}