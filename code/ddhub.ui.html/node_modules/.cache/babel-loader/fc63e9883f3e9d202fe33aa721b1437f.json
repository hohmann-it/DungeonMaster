{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ModelAdapter, objects, scout } from '../index';\nexport default class TileGridAdapter extends ModelAdapter {\n  constructor() {\n    super();\n    this._addRemoteProperties(['selectedTiles']);\n    this._tileFilter = null;\n  }\n  _syncSelectedTiles(tiles) {\n    // TileGrid.js won't modify the selectedTiles array while processing the response -> ignore every selectedTiles property change\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.selectTiles(tiles);\n  }\n  _syncTiles(tiles) {\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.setTiles(tiles);\n  }\n  _initProperties(model) {\n    super._initProperties(model);\n    if (!objects.isNullOrUndefined(model.filteredTiles)) {\n      // If filteredTiles is set a server side filter is active -> add a tile filter on JS side as well\n      this.tileFilter = scout.create('RemoteTileFilter', {\n        tileIds: model.filteredTiles\n      });\n      model.filters = [this.tileFilter];\n    }\n    // filtered tiles are set by TileGrid.js as soon a applyFilters is called -> don't override with the values sent by the server\n    delete model.filteredTiles;\n  }\n  _syncFilteredTiles(tileIds) {\n    // If filteredTiles property changes on the fly, create or remove the filter accordingly\n    // -> If filteredTiles is null, no server side filter is active\n    // -> If filteredTiles is an empty array, the server side filter rejects every tile\n    if (!objects.isNullOrUndefined(tileIds)) {\n      if (!this.tileFilter) {\n        this.tileFilter = scout.create('RemoteTileFilter');\n        this.widget.addFilter(this.tileFilter, false);\n      }\n      this.tileFilter.setTileIds(tileIds);\n      this.widget.filter();\n    } else {\n      this.widget.removeFilter(this.tileFilter);\n      this.tileFilter = null;\n    }\n  }\n  _onWidgetTileClick(event) {\n    let data = {\n      tile: event.tile.id,\n      mouseButton: event.mouseButton\n    };\n    this._send('tileClick', data);\n  }\n  _onWidgetTileAction(event) {\n    let data = {\n      tile: event.tile.id\n    };\n    this._send('tileAction', data);\n  }\n  _onWidgetEvent(event) {\n    if (event.type === 'tileClick') {\n      this._onWidgetTileClick(event);\n    } else if (event.type === 'tileAction') {\n      this._onWidgetTileAction(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n}","map":{"version":3,"names":["ModelAdapter","objects","scout","TileGridAdapter","constructor","_addRemoteProperties","_tileFilter","_syncSelectedTiles","tiles","addFilterForPropertyName","widget","selectTiles","_syncTiles","setTiles","_initProperties","model","isNullOrUndefined","filteredTiles","tileFilter","create","tileIds","filters","_syncFilteredTiles","addFilter","setTileIds","filter","removeFilter","_onWidgetTileClick","event","data","tile","id","mouseButton","_send","_onWidgetTileAction","_onWidgetEvent","type"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/TileGridAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ModelAdapter, objects, scout} from '../index';\n\nexport default class TileGridAdapter extends ModelAdapter {\n\n  constructor() {\n    super();\n    this._addRemoteProperties(['selectedTiles']);\n    this._tileFilter = null;\n  }\n\n  _syncSelectedTiles(tiles) {\n    // TileGrid.js won't modify the selectedTiles array while processing the response -> ignore every selectedTiles property change\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.selectTiles(tiles);\n  }\n\n  _syncTiles(tiles) {\n    this.addFilterForPropertyName('selectedTiles');\n    this.widget.setTiles(tiles);\n  }\n\n  _initProperties(model) {\n    super._initProperties(model);\n    if (!objects.isNullOrUndefined(model.filteredTiles)) {\n      // If filteredTiles is set a server side filter is active -> add a tile filter on JS side as well\n      this.tileFilter = scout.create('RemoteTileFilter', {\n        tileIds: model.filteredTiles\n      });\n      model.filters = [this.tileFilter];\n    }\n    // filtered tiles are set by TileGrid.js as soon a applyFilters is called -> don't override with the values sent by the server\n    delete model.filteredTiles;\n  }\n\n  _syncFilteredTiles(tileIds) {\n    // If filteredTiles property changes on the fly, create or remove the filter accordingly\n    // -> If filteredTiles is null, no server side filter is active\n    // -> If filteredTiles is an empty array, the server side filter rejects every tile\n    if (!objects.isNullOrUndefined(tileIds)) {\n      if (!this.tileFilter) {\n        this.tileFilter = scout.create('RemoteTileFilter');\n        this.widget.addFilter(this.tileFilter, false);\n      }\n      this.tileFilter.setTileIds(tileIds);\n      this.widget.filter();\n    } else {\n      this.widget.removeFilter(this.tileFilter);\n      this.tileFilter = null;\n    }\n  }\n\n  _onWidgetTileClick(event) {\n    let data = {\n      tile: event.tile.id,\n      mouseButton: event.mouseButton\n    };\n    this._send('tileClick', data);\n  }\n\n  _onWidgetTileAction(event) {\n    let data = {\n      tile: event.tile.id\n    };\n    this._send('tileAction', data);\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'tileClick') {\n      this._onWidgetTileClick(event);\n    } else if (event.type === 'tileAction') {\n      this._onWidgetTileAction(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAY,EAAEC,OAAO,EAAEC,KAAK,QAAO,UAAU;AAErD,eAAe,MAAMC,eAAe,SAASH,YAAY,CAAC;EAExDI,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,oBAAoB,CAAC,CAAC,eAAe,CAAC,CAAC;IAC5C,IAAI,CAACC,WAAW,GAAG,IAAI;EACzB;EAEAC,kBAAkB,CAACC,KAAK,EAAE;IACxB;IACA,IAAI,CAACC,wBAAwB,CAAC,eAAe,CAAC;IAC9C,IAAI,CAACC,MAAM,CAACC,WAAW,CAACH,KAAK,CAAC;EAChC;EAEAI,UAAU,CAACJ,KAAK,EAAE;IAChB,IAAI,CAACC,wBAAwB,CAAC,eAAe,CAAC;IAC9C,IAAI,CAACC,MAAM,CAACG,QAAQ,CAACL,KAAK,CAAC;EAC7B;EAEAM,eAAe,CAACC,KAAK,EAAE;IACrB,KAAK,CAACD,eAAe,CAACC,KAAK,CAAC;IAC5B,IAAI,CAACd,OAAO,CAACe,iBAAiB,CAACD,KAAK,CAACE,aAAa,CAAC,EAAE;MACnD;MACA,IAAI,CAACC,UAAU,GAAGhB,KAAK,CAACiB,MAAM,CAAC,kBAAkB,EAAE;QACjDC,OAAO,EAAEL,KAAK,CAACE;MACjB,CAAC,CAAC;MACFF,KAAK,CAACM,OAAO,GAAG,CAAC,IAAI,CAACH,UAAU,CAAC;IACnC;IACA;IACA,OAAOH,KAAK,CAACE,aAAa;EAC5B;EAEAK,kBAAkB,CAACF,OAAO,EAAE;IAC1B;IACA;IACA;IACA,IAAI,CAACnB,OAAO,CAACe,iBAAiB,CAACI,OAAO,CAAC,EAAE;MACvC,IAAI,CAAC,IAAI,CAACF,UAAU,EAAE;QACpB,IAAI,CAACA,UAAU,GAAGhB,KAAK,CAACiB,MAAM,CAAC,kBAAkB,CAAC;QAClD,IAAI,CAACT,MAAM,CAACa,SAAS,CAAC,IAAI,CAACL,UAAU,EAAE,KAAK,CAAC;MAC/C;MACA,IAAI,CAACA,UAAU,CAACM,UAAU,CAACJ,OAAO,CAAC;MACnC,IAAI,CAACV,MAAM,CAACe,MAAM,EAAE;IACtB,CAAC,MAAM;MACL,IAAI,CAACf,MAAM,CAACgB,YAAY,CAAC,IAAI,CAACR,UAAU,CAAC;MACzC,IAAI,CAACA,UAAU,GAAG,IAAI;IACxB;EACF;EAEAS,kBAAkB,CAACC,KAAK,EAAE;IACxB,IAAIC,IAAI,GAAG;MACTC,IAAI,EAAEF,KAAK,CAACE,IAAI,CAACC,EAAE;MACnBC,WAAW,EAAEJ,KAAK,CAACI;IACrB,CAAC;IACD,IAAI,CAACC,KAAK,CAAC,WAAW,EAAEJ,IAAI,CAAC;EAC/B;EAEAK,mBAAmB,CAACN,KAAK,EAAE;IACzB,IAAIC,IAAI,GAAG;MACTC,IAAI,EAAEF,KAAK,CAACE,IAAI,CAACC;IACnB,CAAC;IACD,IAAI,CAACE,KAAK,CAAC,YAAY,EAAEJ,IAAI,CAAC;EAChC;EAEAM,cAAc,CAACP,KAAK,EAAE;IACpB,IAAIA,KAAK,CAACQ,IAAI,KAAK,WAAW,EAAE;MAC9B,IAAI,CAACT,kBAAkB,CAACC,KAAK,CAAC;IAChC,CAAC,MAAM,IAAIA,KAAK,CAACQ,IAAI,KAAK,YAAY,EAAE;MACtC,IAAI,CAACF,mBAAmB,CAACN,KAAK,CAAC;IACjC,CAAC,MAAM;MACL,KAAK,CAACO,cAAc,CAACP,KAAK,CAAC;IAC7B;EACF;AACF"},"metadata":{},"sourceType":"module"}