{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Cell, ColumnOptimalWidthMeasurer, comparators, EventSupport, FormField, GridData, icons, objects, scout, Status, strings, styles, Table, TableRow, texts } from '../../index';\nimport $ from 'jquery';\nexport default class Column {\n  constructor() {\n    this.autoOptimizeWidth = false;\n    this.autoOptimizeWidthRequired = false; // true if content of the column changed and width has to be optimized\n    this.autoOptimizeMaxWidth = -1;\n    this.cssClass = null;\n    this.compacted = false;\n    this.editable = false;\n    this.removable = false;\n    this.modifiable = false;\n    this.fixedWidth = false;\n    this.fixedPosition = false;\n    this.grouped = false;\n    this.headerCssClass = null;\n    this.headerIconId = null;\n    this.headerHtmlEnabled = false;\n    this.headerTooltipText = null;\n    this.headerTooltipHtmlEnabled = false;\n    this.horizontalAlignment = -1;\n    this.htmlEnabled = false;\n    this.index = -1;\n    this.initialized = false;\n    this.mandatory = false;\n    this.optimalWidthMeasurer = new ColumnOptimalWidthMeasurer(this);\n    this.sortActive = false;\n    this.sortAscending = true;\n    this.sortIndex = -1;\n    this.summary = false;\n    this.type = 'text';\n    this.width = 60;\n    this.initialWidth = undefined; // the width the column initially has\n    this.minWidth = Column.DEFAULT_MIN_WIDTH; // the minimal width the column can have\n    this.showSeparator = true;\n    this.table = null;\n    this.tableNodeColumn = false;\n    this.maxLength = 4000;\n    this.text = null;\n    this.textWrap = false;\n    this.filterType = 'TextColumnUserFilter';\n    this.comparator = comparators.TEXT;\n    this.displayable = true;\n    this.visible = true;\n    this.textBased = true;\n    this.headerMenuEnabled = true;\n    this.tableNodeLevel0CellPadding = 28;\n    this.expandableIconLevel0CellPadding = 13;\n    this.nodeColumnCandidate = true;\n    this.events = this._createEventSupport();\n    this._tableColumnsChangedHandler = this._onTableColumnsChanged.bind(this);\n    // Contains the width the cells of the column really have (only set in Chrome due to a Chrome bug, see Table._updateRealColumnWidths)\n    this._realWidth = null;\n    this.$header = null; // Set by TableHeader.js\n    this.$separator = null;\n  }\n  init(model) {\n    this.session = model.session;\n\n    // Copy all properties from model to this\n    $.extend(this, model);\n\n    // Initial width is only sent if it differs from width\n    if (this.initialWidth === undefined) {\n      this.initialWidth = scout.nvl(this.width, 0);\n    }\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * Override this function in order to implement custom init logic.\n   */\n  _init(model) {\n    texts.resolveTextProperty(this, 'text');\n    texts.resolveTextProperty(this, 'headerTooltipText');\n    icons.resolveIconProperty(this, 'headerIconId');\n    this._setTable(this.table);\n    this._setDisplayable(this.displayable);\n    this._setAutoOptimizeWidth(this.autoOptimizeWidth);\n    // no need to call setEditable here. cell propagation is done in _initCell\n  }\n\n  destroy() {\n    this._destroy();\n    this._setTable(null);\n  }\n\n  /**\n   * Override this function in order to implement custom destroy logic.\n   */\n  _destroy() {\n    // NOP\n  }\n  _setTable(table) {\n    if (this.table) {\n      this.table.off('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n    this.table = table;\n    if (this.table) {\n      this.table.on('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n  }\n\n  /**\n   * Converts the vararg if it is of type string to an object with\n   * a property 'text' with the original value.\n   *\n   * Example:\n   * 'My Company' --> { text: 'MyCompany'; }\n   *\n   * @see JsonCell.java\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   */\n  initCell(vararg, row) {\n    let cell = this._ensureCell(vararg);\n    this._initCell(cell);\n\n    // If a text is provided, use that text instead of using formatValue to generate a text based on the value\n    if (objects.isNullOrUndefined(cell.text)) {\n      this._updateCellText(row, cell);\n    }\n    return cell;\n  }\n\n  /**\n   * Ensures that a Cell instance is returned. When vararg is a scalar value a new Cell instance is created and\n   * the value is set as cell.value property.\n   *\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   * @returns {*}\n   * @private\n   */\n  _ensureCell(vararg) {\n    let cell;\n    if (vararg instanceof Cell) {\n      cell = vararg;\n\n      // value may be set but may have the wrong type (e.g. text instead of date) -> ensure type\n      cell.value = this._parseValue(cell.value);\n    } else {\n      // in this case 'vararg' is only a scalar value, typically a string\n      cell = scout.create('Cell', {\n        value: this._parseValue(vararg)\n      });\n    }\n    return cell;\n  }\n\n  /**\n   * Override this method to create a value based on the given scalar value.\n   */\n  _parseValue(scalar) {\n    return scalar;\n  }\n  _updateCellText(row, cell) {\n    let value = cell.value;\n    if (!row) {\n      // row is omitted when creating aggregate cells\n      return;\n    }\n    let returned = this._formatValue(value, row);\n    if (returned && typeof returned.promise === 'function') {\n      // Promise is returned -> set display text later\n      this.setCellTextDeferred(returned, row, cell);\n    } else {\n      this.setCellText(row, returned, cell);\n    }\n  }\n  _formatValue(value, row) {\n    return scout.nvl(value, '');\n  }\n\n  /**\n   * If cell does not define properties, use column values.\n   * Override this function to implement type specific init cell behavior.\n   *\n   * @param {Cell} cell\n   */\n  _initCell(cell) {\n    cell.cssClass = scout.nvl(cell.cssClass, this.cssClass);\n    cell.editable = scout.nvl(cell.editable, this.editable);\n    cell.horizontalAlignment = scout.nvl(cell.horizontalAlignment, this.horizontalAlignment);\n    cell.htmlEnabled = scout.nvl(cell.htmlEnabled, this.htmlEnabled);\n    cell.mandatory = scout.nvl(cell.mandatory, this.mandatory);\n    return cell;\n  }\n  buildCellForRow(row) {\n    let cell = this.cell(row);\n    return this.buildCell(cell, row);\n  }\n  buildCellForAggregateRow(aggregateRow) {\n    let cell;\n    if (this.grouped) {\n      let refRow = this.table.groupingStyle === Table.GroupingStyle.TOP ? aggregateRow.nextRow : aggregateRow.prevRow;\n      cell = this.createAggrGroupCell(refRow);\n    } else {\n      let aggregateValue = aggregateRow.contents[this.table.columns.indexOf(this)];\n      cell = this.createAggrValueCell(aggregateValue);\n    }\n    return this.buildCell(cell, {});\n  }\n  buildCell(cell, row) {\n    scout.assertParameter('cell', cell, Cell);\n    let tableNodeColumn = this.table.isTableNodeColumn(this),\n      rowPadding = 0;\n    if (tableNodeColumn) {\n      rowPadding = this.table._calcRowLevelPadding(row);\n    }\n    let text = this._text(cell);\n    let icon = this._icon(cell.iconId, !!text) || '';\n    let cssClass = this._cellCssClass(cell, tableNodeColumn);\n    let style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n    let content;\n    if (!text && !icon) {\n      // If every cell of a row is empty the row would collapse, using nbsp makes sure the row is as height as the others even if it is empty\n      content = '&nbsp;';\n      cssClass = strings.join(' ', cssClass, 'empty');\n    } else {\n      if (cell.flowsLeft) {\n        content = text + icon;\n      } else {\n        content = icon + text;\n      }\n    }\n    if (tableNodeColumn && row._expandable) {\n      this.tableNodeColumn = true;\n      content = this._expandIcon(row.expanded, rowPadding) + content;\n      if (row.expanded) {\n        cssClass += ' expanded';\n      }\n    }\n    return this._buildCell(cell, content, style, cssClass);\n  }\n  _buildCell(cell, content, style, cssClass) {\n    return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n  }\n  _expandIcon(expanded, rowPadding) {\n    let style = 'padding-left: ' + (rowPadding + this.expandableIconLevel0CellPadding) + 'px';\n    let cssClasses = 'table-row-control';\n    if (expanded) {\n      cssClasses += ' expanded';\n    }\n    return '<div class=\"' + cssClasses + '\" style=\"' + style + '\"></div>';\n  }\n  _icon(iconId, hasText) {\n    let cssClass, icon;\n    if (!iconId) {\n      return;\n    }\n    cssClass = 'table-cell-icon';\n    if (hasText) {\n      cssClass += ' with-text';\n    }\n    icon = icons.parseIconId(iconId);\n    if (icon.isFontIcon()) {\n      cssClass += ' font-icon';\n      return '<span class=\"' + icon.appendCssClass(cssClass) + '\">' + icon.iconCharacter + '</span>';\n    }\n    cssClass += ' image-icon';\n    return '<img class=\"' + cssClass + '\" src=\"' + icon.iconUrl + '\">';\n  }\n  _text(cell) {\n    let text = cell.text || '';\n    if (!cell.htmlEnabled) {\n      text = cell.encodedText() || '';\n      if (this.table.multilineText) {\n        text = strings.nl2br(text, false);\n      }\n      if (text) {\n        // Wrap in a span to make customization using css easier.\n        // An empty text will be replaced with nbsp later on. To make that work, only wrap it if there is text.\n        text = '<span class=\"text\">' + text + '</span>';\n      }\n    }\n    return text;\n  }\n  _cellCssClass(cell, tableNode) {\n    let cssClass = 'table-cell';\n    if (cell.mandatory) {\n      cssClass += ' mandatory';\n    }\n    if (!this.table.multilineText || !this.textWrap) {\n      cssClass += ' white-space-nowrap';\n    }\n    if (cell.editable) {\n      cssClass += ' editable';\n    }\n    if (cell.errorStatus) {\n      cssClass += ' has-error';\n    }\n    if (cell.iconId && !cell.text) {\n      cssClass += ' icon-only';\n    }\n    cssClass += ' halign-' + Table.parseHorizontalAlignment(cell.horizontalAlignment);\n    let visibleColumns = this.table.visibleColumns();\n    let overAllColumnPosition = visibleColumns.indexOf(this);\n    if (overAllColumnPosition === 0) {\n      cssClass += ' first';\n    }\n    if (overAllColumnPosition === visibleColumns.length - 1) {\n      cssClass += ' last';\n    }\n    if (tableNode) {\n      cssClass += ' table-node';\n    }\n    if (cell.cssClass) {\n      cssClass += ' ' + cell.cssClass;\n    }\n    return cssClass;\n  }\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    let style,\n      width = this.width;\n    if (width === 0) {\n      return 'display: none;';\n    }\n    style = 'min-width: ' + width + 'px; max-width: ' + width + 'px; ';\n    if (tableNodeColumn) {\n      // calculate padding\n      style += ' padding-left: ' + (this.tableNodeLevel0CellPadding + rowPadding) + 'px; ';\n    }\n    style += styles.legacyStyle(cell);\n    return style;\n  }\n  onMouseUp(event, $row) {\n    let row = $row.data('row'),\n      cell = this.cell(row);\n    if (this.isCellEditable(row, cell, event)) {\n      this.table.prepareCellEdit(this, row, true);\n    }\n  }\n  isCellEditable(row, cell, event) {\n    return this.table.enabledComputed && row.enabled && cell.editable && !event.ctrlKey && !event.shiftKey;\n  }\n  startCellEdit(row, field) {\n    let popup,\n      $row = row.$row,\n      cell = this.cell(row),\n      $cell = this.table.$cell(this, $row);\n    cell.field = field;\n    // Override field alignment with the cell's alignment\n    cell.field.gridData.horizontalAlignment = cell.horizontalAlignment;\n    popup = this._createEditorPopup(row, cell);\n    popup.$anchor = $cell;\n    popup.open(this.table.$data);\n    return popup;\n  }\n  _createEditorPopup(row, cell) {\n    return scout.create('CellEditorPopup', {\n      parent: this.table,\n      column: this,\n      row: row,\n      cell: cell\n    });\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the given row.\n   */\n  cell(row) {\n    return this.table.cell(this, row);\n  }\n\n  /**\n   * Creates an artificial cell from the properties relevant for the column header.\n   * @returns {Cell}\n   */\n  headerCell() {\n    return scout.create('Cell', {\n      value: this.text,\n      text: this.text,\n      iconId: this.headerIconId,\n      cssClass: this.headerCssClass,\n      tooltipText: this.headerTooltipText,\n      htmlEnabled: this.headerHtmlEnabled\n    });\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the first selected row in the table.\n   */\n  selectedCell() {\n    let selectedRow = this.table.selectedRow();\n    return this.table.cell(this, selectedRow);\n  }\n\n  /**\n   * @param row\n   * @returns {string|*} the text of the cell if {@link Column.textBased} is true, otherwise the value of the cell.\n   */\n  cellValueOrText(row) {\n    if (this.textBased) {\n      return this.table.cellText(this, row);\n    }\n    return this.table.cellValue(this, row);\n  }\n  cellValue(row) {\n    return this.table.cellValue(this, row);\n  }\n  cellText(row) {\n    return this.table.cellText(this, row);\n  }\n\n  /**\n   * @returns {*} the cell value to be used for grouping and filtering (chart, column filter).\n   */\n  cellValueOrTextForCalculation(row) {\n    let cell = this.cell(row);\n    let value = this.cellValueOrText(row);\n    if (objects.isNullOrUndefined(value)) {\n      return null;\n    }\n    return this._preprocessValueOrTextForCalculation(value, cell);\n  }\n  _preprocessValueOrTextForCalculation(value, cell) {\n    if (typeof value === 'string') {\n      // In case of string columns, value and text are equal -> use _preprocessStringForCalculation to handle html tags and new lines correctly\n      return this._preprocessTextForCalculation(value, cell.htmlEnabled);\n    }\n    return value;\n  }\n  _preprocessTextForCalculation(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      removeNewlines: true,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for table grouping\n   */\n  cellTextForGrouping(row) {\n    let cell = this.cell(row);\n    return this._preprocessTextForGrouping(cell.text, cell.htmlEnabled);\n  }\n  _preprocessTextForGrouping(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the text filter\n   */\n  cellTextForTextFilter(row) {\n    let cell = this.cell(row);\n    return this._preprocessTextForTextFilter(cell.text, cell.htmlEnabled);\n  }\n  _preprocessTextForTextFilter(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the table row detail.\n   */\n  cellTextForRowDetail(row) {\n    let cell = this.cell(row);\n    return this._preprocessText(this._text(cell), {\n      removeHtmlTags: cell.htmlEnabled\n    });\n  }\n\n  /**\n   * Removes html tags, converts to single line, removes leading and trailing whitespaces.\n   */\n  _preprocessText(text, options) {\n    if (text === null || text === undefined) {\n      return text;\n    }\n    options = options || {};\n    if (options.removeHtmlTags) {\n      text = strings.plainText(text);\n    }\n    if (options.removeNewlines) {\n      text = text.replace('\\n', ' ');\n    }\n    if (options.trim) {\n      text = text.trim();\n    }\n    return text;\n  }\n  setCellValue(row, value) {\n    let cell = this.cell(row);\n    this._setCellValue(row, value, cell);\n    this._updateCellText(row, cell);\n  }\n  _setCellValue(row, value, cell) {\n    // value may have the wrong type (e.g. text instead of date) -> ensure type\n    value = this._parseValue(value);\n\n    // Only update row status when value changed.\n    // Cell text needs to be updated even if value did not change\n    // (text may cause an invalid value that won't be saved on the cell, reverting to the valid value needs to update the text again)\n    if (cell.value !== value && row.status === TableRow.Status.NON_CHANGED) {\n      row.status = TableRow.Status.UPDATED;\n    }\n    cell.setValue(value);\n  }\n  setCellTextDeferred(promise, row, cell) {\n    promise.done(text => {\n      this.setCellText(row, text, cell);\n    }).fail(error => {\n      this.setCellText(row, '', cell);\n      $.log.error('Could not resolve cell text for value ' + cell.value, error);\n    });\n\n    // (then) promises always resolve asynchronously which means the text will always be set later after row is initialized and will generate an update row event.\n    // To make sure not every cell update will render the viewport (which is an expensive operation), the update is buffered and done as soon as all promises resolve.\n    this.table.updateBuffer.pushPromise(promise);\n  }\n  setCellText(row, text, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    if (cell.text === text) {\n      // Don't trigger row update if text has not changed\n      return;\n    }\n    cell.setText(text);\n\n    // Don't update row while initializing (it is either added to the table later, or being added / updated right now)\n    // The check for \"this.table\" is necessary, because the column could already have been destroyed (method is called\n    // asynchronously by setCellTextDeferred).\n    if (row.initialized && this.table) {\n      this.table.updateRow(row);\n    }\n  }\n  setCellErrorStatus(row, errorStatus, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    cell.setErrorStatus(errorStatus);\n  }\n  setCellIconId(row, iconId) {\n    let cell = this.cell(row);\n    if (cell.iconId === iconId) {\n      return;\n    }\n    cell.setIconId(iconId);\n    if (row.initialized) {\n      this.table.updateRow(row);\n    }\n  }\n  setHorizontalAlignment(hAlign) {\n    if (this.horizontalAlignment === hAlign) {\n      return;\n    }\n    this.horizontalAlignment = hAlign;\n    this.table.rows.forEach(row => {\n      this.cell(row).setHorizontalAlignment(hAlign);\n    });\n    this.table.updateRows(this.table.rows);\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n  setEditable(editable) {\n    if (this.editable === editable) {\n      return;\n    }\n    this.editable = editable;\n    this.table.rows.forEach(row => {\n      this.cell(row).setEditable(editable);\n    });\n    this.table.updateRows(this.table.rows);\n  }\n  setMandatory(mandatory) {\n    if (this.mandatory === mandatory) {\n      return;\n    }\n    this.mandatory = mandatory;\n    this.table.rows.forEach(row => {\n      this.cell(row).setMandatory(mandatory);\n    });\n    this.table.updateRows(this.table.rows);\n  }\n  setCssClass(cssClass) {\n    if (this.cssClass === cssClass) {\n      return;\n    }\n    this.cssClass = cssClass;\n    this.table.rows.forEach(function (row) {\n      this.cell(row).setCssClass(cssClass);\n    }, this);\n    this.table.updateRows(this.table.rows);\n  }\n  setWidth(width) {\n    if (this.width === width) {\n      return;\n    }\n    this.table.resizeColumn(this, width);\n  }\n  createAggrGroupCell(row) {\n    let cell = this.cell(row);\n    return this.initCell(scout.create('Cell', {\n      // value necessary for value based columns (e.g. checkbox column)\n      value: cell.value,\n      text: this.cellTextForGrouping(row),\n      iconId: cell.iconId,\n      horizontalAlignment: this.horizontalAlignment,\n      htmlEnabled: false,\n      // grouping cells need a text <span> to work which will only be created if html is disabled. Tags will be removed anyway by cellTextForGrouping\n      cssClass: 'table-aggregate-cell' + (cell.cssClass ? ' ' + cell.cssClass : ''),\n      backgroundColor: 'inherit',\n      flowsLeft: this.horizontalAlignment > 0\n    }));\n  }\n  createAggrValueCell(value) {\n    return this.createAggrEmptyCell();\n  }\n  createAggrEmptyCell() {\n    return this.initCell(scout.create('Cell', {\n      empty: true,\n      cssClass: 'table-aggregate-cell'\n    }));\n  }\n  calculateOptimalWidth() {\n    return this.optimalWidthMeasurer.measure();\n  }\n\n  /**\n   * Returns a type specific column user-filter. The default impl. returns a ColumnUserFilter.\n   * Sub-classes that must return another type, must simply change the value of the 'filterType' property.\n   */\n  createFilter(model) {\n    return scout.create(this.filterType, {\n      session: this.session,\n      table: this.table,\n      column: this\n    });\n  }\n\n  /**\n   * Returns a table header menu. Sub-classes can override this method to create a column specific table header menu.\n   */\n  createTableHeaderMenu(tableHeader) {\n    let $header = this.$header;\n    return scout.create('TableHeaderMenu', {\n      parent: tableHeader,\n      column: $header.data('column'),\n      tableHeader: tableHeader,\n      $anchor: $header\n    });\n  }\n\n  /**\n   * @returns a field instance used as editor when a cell of this column is in edit mode.\n   */\n  createEditor(row) {\n    let field = this._createEditor(row);\n    let cell = this.cell(row);\n    this._initEditorField(field, cell);\n    field.setLabelVisible(false);\n    field.setFieldStyle(FormField.FieldStyle.CLASSIC);\n    let hints = new GridData(field.gridDataHints);\n    hints.horizontalAlignment = cell.horizontalAlignment;\n    field.setGridDataHints(hints);\n    return field;\n  }\n\n  /**\n   * Depending on the type of column the editor may need to be initialized differently.\n   * The default implementation either copies the value to the field if the field has no error or copies the text and error status if it has an error.\n   */\n  _initEditorField(field, cell) {\n    if (cell.errorStatus) {\n      this._updateEditorFromInvalidCell(field, cell);\n    } else {\n      this._updateEditorFromValidCell(field, cell);\n    }\n  }\n  _updateEditorFromValidCell(field, cell) {\n    field.setValue(cell.value);\n  }\n  _updateEditorFromInvalidCell(field, cell) {\n    field.setErrorStatus(cell.errorStatus);\n    field.setDisplayText(cell.text);\n  }\n  _createEditor() {\n    return scout.create('StringField', {\n      parent: this.table,\n      maxLength: this.maxLength,\n      multilineText: this.table.multilineText,\n      wrapText: this.textWrap\n    });\n  }\n  updateCellFromEditor(row, field) {\n    if (field.errorStatus) {\n      this._updateCellFromInvalidEditor(row, field);\n    } else {\n      this._updateCellFromValidEditor(row, field);\n    }\n  }\n  _updateCellFromInvalidEditor(row, field) {\n    this.setCellErrorStatus(row, field.errorStatus);\n    this.setCellText(row, field.displayText);\n  }\n  _updateCellFromValidEditor(row, field) {\n    this.setCellErrorStatus(row, null);\n    this.setCellValue(row, field.value);\n  }\n\n  /**\n   * Override this function to install a specific compare function on a column instance.\n   * The default impl. installs a generic comparator working with less than and greater than.\n   *\n   * @returns whether or not it was possible to install a compare function. If not, client side sorting is disabled.\n   */\n  installComparator() {\n    return this.comparator.install(this.session);\n  }\n\n  /**\n   * @returns {boolean} whether or not it is possible to sort this column.\n   * As a side effect a comparator is installed.\n   */\n  isSortingPossible() {\n    // If installation fails sorting is still possible (in case of the text comparator just without a collator)\n    this.installComparator();\n    return true;\n  }\n  compare(row1, row2) {\n    let cell1 = this.table.cell(this, row1),\n      cell2 = this.table.cell(this, row2);\n    if (cell1.sortCode !== null || cell2.sortCode !== null) {\n      return comparators.NUMERIC.compare(cell1.sortCode, cell2.sortCode);\n    }\n    let valueA = this.cellValueOrText(row1);\n    let valueB = this.cellValueOrText(row2);\n    return this.comparator.compare(valueA, valueB);\n  }\n  isVisible() {\n    return this.displayable && this.visible && !this.compacted;\n  }\n\n  /**\n   *\n   * @param {boolean} visible\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setVisible(visible, redraw) {\n    if (this.visible === visible) {\n      return;\n    }\n    this._setVisible(visible, redraw);\n  }\n  _setVisible(visible, redraw) {\n    this.visible = visible;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} displayable\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setDisplayable(displayable, redraw) {\n    if (this.displayable === displayable) {\n      return;\n    }\n    this._setDisplayable(displayable, redraw);\n  }\n  _setDisplayable(displayable, redraw) {\n    this.displayable = displayable;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} compacted\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setCompacted(compacted, redraw) {\n    if (this.compacted === compacted) {\n      return;\n    }\n    this._setCompacted(compacted, redraw);\n  }\n  _setCompacted(compacted, redraw) {\n    this.compacted = compacted;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n  setAutoOptimizeWidth(autoOptimizeWidth) {\n    if (this.autoOptimizeWidth === autoOptimizeWidth) {\n      return;\n    }\n    this._setAutoOptimizeWidth(autoOptimizeWidth);\n  }\n  _setAutoOptimizeWidth(autoOptimizeWidth) {\n    this.autoOptimizeWidth = autoOptimizeWidth;\n    this.autoOptimizeWidthRequired = autoOptimizeWidth;\n    if (this.initialized) {\n      this.table.columnLayoutDirty = true;\n      this.table.invalidateLayoutTree();\n    }\n  }\n  setMaxLength(maxLength) {\n    this.maxLength = maxLength;\n  }\n  setText(text) {\n    if (this.text === text) {\n      return;\n    }\n    this.text = text;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n  setHeaderIconId(headerIconId) {\n    if (this.headerIconId === headerIconId) {\n      return;\n    }\n    this.headerIconId = headerIconId;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n  setHeaderCssClass(headerCssClass) {\n    if (this.headerCssClass === headerCssClass) {\n      return;\n    }\n    let oldState = $.extend({}, this);\n    this.headerCssClass = headerCssClass;\n    if (this.table.header) {\n      this.table.header.updateHeader(this, oldState);\n    }\n  }\n  setHeaderHtmlEnabled(headerHtmlEnabled) {\n    if (this.headerHtmlEnabled === headerHtmlEnabled) {\n      return;\n    }\n    this.headerHtmlEnabled = headerHtmlEnabled;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n  setHeaderTooltipText(headerTooltipText) {\n    this.headerTooltipText = headerTooltipText;\n  }\n  setHeaderTooltipHtmlEnabled(headerTooltipHtmlEnabled) {\n    this.headerTooltipHtmlEnabled = headerTooltipHtmlEnabled;\n  }\n  setTextWrap(textWrap) {\n    if (this.textWrap === textWrap) {\n      return;\n    }\n    this.textWrap = textWrap;\n    if (this.table.rendered && this.table.multilineText) {\n      // If multilineText is disabled toggling textWrap has no effect\n      // See also table._renderMultilineText(), requires similar operations\n      this.autoOptimizeWidthRequired = true;\n      this.table._redraw();\n      this.table.invalidateLayoutTree();\n    }\n  }\n  isContentValid(row) {\n    let cell = this.cell(row);\n    let validByErrorStatus = !cell.errorStatus || cell.errorStatus.severity !== Status.Severity.ERROR;\n    let validByMandatory = !cell.mandatory || this._hasCellValue(cell);\n    return {\n      valid: validByErrorStatus && validByMandatory,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory\n    };\n  }\n  _hasCellValue(cell) {\n    return !!cell.value;\n  }\n  _onTableColumnsChanged(event) {\n    if (this.table.visibleColumns().indexOf(this) === 0) {\n      this.tableNodeLevel0CellPadding = 28;\n      this.expandableIconLevel0CellPadding = 13;\n    } else {\n      this.tableNodeLevel0CellPadding = 23;\n      this.expandableIconLevel0CellPadding = 8;\n    }\n  }\n  _realWidthIfAvailable() {\n    return this._realWidth || this.width;\n  }\n\n  // --- Event handling methods ---\n  _createEventSupport() {\n    return new EventSupport();\n  }\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n  one(type, func) {\n    this.events.one(type, func);\n  }\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n  off(type, func) {\n    this.events.off(type, func);\n  }\n  addListener(listener) {\n    this.events.addListener(listener);\n  }\n  removeListener(listener) {\n    this.events.removeListener(listener);\n  }\n\n  /**\n   * Adds an event handler using {@link #one()} and returns a promise.\n   * The promise is resolved as soon as the event is triggered.\n   */\n  when(type) {\n    return this.events.when(type);\n  }\n}\n_defineProperty(Column, \"DEFAULT_MIN_WIDTH\", 60);\n_defineProperty(Column, \"SMALL_MIN_WIDTH\", 38);\n_defineProperty(Column, \"NARROW_MIN_WIDTH\", 34);","map":{"version":3,"names":["Cell","ColumnOptimalWidthMeasurer","comparators","EventSupport","FormField","GridData","icons","objects","scout","Status","strings","styles","Table","TableRow","texts","$","Column","constructor","autoOptimizeWidth","autoOptimizeWidthRequired","autoOptimizeMaxWidth","cssClass","compacted","editable","removable","modifiable","fixedWidth","fixedPosition","grouped","headerCssClass","headerIconId","headerHtmlEnabled","headerTooltipText","headerTooltipHtmlEnabled","horizontalAlignment","htmlEnabled","index","initialized","mandatory","optimalWidthMeasurer","sortActive","sortAscending","sortIndex","summary","type","width","initialWidth","undefined","minWidth","DEFAULT_MIN_WIDTH","showSeparator","table","tableNodeColumn","maxLength","text","textWrap","filterType","comparator","TEXT","displayable","visible","textBased","headerMenuEnabled","tableNodeLevel0CellPadding","expandableIconLevel0CellPadding","nodeColumnCandidate","events","_createEventSupport","_tableColumnsChangedHandler","_onTableColumnsChanged","bind","_realWidth","$header","$separator","init","model","session","extend","nvl","_init","resolveTextProperty","resolveIconProperty","_setTable","_setDisplayable","_setAutoOptimizeWidth","destroy","_destroy","off","on","initCell","vararg","row","cell","_ensureCell","_initCell","isNullOrUndefined","_updateCellText","value","_parseValue","create","scalar","returned","_formatValue","promise","setCellTextDeferred","setCellText","buildCellForRow","buildCell","buildCellForAggregateRow","aggregateRow","refRow","groupingStyle","GroupingStyle","TOP","nextRow","prevRow","createAggrGroupCell","aggregateValue","contents","columns","indexOf","createAggrValueCell","assertParameter","isTableNodeColumn","rowPadding","_calcRowLevelPadding","_text","icon","_icon","iconId","_cellCssClass","style","_cellStyle","errorStatus","hasError","content","join","flowsLeft","_expandable","_expandIcon","expanded","_buildCell","cssClasses","hasText","parseIconId","isFontIcon","appendCssClass","iconCharacter","iconUrl","encodedText","multilineText","nl2br","tableNode","parseHorizontalAlignment","visibleColumns","overAllColumnPosition","length","legacyStyle","onMouseUp","event","$row","data","isCellEditable","prepareCellEdit","enabledComputed","enabled","ctrlKey","shiftKey","startCellEdit","field","popup","$cell","gridData","_createEditorPopup","$anchor","open","$data","parent","column","headerCell","tooltipText","selectedCell","selectedRow","cellValueOrText","cellText","cellValue","cellValueOrTextForCalculation","_preprocessValueOrTextForCalculation","_preprocessTextForCalculation","_preprocessText","removeHtmlTags","removeNewlines","trim","cellTextForGrouping","_preprocessTextForGrouping","cellTextForTextFilter","_preprocessTextForTextFilter","cellTextForRowDetail","options","plainText","replace","setCellValue","_setCellValue","status","NON_CHANGED","UPDATED","setValue","done","fail","error","log","updateBuffer","pushPromise","setText","updateRow","setCellErrorStatus","setErrorStatus","setCellIconId","setIconId","setHorizontalAlignment","hAlign","rows","forEach","updateRows","header","updateHeader","setEditable","setMandatory","setCssClass","setWidth","resizeColumn","backgroundColor","createAggrEmptyCell","empty","calculateOptimalWidth","measure","createFilter","createTableHeaderMenu","tableHeader","createEditor","_createEditor","_initEditorField","setLabelVisible","setFieldStyle","FieldStyle","CLASSIC","hints","gridDataHints","setGridDataHints","_updateEditorFromInvalidCell","_updateEditorFromValidCell","setDisplayText","wrapText","updateCellFromEditor","_updateCellFromInvalidEditor","_updateCellFromValidEditor","displayText","installComparator","install","isSortingPossible","compare","row1","row2","cell1","cell2","sortCode","NUMERIC","valueA","valueB","isVisible","setVisible","redraw","_setVisible","onColumnVisibilityChanged","setDisplayable","setCompacted","_setCompacted","setAutoOptimizeWidth","columnLayoutDirty","invalidateLayoutTree","setMaxLength","setHeaderIconId","setHeaderCssClass","oldState","setHeaderHtmlEnabled","setHeaderTooltipText","setHeaderTooltipHtmlEnabled","setTextWrap","rendered","_redraw","isContentValid","validByErrorStatus","severity","Severity","ERROR","validByMandatory","_hasCellValue","valid","_realWidthIfAvailable","trigger","source","one","func","addListener","listener","removeListener","when"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/columns/Column.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Cell, ColumnOptimalWidthMeasurer, comparators, EventSupport, FormField, GridData, icons, objects, scout, Status, strings, styles, Table, TableRow, texts} from '../../index';\nimport $ from 'jquery';\n\nexport default class Column {\n\n  constructor() {\n    this.autoOptimizeWidth = false;\n    this.autoOptimizeWidthRequired = false; // true if content of the column changed and width has to be optimized\n    this.autoOptimizeMaxWidth = -1;\n    this.cssClass = null;\n    this.compacted = false;\n    this.editable = false;\n    this.removable = false;\n    this.modifiable = false;\n    this.fixedWidth = false;\n    this.fixedPosition = false;\n    this.grouped = false;\n    this.headerCssClass = null;\n    this.headerIconId = null;\n    this.headerHtmlEnabled = false;\n    this.headerTooltipText = null;\n    this.headerTooltipHtmlEnabled = false;\n    this.horizontalAlignment = -1;\n    this.htmlEnabled = false;\n    this.index = -1;\n    this.initialized = false;\n    this.mandatory = false;\n    this.optimalWidthMeasurer = new ColumnOptimalWidthMeasurer(this);\n    this.sortActive = false;\n    this.sortAscending = true;\n    this.sortIndex = -1;\n    this.summary = false;\n    this.type = 'text';\n    this.width = 60;\n    this.initialWidth = undefined; // the width the column initially has\n    this.minWidth = Column.DEFAULT_MIN_WIDTH; // the minimal width the column can have\n    this.showSeparator = true;\n    this.table = null;\n    this.tableNodeColumn = false;\n    this.maxLength = 4000;\n    this.text = null;\n    this.textWrap = false;\n    this.filterType = 'TextColumnUserFilter';\n    this.comparator = comparators.TEXT;\n    this.displayable = true;\n    this.visible = true;\n    this.textBased = true;\n    this.headerMenuEnabled = true;\n    this.tableNodeLevel0CellPadding = 28;\n    this.expandableIconLevel0CellPadding = 13;\n    this.nodeColumnCandidate = true;\n\n    this.events = this._createEventSupport();\n\n    this._tableColumnsChangedHandler = this._onTableColumnsChanged.bind(this);\n    // Contains the width the cells of the column really have (only set in Chrome due to a Chrome bug, see Table._updateRealColumnWidths)\n    this._realWidth = null;\n    this.$header = null; // Set by TableHeader.js\n    this.$separator = null;\n  }\n\n  static DEFAULT_MIN_WIDTH = 60;\n  static SMALL_MIN_WIDTH = 38;\n  static NARROW_MIN_WIDTH = 34;\n\n  init(model) {\n    this.session = model.session;\n\n    // Copy all properties from model to this\n    $.extend(this, model);\n\n    // Initial width is only sent if it differs from width\n    if (this.initialWidth === undefined) {\n      this.initialWidth = scout.nvl(this.width, 0);\n    }\n    this._init(model);\n    this.initialized = true;\n  }\n\n  /**\n   * Override this function in order to implement custom init logic.\n   */\n  _init(model) {\n    texts.resolveTextProperty(this, 'text');\n    texts.resolveTextProperty(this, 'headerTooltipText');\n    icons.resolveIconProperty(this, 'headerIconId');\n    this._setTable(this.table);\n    this._setDisplayable(this.displayable);\n    this._setAutoOptimizeWidth(this.autoOptimizeWidth);\n    // no need to call setEditable here. cell propagation is done in _initCell\n  }\n\n  destroy() {\n    this._destroy();\n    this._setTable(null);\n  }\n\n  /**\n   * Override this function in order to implement custom destroy logic.\n   */\n  _destroy() {\n    // NOP\n  }\n\n  _setTable(table) {\n    if (this.table) {\n      this.table.off('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n    this.table = table;\n    if (this.table) {\n      this.table.on('columnMoved columnStructureChanged', this._tableColumnsChangedHandler);\n    }\n  }\n\n  /**\n   * Converts the vararg if it is of type string to an object with\n   * a property 'text' with the original value.\n   *\n   * Example:\n   * 'My Company' --> { text: 'MyCompany'; }\n   *\n   * @see JsonCell.java\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   */\n  initCell(vararg, row) {\n    let cell = this._ensureCell(vararg);\n    this._initCell(cell);\n\n    // If a text is provided, use that text instead of using formatValue to generate a text based on the value\n    if (objects.isNullOrUndefined(cell.text)) {\n      this._updateCellText(row, cell);\n    }\n    return cell;\n  }\n\n  /**\n   * Ensures that a Cell instance is returned. When vararg is a scalar value a new Cell instance is created and\n   * the value is set as cell.value property.\n   *\n   * @param {Cell|string|number|object} vararg either a Cell instance or a scalar value\n   * @returns {*}\n   * @private\n   */\n  _ensureCell(vararg) {\n    let cell;\n\n    if (vararg instanceof Cell) {\n      cell = vararg;\n\n      // value may be set but may have the wrong type (e.g. text instead of date) -> ensure type\n      cell.value = this._parseValue(cell.value);\n    } else {\n      // in this case 'vararg' is only a scalar value, typically a string\n      cell = scout.create('Cell', {\n        value: this._parseValue(vararg)\n      });\n    }\n\n    return cell;\n  }\n\n  /**\n   * Override this method to create a value based on the given scalar value.\n   */\n  _parseValue(scalar) {\n    return scalar;\n  }\n\n  _updateCellText(row, cell) {\n    let value = cell.value;\n    if (!row) {\n      // row is omitted when creating aggregate cells\n      return;\n    }\n\n    let returned = this._formatValue(value, row);\n    if (returned && typeof returned.promise === 'function') {\n      // Promise is returned -> set display text later\n      this.setCellTextDeferred(returned, row, cell);\n    } else {\n      this.setCellText(row, returned, cell);\n    }\n  }\n\n  _formatValue(value, row) {\n    return scout.nvl(value, '');\n  }\n\n  /**\n   * If cell does not define properties, use column values.\n   * Override this function to implement type specific init cell behavior.\n   *\n   * @param {Cell} cell\n   */\n  _initCell(cell) {\n    cell.cssClass = scout.nvl(cell.cssClass, this.cssClass);\n    cell.editable = scout.nvl(cell.editable, this.editable);\n    cell.horizontalAlignment = scout.nvl(cell.horizontalAlignment, this.horizontalAlignment);\n    cell.htmlEnabled = scout.nvl(cell.htmlEnabled, this.htmlEnabled);\n    cell.mandatory = scout.nvl(cell.mandatory, this.mandatory);\n    return cell;\n  }\n\n  buildCellForRow(row) {\n    let cell = this.cell(row);\n    return this.buildCell(cell, row);\n  }\n\n  buildCellForAggregateRow(aggregateRow) {\n    let cell;\n    if (this.grouped) {\n      let refRow = (this.table.groupingStyle === Table.GroupingStyle.TOP ? aggregateRow.nextRow : aggregateRow.prevRow);\n      cell = this.createAggrGroupCell(refRow);\n    } else {\n      let aggregateValue = aggregateRow.contents[this.table.columns.indexOf(this)];\n      cell = this.createAggrValueCell(aggregateValue);\n    }\n    return this.buildCell(cell, {});\n  }\n\n  buildCell(cell, row) {\n    scout.assertParameter('cell', cell, Cell);\n\n    let tableNodeColumn = this.table.isTableNodeColumn(this),\n      rowPadding = 0;\n\n    if (tableNodeColumn) {\n      rowPadding = this.table._calcRowLevelPadding(row);\n    }\n\n    let text = this._text(cell);\n    let icon = this._icon(cell.iconId, !!text) || '';\n    let cssClass = this._cellCssClass(cell, tableNodeColumn);\n    let style = this._cellStyle(cell, tableNodeColumn, rowPadding);\n\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n\n    let content;\n    if (!text && !icon) {\n      // If every cell of a row is empty the row would collapse, using nbsp makes sure the row is as height as the others even if it is empty\n      content = '&nbsp;';\n      cssClass = strings.join(' ', cssClass, 'empty');\n    } else {\n      if (cell.flowsLeft) {\n        content = text + icon;\n      } else {\n        content = icon + text;\n      }\n    }\n\n    if (tableNodeColumn && row._expandable) {\n      this.tableNodeColumn = true;\n      content = this._expandIcon(row.expanded, rowPadding) + content;\n      if (row.expanded) {\n        cssClass += ' expanded';\n      }\n    }\n\n    return this._buildCell(cell, content, style, cssClass);\n  }\n\n  _buildCell(cell, content, style, cssClass) {\n    return '<div class=\"' + cssClass + '\" style=\"' + style + '\">' + content + '</div>';\n  }\n\n  _expandIcon(expanded, rowPadding) {\n    let style = 'padding-left: ' + (rowPadding + this.expandableIconLevel0CellPadding) + 'px';\n    let cssClasses = 'table-row-control';\n    if (expanded) {\n      cssClasses += ' expanded';\n    }\n    return '<div class=\"' + cssClasses + '\" style=\"' + style + '\"></div>';\n  }\n\n  _icon(iconId, hasText) {\n    let cssClass, icon;\n    if (!iconId) {\n      return;\n    }\n    cssClass = 'table-cell-icon';\n    if (hasText) {\n      cssClass += ' with-text';\n    }\n    icon = icons.parseIconId(iconId);\n    if (icon.isFontIcon()) {\n      cssClass += ' font-icon';\n      return '<span class=\"' + icon.appendCssClass(cssClass) + '\">' + icon.iconCharacter + '</span>';\n    }\n    cssClass += ' image-icon';\n    return '<img class=\"' + cssClass + '\" src=\"' + icon.iconUrl + '\">';\n  }\n\n  _text(cell) {\n    let text = cell.text || '';\n\n    if (!cell.htmlEnabled) {\n      text = cell.encodedText() || '';\n      if (this.table.multilineText) {\n        text = strings.nl2br(text, false);\n      }\n      if (text) {\n        // Wrap in a span to make customization using css easier.\n        // An empty text will be replaced with nbsp later on. To make that work, only wrap it if there is text.\n        text = '<span class=\"text\">' + text + '</span>';\n      }\n    }\n\n    return text;\n  }\n\n  _cellCssClass(cell, tableNode) {\n    let cssClass = 'table-cell';\n    if (cell.mandatory) {\n      cssClass += ' mandatory';\n    }\n    if (!this.table.multilineText || !this.textWrap) {\n      cssClass += ' white-space-nowrap';\n    }\n    if (cell.editable) {\n      cssClass += ' editable';\n    }\n    if (cell.errorStatus) {\n      cssClass += ' has-error';\n    }\n    if (cell.iconId && !cell.text) {\n      cssClass += ' icon-only';\n    }\n    cssClass += ' halign-' + Table.parseHorizontalAlignment(cell.horizontalAlignment);\n    let visibleColumns = this.table.visibleColumns();\n    let overAllColumnPosition = visibleColumns.indexOf(this);\n    if (overAllColumnPosition === 0) {\n      cssClass += ' first';\n    }\n    if (overAllColumnPosition === visibleColumns.length - 1) {\n      cssClass += ' last';\n    }\n    if (tableNode) {\n      cssClass += ' table-node';\n    }\n\n    if (cell.cssClass) {\n      cssClass += ' ' + cell.cssClass;\n    }\n    return cssClass;\n  }\n\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    let style,\n      width = this.width;\n\n    if (width === 0) {\n      return 'display: none;';\n    }\n    style = 'min-width: ' + width + 'px; max-width: ' + width + 'px; ';\n    if (tableNodeColumn) {\n      // calculate padding\n      style += ' padding-left: ' + (this.tableNodeLevel0CellPadding + rowPadding) + 'px; ';\n    }\n    style += styles.legacyStyle(cell);\n    return style;\n  }\n\n  onMouseUp(event, $row) {\n    let row = $row.data('row'),\n      cell = this.cell(row);\n\n    if (this.isCellEditable(row, cell, event)) {\n      this.table.prepareCellEdit(this, row, true);\n    }\n  }\n\n  isCellEditable(row, cell, event) {\n    return this.table.enabledComputed && row.enabled && cell.editable && !event.ctrlKey && !event.shiftKey;\n  }\n\n  startCellEdit(row, field) {\n    let popup,\n      $row = row.$row,\n      cell = this.cell(row),\n      $cell = this.table.$cell(this, $row);\n\n    cell.field = field;\n    // Override field alignment with the cell's alignment\n    cell.field.gridData.horizontalAlignment = cell.horizontalAlignment;\n    popup = this._createEditorPopup(row, cell);\n    popup.$anchor = $cell;\n    popup.open(this.table.$data);\n    return popup;\n  }\n\n  _createEditorPopup(row, cell) {\n    return scout.create('CellEditorPopup', {\n      parent: this.table,\n      column: this,\n      row: row,\n      cell: cell\n    });\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the given row.\n   */\n  cell(row) {\n    return this.table.cell(this, row);\n  }\n\n  /**\n   * Creates an artificial cell from the properties relevant for the column header.\n   * @returns {Cell}\n   */\n  headerCell() {\n    return scout.create('Cell', {\n      value: this.text,\n      text: this.text,\n      iconId: this.headerIconId,\n      cssClass: this.headerCssClass,\n      tooltipText: this.headerTooltipText,\n      htmlEnabled: this.headerHtmlEnabled\n    });\n  }\n\n  /**\n   * @returns {Cell} the cell object for this column from the first selected row in the table.\n   */\n  selectedCell() {\n    let selectedRow = this.table.selectedRow();\n    return this.table.cell(this, selectedRow);\n  }\n\n  /**\n   * @param row\n   * @returns {string|*} the text of the cell if {@link Column.textBased} is true, otherwise the value of the cell.\n   */\n  cellValueOrText(row) {\n    if (this.textBased) {\n      return this.table.cellText(this, row);\n    }\n    return this.table.cellValue(this, row);\n  }\n\n  cellValue(row) {\n    return this.table.cellValue(this, row);\n  }\n\n  cellText(row) {\n    return this.table.cellText(this, row);\n  }\n\n  /**\n   * @returns {*} the cell value to be used for grouping and filtering (chart, column filter).\n   */\n  cellValueOrTextForCalculation(row) {\n    let cell = this.cell(row);\n    let value = this.cellValueOrText(row);\n    if (objects.isNullOrUndefined(value)) {\n      return null;\n    }\n    return this._preprocessValueOrTextForCalculation(value, cell);\n  }\n\n  _preprocessValueOrTextForCalculation(value, cell) {\n    if (typeof value === 'string') {\n      // In case of string columns, value and text are equal -> use _preprocessStringForCalculation to handle html tags and new lines correctly\n      return this._preprocessTextForCalculation(value, cell.htmlEnabled);\n    }\n    return value;\n  }\n\n  _preprocessTextForCalculation(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      removeNewlines: true,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for table grouping\n   */\n  cellTextForGrouping(row) {\n    let cell = this.cell(row);\n    return this._preprocessTextForGrouping(cell.text, cell.htmlEnabled);\n  }\n\n  _preprocessTextForGrouping(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled,\n      trim: true\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the text filter\n   */\n  cellTextForTextFilter(row) {\n    let cell = this.cell(row);\n    return this._preprocessTextForTextFilter(cell.text, cell.htmlEnabled);\n  }\n\n  _preprocessTextForTextFilter(text, htmlEnabled) {\n    return this._preprocessText(text, {\n      removeHtmlTags: htmlEnabled\n    });\n  }\n\n  /**\n   * @returns {string} the cell text to be used for the table row detail.\n   */\n  cellTextForRowDetail(row) {\n    let cell = this.cell(row);\n\n    return this._preprocessText(this._text(cell), {\n      removeHtmlTags: cell.htmlEnabled\n    });\n  }\n\n  /**\n   * Removes html tags, converts to single line, removes leading and trailing whitespaces.\n   */\n  _preprocessText(text, options) {\n    if (text === null || text === undefined) {\n      return text;\n    }\n    options = options || {};\n    if (options.removeHtmlTags) {\n      text = strings.plainText(text);\n    }\n    if (options.removeNewlines) {\n      text = text.replace('\\n', ' ');\n    }\n    if (options.trim) {\n      text = text.trim();\n    }\n    return text;\n  }\n\n  setCellValue(row, value) {\n    let cell = this.cell(row);\n    this._setCellValue(row, value, cell);\n    this._updateCellText(row, cell);\n  }\n\n  _setCellValue(row, value, cell) {\n    // value may have the wrong type (e.g. text instead of date) -> ensure type\n    value = this._parseValue(value);\n\n    // Only update row status when value changed.\n    // Cell text needs to be updated even if value did not change\n    // (text may cause an invalid value that won't be saved on the cell, reverting to the valid value needs to update the text again)\n    if (cell.value !== value && row.status === TableRow.Status.NON_CHANGED) {\n      row.status = TableRow.Status.UPDATED;\n    }\n\n    cell.setValue(value);\n  }\n\n  setCellTextDeferred(promise, row, cell) {\n    promise\n      .done(text => {\n        this.setCellText(row, text, cell);\n      })\n      .fail(error => {\n        this.setCellText(row, '', cell);\n        $.log.error('Could not resolve cell text for value ' + cell.value, error);\n      });\n\n    // (then) promises always resolve asynchronously which means the text will always be set later after row is initialized and will generate an update row event.\n    // To make sure not every cell update will render the viewport (which is an expensive operation), the update is buffered and done as soon as all promises resolve.\n    this.table.updateBuffer.pushPromise(promise);\n  }\n\n  setCellText(row, text, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    if (cell.text === text) {\n      // Don't trigger row update if text has not changed\n      return;\n    }\n    cell.setText(text);\n\n    // Don't update row while initializing (it is either added to the table later, or being added / updated right now)\n    // The check for \"this.table\" is necessary, because the column could already have been destroyed (method is called\n    // asynchronously by setCellTextDeferred).\n    if (row.initialized && this.table) {\n      this.table.updateRow(row);\n    }\n  }\n\n  setCellErrorStatus(row, errorStatus, cell) {\n    if (!cell) {\n      cell = this.cell(row);\n    }\n    cell.setErrorStatus(errorStatus);\n  }\n\n  setCellIconId(row, iconId) {\n    let cell = this.cell(row);\n    if (cell.iconId === iconId) {\n      return;\n    }\n    cell.setIconId(iconId);\n    if (row.initialized) {\n      this.table.updateRow(row);\n    }\n  }\n\n  setHorizontalAlignment(hAlign) {\n    if (this.horizontalAlignment === hAlign) {\n      return;\n    }\n    this.horizontalAlignment = hAlign;\n\n    this.table.rows.forEach(row => {\n      this.cell(row).setHorizontalAlignment(hAlign);\n    });\n\n    this.table.updateRows(this.table.rows);\n\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setEditable(editable) {\n    if (this.editable === editable) {\n      return;\n    }\n    this.editable = editable;\n\n    this.table.rows.forEach(row => {\n      this.cell(row).setEditable(editable);\n    });\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setMandatory(mandatory) {\n    if (this.mandatory === mandatory) {\n      return;\n    }\n    this.mandatory = mandatory;\n\n    this.table.rows.forEach(row => {\n      this.cell(row).setMandatory(mandatory);\n    });\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setCssClass(cssClass) {\n    if (this.cssClass === cssClass) {\n      return;\n    }\n\n    this.cssClass = cssClass;\n\n    this.table.rows.forEach(function(row) {\n      this.cell(row).setCssClass(cssClass);\n    }, this);\n\n    this.table.updateRows(this.table.rows);\n  }\n\n  setWidth(width) {\n    if (this.width === width) {\n      return;\n    }\n    this.table.resizeColumn(this, width);\n  }\n\n  createAggrGroupCell(row) {\n    let cell = this.cell(row);\n    return this.initCell(scout.create('Cell', {\n      // value necessary for value based columns (e.g. checkbox column)\n      value: cell.value,\n      text: this.cellTextForGrouping(row),\n      iconId: cell.iconId,\n      horizontalAlignment: this.horizontalAlignment,\n      htmlEnabled: false, // grouping cells need a text <span> to work which will only be created if html is disabled. Tags will be removed anyway by cellTextForGrouping\n      cssClass: 'table-aggregate-cell' + (cell.cssClass ? ' ' + cell.cssClass : ''),\n      backgroundColor: 'inherit',\n      flowsLeft: this.horizontalAlignment > 0\n    }));\n  }\n\n  createAggrValueCell(value) {\n    return this.createAggrEmptyCell();\n  }\n\n  createAggrEmptyCell() {\n    return this.initCell(scout.create('Cell', {\n      empty: true,\n      cssClass: 'table-aggregate-cell'\n    }));\n  }\n\n  calculateOptimalWidth() {\n    return this.optimalWidthMeasurer.measure();\n  }\n\n  /**\n   * Returns a type specific column user-filter. The default impl. returns a ColumnUserFilter.\n   * Sub-classes that must return another type, must simply change the value of the 'filterType' property.\n   */\n  createFilter(model) {\n    return scout.create(this.filterType, {\n      session: this.session,\n      table: this.table,\n      column: this\n    });\n  }\n\n  /**\n   * Returns a table header menu. Sub-classes can override this method to create a column specific table header menu.\n   */\n  createTableHeaderMenu(tableHeader) {\n    let $header = this.$header;\n    return scout.create('TableHeaderMenu', {\n      parent: tableHeader,\n      column: $header.data('column'),\n      tableHeader: tableHeader,\n      $anchor: $header\n    });\n  }\n\n  /**\n   * @returns a field instance used as editor when a cell of this column is in edit mode.\n   */\n  createEditor(row) {\n    let field = this._createEditor(row);\n    let cell = this.cell(row);\n    this._initEditorField(field, cell);\n    field.setLabelVisible(false);\n    field.setFieldStyle(FormField.FieldStyle.CLASSIC);\n    let hints = new GridData(field.gridDataHints);\n    hints.horizontalAlignment = cell.horizontalAlignment;\n    field.setGridDataHints(hints);\n    return field;\n  }\n\n  /**\n   * Depending on the type of column the editor may need to be initialized differently.\n   * The default implementation either copies the value to the field if the field has no error or copies the text and error status if it has an error.\n   */\n  _initEditorField(field, cell) {\n    if (cell.errorStatus) {\n      this._updateEditorFromInvalidCell(field, cell);\n    } else {\n      this._updateEditorFromValidCell(field, cell);\n    }\n  }\n\n  _updateEditorFromValidCell(field, cell) {\n    field.setValue(cell.value);\n  }\n\n  _updateEditorFromInvalidCell(field, cell) {\n    field.setErrorStatus(cell.errorStatus);\n    field.setDisplayText(cell.text);\n  }\n\n  _createEditor() {\n    return scout.create('StringField', {\n      parent: this.table,\n      maxLength: this.maxLength,\n      multilineText: this.table.multilineText,\n      wrapText: this.textWrap\n    });\n  }\n\n  updateCellFromEditor(row, field) {\n    if (field.errorStatus) {\n      this._updateCellFromInvalidEditor(row, field);\n    } else {\n      this._updateCellFromValidEditor(row, field);\n    }\n  }\n\n  _updateCellFromInvalidEditor(row, field) {\n    this.setCellErrorStatus(row, field.errorStatus);\n    this.setCellText(row, field.displayText);\n  }\n\n  _updateCellFromValidEditor(row, field) {\n    this.setCellErrorStatus(row, null);\n    this.setCellValue(row, field.value);\n  }\n\n  /**\n   * Override this function to install a specific compare function on a column instance.\n   * The default impl. installs a generic comparator working with less than and greater than.\n   *\n   * @returns whether or not it was possible to install a compare function. If not, client side sorting is disabled.\n   */\n  installComparator() {\n    return this.comparator.install(this.session);\n  }\n\n  /**\n   * @returns {boolean} whether or not it is possible to sort this column.\n   * As a side effect a comparator is installed.\n   */\n  isSortingPossible() {\n    // If installation fails sorting is still possible (in case of the text comparator just without a collator)\n    this.installComparator();\n    return true;\n  }\n\n  compare(row1, row2) {\n    let cell1 = this.table.cell(this, row1),\n      cell2 = this.table.cell(this, row2);\n\n    if (cell1.sortCode !== null || cell2.sortCode !== null) {\n      return comparators.NUMERIC.compare(cell1.sortCode, cell2.sortCode);\n    }\n\n    let valueA = this.cellValueOrText(row1);\n    let valueB = this.cellValueOrText(row2);\n    return this.comparator.compare(valueA, valueB);\n  }\n\n  isVisible() {\n    return this.displayable && this.visible && !this.compacted;\n  }\n\n  /**\n   *\n   * @param {boolean} visible\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setVisible(visible, redraw) {\n    if (this.visible === visible) {\n      return;\n    }\n    this._setVisible(visible, redraw);\n  }\n\n  _setVisible(visible, redraw) {\n    this.visible = visible;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} displayable\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setDisplayable(displayable, redraw) {\n    if (this.displayable === displayable) {\n      return;\n    }\n    this._setDisplayable(displayable, redraw);\n  }\n\n  _setDisplayable(displayable, redraw) {\n    this.displayable = displayable;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} compacted\n   * @param {boolean} [redraw] true, to redraw the table immediately, false if not.\n   * When false is used, the redraw needs to be triggered manually using {@link Table.onColumnVisibilityChanged}. Default is true.\n   */\n  setCompacted(compacted, redraw) {\n    if (this.compacted === compacted) {\n      return;\n    }\n    this._setCompacted(compacted, redraw);\n  }\n\n  _setCompacted(compacted, redraw) {\n    this.compacted = compacted;\n    if (scout.nvl(redraw, this.initialized)) {\n      this.table.onColumnVisibilityChanged();\n    }\n  }\n\n  setAutoOptimizeWidth(autoOptimizeWidth) {\n    if (this.autoOptimizeWidth === autoOptimizeWidth) {\n      return;\n    }\n    this._setAutoOptimizeWidth(autoOptimizeWidth);\n  }\n\n  _setAutoOptimizeWidth(autoOptimizeWidth) {\n    this.autoOptimizeWidth = autoOptimizeWidth;\n    this.autoOptimizeWidthRequired = autoOptimizeWidth;\n    if (this.initialized) {\n      this.table.columnLayoutDirty = true;\n      this.table.invalidateLayoutTree();\n    }\n  }\n\n  setMaxLength(maxLength) {\n    this.maxLength = maxLength;\n  }\n\n  setText(text) {\n    if (this.text === text) {\n      return;\n    }\n    this.text = text;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderIconId(headerIconId) {\n    if (this.headerIconId === headerIconId) {\n      return;\n    }\n    this.headerIconId = headerIconId;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderCssClass(headerCssClass) {\n    if (this.headerCssClass === headerCssClass) {\n      return;\n    }\n    let oldState = $.extend({}, this);\n    this.headerCssClass = headerCssClass;\n    if (this.table.header) {\n      this.table.header.updateHeader(this, oldState);\n    }\n  }\n\n  setHeaderHtmlEnabled(headerHtmlEnabled) {\n    if (this.headerHtmlEnabled === headerHtmlEnabled) {\n      return;\n    }\n    this.headerHtmlEnabled = headerHtmlEnabled;\n    if (this.table.header) {\n      this.table.header.updateHeader(this);\n    }\n  }\n\n  setHeaderTooltipText(headerTooltipText) {\n    this.headerTooltipText = headerTooltipText;\n  }\n\n  setHeaderTooltipHtmlEnabled(headerTooltipHtmlEnabled) {\n    this.headerTooltipHtmlEnabled = headerTooltipHtmlEnabled;\n  }\n\n  setTextWrap(textWrap) {\n    if (this.textWrap === textWrap) {\n      return;\n    }\n    this.textWrap = textWrap;\n    if (this.table.rendered && this.table.multilineText) { // If multilineText is disabled toggling textWrap has no effect\n      // See also table._renderMultilineText(), requires similar operations\n      this.autoOptimizeWidthRequired = true;\n      this.table._redraw();\n      this.table.invalidateLayoutTree();\n    }\n  }\n\n  isContentValid(row) {\n    let cell = this.cell(row);\n    let validByErrorStatus = !cell.errorStatus || cell.errorStatus.severity !== Status.Severity.ERROR;\n    let validByMandatory = !cell.mandatory || this._hasCellValue(cell);\n    return {\n      valid: validByErrorStatus && validByMandatory,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory\n    };\n  }\n\n  _hasCellValue(cell) {\n    return !!cell.value;\n  }\n\n  _onTableColumnsChanged(event) {\n    if (this.table.visibleColumns().indexOf(this) === 0) {\n      this.tableNodeLevel0CellPadding = 28;\n      this.expandableIconLevel0CellPadding = 13;\n    } else {\n      this.tableNodeLevel0CellPadding = 23;\n      this.expandableIconLevel0CellPadding = 8;\n    }\n  }\n\n  _realWidthIfAvailable() {\n    return this._realWidth || this.width;\n  }\n\n  // --- Event handling methods ---\n  _createEventSupport() {\n    return new EventSupport();\n  }\n\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n\n  one(type, func) {\n    this.events.one(type, func);\n  }\n\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    this.events.off(type, func);\n  }\n\n  addListener(listener) {\n    this.events.addListener(listener);\n  }\n\n  removeListener(listener) {\n    this.events.removeListener(listener);\n  }\n\n  /**\n   * Adds an event handler using {@link #one()} and returns a promise.\n   * The promise is resolved as soon as the event is triggered.\n   */\n  when(type) {\n    return this.events.when(type);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}