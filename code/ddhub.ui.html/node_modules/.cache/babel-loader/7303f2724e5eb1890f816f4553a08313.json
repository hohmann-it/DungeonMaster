{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { keys, RangeKeyStroke, TileButton } from '../../../index';\nexport default class PageTileGridSelectKeyStroke extends RangeKeyStroke {\n  constructor(pageTileGrid) {\n    super();\n    this.field = pageTileGrid;\n\n    // range [1..9]\n    this.registerRange(keys['1'],\n    // range from\n    () => {\n      return keys[Math.min(this._tiles().length, 9)]; // range to\n    });\n\n    // rendering hints\n    this.renderingHints.$drawingArea = function ($drawingArea, event) {\n      let index = event.which - keys['1'];\n      let tiles = this._tiles();\n      if (index < tiles.length && tiles[index].tileWidget instanceof TileButton) {\n        return tiles[index].tileWidget.$fieldContainer;\n      }\n      return null;\n    }.bind(this);\n  }\n\n  /**\n   * @override\n   */\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    if (this.field && this.field.outline && this.field.outline.inBackground) {\n      return false;\n    }\n    let index = keys.codesToKeys[event.which] - 1;\n    let tiles = this._tiles();\n    if (index < tiles.length && tiles[index].tileWidget instanceof TileButton) {\n      event._$element = tiles[index].$container;\n      if (event._$element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  handle(event) {\n    let tile = event._$element.data('widget');\n    tile.tileWidget.doAction();\n  }\n  _tiles() {\n    return this.field.tiles;\n  }\n}","map":{"version":3,"names":["keys","RangeKeyStroke","TileButton","PageTileGridSelectKeyStroke","constructor","pageTileGrid","field","registerRange","Math","min","_tiles","length","renderingHints","$drawingArea","event","index","which","tiles","tileWidget","$fieldContainer","bind","_accept","accepted","outline","inBackground","codesToKeys","_$element","$container","handle","tile","data","doAction"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/outline/pages/PageTileGridSelectKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {keys, RangeKeyStroke, TileButton} from '../../../index';\n\nexport default class PageTileGridSelectKeyStroke extends RangeKeyStroke {\n\n  constructor(pageTileGrid) {\n    super();\n    this.field = pageTileGrid;\n\n    // range [1..9]\n    this.registerRange(\n      keys['1'], // range from\n      () => {\n        return keys[Math.min(this._tiles().length, 9)]; // range to\n      }\n    );\n\n    // rendering hints\n    this.renderingHints.$drawingArea = function($drawingArea, event) {\n      let index = event.which - keys['1'];\n      let tiles = this._tiles();\n      if (index < tiles.length && tiles[index].tileWidget instanceof TileButton) {\n        return tiles[index].tileWidget.$fieldContainer;\n      }\n      return null;\n    }.bind(this);\n  }\n\n  /**\n   * @override\n   */\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n\n    if (this.field && this.field.outline && this.field.outline.inBackground) {\n      return false;\n    }\n\n    let index = keys.codesToKeys[event.which] - 1;\n    let tiles = this._tiles();\n\n    if (index < tiles.length && tiles[index].tileWidget instanceof TileButton) {\n      event._$element = tiles[index].$container;\n      if (event._$element) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  handle(event) {\n    let tile = event._$element.data('widget');\n    tile.tileWidget.doAction();\n  }\n\n  _tiles() {\n    return this.field.tiles;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,IAAI,EAAEC,cAAc,EAAEC,UAAU,QAAO,gBAAgB;AAE/D,eAAe,MAAMC,2BAA2B,SAASF,cAAc,CAAC;EAEtEG,WAAW,CAACC,YAAY,EAAE;IACxB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGD,YAAY;;IAEzB;IACA,IAAI,CAACE,aAAa,CAChBP,IAAI,CAAC,GAAG,CAAC;IAAE;IACX,MAAM;MACJ,OAAOA,IAAI,CAACQ,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,MAAM,EAAE,CAACC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,CACF;;IAED;IACA,IAAI,CAACC,cAAc,CAACC,YAAY,GAAG,UAASA,YAAY,EAAEC,KAAK,EAAE;MAC/D,IAAIC,KAAK,GAAGD,KAAK,CAACE,KAAK,GAAGhB,IAAI,CAAC,GAAG,CAAC;MACnC,IAAIiB,KAAK,GAAG,IAAI,CAACP,MAAM,EAAE;MACzB,IAAIK,KAAK,GAAGE,KAAK,CAACN,MAAM,IAAIM,KAAK,CAACF,KAAK,CAAC,CAACG,UAAU,YAAYhB,UAAU,EAAE;QACzE,OAAOe,KAAK,CAACF,KAAK,CAAC,CAACG,UAAU,CAACC,eAAe;MAChD;MACA,OAAO,IAAI;IACb,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EACd;;EAEA;AACF;AACA;EACEC,OAAO,CAACP,KAAK,EAAE;IACb,IAAIQ,QAAQ,GAAG,KAAK,CAACD,OAAO,CAACP,KAAK,CAAC;IACnC,IAAI,CAACQ,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAAChB,KAAK,IAAI,IAAI,CAACA,KAAK,CAACiB,OAAO,IAAI,IAAI,CAACjB,KAAK,CAACiB,OAAO,CAACC,YAAY,EAAE;MACvE,OAAO,KAAK;IACd;IAEA,IAAIT,KAAK,GAAGf,IAAI,CAACyB,WAAW,CAACX,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7C,IAAIC,KAAK,GAAG,IAAI,CAACP,MAAM,EAAE;IAEzB,IAAIK,KAAK,GAAGE,KAAK,CAACN,MAAM,IAAIM,KAAK,CAACF,KAAK,CAAC,CAACG,UAAU,YAAYhB,UAAU,EAAE;MACzEY,KAAK,CAACY,SAAS,GAAGT,KAAK,CAACF,KAAK,CAAC,CAACY,UAAU;MACzC,IAAIb,KAAK,CAACY,SAAS,EAAE;QACnB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACEE,MAAM,CAACd,KAAK,EAAE;IACZ,IAAIe,IAAI,GAAGf,KAAK,CAACY,SAAS,CAACI,IAAI,CAAC,QAAQ,CAAC;IACzCD,IAAI,CAACX,UAAU,CAACa,QAAQ,EAAE;EAC5B;EAEArB,MAAM,GAAG;IACP,OAAO,IAAI,CAACJ,KAAK,CAACW,KAAK;EACzB;AACF"},"metadata":{},"sourceType":"module"}