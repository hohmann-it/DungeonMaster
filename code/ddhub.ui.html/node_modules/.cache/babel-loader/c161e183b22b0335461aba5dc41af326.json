{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { aggregation, Column, comparators, DecimalFormat, numbers, objects, scout, strings, styles } from '../../index';\nimport $ from 'jquery';\nexport default class NumberColumn extends Column {\n  constructor() {\n    super();\n    this.aggregationFunction = 'sum';\n    this.backgroundEffect = null;\n    this.decimalFormat = null;\n    this.minValue = null;\n    this.maxValue = null;\n    this.calcMinValue = null; // the calculated min value of all rows\n    this.calcMaxValue = null; // the calculated max value of all rows\n    this.horizontalAlignment = 1;\n    this.filterType = 'NumberColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n    this.allowedAggregationFunctions = ['sum', 'avg', 'min', 'max', 'none'];\n  }\n\n  /**\n   * @override Column.js\n   */\n  _init(model) {\n    super._init(model);\n    this._setDecimalFormat(this.decimalFormat);\n    this.setAggregationFunction(this.aggregationFunction);\n  }\n  setDecimalFormat(decimalFormat) {\n    if (this.decimalFormat === decimalFormat) {\n      return;\n    }\n    this._setDecimalFormat(decimalFormat);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n  _setDecimalFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    this.decimalFormat = DecimalFormat.ensure(this.session.locale, format);\n  }\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value, row) {\n    return this.decimalFormat.format(value);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _parseValue(value) {\n    // server sends cell.value only if it differs from text -> make sure cell.value is set and has the right type\n    return numbers.ensure(value);\n  }\n  setAggregationFunction(func) {\n    this.aggregationFunction = func;\n    if (func === 'sum') {\n      this.aggrStart = aggregation.sumStart;\n      this.aggrStep = aggregation.sumStep;\n      this.aggrFinish = aggregation.sumFinish;\n      this.aggrSymbol = aggregation.sumSymbol;\n    } else if (func === 'avg') {\n      this.aggrStart = aggregation.avgStart;\n      this.aggrStep = aggregation.avgStep;\n      this.aggrFinish = aggregation.avgFinish;\n      this.aggrSymbol = aggregation.avgSymbol;\n    } else if (func === 'min') {\n      this.aggrStart = aggregation.minStart;\n      this.aggrStep = aggregation.minStep;\n      this.aggrFinish = aggregation.minFinish;\n      this.aggrSymbol = aggregation.minSymbol;\n    } else if (func === 'max') {\n      this.aggrStart = aggregation.maxStart;\n      this.aggrStep = aggregation.maxStep;\n      this.aggrFinish = aggregation.maxFinish;\n      this.aggrSymbol = aggregation.maxSymbol;\n    } else if (func === 'none') {\n      let undefinedFunc = () => undefined;\n      this.aggrStart = undefinedFunc;\n      this.aggrStep = undefinedFunc;\n      this.aggrFinish = undefinedFunc;\n      this.aggrSymbol = undefined;\n    }\n  }\n  createAggrValueCell(value) {\n    let formattedValue = this._formatValue(value);\n    return scout.create('Cell', {\n      text: formattedValue,\n      iconId: formattedValue ? this.aggrSymbol : null,\n      horizontalAlignment: this.horizontalAlignment,\n      cssClass: 'table-aggregate-cell ' + this.aggregationFunction,\n      flowsLeft: this.horizontalAlignment > 0\n    });\n  }\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    let style = super._cellStyle(cell, tableNodeColumn, rowPadding);\n    if (!this.backgroundEffect || cell.value === undefined || strings.contains(cell.cssClass, 'table-aggregate-cell')) {\n      return style;\n    }\n    if (!this.backgroundEffectFunc) {\n      this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n    }\n    let backgroundStyle = this.backgroundEffectFunc(this._preprocessValueOrTextForCalculation(cell.value));\n    if (backgroundStyle.backgroundColor) {\n      style += 'background-color: ' + backgroundStyle.backgroundColor + ';';\n    }\n    if (backgroundStyle.backgroundImage) {\n      style += 'background-image: ' + backgroundStyle.backgroundImage + ';';\n    }\n    return style;\n  }\n\n  /**\n   * @override Column.js\n   */\n  _preprocessValueOrTextForCalculation(value) {\n    return this.decimalFormat.round(value);\n  }\n  setBackgroundEffect(effect) {\n    if (this.backgroundEffect === effect) {\n      return;\n    }\n    this.backgroundEffect = effect;\n    this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n    this.table.trigger('columnBackgroundEffectChanged', {\n      column: this\n    });\n    if (this.backgroundEffect && (this.calcMinValue === null || this.calcMaxValue === null)) {\n      // No need to calculate the values again when switching background effects\n      // If background effect is turned off and on again values will be recalculated\n      // This is necessary because in the meantime rows may got updated, deleted etc.\n      this.calculateMinMaxValues();\n    }\n    if (!this.backgroundEffect) {\n      // Clear to make sure values are calculated anew the next time a background effect gets set\n      this.calcMinValue = null;\n      this.calcMaxValue = null;\n    }\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n\n  /**\n   * Recalculates the min / max values and renders the background effect again.\n   */\n  updateBackgroundEffect() {\n    this.calculateMinMaxValues();\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n  _resolveBackgroundEffectFunc() {\n    let effect = this.backgroundEffect;\n    if (effect === 'colorGradient1') {\n      return this._colorGradient1.bind(this);\n    }\n    if (effect === 'colorGradient2') {\n      return this._colorGradient2.bind(this);\n    }\n    if (effect === 'barChart') {\n      return this._barChart.bind(this);\n    }\n    if (effect !== null) {\n      $.log.warn('Unsupported backgroundEffect: ' + effect);\n      return () => ({});\n    }\n  }\n  _renderBackgroundEffect() {\n    this.table.visibleRows.forEach(function (row) {\n      if (!row.$row) {\n        return;\n      }\n      let cell = this.cell(row),\n        $cell = this.table.$cell(this, row.$row);\n      if (cell.value !== undefined) {\n        $cell[0].style.cssText = this._cellStyle(cell);\n      }\n    }, this);\n  }\n  calculateMinMaxValues() {\n    let row,\n      calcMinValue,\n      calcMaxValue,\n      value,\n      rows = this.table.rows;\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      value = this.cellValueOrTextForCalculation(row);\n      if (value < calcMinValue || calcMinValue === undefined) {\n        calcMinValue = value;\n      }\n      if (value > calcMaxValue || calcMaxValue === undefined) {\n        calcMaxValue = value;\n      }\n    }\n    this.calcMinValue = scout.nvl(calcMinValue, null);\n    this.calcMaxValue = scout.nvl(calcMaxValue, null);\n  }\n  _colorGradient1(value) {\n    let startStyle = styles.get('column-background-effect-gradient1-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient1-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n    return this._colorGradient(value, startColor, endColor);\n  }\n  _colorGradient2(value) {\n    let startStyle = styles.get('column-background-effect-gradient2-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient2-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n    return this._colorGradient(value, startColor, endColor);\n  }\n  _colorGradient(value, startColor, endColor) {\n    let level = (value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue);\n    let r = Math.ceil(startColor.red - level * (startColor.red - endColor.red)),\n      g = Math.ceil(startColor.green - level * (startColor.green - endColor.green)),\n      b = Math.ceil(startColor.blue - level * (startColor.blue - endColor.blue));\n    return {\n      backgroundColor: 'rgb(' + r + ',' + g + ', ' + b + ')'\n    };\n  }\n  _barChart(value) {\n    let level = Math.ceil((value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue) * 100) + '';\n    let color = styles.get('column-background-effect-bar-chart', 'backgroundColor').backgroundColor;\n    return {\n      backgroundImage: 'linear-gradient(to left, ' + color + ' 0%, ' + color + ' ' + level + '%, transparent ' + level + '%, transparent 100% )'\n    };\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('NumberField', {\n      parent: this.table,\n      maxValue: this.maxValue,\n      minValue: this.minValue,\n      decimalFormat: this.decimalFormat\n    });\n  }\n  _hasCellValue(cell) {\n    return !objects.isNullOrUndefined(cell.value); // Zero (0) is valid too\n  }\n}","map":{"version":3,"names":["aggregation","Column","comparators","DecimalFormat","numbers","objects","scout","strings","styles","$","NumberColumn","constructor","aggregationFunction","backgroundEffect","decimalFormat","minValue","maxValue","calcMinValue","calcMaxValue","horizontalAlignment","filterType","comparator","NUMERIC","textBased","allowedAggregationFunctions","_init","model","_setDecimalFormat","setAggregationFunction","setDecimalFormat","initialized","table","rows","forEach","row","_updateCellText","cell","format","_getDefaultFormat","session","locale","ensure","decimalFormatPatternDefault","_formatValue","value","_parseValue","func","aggrStart","sumStart","aggrStep","sumStep","aggrFinish","sumFinish","aggrSymbol","sumSymbol","avgStart","avgStep","avgFinish","avgSymbol","minStart","minStep","minFinish","minSymbol","maxStart","maxStep","maxFinish","maxSymbol","undefinedFunc","undefined","createAggrValueCell","formattedValue","create","text","iconId","cssClass","flowsLeft","_cellStyle","tableNodeColumn","rowPadding","style","contains","backgroundEffectFunc","_resolveBackgroundEffectFunc","backgroundStyle","_preprocessValueOrTextForCalculation","backgroundColor","backgroundImage","round","setBackgroundEffect","effect","trigger","column","calculateMinMaxValues","rendered","_renderBackgroundEffect","updateBackgroundEffect","_colorGradient1","bind","_colorGradient2","_barChart","log","warn","visibleRows","$row","$cell","cssText","i","length","cellValueOrTextForCalculation","nvl","startStyle","get","endStyle","startColor","rgb","endColor","_colorGradient","level","r","Math","ceil","red","g","green","b","blue","color","_createEditor","parent","_hasCellValue","isNullOrUndefined"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/columns/NumberColumn.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {aggregation, Column, comparators, DecimalFormat, numbers, objects, scout, strings, styles} from '../../index';\nimport $ from 'jquery';\n\nexport default class NumberColumn extends Column {\n\n  constructor() {\n    super();\n    this.aggregationFunction = 'sum';\n    this.backgroundEffect = null;\n    this.decimalFormat = null;\n    this.minValue = null;\n    this.maxValue = null;\n    this.calcMinValue = null; // the calculated min value of all rows\n    this.calcMaxValue = null; // the calculated max value of all rows\n    this.horizontalAlignment = 1;\n    this.filterType = 'NumberColumnUserFilter';\n    this.comparator = comparators.NUMERIC;\n    this.textBased = false;\n    this.allowedAggregationFunctions = ['sum', 'avg', 'min', 'max', 'none'];\n  }\n\n  /**\n   * @override Column.js\n   */\n  _init(model) {\n    super._init(model);\n    this._setDecimalFormat(this.decimalFormat);\n    this.setAggregationFunction(this.aggregationFunction);\n  }\n\n  setDecimalFormat(decimalFormat) {\n    if (this.decimalFormat === decimalFormat) {\n      return;\n    }\n    this._setDecimalFormat(decimalFormat);\n    if (this.initialized) {\n      // if format changes on the fly, just update the cell text\n      this.table.rows.forEach(row => {\n        this._updateCellText(row, this.cell(row));\n      });\n    }\n  }\n\n  _setDecimalFormat(format) {\n    if (!format) {\n      format = this._getDefaultFormat(this.session.locale);\n    }\n    this.decimalFormat = DecimalFormat.ensure(this.session.locale, format);\n  }\n\n  _getDefaultFormat(locale) {\n    return locale.decimalFormatPatternDefault;\n  }\n\n  /**\n   * @override Columns.js\n   */\n  _formatValue(value, row) {\n    return this.decimalFormat.format(value);\n  }\n\n  /**\n   * @override Column.js\n   */\n  _parseValue(value) {\n    // server sends cell.value only if it differs from text -> make sure cell.value is set and has the right type\n    return numbers.ensure(value);\n  }\n\n  setAggregationFunction(func) {\n    this.aggregationFunction = func;\n    if (func === 'sum') {\n      this.aggrStart = aggregation.sumStart;\n      this.aggrStep = aggregation.sumStep;\n      this.aggrFinish = aggregation.sumFinish;\n      this.aggrSymbol = aggregation.sumSymbol;\n    } else if (func === 'avg') {\n      this.aggrStart = aggregation.avgStart;\n      this.aggrStep = aggregation.avgStep;\n      this.aggrFinish = aggregation.avgFinish;\n      this.aggrSymbol = aggregation.avgSymbol;\n    } else if (func === 'min') {\n      this.aggrStart = aggregation.minStart;\n      this.aggrStep = aggregation.minStep;\n      this.aggrFinish = aggregation.minFinish;\n      this.aggrSymbol = aggregation.minSymbol;\n    } else if (func === 'max') {\n      this.aggrStart = aggregation.maxStart;\n      this.aggrStep = aggregation.maxStep;\n      this.aggrFinish = aggregation.maxFinish;\n      this.aggrSymbol = aggregation.maxSymbol;\n    } else if (func === 'none') {\n      let undefinedFunc = () => undefined;\n      this.aggrStart = undefinedFunc;\n      this.aggrStep = undefinedFunc;\n      this.aggrFinish = undefinedFunc;\n      this.aggrSymbol = undefined;\n    }\n  }\n\n  createAggrValueCell(value) {\n    let formattedValue = this._formatValue(value);\n    return scout.create('Cell', {\n      text: formattedValue,\n      iconId: (formattedValue ? this.aggrSymbol : null),\n      horizontalAlignment: this.horizontalAlignment,\n      cssClass: 'table-aggregate-cell ' + this.aggregationFunction,\n      flowsLeft: this.horizontalAlignment > 0\n    });\n  }\n\n  _cellStyle(cell, tableNodeColumn, rowPadding) {\n    let style = super._cellStyle(cell, tableNodeColumn, rowPadding);\n    if (!this.backgroundEffect || cell.value === undefined || strings.contains(cell.cssClass, 'table-aggregate-cell')) {\n      return style;\n    }\n    if (!this.backgroundEffectFunc) {\n      this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n    }\n    let backgroundStyle = this.backgroundEffectFunc(this._preprocessValueOrTextForCalculation(cell.value));\n    if (backgroundStyle.backgroundColor) {\n      style += 'background-color: ' + backgroundStyle.backgroundColor + ';';\n    }\n    if (backgroundStyle.backgroundImage) {\n      style += 'background-image: ' + backgroundStyle.backgroundImage + ';';\n    }\n    return style;\n  }\n\n  /**\n   * @override Column.js\n   */\n  _preprocessValueOrTextForCalculation(value) {\n    return this.decimalFormat.round(value);\n  }\n\n  setBackgroundEffect(effect) {\n    if (this.backgroundEffect === effect) {\n      return;\n    }\n\n    this.backgroundEffect = effect;\n    this.backgroundEffectFunc = this._resolveBackgroundEffectFunc();\n\n    this.table.trigger('columnBackgroundEffectChanged', {\n      column: this\n    });\n\n    if (this.backgroundEffect && (this.calcMinValue === null || this.calcMaxValue === null)) {\n      // No need to calculate the values again when switching background effects\n      // If background effect is turned off and on again values will be recalculated\n      // This is necessary because in the meantime rows may got updated, deleted etc.\n      this.calculateMinMaxValues();\n    }\n    if (!this.backgroundEffect) {\n      // Clear to make sure values are calculated anew the next time a background effect gets set\n      this.calcMinValue = null;\n      this.calcMaxValue = null;\n    }\n\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n\n  /**\n   * Recalculates the min / max values and renders the background effect again.\n   */\n  updateBackgroundEffect() {\n    this.calculateMinMaxValues();\n    if (this.table.rendered) {\n      this._renderBackgroundEffect();\n    }\n  }\n\n  _resolveBackgroundEffectFunc() {\n    let effect = this.backgroundEffect;\n    if (effect === 'colorGradient1') {\n      return this._colorGradient1.bind(this);\n    }\n    if (effect === 'colorGradient2') {\n      return this._colorGradient2.bind(this);\n    }\n    if (effect === 'barChart') {\n      return this._barChart.bind(this);\n    }\n\n    if (effect !== null) {\n      $.log.warn('Unsupported backgroundEffect: ' + effect);\n      return () => ({});\n    }\n  }\n\n  _renderBackgroundEffect() {\n    this.table.visibleRows.forEach(function(row) {\n      if (!row.$row) {\n        return;\n      }\n      let cell = this.cell(row),\n        $cell = this.table.$cell(this, row.$row);\n\n      if (cell.value !== undefined) {\n        $cell[0].style.cssText = this._cellStyle(cell);\n      }\n    }, this);\n  }\n\n  calculateMinMaxValues() {\n    let row, calcMinValue, calcMaxValue, value,\n      rows = this.table.rows;\n\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      value = this.cellValueOrTextForCalculation(row);\n\n      if (value < calcMinValue || calcMinValue === undefined) {\n        calcMinValue = value;\n      }\n      if (value > calcMaxValue || calcMaxValue === undefined) {\n        calcMaxValue = value;\n      }\n    }\n    this.calcMinValue = scout.nvl(calcMinValue, null);\n    this.calcMaxValue = scout.nvl(calcMaxValue, null);\n  }\n\n  _colorGradient1(value) {\n    let startStyle = styles.get('column-background-effect-gradient1-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient1-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n\n    return this._colorGradient(value, startColor, endColor);\n  }\n\n  _colorGradient2(value) {\n    let startStyle = styles.get('column-background-effect-gradient2-start', 'backgroundColor'),\n      endStyle = styles.get('column-background-effect-gradient2-end', 'backgroundColor'),\n      startColor = styles.rgb(startStyle.backgroundColor),\n      endColor = styles.rgb(endStyle.backgroundColor);\n\n    return this._colorGradient(value, startColor, endColor);\n  }\n\n  _colorGradient(value, startColor, endColor) {\n    let level = (value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue);\n\n    let r = Math.ceil(startColor.red - level * (startColor.red - endColor.red)),\n      g = Math.ceil(startColor.green - level * (startColor.green - endColor.green)),\n      b = Math.ceil(startColor.blue - level * (startColor.blue - endColor.blue));\n\n    return {\n      backgroundColor: 'rgb(' + r + ',' + g + ', ' + b + ')'\n    };\n  }\n\n  _barChart(value) {\n    let level = Math.ceil((value - this.calcMinValue) / (this.calcMaxValue - this.calcMinValue) * 100) + '';\n    let color = styles.get('column-background-effect-bar-chart', 'backgroundColor').backgroundColor;\n    return {\n      backgroundImage: 'linear-gradient(to left, ' + color + ' 0%, ' + color + ' ' + level + '%, transparent ' + level + '%, transparent 100% )'\n    };\n  }\n\n  /**\n   * @override Column.js\n   */\n  _createEditor() {\n    return scout.create('NumberField', {\n      parent: this.table,\n      maxValue: this.maxValue,\n      minValue: this.minValue,\n      decimalFormat: this.decimalFormat\n    });\n  }\n\n  _hasCellValue(cell) {\n    return !objects.isNullOrUndefined(cell.value); // Zero (0) is valid too\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}