{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, fields, graphics, HtmlComponent, SmartField, SmartFieldLayout, SmartFieldMultilineLayout } from '../../../index';\nexport default class SmartFieldMultiline extends SmartField {\n  constructor() {\n    super();\n    this.options;\n    this._$multilineLines;\n  }\n  _render() {\n    let $input, htmlComp;\n    this.addContainer(this.$parent, 'smart-field has-icon', new SmartFieldLayout(this));\n    this.addLabel();\n    this.addFieldContainer(this.$parent.makeDiv('multiline'));\n    htmlComp = HtmlComponent.install(this.$fieldContainer, this.session);\n    htmlComp.setLayout(new SmartFieldMultilineLayout(this));\n    $input = fields.makeInputOrDiv(this, 'multiline-input').on('mousedown', this._onFieldMouseDown.bind(this)).appendTo(this.$fieldContainer);\n    if (!this.touchMode) {\n      $input.keyup(this._onFieldKeyUp.bind(this)).keydown(this._onFieldKeyDown.bind(this)).on('input', this._onFieldInput.bind(this));\n    }\n    this.addField($input);\n    this._$multilineLines = this.$fieldContainer.appendDiv('multiline-lines').on('click', this._onMultilineLinesClick.bind(this));\n    if (!this.embedded) {\n      this.addMandatoryIndicator();\n    }\n    this.addIcon();\n    this.addStatus();\n  }\n  _renderEnabled() {\n    super._renderEnabled();\n    this._$multilineLines.setEnabled(this.enabledComputed);\n  }\n\n  /**\n   * Sets the focus to the input field when user clicks on text lines, but only if nothing is selected.\n   * Otherwise it would be impossible for the user to select the text. That's why we cannot use the\n   * mousedown event here too.\n   */\n  _onMultilineLinesClick(event) {\n    if (this.enabledComputed) {\n      let selection = this.$field.window(true).getSelection();\n      if (!selection.toString()) {\n        this.$field.focus();\n      }\n    }\n  }\n  _renderDisplayText() {\n    super._renderDisplayText();\n    let additionalLines = this.additionalLines();\n    if (additionalLines) {\n      this._$multilineLines.html(arrays.formatEncoded(additionalLines, '<br/>'));\n    } else {\n      this._$multilineLines.empty();\n    }\n  }\n  _getInputBounds() {\n    let fieldBounds = graphics.offsetBounds(this.$fieldContainer),\n      textFieldBounds = graphics.offsetBounds(this.$field);\n    fieldBounds.height = textFieldBounds.height;\n    return fieldBounds;\n  }\n  _renderFocused() {\n    super._renderFocused();\n    this._$multilineLines.toggleClass('focused', this.focused);\n  }\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    super._updateErrorStatusClasses(statusClass, hasStatus);\n    this._updateErrorStatusClassesOnElement(this._$multilineLines, statusClass, hasStatus);\n  }\n}","map":{"version":3,"names":["arrays","fields","graphics","HtmlComponent","SmartField","SmartFieldLayout","SmartFieldMultilineLayout","SmartFieldMultiline","constructor","options","_$multilineLines","_render","$input","htmlComp","addContainer","$parent","addLabel","addFieldContainer","makeDiv","install","$fieldContainer","session","setLayout","makeInputOrDiv","on","_onFieldMouseDown","bind","appendTo","touchMode","keyup","_onFieldKeyUp","keydown","_onFieldKeyDown","_onFieldInput","addField","appendDiv","_onMultilineLinesClick","embedded","addMandatoryIndicator","addIcon","addStatus","_renderEnabled","setEnabled","enabledComputed","event","selection","$field","window","getSelection","toString","focus","_renderDisplayText","additionalLines","html","formatEncoded","empty","_getInputBounds","fieldBounds","offsetBounds","textFieldBounds","height","_renderFocused","toggleClass","focused","_updateErrorStatusClasses","statusClass","hasStatus","_updateErrorStatusClassesOnElement"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/smartfield/SmartFieldMultiline.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, fields, graphics, HtmlComponent, SmartField, SmartFieldLayout, SmartFieldMultilineLayout} from '../../../index';\n\nexport default class SmartFieldMultiline extends SmartField {\n\n  constructor() {\n    super();\n    this.options;\n    this._$multilineLines;\n  }\n\n  _render() {\n    let $input, htmlComp;\n\n    this.addContainer(this.$parent, 'smart-field has-icon', new SmartFieldLayout(this));\n    this.addLabel();\n    this.addFieldContainer(this.$parent.makeDiv('multiline'));\n    htmlComp = HtmlComponent.install(this.$fieldContainer, this.session);\n    htmlComp.setLayout(new SmartFieldMultilineLayout(this));\n\n    $input = fields.makeInputOrDiv(this, 'multiline-input')\n      .on('mousedown', this._onFieldMouseDown.bind(this))\n      .appendTo(this.$fieldContainer);\n\n    if (!this.touchMode) {\n      $input\n        .keyup(this._onFieldKeyUp.bind(this))\n        .keydown(this._onFieldKeyDown.bind(this))\n        .on('input', this._onFieldInput.bind(this));\n    }\n    this.addField($input);\n\n    this._$multilineLines = this.$fieldContainer\n      .appendDiv('multiline-lines')\n      .on('click', this._onMultilineLinesClick.bind(this));\n    if (!this.embedded) {\n      this.addMandatoryIndicator();\n    }\n    this.addIcon();\n    this.addStatus();\n  }\n\n  _renderEnabled() {\n    super._renderEnabled();\n    this._$multilineLines.setEnabled(this.enabledComputed);\n  }\n\n  /**\n   * Sets the focus to the input field when user clicks on text lines, but only if nothing is selected.\n   * Otherwise it would be impossible for the user to select the text. That's why we cannot use the\n   * mousedown event here too.\n   */\n  _onMultilineLinesClick(event) {\n    if (this.enabledComputed) {\n      let selection = this.$field.window(true).getSelection();\n      if (!selection.toString()) {\n        this.$field.focus();\n      }\n    }\n  }\n\n  _renderDisplayText() {\n    super._renderDisplayText();\n    let additionalLines = this.additionalLines();\n    if (additionalLines) {\n      this._$multilineLines.html(arrays.formatEncoded(additionalLines, '<br/>'));\n    } else {\n      this._$multilineLines.empty();\n    }\n  }\n\n  _getInputBounds() {\n    let fieldBounds = graphics.offsetBounds(this.$fieldContainer),\n      textFieldBounds = graphics.offsetBounds(this.$field);\n    fieldBounds.height = textFieldBounds.height;\n    return fieldBounds;\n  }\n\n  _renderFocused() {\n    super._renderFocused();\n    this._$multilineLines.toggleClass('focused', this.focused);\n  }\n\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    super._updateErrorStatusClasses(statusClass, hasStatus);\n    this._updateErrorStatusClassesOnElement(this._$multilineLines, statusClass, hasStatus);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}