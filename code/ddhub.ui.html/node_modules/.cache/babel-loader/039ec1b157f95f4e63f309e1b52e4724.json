{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Event, EventSupport, Form, icons, inspector, MenuBar, scout, TileOutlineOverview, TileOverviewForm, TreeNode, Widget } from '../../../index';\nimport $ from 'jquery';\n\n/**\n * This class is used differently in online and JS-only case. In the online case we only have instances\n * of Page in an outline. The server sets the property <code>nodeType</code> which is used to distinct\n * between pages with tables and pages with nodes in some cases. In the JS only case, Page is an abstract\n * class and is never instantiated directly, instead we always use subclasses of PageWithTable or PageWithNodes.\n * Implementations of these classes contain code which loads table data or child nodes.\n *\n * @class\n * @extends TreeNode\n */\nexport default class Page extends TreeNode {\n  constructor() {\n    super();\n\n    /**\n     * This property is set by the server, see: JsonOutline#putNodeType.\n     */\n    this.nodeType = null;\n    this.compactRoot = false;\n    this.detailTable = null;\n    this.detailTableVisible = true;\n    this.detailForm = null;\n    this.detailFormVisible = true;\n    this.detailFormVisibleByUi = true;\n    this.navigateButtonsVisible = true;\n    this.tableStatusVisible = true;\n    /**\n     * True to select the page linked with the selected row when the row was selected. May be useful on touch devices.\n     */\n    this.drillDownOnRowClick = false;\n    /**\n     * The icon id which is used for icons in the tile outline overview.\n     */\n    this.overviewIconId = null;\n    this.showTileOverview = false;\n    this.events = new EventSupport();\n    this.events.registerSubTypePredicate('propertyChange', (event, propertyName) => {\n      return event.propertyName === propertyName;\n    });\n    this._tableFilterHandler = this._onTableFilter.bind(this);\n    this._tableRowClickHandler = this._onTableRowClick.bind(this);\n    this._detailTableModel = null;\n    this._detailFormModel = null;\n  }\n\n  /**\n   * This enum defines a node-type. This is basically used for the online case where we only have instances\n   * of Page, but never instances of PageWithTable or PageWithNodes. The server simply sets a nodeType\n   * instead.\n   *\n   * @type {{NODES: string, TABLE: string}}\n   */\n\n  /**\n   * @override TreeNode.js\n   */\n  _init(model) {\n    this._detailTableModel = Page._removePropertyIfLazyLoading(model, 'detailTable');\n    this._detailFormModel = Page._removePropertyIfLazyLoading(model, 'detailForm');\n    super._init(model);\n    icons.resolveIconProperty(this, 'overviewIconId');\n\n    // init necessary if the properties are still available (e.g. Scout classic)\n    this._internalInitTable();\n    this._internalInitDetailForm();\n  }\n  static _removePropertyIfLazyLoading(object, name) {\n    let prop = object[name];\n    if (typeof prop === 'string') {\n      // Scout Classic: it is an object id -> do not remove it. directly create the widget. lazy loading is done on backend\n      return null;\n    }\n    if (prop instanceof Widget) {\n      // it already is a widget. directly use it.\n      return null;\n    }\n\n    // otherwise: remove the property and return it\n    delete object[name];\n    return prop;\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  _destroy() {\n    super._destroy();\n    if (this.detailTable) {\n      this.detailTable.destroy();\n    }\n    if (this.detailForm) {\n      this.detailForm.destroy();\n    }\n  }\n  _internalInitTable() {\n    let tableModel = this.detailTable;\n    if (tableModel) {\n      // this case is used for Scout classic\n      let newDetailTable = this.getOutline()._createChild(tableModel);\n      this._setDetailTable(newDetailTable);\n    }\n  }\n  _internalInitDetailForm() {\n    let formModel = this.detailForm;\n    if (formModel) {\n      let newDetailForm = this.getOutline()._createChild(formModel);\n      this._setDetailForm(newDetailForm);\n    }\n  }\n  ensureDetailTable() {\n    if (this.detailTable) {\n      return;\n    }\n    this.setDetailTable(this.createDetailTable());\n  }\n\n  /**\n   * Creates the detail table\n   * @returns {Table} the created table or null\n   */\n  createDetailTable() {\n    let detailTable = this._createDetailTable();\n    if (!detailTable && this._detailTableModel) {\n      detailTable = this.getOutline()._createChild(this._detailTableModel);\n      this._detailTableModel = null; // no longer needed\n    }\n\n    return detailTable;\n  }\n\n  /**\n   * Override this function to create the internal table. Default impl. returns null.\n   *\n   * @returns {Table}\n   */\n  _createDetailTable() {\n    return null;\n  }\n  ensureDetailForm() {\n    if (this.detailForm) {\n      return;\n    }\n    this.setDetailForm(this.createDetailForm());\n  }\n\n  /**\n   * Creates the detail form\n   * @returns {Form|*} the created form or null\n   */\n  createDetailForm() {\n    let detailForm = this._createDetailForm();\n    if (!detailForm && this._detailFormModel) {\n      detailForm = this.getOutline()._createChild(this._detailFormModel);\n      this._detailFormModel = null; // no longer needed\n    }\n\n    return detailForm;\n  }\n\n  /**\n   * Override this function to return a detail form which is displayed in the outline when this page is selected.\n   * The default implementation returns null.\n   *\n   * @returns {Form|*}\n   */\n  _createDetailForm() {\n    return null;\n  }\n\n  /**\n   * Override this function to initialize the internal detail form.\n   * @param {Form} form the form to initialize.\n   */\n  _initDetailForm(form) {\n    if (form instanceof Form) {\n      form.setModal(false);\n      form.setClosable(false);\n      form.setDisplayHint(Form.DisplayHint.VIEW);\n      form.setDisplayViewId('C');\n      form.setShowOnOpen(false);\n    }\n    if (form instanceof TileOverviewForm) {\n      form.setPage(this);\n    }\n  }\n\n  /**\n   * Override this function to destroy the internal (detail) form.\n   * @param {Form} form the form to destroy.\n   */\n  _destroyDetailForm(form) {\n    if (form instanceof TileOverviewForm) {\n      form.setPage(null);\n    }\n    if (form.owner === this.getOutline()) {\n      // in Scout classic the owner is not an outline but the NullWidget.\n      // Then the destroy is controlled by the backend\n      form.destroy();\n    }\n  }\n\n  /**\n   * Override this function to initialize the internal (detail) table.\n   * Default impl. delegates filter events to the outline mediator.\n   * @param {Table} table The table to initialize.\n   */\n  _initDetailTable(table) {\n    table.menuBar.setPosition(MenuBar.Position.TOP);\n    table.on('filter', this._tableFilterHandler);\n    if (this.drillDownOnRowClick) {\n      table.on('rowClick', this._tableRowClickHandler);\n      table.setMultiSelect(false);\n    }\n    table.setTableStatusVisible(this.tableStatusVisible);\n  }\n\n  /**\n   * Override this function to destroy the internal (detail) table.\n   * @param {Table} table the table to destroy.\n   */\n  _destroyDetailTable(table) {\n    table.off('filter', this._tableFilterHandler);\n    table.off('rowClick', this._tableRowClickHandler);\n    if (table.owner === this.getOutline()) {\n      // in Scout classic the owner is not an outline but the NullWidget.\n      // Then the destroy is controlled by the backend\n      table.destroy();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _decorate() {\n    super._decorate();\n    if (!this.$node) {\n      return;\n    }\n    if (this.session.inspector) {\n      inspector.applyInfo(this, this.$node);\n    }\n    this.$node.toggleClass('compact-root', this.compactRoot);\n    this.$node.toggleClass('has-tile-overview', this.showTileOverview || this.compactRoot && this.getOutline().detailContent instanceof TileOutlineOverview);\n  }\n\n  // see Java: AbstractPage#pageActivatedNotify\n  activate() {\n    this.ensureDetailTable();\n    this.ensureDetailForm();\n  }\n\n  // see Java: AbstractPage#pageDeactivatedNotify\n  deactivate() {}\n\n  /**\n   * @returns {Outline} the tree / outline / parent instance. it's all the same,\n   *     but it's more intuitive to work with the 'outline' when we deal with pages.\n   */\n  getOutline() {\n    return this.parent;\n  }\n\n  /**\n   * @returns {Array.<Page>} an array of pages linked with the given rows.\n   *   The order of the returned pages will be the same as the order of the rows.\n   */\n  pagesForTableRows(rows) {\n    return rows.map(this.pageForTableRow);\n  }\n  pageForTableRow(row) {\n    if (!row.page) {\n      throw new Error('Table-row is not linked to a page');\n    }\n    return row.page;\n  }\n\n  /**\n   * @param {Form} form The new form\n   */\n  setDetailForm(form) {\n    if (form === this.detailForm) {\n      return;\n    }\n    this._setDetailForm(form);\n  }\n  _setDetailForm(form) {\n    let oldDetailForm = this.detailForm;\n    if (oldDetailForm !== form && oldDetailForm instanceof Widget) {\n      // must be a widget to be destroyed. At startup in Scout Classic it might be a string (the widget id)\n      this._destroyDetailForm(oldDetailForm);\n    }\n    this.detailForm = form;\n    if (form) {\n      this._initDetailForm(form);\n    }\n    this.triggerPropertyChange('detailForm', oldDetailForm, form);\n  }\n\n  /**\n   * @param {Table} table The new table\n   */\n  setDetailTable(table) {\n    if (table === this.detailTable) {\n      return;\n    }\n    this._setDetailTable(table);\n  }\n  _setDetailTable(table) {\n    let oldDetailTable = this.detailTable;\n    if (oldDetailTable !== table && oldDetailTable instanceof Widget) {\n      // must be a widget to be destroyed. At startup in Scout Classic it might be a string (the widget id)\n      this._destroyDetailTable(oldDetailTable);\n    }\n    this.detailTable = table;\n    if (table) {\n      this._initDetailTable(table);\n    }\n    this.triggerPropertyChange('detailTable', oldDetailTable, table);\n  }\n\n  /**\n   * Updates relevant properties from the pages linked with the given rows using the method updatePageFromTableRow and returns the pages.\n   *\n   * @returns {Array.<Page>} pages linked with the given rows.\n   */\n  updatePagesFromTableRows(rows) {\n    return rows.map(row => {\n      let page = row.page;\n      page.updatePageFromTableRow(row);\n      return page;\n    });\n  }\n\n  /**\n   * Updates relevant properties (text, enabled, htmlEnabled) from the page linked with the given row.\n   *\n   * @returns {Page} page linked with the given row.\n   */\n  updatePageFromTableRow(row) {\n    let page = row.page;\n    page.enabled = row.enabled;\n    page.text = page.computeTextForRow(row);\n    if (row.cells.length >= 1) {\n      page.htmlEnabled = row.cells[0].htmlEnabled;\n      page.cssClass = row.cells[0].cssClass;\n    }\n    return page;\n  }\n\n  /**\n   * This function creates the text property of this page. The default implementation returns the\n   * text from the first cell of the given row. It's allowed to ignore the given row entirely, when you override\n   * this function.\n   *\n   * @param {TableRow} row\n   */\n  computeTextForRow(row) {\n    let text = '';\n    if (row.cells.length >= 1) {\n      text = row.cells[0].text;\n    }\n    return text;\n  }\n\n  /**\n   * @returns {object} a page parameter object used to pass to newly created child pages. Sets the parent\n   *     to our outline instance and adds optional other properties. Typically you'll pass an\n   *     object (entity-key or arbitrary data) to a child page.\n   */\n  _pageParam(paramProperties) {\n    let param = {\n      parent: this.getOutline()\n    };\n    $.extend(param, paramProperties);\n    return param;\n  }\n  reloadPage() {\n    let outline = this.getOutline();\n    if (outline) {\n      this.loadChildren();\n    }\n  }\n  linkWithRow(row) {\n    this.row = row;\n    row.page = this;\n    this.getOutline().trigger('pageRowLink', {\n      page: this,\n      row: row\n    });\n  }\n  unlinkWithRow(row) {\n    delete this.row;\n    delete row.page;\n  }\n  _onTableFilter(event) {\n    this.getOutline().mediator.onTableFilter(event, this);\n  }\n  _onTableRowClick(event) {\n    if (!this.drillDownOnRowClick) {\n      return;\n    }\n    let row = event.row;\n    let drillNode = this.pageForTableRow(row);\n    this.getOutline().selectNode(drillNode);\n    this.detailTable.deselectRow(row);\n  }\n\n  /**\n   * Triggers a property change for a single property.\n   */\n  triggerPropertyChange(propertyName, oldValue, newValue) {\n    scout.assertParameter('propertyName', propertyName);\n    let event = new Event({\n      propertyName: propertyName,\n      oldValue: oldValue,\n      newValue: newValue\n    });\n    this.trigger('propertyChange', event);\n    return event;\n  }\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n  one(type, func) {\n    this.events.one(type, func);\n  }\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n  off(type, func) {\n    this.events.off(type, func);\n  }\n}\n_defineProperty(Page, \"NodeType\", {\n  NODES: 'nodes',\n  TABLE: 'table'\n});","map":{"version":3,"names":["Event","EventSupport","Form","icons","inspector","MenuBar","scout","TileOutlineOverview","TileOverviewForm","TreeNode","Widget","$","Page","constructor","nodeType","compactRoot","detailTable","detailTableVisible","detailForm","detailFormVisible","detailFormVisibleByUi","navigateButtonsVisible","tableStatusVisible","drillDownOnRowClick","overviewIconId","showTileOverview","events","registerSubTypePredicate","event","propertyName","_tableFilterHandler","_onTableFilter","bind","_tableRowClickHandler","_onTableRowClick","_detailTableModel","_detailFormModel","_init","model","_removePropertyIfLazyLoading","resolveIconProperty","_internalInitTable","_internalInitDetailForm","object","name","prop","_destroy","destroy","tableModel","newDetailTable","getOutline","_createChild","_setDetailTable","formModel","newDetailForm","_setDetailForm","ensureDetailTable","setDetailTable","createDetailTable","_createDetailTable","ensureDetailForm","setDetailForm","createDetailForm","_createDetailForm","_initDetailForm","form","setModal","setClosable","setDisplayHint","DisplayHint","VIEW","setDisplayViewId","setShowOnOpen","setPage","_destroyDetailForm","owner","_initDetailTable","table","menuBar","setPosition","Position","TOP","on","setMultiSelect","setTableStatusVisible","_destroyDetailTable","off","_decorate","$node","session","applyInfo","toggleClass","detailContent","activate","deactivate","parent","pagesForTableRows","rows","map","pageForTableRow","row","page","Error","oldDetailForm","triggerPropertyChange","oldDetailTable","updatePagesFromTableRows","updatePageFromTableRow","enabled","text","computeTextForRow","cells","length","htmlEnabled","cssClass","_pageParam","paramProperties","param","extend","reloadPage","outline","loadChildren","linkWithRow","trigger","unlinkWithRow","mediator","onTableFilter","drillNode","selectNode","deselectRow","oldValue","newValue","assertParameter","type","source","one","func","NODES","TABLE"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/outline/pages/Page.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Event, EventSupport, Form, icons, inspector, MenuBar, scout, TileOutlineOverview, TileOverviewForm, TreeNode, Widget} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * This class is used differently in online and JS-only case. In the online case we only have instances\n * of Page in an outline. The server sets the property <code>nodeType</code> which is used to distinct\n * between pages with tables and pages with nodes in some cases. In the JS only case, Page is an abstract\n * class and is never instantiated directly, instead we always use subclasses of PageWithTable or PageWithNodes.\n * Implementations of these classes contain code which loads table data or child nodes.\n *\n * @class\n * @extends TreeNode\n */\nexport default class Page extends TreeNode {\n\n  constructor() {\n    super();\n\n    /**\n     * This property is set by the server, see: JsonOutline#putNodeType.\n     */\n    this.nodeType = null;\n    this.compactRoot = false;\n    this.detailTable = null;\n    this.detailTableVisible = true;\n    this.detailForm = null;\n    this.detailFormVisible = true;\n    this.detailFormVisibleByUi = true;\n    this.navigateButtonsVisible = true;\n\n    this.tableStatusVisible = true;\n    /**\n     * True to select the page linked with the selected row when the row was selected. May be useful on touch devices.\n     */\n    this.drillDownOnRowClick = false;\n    /**\n     * The icon id which is used for icons in the tile outline overview.\n     */\n    this.overviewIconId = null;\n    this.showTileOverview = false;\n    this.events = new EventSupport();\n    this.events.registerSubTypePredicate('propertyChange', (event, propertyName) => {\n      return event.propertyName === propertyName;\n    });\n    this._tableFilterHandler = this._onTableFilter.bind(this);\n    this._tableRowClickHandler = this._onTableRowClick.bind(this);\n    this._detailTableModel = null;\n    this._detailFormModel = null;\n  }\n\n  /**\n   * This enum defines a node-type. This is basically used for the online case where we only have instances\n   * of Page, but never instances of PageWithTable or PageWithNodes. The server simply sets a nodeType\n   * instead.\n   *\n   * @type {{NODES: string, TABLE: string}}\n   */\n  static NodeType = {\n    NODES: 'nodes',\n    TABLE: 'table'\n  };\n\n  /**\n   * @override TreeNode.js\n   */\n  _init(model) {\n    this._detailTableModel = Page._removePropertyIfLazyLoading(model, 'detailTable');\n    this._detailFormModel = Page._removePropertyIfLazyLoading(model, 'detailForm');\n\n    super._init(model);\n    icons.resolveIconProperty(this, 'overviewIconId');\n\n    // init necessary if the properties are still available (e.g. Scout classic)\n    this._internalInitTable();\n    this._internalInitDetailForm();\n  }\n\n  static _removePropertyIfLazyLoading(object, name) {\n    let prop = object[name];\n    if (typeof prop === 'string') {\n      // Scout Classic: it is an object id -> do not remove it. directly create the widget. lazy loading is done on backend\n      return null;\n    }\n    if (prop instanceof Widget) {\n      // it already is a widget. directly use it.\n      return null;\n    }\n\n    // otherwise: remove the property and return it\n    delete object[name];\n    return prop;\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  _destroy() {\n    super._destroy();\n    if (this.detailTable) {\n      this.detailTable.destroy();\n    }\n    if (this.detailForm) {\n      this.detailForm.destroy();\n    }\n  }\n\n  _internalInitTable() {\n    let tableModel = this.detailTable;\n    if (tableModel) {\n      // this case is used for Scout classic\n      let newDetailTable = this.getOutline()._createChild(tableModel);\n      this._setDetailTable(newDetailTable);\n    }\n  }\n\n  _internalInitDetailForm() {\n    let formModel = this.detailForm;\n    if (formModel) {\n      let newDetailForm = this.getOutline()._createChild(formModel);\n      this._setDetailForm(newDetailForm);\n    }\n  }\n\n  ensureDetailTable() {\n    if (this.detailTable) {\n      return;\n    }\n    this.setDetailTable(this.createDetailTable());\n  }\n\n  /**\n   * Creates the detail table\n   * @returns {Table} the created table or null\n   */\n  createDetailTable() {\n    let detailTable = this._createDetailTable();\n    if (!detailTable && this._detailTableModel) {\n      detailTable = this.getOutline()._createChild(this._detailTableModel);\n      this._detailTableModel = null; // no longer needed\n    }\n    return detailTable;\n  }\n\n  /**\n   * Override this function to create the internal table. Default impl. returns null.\n   *\n   * @returns {Table}\n   */\n  _createDetailTable() {\n    return null;\n  }\n\n  ensureDetailForm() {\n    if (this.detailForm) {\n      return;\n    }\n    this.setDetailForm(this.createDetailForm());\n  }\n\n  /**\n   * Creates the detail form\n   * @returns {Form|*} the created form or null\n   */\n  createDetailForm() {\n    let detailForm = this._createDetailForm();\n    if (!detailForm && this._detailFormModel) {\n      detailForm = this.getOutline()._createChild(this._detailFormModel);\n      this._detailFormModel = null; // no longer needed\n    }\n    return detailForm;\n  }\n\n  /**\n   * Override this function to return a detail form which is displayed in the outline when this page is selected.\n   * The default implementation returns null.\n   *\n   * @returns {Form|*}\n   */\n  _createDetailForm() {\n    return null;\n  }\n\n  /**\n   * Override this function to initialize the internal detail form.\n   * @param {Form} form the form to initialize.\n   */\n  _initDetailForm(form) {\n    if (form instanceof Form) {\n      form.setModal(false);\n      form.setClosable(false);\n\n      form.setDisplayHint(Form.DisplayHint.VIEW);\n      form.setDisplayViewId('C');\n\n      form.setShowOnOpen(false);\n    }\n    if (form instanceof TileOverviewForm) {\n      form.setPage(this);\n    }\n  }\n\n  /**\n   * Override this function to destroy the internal (detail) form.\n   * @param {Form} form the form to destroy.\n   */\n  _destroyDetailForm(form) {\n    if (form instanceof TileOverviewForm) {\n      form.setPage(null);\n    }\n    if (form.owner === this.getOutline()) {\n      // in Scout classic the owner is not an outline but the NullWidget.\n      // Then the destroy is controlled by the backend\n      form.destroy();\n    }\n  }\n\n  /**\n   * Override this function to initialize the internal (detail) table.\n   * Default impl. delegates filter events to the outline mediator.\n   * @param {Table} table The table to initialize.\n   */\n  _initDetailTable(table) {\n    table.menuBar.setPosition(MenuBar.Position.TOP);\n    table.on('filter', this._tableFilterHandler);\n    if (this.drillDownOnRowClick) {\n      table.on('rowClick', this._tableRowClickHandler);\n      table.setMultiSelect(false);\n    }\n    table.setTableStatusVisible(this.tableStatusVisible);\n  }\n\n  /**\n   * Override this function to destroy the internal (detail) table.\n   * @param {Table} table the table to destroy.\n   */\n  _destroyDetailTable(table) {\n    table.off('filter', this._tableFilterHandler);\n    table.off('rowClick', this._tableRowClickHandler);\n    if (table.owner === this.getOutline()) {\n      // in Scout classic the owner is not an outline but the NullWidget.\n      // Then the destroy is controlled by the backend\n      table.destroy();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _decorate() {\n    super._decorate();\n    if (!this.$node) {\n      return;\n    }\n    if (this.session.inspector) {\n      inspector.applyInfo(this, this.$node);\n    }\n    this.$node.toggleClass('compact-root', this.compactRoot);\n    this.$node.toggleClass('has-tile-overview', this.showTileOverview ||\n      (this.compactRoot && this.getOutline().detailContent instanceof TileOutlineOverview));\n  }\n\n  // see Java: AbstractPage#pageActivatedNotify\n  activate() {\n    this.ensureDetailTable();\n    this.ensureDetailForm();\n  }\n\n  // see Java: AbstractPage#pageDeactivatedNotify\n  deactivate() {\n  }\n\n  /**\n   * @returns {Outline} the tree / outline / parent instance. it's all the same,\n   *     but it's more intuitive to work with the 'outline' when we deal with pages.\n   */\n  getOutline() {\n    return this.parent;\n  }\n\n  /**\n   * @returns {Array.<Page>} an array of pages linked with the given rows.\n   *   The order of the returned pages will be the same as the order of the rows.\n   */\n  pagesForTableRows(rows) {\n    return rows.map(this.pageForTableRow);\n  }\n\n  pageForTableRow(row) {\n    if (!row.page) {\n      throw new Error('Table-row is not linked to a page');\n    }\n    return row.page;\n  }\n\n  /**\n   * @param {Form} form The new form\n   */\n  setDetailForm(form) {\n    if (form === this.detailForm) {\n      return;\n    }\n    this._setDetailForm(form);\n  }\n\n  _setDetailForm(form) {\n    let oldDetailForm = this.detailForm;\n    if (oldDetailForm !== form && oldDetailForm instanceof Widget) {\n      // must be a widget to be destroyed. At startup in Scout Classic it might be a string (the widget id)\n      this._destroyDetailForm(oldDetailForm);\n    }\n    this.detailForm = form;\n    if (form) {\n      this._initDetailForm(form);\n    }\n    this.triggerPropertyChange('detailForm', oldDetailForm, form);\n  }\n\n  /**\n   * @param {Table} table The new table\n   */\n  setDetailTable(table) {\n    if (table === this.detailTable) {\n      return;\n    }\n    this._setDetailTable(table);\n  }\n\n  _setDetailTable(table) {\n    let oldDetailTable = this.detailTable;\n    if (oldDetailTable !== table && oldDetailTable instanceof Widget) {\n      // must be a widget to be destroyed. At startup in Scout Classic it might be a string (the widget id)\n      this._destroyDetailTable(oldDetailTable);\n    }\n    this.detailTable = table;\n    if (table) {\n      this._initDetailTable(table);\n    }\n    this.triggerPropertyChange('detailTable', oldDetailTable, table);\n  }\n\n  /**\n   * Updates relevant properties from the pages linked with the given rows using the method updatePageFromTableRow and returns the pages.\n   *\n   * @returns {Array.<Page>} pages linked with the given rows.\n   */\n  updatePagesFromTableRows(rows) {\n    return rows.map(row => {\n      let page = row.page;\n      page.updatePageFromTableRow(row);\n      return page;\n    });\n  }\n\n  /**\n   * Updates relevant properties (text, enabled, htmlEnabled) from the page linked with the given row.\n   *\n   * @returns {Page} page linked with the given row.\n   */\n  updatePageFromTableRow(row) {\n    let page = row.page;\n    page.enabled = row.enabled;\n    page.text = page.computeTextForRow(row);\n    if (row.cells.length >= 1) {\n      page.htmlEnabled = row.cells[0].htmlEnabled;\n      page.cssClass = row.cells[0].cssClass;\n    }\n    return page;\n  }\n\n  /**\n   * This function creates the text property of this page. The default implementation returns the\n   * text from the first cell of the given row. It's allowed to ignore the given row entirely, when you override\n   * this function.\n   *\n   * @param {TableRow} row\n   */\n  computeTextForRow(row) {\n    let text = '';\n    if (row.cells.length >= 1) {\n      text = row.cells[0].text;\n    }\n    return text;\n  }\n\n  /**\n   * @returns {object} a page parameter object used to pass to newly created child pages. Sets the parent\n   *     to our outline instance and adds optional other properties. Typically you'll pass an\n   *     object (entity-key or arbitrary data) to a child page.\n   */\n  _pageParam(paramProperties) {\n    let param = {\n      parent: this.getOutline()\n    };\n    $.extend(param, paramProperties);\n    return param;\n  }\n\n  reloadPage() {\n    let outline = this.getOutline();\n    if (outline) {\n      this.loadChildren();\n    }\n  }\n\n  linkWithRow(row) {\n    this.row = row;\n    row.page = this;\n    this.getOutline().trigger('pageRowLink', {\n      page: this,\n      row: row\n    });\n  }\n\n  unlinkWithRow(row) {\n    delete this.row;\n    delete row.page;\n  }\n\n  _onTableFilter(event) {\n    this.getOutline().mediator.onTableFilter(event, this);\n  }\n\n  _onTableRowClick(event) {\n    if (!this.drillDownOnRowClick) {\n      return;\n    }\n    let row = event.row;\n    let drillNode = this.pageForTableRow(row);\n    this.getOutline().selectNode(drillNode);\n    this.detailTable.deselectRow(row);\n  }\n\n  /**\n   * Triggers a property change for a single property.\n   */\n  triggerPropertyChange(propertyName, oldValue, newValue) {\n    scout.assertParameter('propertyName', propertyName);\n    let event = new Event({\n      propertyName: propertyName,\n      oldValue: oldValue,\n      newValue: newValue\n    });\n    this.trigger('propertyChange', event);\n    return event;\n  }\n\n  trigger(type, event) {\n    event = event || {};\n    event.source = this;\n    this.events.trigger(type, event);\n  }\n\n  one(type, func) {\n    this.events.one(type, func);\n  }\n\n  on(type, func) {\n    return this.events.on(type, func);\n  }\n\n  off(type, func) {\n    this.events.off(type, func);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}