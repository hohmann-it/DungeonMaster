{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, clipboard, Device, dragAndDrop, Event, fields, FormFieldLayout, GridData, GroupBox, HtmlComponent, KeyStrokeContext, LoadingSupport, menus as menuUtil, objects, scout, Status, strings, styles, tooltips, Widget } from '../../index';\nimport $ from 'jquery';\n\n/**\n * Base class for all form-fields.\n */\nexport default class FormField extends Widget {\n  constructor() {\n    super();\n    this.dropType = 0;\n    this.dropMaximumSize = dragAndDrop.DEFAULT_DROP_MAXIMUM_SIZE;\n    this.empty = true;\n    /**\n     * @type {Status}\n     */\n    this.errorStatus = null;\n    this.fieldStyle = FormField.DEFAULT_FIELD_STYLE;\n    this.gridData = null;\n    this.gridDataHints = new GridData();\n    this.mode = FormField.Mode.DEFAULT;\n    this.keyStrokes = [];\n    this.label = null;\n    this.labelVisible = true;\n    this.labelPosition = FormField.LabelPosition.DEFAULT;\n    this.labelWidthInPixel = 0;\n    this.labelUseUiWidth = false;\n    this.labelHtmlEnabled = false;\n    this.mandatory = false;\n    this.statusMenuMappings = [];\n    this.menus = [];\n    this.menusVisible = true;\n    this.currentMenuTypes = [];\n    this.preventInitialFocus = false;\n    this.requiresSave = false;\n    this.statusPosition = FormField.StatusPosition.DEFAULT;\n    this.statusVisible = true;\n    this.suppressStatus = false;\n    this.touched = false;\n    this.tooltipText = null;\n    this.tooltipAnchor = FormField.TooltipAnchor.DEFAULT;\n    this.onFieldTooltipOptionsCreator = null;\n    this.suppressStatus = null;\n    this.$label = null;\n    /**\n     * Note the difference between $field and $fieldContainer:\n     * - $field points to the input-field (typically a browser-text field)\n     * - $fieldContainer could point to the same input-field or when the field is a composite,\n     *   to the parent DIV of that composite. For instance: the multi-line-smartfield is a\n     *   composite with a input-field and a DIV showing the additional lines. In that case $field\n     *   points to the input-field and $fieldContainer to the parent DIV of the input-field.\n     *   This property should be used primarily for layout-functionality.\n     */\n    this.$field = null;\n    this.$fieldContainer = null;\n    this.$icon = null;\n    /**\n     * The status is used for error-status, tooltip-icon and menus.\n     */\n    this.$status = null;\n\n    /**\n     * Some browsers don't support copying text from disabled input fields. If such a browser is detected\n     * and this flag is true (default is false), an overlay DIV is rendered over disabled fields which\n     * provides a custom copy context menu that opens the ClipboardForm.\n     */\n    this.disabledCopyOverlay = false;\n    this.$disabledCopyOverlay = null;\n    this._addWidgetProperties(['keyStrokes', 'menus', 'statusMenuMappings']);\n    this._addCloneProperties(['dropType', 'dropMaximumSize', 'errorStatus', 'fieldStyle', 'gridDataHints', 'gridData', 'label', 'labelVisible', 'labelPosition', 'labelWidthInPixel', 'labelUseUiWidth', 'mandatory', 'mode', 'preventInitialFocus', 'requiresSave', 'touched', 'statusVisible', 'statusPosition', 'statusMenuMappings', 'tooltipText', 'tooltipAnchor']);\n    this._menuPropertyChangeHandler = this._onMenuPropertyChange.bind(this);\n  }\n  /**\n   * @override\n   * @returns {KeyStrokeContext}\n   */\n  _createKeyStrokeContext() {\n    return new KeyStrokeContext();\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'labelPosition',\n      constType: FormField.LabelPosition\n    }]);\n    this.resolveTextKeys(['label', 'tooltipText']);\n    this._setKeyStrokes(this.keyStrokes);\n    this._setMenus(this.menus);\n    this._setErrorStatus(this.errorStatus);\n    this._setGridDataHints(this.gridDataHints);\n    this._setGridData(this.gridData);\n    this._updateEmpty();\n  }\n  _initProperty(propertyName, value) {\n    if ('gridDataHints' === propertyName) {\n      this._initGridDataHints(value);\n    } else {\n      super._initProperty(propertyName, value);\n    }\n  }\n\n  /**\n   * This function <strong>extends</strong> the default grid data hints of the form field.\n   * The default values for grid data hints are set in the constructor of the FormField and its subclasses.\n   * When the given gridDataHints is a plain object, we extend our default values. When gridDataHints is\n   * already instanceof GridData we overwrite default values completely.\n   * @param gridDataHints\n   * @private\n   */\n  _initGridDataHints(gridDataHints) {\n    if (gridDataHints instanceof GridData) {\n      this.gridDataHints = gridDataHints;\n    } else if (objects.isPlainObject(gridDataHints)) {\n      $.extend(this.gridDataHints, gridDataHints);\n    } else {\n      this.gridDataHints = gridDataHints;\n    }\n  }\n\n  /**\n   * All sub-classes of FormField must implement a _render method. The default implementation\n   * will throw an Error when _render is called. The _render method should call the various add*\n   * methods provided by the FormField class. A possible _render implementation could look like this.\n   *\n   * <pre>\n   * this.addContainer(this.$parent, 'form-field');\n   * this.addLabel();\n   * this.addField(this.$parent.makeDiv('foo', 'bar'));\n   * this.addMandatoryIndicator();\n   * this.addStatus();\n   * </pre>\n   */\n  _render() {\n    throw new Error('sub-classes of FormField must implement a _render method');\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderMandatory();\n    this._renderTooltipText();\n    this._renderErrorStatus();\n    this._renderMenus();\n    this._renderLabel();\n    this._renderLabelVisible();\n    this._renderStatusVisible();\n    this._renderStatusPosition();\n    this._renderFont();\n    this._renderForegroundColor();\n    this._renderBackgroundColor();\n    this._renderLabelFont();\n    this._renderLabelForegroundColor();\n    this._renderLabelBackgroundColor();\n    this._renderGridData();\n    this._renderPreventInitialFocus();\n    this._renderFieldStyle();\n  }\n  _remove() {\n    super._remove();\n    this._removeField();\n    this._removeStatus();\n    this._removeLabel();\n    this._removeIcon();\n    this.removeMandatoryIndicator();\n    this._removeDisabledCopyOverlay();\n    dragAndDrop.uninstallDragAndDropHandler(this);\n  }\n  setFieldStyle(fieldStyle) {\n    this.setProperty('fieldStyle', fieldStyle);\n  }\n  _renderFieldStyle() {\n    this._renderFieldStyleInternal(this.$container);\n    this._renderFieldStyleInternal(this.$fieldContainer);\n    this._renderFieldStyleInternal(this.$field);\n    if (this.rendered) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n  _renderFieldStyleInternal($element) {\n    if (!$element) {\n      return;\n    }\n    $element.toggleClass('alternative', this.fieldStyle === FormField.FieldStyle.ALTERNATIVE);\n  }\n  setMandatory(mandatory) {\n    this.setProperty('mandatory', mandatory);\n  }\n  _renderMandatory() {\n    this.$container.toggleClass('mandatory', this.mandatory);\n  }\n\n  /**\n   * Override this function to return another error status property.\n   * The default implementation returns the property 'errorStatus'.\n   *\n   * @return {Status}\n   */\n  _errorStatus() {\n    return this.errorStatus;\n  }\n  setErrorStatus(errorStatus) {\n    this.setProperty('errorStatus', errorStatus);\n  }\n  _setErrorStatus(errorStatus) {\n    errorStatus = Status.ensure(errorStatus);\n    this._setProperty('errorStatus', errorStatus);\n  }\n\n  /**\n   * Adds the given (functional) error status to the list of error status. Prefer this function over #setErrorStatus\n   * when you don't want to mess with the internal error states of the field (parsing, validation).\n   *\n   * @param errorStatus\n   */\n  addErrorStatus(errorStatus) {\n    if (!(errorStatus instanceof Status)) {\n      throw new Error('errorStatus is not a Status');\n    }\n    let status = this._errorStatus();\n    if (status) {\n      status = status.ensureChildren(); // new instance is required for property change\n    } else {\n      status = Status.ok('Root');\n    }\n    status.addStatus(errorStatus);\n    this.setErrorStatus(status);\n  }\n\n  /**\n   * Whether or not the error status is or has the given status type.\n   * @param statusType\n   * @returns {boolean}\n   */\n  containsStatus(statusType) {\n    if (!this.errorStatus) {\n      return false;\n    }\n    return this.errorStatus.containsStatus(statusType);\n  }\n  setSuppressStatus(suppressStatus) {\n    this.setProperty('suppressStatus', suppressStatus);\n  }\n  _renderSuppressStatus() {\n    this._renderErrorStatus();\n  }\n\n  /**\n   * @returns {boolean} Whether or not error status icon is suppressed\n   */\n  _isSuppressStatusIcon() {\n    return scout.isOneOf(this.suppressStatus, FormField.SuppressStatus.ALL, FormField.SuppressStatus.ICON);\n  }\n\n  /**\n   * @returns {boolean} Whether or not error status CSS class is suppressed on field\n   */\n  _isSuppressStatusField() {\n    return scout.isOneOf(this.suppressStatus, FormField.SuppressStatus.ALL, FormField.SuppressStatus.FIELD);\n  }\n\n  /**\n   * Removes all status (incl. children) with the given type.\n   * @param {object} statusType\n   */\n  removeErrorStatus(statusType) {\n    this.removeErrorStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n  removeErrorStatusByPredicate(predicate) {\n    let status = this._errorStatus();\n    if (!status) {\n      return;\n    }\n    if (status.containsStatusByPredicate(predicate)) {\n      let newStatus = status.clone();\n      newStatus.removeAllStatusByPredicate(predicate);\n      // If no other status remains -> clear error status\n      if (newStatus.hasChildren()) {\n        this.setErrorStatus(newStatus);\n      } else {\n        this.clearErrorStatus();\n      }\n    }\n  }\n  clearErrorStatus() {\n    this.setErrorStatus(null);\n  }\n  _renderErrorStatus() {\n    let status = this._errorStatus(),\n      hasStatus = !!status,\n      statusClass = hasStatus && !this._isSuppressStatusField() ? 'has-' + status.cssClass() : '';\n    this._updateErrorStatusClasses(statusClass, hasStatus);\n    this._updateFieldStatus();\n  }\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    this._updateErrorStatusClassesOnElement(this.$container, statusClass, hasStatus);\n    this._updateErrorStatusClassesOnElement(this.$field, statusClass, hasStatus);\n  }\n  _updateErrorStatusClassesOnElement($element, statusClass, hasStatus) {\n    if (!$element) {\n      return;\n    }\n    $element.removeClass(FormField.SEVERITY_CSS_CLASSES).addClass(statusClass, hasStatus);\n  }\n  setTooltipText(tooltipText) {\n    this.setProperty('tooltipText', tooltipText);\n  }\n  _renderTooltipText() {\n    this._updateTooltip();\n  }\n  setTooltipAnchor(tooltipAnchor) {\n    this.setProperty('tooltipAnchor', tooltipAnchor);\n  }\n  _renderTooltipAnchor() {\n    this._updateTooltip();\n  }\n  _updateTooltip() {\n    let hasTooltipText = this.hasStatusTooltip();\n    this.$container.toggleClass('has-tooltip', hasTooltipText);\n    if (this.$field) {\n      this.$field.toggleClass('has-tooltip', hasTooltipText);\n    }\n    this._updateFieldStatus();\n    if (this.$fieldContainer) {\n      if (this.hasOnFieldTooltip()) {\n        let creatorFunc = this.onFieldTooltipOptionsCreator || this._createOnFieldTooltipOptions;\n        tooltips.install(this.$fieldContainer, creatorFunc.call(this));\n      } else {\n        tooltips.uninstall(this.$fieldContainer);\n      }\n    }\n  }\n  hasStatusTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.DEFAULT && strings.hasText(this.tooltipText);\n  }\n  hasOnFieldTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.ON_FIELD && strings.hasText(this.tooltipText);\n  }\n  setOnFieldTooltipOptionsCreator(onFieldTooltipOptionsCreator) {\n    this.onFieldTooltipOptionsCreator = onFieldTooltipOptionsCreator;\n  }\n  _createOnFieldTooltipOptions() {\n    return {\n      parent: this,\n      text: this.tooltipText,\n      arrowPosition: 50\n    };\n  }\n\n  /**\n   * @override\n   */\n  _renderVisible() {\n    super._renderVisible();\n    if (this.rendered) {\n      // Make sure error status is hidden / shown when visibility changes\n      this._renderErrorStatus();\n    }\n  }\n  setLabel(label) {\n    this.setProperty('label', label);\n  }\n  _renderLabel() {\n    let label = this.label;\n    if (this.labelPosition === FormField.LabelPosition.ON_FIELD) {\n      this._renderPlaceholder();\n      if (this.$label) {\n        this.$label.text('');\n      }\n    } else if (this.$label) {\n      this._removePlaceholder();\n      // Make sure an empty label has the same height as the other labels, especially important for top labels\n      this.$label.contentOrNbsp(this.labelHtmlEnabled, label, 'empty').toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n\n      // Invalidate layout if label width depends on its content\n      if (this.labelUseUiWidth || this.labelWidthInPixel === FormField.LabelWidth.UI) {\n        this.invalidateLayoutTree();\n      }\n    }\n  }\n\n  /**\n   * Renders an empty label for button-like fields that don't have a regular label but which do want to support the 'labelVisible'\n   * property in order to provide some layout-flexibility. Makes sure the empty label has the same height as the other labels,\n   * which is especially important for top labels.\n   */\n  _renderEmptyLabel() {\n    this.$label.html('&nbsp;').toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n  }\n  _renderPlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder(this.label);\n    }\n  }\n\n  /**\n   * @param $field (optional) argument is required by DateField.js, when not set this.$field is used\n   */\n  _removePlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder('');\n    }\n  }\n  setLabelVisible(visible) {\n    this.setProperty('labelVisible', visible);\n  }\n  _renderLabelVisible() {\n    let visible = this.labelVisible;\n    this._renderChildVisible(this.$label, visible);\n    this.$container.toggleClass('label-hidden', !visible);\n    if (this.rendered && this.labelPosition === FormField.LabelPosition.TOP) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n  setLabelWidthInPixel(labelWidthInPixel) {\n    this.setProperty('labelWidthInPixel', labelWidthInPixel);\n  }\n  _renderLabelWidthInPixel() {\n    this.invalidateLayoutTree();\n  }\n  setLabelUseUiWidth(labelUseUiWidth) {\n    this.setProperty('labelUseUiWidth', labelUseUiWidth);\n  }\n  _renderLabelUseUiWidth() {\n    this.invalidateLayoutTree();\n  }\n  setStatusVisible(visible) {\n    this.setProperty('statusVisible', visible);\n  }\n  _renderStatusVisible() {\n    this._updateFieldStatus();\n  }\n  setStatusPosition(statusPosition) {\n    this.setProperty('statusPosition', statusPosition);\n  }\n  _renderStatusPosition(statusPosition) {\n    this._updateFieldStatus();\n  }\n  _tooltip() {\n    if (this.fieldStatus) {\n      return this.fieldStatus.tooltip;\n    }\n    return null;\n  }\n  _updateFieldStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    // compute status\n    let menus,\n      errorStatus = this._errorStatus(),\n      status = null,\n      statusVisible = this._computeStatusVisible(),\n      autoRemove = true;\n    this.fieldStatus.setPosition(this.statusPosition);\n    this.fieldStatus.setVisible(statusVisible);\n    if (!statusVisible) {\n      return;\n    }\n    if (errorStatus) {\n      // If the field is used as a cell editor in a editable table, then no validation errors should be shown.\n      // (parsing and validation will be handled by the cell/column itself)\n      if (this.mode === FormField.Mode.CELLEDITOR) {\n        return;\n      }\n      status = errorStatus;\n      autoRemove = !status.isError();\n      menus = this._getMenusForStatus(errorStatus);\n    } else if (this.hasStatusTooltip()) {\n      status = scout.create('Status', {\n        message: this.tooltipText,\n        severity: Status.Severity.INFO\n      });\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this.getContextMenuItems();\n    } else {\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this.getContextMenuItems();\n    }\n    this.fieldStatus.update(status, menus, autoRemove, this._isInitialShowStatus());\n  }\n  _isInitialShowStatus() {\n    return !!this._errorStatus();\n  }\n\n  /**\n   * Computes whether the $status should be visible based on statusVisible, errorStatus and tooltip.\n   * -> errorStatus and tooltip override statusVisible, so $status may be visible event though statusVisible is set to false\n   */\n  _computeStatusVisible() {\n    let status = this._errorStatus(),\n      statusVisible = this.statusVisible,\n      hasStatus = !!status,\n      hasTooltip = this.hasStatusTooltip();\n    return !this._isSuppressStatusIcon() && this.visible && (statusVisible || hasStatus || hasTooltip || this._hasMenus() && this.menusVisible);\n  }\n  _renderChildVisible($child, visible) {\n    if (!$child) {\n      return;\n    }\n    if ($child.isVisible() !== visible) {\n      $child.setVisible(visible);\n      this.invalidateLayoutTree();\n      return true;\n    }\n  }\n  setLabelPosition(labelPosition) {\n    this.setProperty('labelPosition', labelPosition);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because the positioning is done by _renderLabel\n  _renderLabelPosition(position) {\n    this._renderLabel();\n    if (this.rendered) {\n      // Necessary to invalidate parent as well if parent uses the logical grid.\n      // LogicalGridData uses another row height depending of the label position\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n  setLabelHtmlEnabled(labelHtmlEnabled) {\n    this.setProperty('labelHtmlEnabled', labelHtmlEnabled);\n  }\n  _renderLabelHtmlEnabled() {\n    // Render the label again when html enabled changes dynamically\n    this._renderLabel();\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    if (this.$field) {\n      this.$field.setEnabled(this.enabledComputed);\n    }\n    this._updateDisabledCopyOverlay();\n    this._installOrUninstallDragAndDropHandler();\n  }\n\n  /**\n   * @override Wigdet.js\n   */\n  _renderDisabledStyle() {\n    this._renderDisabledStyleInternal(this.$container);\n    this._renderDisabledStyleInternal(this.$fieldContainer);\n    this._renderDisabledStyleInternal(this.$field);\n    this._renderDisabledStyleInternal(this.$mandatory);\n  }\n  setFont(font) {\n    this.setProperty('font', font);\n  }\n  _renderFont() {\n    styles.legacyFont(this, this.$field);\n  }\n  setForegroundColor(foregroundColor) {\n    this.setProperty('foregroundColor', foregroundColor);\n  }\n  _renderForegroundColor() {\n    styles.legacyForegroundColor(this, this.$field);\n  }\n  setBackgroundColor(backgroundColor) {\n    this.setProperty('backgroundColor', backgroundColor);\n  }\n  _renderBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$field);\n  }\n  setLabelFont(labelFont) {\n    this.setProperty('labelFont', labelFont);\n  }\n  _renderLabelFont() {\n    styles.legacyFont(this, this.$label, 'label');\n  }\n  setLabelForegroundColor(labelForegroundColor) {\n    this.setProperty('labelForegroundColor', labelForegroundColor);\n  }\n  _renderLabelForegroundColor() {\n    styles.legacyForegroundColor(this, this.$label, 'label');\n  }\n  setLabelBackgroundColor(labelBackgroundColor) {\n    this.setProperty('labelBackgroundColor', labelBackgroundColor);\n  }\n  _renderLabelBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$label, 'label');\n  }\n  setGridDataHints(gridData) {\n    this.setProperty('gridDataHints', gridData);\n  }\n  _setGridDataHints(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridDataHints', GridData.ensure(gridData));\n  }\n  _renderGridDataHints() {\n    this.parent.invalidateLogicalGrid();\n  }\n  _setGridData(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridData', GridData.ensure(gridData));\n  }\n  _renderGridData() {\n    if (this.rendered) {\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        // may be null if $container is detached\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n  setMenus(menus) {\n    this.setProperty('menus', menus);\n  }\n  _setMenus(menus) {\n    menus = arrays.ensure(menus);\n    this.menus.forEach(function (menu) {\n      menu.off('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n    this.updateKeyStrokes(menus, this.menus);\n    this._setProperty('menus', menus);\n    this.menus.forEach(function (menu) {\n      menu.on('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n  }\n  insertMenu(menuToInsert) {\n    this.insertMenus([menuToInsert]);\n  }\n  insertMenus(menusToInsert) {\n    menusToInsert = arrays.ensure(menusToInsert);\n    if (menusToInsert.length === 0) {\n      return;\n    }\n    this.setMenus(this.menus.concat(menusToInsert));\n  }\n  deleteMenu(menuToDelete) {\n    this.deleteMenus([menuToDelete]);\n  }\n  deleteMenus(menusToDelete) {\n    menusToDelete = arrays.ensure(menusToDelete);\n    if (menusToDelete.length === 0) {\n      return;\n    }\n    let menus = this.menus.slice();\n    arrays.removeAll(menus, menusToDelete);\n    this.setMenus(menus);\n  }\n  _onMenuPropertyChange(event) {\n    if (event.propertyName === 'visible' && this.rendered) {\n      this._updateMenus();\n    }\n  }\n  getContextMenuItems() {\n    let onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.currentMenuTypes.length) {\n      return menuUtil.filter(this.menus, this.currentMenuTypes, onlyVisible);\n    } else if (onlyVisible) {\n      return this.menus.filter(menu => menu.visible);\n    }\n    return this.menus;\n  }\n  _getMenusForStatus(status) {\n    return this.statusMenuMappings.filter(mapping => {\n      if (!mapping.menu || !mapping.menu.visible) {\n        return false;\n      }\n      // Show the menus which are mapped to the status code and severity (if set)\n      return (mapping.codes.length === 0 || mapping.codes.indexOf(status.code) > -1) && (mapping.severities.length === 0 || mapping.severities.indexOf(status.severity) > -1);\n    }).map(mapping => {\n      return mapping.menu;\n    });\n  }\n  _hasMenus() {\n    return !!(this.menus && this.getContextMenuItems().length > 0);\n  }\n  _updateMenus() {\n    this.$container.toggleClass('has-menus', this._hasMenus() && this.menusVisible);\n    this._updateFieldStatus();\n  }\n  _renderMenus() {\n    this._updateMenus();\n  }\n  _renderStatusMenuMappings() {\n    this._updateMenus();\n  }\n  setMenusVisible(menusVisible) {\n    this.setProperty('menusVisible', menusVisible);\n  }\n\n  /**\n   * override by TabItem\n   **/\n  _setMenusVisible(menusVisible) {\n    this._setProperty('menusVisible', menusVisible);\n  }\n  _renderMenusVisible() {\n    this._updateMenus();\n  }\n  setCurrentMenuTypes(currentMenuTypes) {\n    this.setProperty('currentMenuTypes', currentMenuTypes);\n  }\n  _renderCurrentMenuTypes() {\n    // If a tooltip is shown, update it with the new menus\n    this._updateFieldStatus();\n  }\n  _setKeyStrokes(keyStrokes) {\n    this.updateKeyStrokes(keyStrokes, this.keyStrokes);\n    this._setProperty('keyStrokes', keyStrokes);\n  }\n\n  /**\n   * May be overridden to explicitly provide a tooltip $parent\n   */\n  _$tooltipParent() {\n    // Will be determined by the tooltip itself\n    return undefined;\n  }\n  _hideStatusMessage() {\n    if (this.fieldStatus) {\n      this.fieldStatus.hideTooltip();\n    }\n  }\n  _renderPreventInitialFocus() {\n    this.$container.toggleClass('prevent-initial-focus', !!this.preventInitialFocus);\n  }\n\n  /**\n   * Sets the focus on this field. If the field is not rendered, the focus will be set as soon as it is rendered.\n   *\n   * @override\n   */\n  focus() {\n    if (!this.rendered) {\n      this.session.layoutValidator.schedulePostValidateFunction(this.focus.bind(this));\n      return false;\n    }\n    if (!this.enabledComputed) {\n      return false;\n    }\n    let focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      return this.session.focusManager.requestFocus(focusableElement);\n    }\n    return false;\n  }\n\n  /**\n   * This method returns the HtmlElement to be used as initial focus element or when {@link #focus()} is called.\n   * It can be overridden, in case the FormField needs to return something other than this.$field[0].\n   *\n   * @override\n   */\n  getFocusableElement() {\n    if (this.rendered && this.$field) {\n      return this.$field[0];\n    }\n    return null;\n  }\n  _onFieldFocus(event) {\n    this.setFocused(true);\n  }\n  _onFieldBlur() {\n    this.setFocused(false);\n  }\n\n  /**\n   * When calling this function, the same should happen as when clicking into the field. It is used when the label is clicked.<br>\n   * The most basic action is focusing the field but this may differ from field to field.\n   */\n  activate() {\n    if (!this.enabledComputed || !this.rendered) {\n      return;\n    }\n    // Explicitly don't use this.focus() because this.focus uses the focus manager which may be disabled (e.g. on mobile devices)\n    let focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      $.ensure(focusableElement).focus();\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$field;\n  }\n  getParentGroupBox() {\n    let parent = this.parent;\n    while (parent && !(parent instanceof GroupBox)) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n  getParentField() {\n    return this.parent;\n  }\n\n  /**\n   * Appends a LABEL element to this.$container and sets the this.$label property.\n   */\n  addLabel() {\n    this.$label = this.$container.appendElement('<label>');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n\n    // Setting the focus programmatically does not work in a mousedown listener on mobile devices,\n    // that is why a click listener is used instead\n    this.$label.on('click', this._onLabelClick.bind(this));\n  }\n  _onLabelClick(event) {\n    if (!strings.hasText(this.label)) {\n      // Clicking on \"invisible\" labels should not have any effect since it is confusing\n      return;\n    }\n    this.activate();\n  }\n  _removeLabel() {\n    if (!this.$label) {\n      return;\n    }\n    tooltips.uninstall(this.$label);\n    this.$label.remove();\n    this.$label = null;\n  }\n\n  /**\n   * Links the given element with the label by setting aria-labelledby.<br>\n   * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n   */\n  _linkWithLabel($element) {\n    if (!this.$label || !$element) {\n      return;\n    }\n    fields.linkElementWithLabel($element, this.$label);\n  }\n  _removeIcon() {\n    if (!this.$icon) {\n      return;\n    }\n    this.$icon.remove();\n    this.$icon = null;\n  }\n\n  /**\n   * Appends the given field to the this.$container and sets the property this.$field.\n   * The $field is used as $fieldContainer as long as you don't explicitly call addFieldContainer before calling addField.\n   */\n  addField($field) {\n    if (!this.$fieldContainer) {\n      this.addFieldContainer($field);\n    }\n    this.$field = $field;\n    this._linkWithLabel($field);\n    this.$field.on('blur', this._onFieldBlur.bind(this)).on('focus', this._onFieldFocus.bind(this));\n  }\n\n  /**\n   * Call this method before addField if you'd like to have a different field container than $field.\n   */\n  addFieldContainer($fieldContainer) {\n    this.$fieldContainer = $fieldContainer.addClass('field');\n\n    // Only append if not already appended or it is not the last element so that append would move it to the end\n    // This can be important for some widgets, e.g. iframe which would cancel and restart the request on every dom insertion\n    if (this.$container.has($fieldContainer).length === 0 || $fieldContainer.next().length > 0) {\n      $fieldContainer.appendTo(this.$container);\n    }\n  }\n\n  /**\n   * Removes this.$field and this.$fieldContainer and sets the properties to null.\n   */\n  _removeField() {\n    if (this.$field) {\n      this.$field.remove();\n      this.$field = null;\n    }\n    if (this.$fieldContainer) {\n      this.$fieldContainer.remove();\n      this.$fieldContainer = null;\n    }\n  }\n\n  /**\n   * Appends a SPAN element for form-field status to this.$container and sets the this.$status property.\n   */\n  addStatus() {\n    if (this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus = scout.create('FieldStatus', {\n      parent: this,\n      position: this.statusPosition,\n      // This will be done by _updateFieldStatus again, but doing it here prevents unnecessary layout invalidations later on\n      visible: this._computeStatusVisible()\n    });\n    this.fieldStatus.render();\n    this.$status = this.fieldStatus.$container;\n    this._updateFieldStatus();\n  }\n  _removeStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus.destroy();\n    this.$status = null;\n    this.fieldStatus = null;\n  }\n\n  /**\n   * Appends a SPAN element to this.$container and sets the this.$pseudoStatus property.\n   * The purpose of a pseudo status is to consume the space an ordinary status would.\n   * This makes it possible to make components without a status as width as components with a status.\n   */\n  addPseudoStatus() {\n    this.$pseudoStatus = this.$container.appendSpan('status');\n  }\n  addMandatoryIndicator() {\n    this.$mandatory = this.$container.appendSpan('mandatory-indicator');\n  }\n  removeMandatoryIndicator() {\n    if (!this.$mandatory) {\n      return;\n    }\n    this.$mandatory.remove();\n    this.$mandatory = null;\n  }\n\n  /**\n   * Adds a SPAN element with class 'icon' the the given optional $parent.\n   * When $parent is not set, the element is added to this.$container.\n   * @param $parent (optional)\n   */\n  addIcon($parent) {\n    if (!$parent) {\n      $parent = this.$container;\n    }\n    this.$icon = fields.appendIcon($parent).on('mousedown', this._onIconMouseDown.bind(this));\n  }\n  _onIconMouseDown(event) {\n    if (!this.enabledComputed) {\n      return;\n    }\n    this.$field.focus();\n  }\n\n  /**\n   * Appends a DIV element as form-field container to $parent and sets the this.$container property.\n   * Applies FormFieldLayout to this.$container (if container does not define another layout).\n   * Sets this.htmlComp to the HtmlComponent created for this.$container.\n   *\n   * @param $parent to which container is appended\n   * @param cssClass cssClass to add to the new container DIV\n   * @param layout when layout is undefined, this#_createLayout() is called\n   *\n   */\n  addContainer($parent, cssClass, layout) {\n    this.$container = $parent.appendDiv('form-field');\n    if (cssClass) {\n      this.$container.addClass(cssClass);\n    }\n    let htmlComp = HtmlComponent.install(this.$container, this.session);\n    htmlComp.setLayout(layout || this._createLayout());\n    this.htmlComp = htmlComp;\n  }\n\n  /**\n   * @return {FormFieldLayout|AbstractLayout} the default layout FormFieldLayout. Override this function if your field needs another layout.\n   */\n  _createLayout() {\n    return new FormFieldLayout(this);\n  }\n\n  /**\n   * Updates the \"inner alignment\" of a field. Usually, the GridData hints only have influence on the\n   * LogicalGridLayout. However, the properties \"horizontalAlignment\" and \"verticalAlignment\" are\n   * sometimes used differently. Instead of controlling the field alignment in case fillHorizontal/\n   * fillVertical is false, the developer expects the _contents_ of the field to be aligned correspondingly\n   * inside the field. Technically, this is not correct, but is supported for legacy and convenience\n   * reasons for some of the Scout fields. Those who support the behavior may override _renderGridData()\n   * and call this method. Some CSS classes are then added to the field.\n   *\n   * opts:\n   *   useHorizontalAlignment:\n   *     When this option is true, \"halign-\" classes are added according to gridData.horizontalAlignment.\n   *   useVerticalAlignment:\n   *     When this option is true, \"valign-\" classes are added according to gridData.verticalAlignment.\n   *   $fieldContainer:\n   *     Specifies the div where the classes should be added. If omitted, this.$fieldContainer is used.\n   */\n  updateInnerAlignment(opts) {\n    opts = opts || {};\n    let $fieldContainer = opts.$fieldContainer || this.$fieldContainer;\n    this._updateElementInnerAlignment(opts, $fieldContainer);\n    if ($fieldContainer !== this.$container) {\n      // also set the styles to the container\n      this._updateElementInnerAlignment(opts, this.$container);\n    }\n  }\n  _updateElementInnerAlignment(opts, $field) {\n    opts = opts || {};\n    let useHorizontalAlignment = scout.nvl(opts.useHorizontalAlignment, true);\n    let useVerticalAlignment = scout.nvl(opts.useVerticalAlignment, true);\n    if (!$field) {\n      return;\n    }\n    $field.removeClass('has-inner-alignment halign-left halign-center halign-right valign-top valign-middle valign-bottom');\n    if (useHorizontalAlignment || useVerticalAlignment) {\n      // Set horizontal and vertical alignment (from gridData)\n      $field.addClass('has-inner-alignment');\n      let gridData = this.gridData;\n      if (this.parent.logicalGrid) {\n        // If the logical grid is calculated by JS, use the hints instead of the calculated grid data\n        gridData = this.gridDataHints;\n      }\n      if (useHorizontalAlignment) {\n        let hAlign = gridData.horizontalAlignment;\n        $field.addClass(hAlign < 0 ? 'halign-left' : hAlign > 0 ? 'halign-right' : 'halign-center');\n      }\n      if (useVerticalAlignment) {\n        let vAlign = gridData.verticalAlignment;\n        $field.addClass(vAlign < 0 ? 'valign-top' : vAlign > 0 ? 'valign-bottom' : 'valign-middle');\n      }\n      // Alignment might have affected inner elements (e.g. clear icon)\n      this.invalidateLayout();\n    }\n  }\n  addCellEditorFieldCssClasses($field, opts) {\n    $field.addClass('cell-editor-field').addClass(Device.get().cssClassForEdge());\n    if (opts.cssClass) {\n      $field.addClass(opts.cssClass);\n    }\n  }\n  prepareForCellEdit(opts) {\n    opts = opts || {};\n\n    // remove mandatory and status indicators (popup should 'fill' the whole cell)\n    if (this.$mandatory) {\n      this.removeMandatoryIndicator();\n    }\n    if (this.$status) {\n      this.$status.remove();\n      this.$status = null;\n    }\n    if (this.$container) {\n      this.$container.addClass('cell-editor-form-field');\n    }\n    if (this.$field) {\n      this.addCellEditorFieldCssClasses(this.$field, opts);\n    }\n  }\n  setDropType(dropType) {\n    this.setProperty('dropType', dropType);\n  }\n  _renderDropType() {\n    this._installOrUninstallDragAndDropHandler();\n  }\n  setDropMaximumSize(dropMaximumSize) {\n    this.setProperty('dropMaximumSize', dropMaximumSize);\n  }\n  _installOrUninstallDragAndDropHandler() {\n    dragAndDrop.installOrUninstallDragAndDropHandler(this._getDragAndDropHandlerOptions());\n  }\n\n  /**\n   *\n   * @return {DragAndDropOptions}\n   * @private\n   */\n  _getDragAndDropHandlerOptions() {\n    return {\n      target: this,\n      doInstall: () => this.dropType && this.enabledComputed,\n      container: () => this.$field || this.$container,\n      dropType: () => this.dropType,\n      onDrop: event => this.trigger('drop', event)\n    };\n  }\n  _updateDisabledCopyOverlay() {\n    if (this.disabledCopyOverlay && !Device.get().supportsCopyFromDisabledInputFields()) {\n      if (this.enabledComputed) {\n        this._removeDisabledCopyOverlay();\n      } else {\n        this._renderDisabledCopyOverlay();\n        this.revalidateLayout(); // because bounds of overlay is set in FormFieldLayout\n      }\n    }\n  }\n\n  _renderDisabledCopyOverlay() {\n    if (!this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay = this.$container.appendDiv('disabled-overlay').on('contextmenu', this._createCopyContextMenu.bind(this));\n    }\n  }\n  _removeDisabledCopyOverlay() {\n    if (this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay.remove();\n      this.$disabledCopyOverlay = null;\n    }\n  }\n  _createCopyContextMenu(event) {\n    if (!this.visible || strings.empty(this.displayText)) {\n      return;\n    }\n    let menu = scout.create('Menu', {\n      parent: this,\n      text: this.session.text('ui.Copy'),\n      inheritAccessibility: false\n    });\n    menu.on('action', event => {\n      this.exportToClipboard();\n    });\n    let popup = scout.create('ContextMenuPopup', {\n      parent: this,\n      menuItems: [menu],\n      cloneMenuItems: false,\n      location: {\n        x: event.pageX,\n        y: event.pageY\n      }\n    });\n    popup.open();\n  }\n\n  /**\n   * Visits this field and all child form fields in pre-order (top-down).\n   *\n   * @param {function(FormField):string|TreeVisitResult|null} visitor\n   * @returns {string} the TreeVisitResult, or nothing to continue.\n   */\n  visitFields(visitor) {\n    return visitor(this);\n  }\n\n  /**\n   * Visit all parent form fields. The visit stops if the parent is no form field anymore (e.g. a form, desktop or session).\n   *\n   * @param {function(FormField)} visitor\n   */\n  visitParentFields(visitor) {\n    let curParent = this.parent;\n    while (curParent instanceof FormField) {\n      visitor(curParent);\n      curParent = curParent.parent;\n    }\n  }\n  markAsSaved() {\n    this.setProperty('touched', false);\n    this.updateRequiresSave();\n  }\n  touch() {\n    this.setProperty('touched', true);\n    this.updateRequiresSave();\n  }\n\n  /**\n   * Updates the requiresSave property by checking if the field is touched or if computeRequiresSave() returns true.\n   */\n  updateRequiresSave() {\n    if (!this.initialized) {\n      return;\n    }\n    this.requiresSave = this.touched || this.computeRequiresSave();\n  }\n\n  /**\n   * Override this function in order to return whether or not this field requires to be saved.\n   * The default impl. returns false.\n   *\n   * @returns {boolean}\n   */\n  computeRequiresSave() {\n    return false;\n  }\n\n  /**\n   * @typedef ValidationResult\n   * @property {boolean} valid\n   * @property {boolean} validByErrorStatus\n   * @property {boolean} validByMandatory\n   * @property {FormField} field\n   * @property {String} label\n   * @property {function} reveal\n   */\n\n  /**\n   * @returns {ValidationResult}\n   */\n  getValidationResult() {\n    let validByErrorStatus = !this._errorStatus();\n    let validByMandatory = !this.mandatory || !this.empty;\n    let valid = validByErrorStatus && validByMandatory;\n    // noinspection JSValidateTypes\n    return {\n      valid: valid,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory,\n      field: this,\n      label: this.label,\n      reveal: () => {\n        fields.selectAllParentTabsOf(this);\n        this.focus();\n      }\n    };\n  }\n  _updateEmpty() {\n    // NOP\n  }\n  requestInput() {\n    if (this.enabledComputed && this.rendered) {\n      this.focus();\n    }\n  }\n  clone(model, options) {\n    let clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'menus', options);\n    return clone;\n  }\n  exportToClipboard() {\n    if (!this.displayText) {\n      return;\n    }\n    let event = new Event({\n      text: this.displayText\n    });\n    this.trigger('clipboardExport', event);\n    if (!event.defaultPrevented) {\n      this._exportToClipboard(event.text);\n    }\n  }\n  _exportToClipboard(text) {\n    clipboard.copyText({\n      parent: this,\n      text: text\n    });\n  }\n}\n_defineProperty(FormField, \"FieldStyle\", {\n  CLASSIC: 'classic',\n  ALTERNATIVE: 'alternative'\n});\n_defineProperty(FormField, \"SuppressStatus\", {\n  /**\n   * Suppress status on icon and field (CSS class).\n   */\n  ALL: 'all',\n  /**\n   * Suppress status on icon, but still show status on field (CSS class).\n   */\n  ICON: 'icon',\n  /**\n   * Suppress status on field (CSS class), but still show status as icon.\n   */\n  FIELD: 'field'\n});\n_defineProperty(FormField, \"DEFAULT_FIELD_STYLE\", FormField.FieldStyle.ALTERNATIVE);\n_defineProperty(FormField, \"StatusPosition\", {\n  DEFAULT: 'default',\n  TOP: 'top'\n});\n_defineProperty(FormField, \"LabelPosition\", {\n  DEFAULT: 0,\n  LEFT: 1,\n  ON_FIELD: 2,\n  RIGHT: 3,\n  TOP: 4,\n  BOTTOM: 5\n});\n_defineProperty(FormField, \"TooltipAnchor\", {\n  DEFAULT: 'default',\n  ON_FIELD: 'onField'\n});\n_defineProperty(FormField, \"LabelWidth\", {\n  DEFAULT: 0,\n  UI: -1\n});\n_defineProperty(FormField, \"FULL_WIDTH\", 0);\n_defineProperty(FormField, \"Mode\", {\n  DEFAULT: 'default',\n  CELLEDITOR: 'celleditor'\n});\n_defineProperty(FormField, \"SEVERITY_CSS_CLASSES\", 'has-error has-warning has-info has-ok');","map":{"version":3,"names":["arrays","clipboard","Device","dragAndDrop","Event","fields","FormFieldLayout","GridData","GroupBox","HtmlComponent","KeyStrokeContext","LoadingSupport","menus","menuUtil","objects","scout","Status","strings","styles","tooltips","Widget","$","FormField","constructor","dropType","dropMaximumSize","DEFAULT_DROP_MAXIMUM_SIZE","empty","errorStatus","fieldStyle","DEFAULT_FIELD_STYLE","gridData","gridDataHints","mode","Mode","DEFAULT","keyStrokes","label","labelVisible","labelPosition","LabelPosition","labelWidthInPixel","labelUseUiWidth","labelHtmlEnabled","mandatory","statusMenuMappings","menusVisible","currentMenuTypes","preventInitialFocus","requiresSave","statusPosition","StatusPosition","statusVisible","suppressStatus","touched","tooltipText","tooltipAnchor","TooltipAnchor","onFieldTooltipOptionsCreator","$label","$field","$fieldContainer","$icon","$status","disabledCopyOverlay","$disabledCopyOverlay","_addWidgetProperties","_addCloneProperties","_menuPropertyChangeHandler","_onMenuPropertyChange","bind","_createKeyStrokeContext","_createLoadingSupport","widget","_init","model","resolveConsts","property","constType","resolveTextKeys","_setKeyStrokes","_setMenus","_setErrorStatus","_setGridDataHints","_setGridData","_updateEmpty","_initProperty","propertyName","value","_initGridDataHints","isPlainObject","extend","_render","Error","_renderProperties","_renderMandatory","_renderTooltipText","_renderErrorStatus","_renderMenus","_renderLabel","_renderLabelVisible","_renderStatusVisible","_renderStatusPosition","_renderFont","_renderForegroundColor","_renderBackgroundColor","_renderLabelFont","_renderLabelForegroundColor","_renderLabelBackgroundColor","_renderGridData","_renderPreventInitialFocus","_renderFieldStyle","_remove","_removeField","_removeStatus","_removeLabel","_removeIcon","removeMandatoryIndicator","_removeDisabledCopyOverlay","uninstallDragAndDropHandler","setFieldStyle","setProperty","_renderFieldStyleInternal","$container","rendered","htmlCompParent","htmlComp","getParent","invalidateLayoutTree","$element","toggleClass","FieldStyle","ALTERNATIVE","setMandatory","_errorStatus","setErrorStatus","ensure","_setProperty","addErrorStatus","status","ensureChildren","ok","addStatus","containsStatus","statusType","setSuppressStatus","_renderSuppressStatus","_isSuppressStatusIcon","isOneOf","SuppressStatus","ALL","ICON","_isSuppressStatusField","FIELD","removeErrorStatus","removeErrorStatusByPredicate","predicate","containsStatusByPredicate","newStatus","clone","removeAllStatusByPredicate","hasChildren","clearErrorStatus","hasStatus","statusClass","cssClass","_updateErrorStatusClasses","_updateFieldStatus","_updateErrorStatusClassesOnElement","removeClass","SEVERITY_CSS_CLASSES","addClass","setTooltipText","_updateTooltip","setTooltipAnchor","_renderTooltipAnchor","hasTooltipText","hasStatusTooltip","hasOnFieldTooltip","creatorFunc","_createOnFieldTooltipOptions","install","call","uninstall","hasText","ON_FIELD","setOnFieldTooltipOptionsCreator","parent","text","arrowPosition","_renderVisible","setLabel","_renderPlaceholder","_removePlaceholder","contentOrNbsp","TOP","LabelWidth","UI","_renderEmptyLabel","html","nvl","placeholder","setLabelVisible","visible","_renderChildVisible","setLabelWidthInPixel","_renderLabelWidthInPixel","setLabelUseUiWidth","_renderLabelUseUiWidth","setStatusVisible","setStatusPosition","_tooltip","fieldStatus","tooltip","_computeStatusVisible","autoRemove","setPosition","setVisible","CELLEDITOR","isError","_getMenusForStatus","create","message","severity","Severity","INFO","getContextMenuItems","update","_isInitialShowStatus","hasTooltip","_hasMenus","$child","isVisible","setLabelPosition","_renderLabelPosition","position","setLabelHtmlEnabled","_renderLabelHtmlEnabled","_renderEnabled","setEnabled","enabledComputed","_updateDisabledCopyOverlay","_installOrUninstallDragAndDropHandler","_renderDisabledStyle","_renderDisabledStyleInternal","$mandatory","setFont","font","legacyFont","setForegroundColor","foregroundColor","legacyForegroundColor","setBackgroundColor","backgroundColor","legacyBackgroundColor","setLabelFont","labelFont","setLabelForegroundColor","labelForegroundColor","setLabelBackgroundColor","labelBackgroundColor","setGridDataHints","_renderGridDataHints","invalidateLogicalGrid","setMenus","forEach","menu","off","updateKeyStrokes","on","insertMenu","menuToInsert","insertMenus","menusToInsert","length","concat","deleteMenu","menuToDelete","deleteMenus","menusToDelete","slice","removeAll","event","_updateMenus","onlyVisible","filter","mapping","codes","indexOf","code","severities","map","_renderStatusMenuMappings","setMenusVisible","_setMenusVisible","_renderMenusVisible","setCurrentMenuTypes","_renderCurrentMenuTypes","_$tooltipParent","undefined","_hideStatusMessage","hideTooltip","focus","session","layoutValidator","schedulePostValidateFunction","focusableElement","getFocusableElement","focusManager","requestFocus","_onFieldFocus","setFocused","_onFieldBlur","activate","get$Scrollable","getParentGroupBox","getParentField","addLabel","appendElement","installForEllipsis","_onLabelClick","remove","_linkWithLabel","linkElementWithLabel","addField","addFieldContainer","has","next","appendTo","render","destroy","addPseudoStatus","$pseudoStatus","appendSpan","addMandatoryIndicator","addIcon","$parent","appendIcon","_onIconMouseDown","addContainer","layout","appendDiv","setLayout","_createLayout","updateInnerAlignment","opts","_updateElementInnerAlignment","useHorizontalAlignment","useVerticalAlignment","logicalGrid","hAlign","horizontalAlignment","vAlign","verticalAlignment","invalidateLayout","addCellEditorFieldCssClasses","get","cssClassForEdge","prepareForCellEdit","setDropType","_renderDropType","setDropMaximumSize","installOrUninstallDragAndDropHandler","_getDragAndDropHandlerOptions","target","doInstall","container","onDrop","trigger","supportsCopyFromDisabledInputFields","_renderDisabledCopyOverlay","revalidateLayout","_createCopyContextMenu","displayText","inheritAccessibility","exportToClipboard","popup","menuItems","cloneMenuItems","location","x","pageX","y","pageY","open","visitFields","visitor","visitParentFields","curParent","markAsSaved","updateRequiresSave","touch","initialized","computeRequiresSave","getValidationResult","validByErrorStatus","validByMandatory","valid","field","reveal","selectAllParentTabsOf","requestInput","options","_deepCloneProperties","defaultPrevented","_exportToClipboard","copyText","CLASSIC","LEFT","RIGHT","BOTTOM"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/FormField.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {\n  arrays,\n  clipboard,\n  Device,\n  dragAndDrop,\n  Event,\n  fields,\n  FormFieldLayout,\n  GridData,\n  GroupBox,\n  HtmlComponent,\n  KeyStrokeContext,\n  LoadingSupport,\n  menus as menuUtil,\n  objects,\n  scout,\n  Status,\n  strings,\n  styles,\n  tooltips,\n  Widget\n} from '../../index';\nimport $ from 'jquery';\n\n/**\n * Base class for all form-fields.\n */\nexport default class FormField extends Widget {\n  constructor() {\n    super();\n\n    this.dropType = 0;\n    this.dropMaximumSize = dragAndDrop.DEFAULT_DROP_MAXIMUM_SIZE;\n    this.empty = true;\n    /**\n     * @type {Status}\n     */\n    this.errorStatus = null;\n    this.fieldStyle = FormField.DEFAULT_FIELD_STYLE;\n    this.gridData = null;\n    this.gridDataHints = new GridData();\n    this.mode = FormField.Mode.DEFAULT;\n    this.keyStrokes = [];\n    this.label = null;\n    this.labelVisible = true;\n    this.labelPosition = FormField.LabelPosition.DEFAULT;\n    this.labelWidthInPixel = 0;\n    this.labelUseUiWidth = false;\n    this.labelHtmlEnabled = false;\n    this.mandatory = false;\n    this.statusMenuMappings = [];\n    this.menus = [];\n    this.menusVisible = true;\n    this.currentMenuTypes = [];\n    this.preventInitialFocus = false;\n    this.requiresSave = false;\n    this.statusPosition = FormField.StatusPosition.DEFAULT;\n    this.statusVisible = true;\n    this.suppressStatus = false;\n    this.touched = false;\n    this.tooltipText = null;\n    this.tooltipAnchor = FormField.TooltipAnchor.DEFAULT;\n    this.onFieldTooltipOptionsCreator = null;\n    this.suppressStatus = null;\n\n    this.$label = null;\n    /**\n     * Note the difference between $field and $fieldContainer:\n     * - $field points to the input-field (typically a browser-text field)\n     * - $fieldContainer could point to the same input-field or when the field is a composite,\n     *   to the parent DIV of that composite. For instance: the multi-line-smartfield is a\n     *   composite with a input-field and a DIV showing the additional lines. In that case $field\n     *   points to the input-field and $fieldContainer to the parent DIV of the input-field.\n     *   This property should be used primarily for layout-functionality.\n     */\n    this.$field = null;\n    this.$fieldContainer = null;\n    this.$icon = null;\n    /**\n     * The status is used for error-status, tooltip-icon and menus.\n     */\n    this.$status = null;\n\n    /**\n     * Some browsers don't support copying text from disabled input fields. If such a browser is detected\n     * and this flag is true (default is false), an overlay DIV is rendered over disabled fields which\n     * provides a custom copy context menu that opens the ClipboardForm.\n     */\n    this.disabledCopyOverlay = false;\n    this.$disabledCopyOverlay = null;\n\n    this._addWidgetProperties(['keyStrokes', 'menus', 'statusMenuMappings']);\n    this._addCloneProperties(['dropType', 'dropMaximumSize', 'errorStatus', 'fieldStyle', 'gridDataHints', 'gridData', 'label', 'labelVisible', 'labelPosition',\n      'labelWidthInPixel', 'labelUseUiWidth', 'mandatory', 'mode', 'preventInitialFocus', 'requiresSave', 'touched', 'statusVisible', 'statusPosition', 'statusMenuMappings',\n      'tooltipText', 'tooltipAnchor']);\n\n    this._menuPropertyChangeHandler = this._onMenuPropertyChange.bind(this);\n  }\n\n  static FieldStyle = {\n    CLASSIC: 'classic',\n    ALTERNATIVE: 'alternative'\n  };\n\n  static SuppressStatus = {\n    /**\n     * Suppress status on icon and field (CSS class).\n     */\n    ALL: 'all',\n    /**\n     * Suppress status on icon, but still show status on field (CSS class).\n     */\n    ICON: 'icon',\n    /**\n     * Suppress status on field (CSS class), but still show status as icon.\n     */\n    FIELD: 'field'\n  };\n\n  /** Global variable to make it easier to adjust the default field style for all fields */\n  static DEFAULT_FIELD_STYLE = FormField.FieldStyle.ALTERNATIVE;\n\n  static StatusPosition = {\n    DEFAULT: 'default',\n    TOP: 'top'\n  };\n\n  static LabelPosition = {\n    DEFAULT: 0,\n    LEFT: 1,\n    ON_FIELD: 2,\n    RIGHT: 3,\n    TOP: 4,\n    BOTTOM: 5\n  };\n\n  static TooltipAnchor = {\n    DEFAULT: 'default',\n    ON_FIELD: 'onField'\n  };\n\n  static LabelWidth = {\n    DEFAULT: 0,\n    UI: -1\n  };\n\n  // see org.eclipse.scout.rt.client.ui.form.fields.IFormField.FULL_WIDTH\n  static FULL_WIDTH = 0;\n\n  static Mode = {\n    DEFAULT: 'default',\n    CELLEDITOR: 'celleditor'\n  };\n\n  static SEVERITY_CSS_CLASSES = 'has-error has-warning has-info has-ok';\n\n  /**\n   * @override\n   * @returns {KeyStrokeContext}\n   */\n  _createKeyStrokeContext() {\n    return new KeyStrokeContext();\n  }\n\n  /**\n   * @override\n   */\n  _createLoadingSupport() {\n    return new LoadingSupport({\n      widget: this\n    });\n  }\n\n  _init(model) {\n    super._init(model);\n    this.resolveConsts([{\n      property: 'labelPosition',\n      constType: FormField.LabelPosition\n    }]);\n    this.resolveTextKeys(['label', 'tooltipText']);\n    this._setKeyStrokes(this.keyStrokes);\n    this._setMenus(this.menus);\n    this._setErrorStatus(this.errorStatus);\n    this._setGridDataHints(this.gridDataHints);\n    this._setGridData(this.gridData);\n    this._updateEmpty();\n  }\n\n  _initProperty(propertyName, value) {\n    if ('gridDataHints' === propertyName) {\n      this._initGridDataHints(value);\n    } else {\n      super._initProperty(propertyName, value);\n    }\n  }\n\n  /**\n   * This function <strong>extends</strong> the default grid data hints of the form field.\n   * The default values for grid data hints are set in the constructor of the FormField and its subclasses.\n   * When the given gridDataHints is a plain object, we extend our default values. When gridDataHints is\n   * already instanceof GridData we overwrite default values completely.\n   * @param gridDataHints\n   * @private\n   */\n  _initGridDataHints(gridDataHints) {\n    if (gridDataHints instanceof GridData) {\n      this.gridDataHints = gridDataHints;\n    } else if (objects.isPlainObject(gridDataHints)) {\n      $.extend(this.gridDataHints, gridDataHints);\n    } else {\n      this.gridDataHints = gridDataHints;\n    }\n  }\n\n  /**\n   * All sub-classes of FormField must implement a _render method. The default implementation\n   * will throw an Error when _render is called. The _render method should call the various add*\n   * methods provided by the FormField class. A possible _render implementation could look like this.\n   *\n   * <pre>\n   * this.addContainer(this.$parent, 'form-field');\n   * this.addLabel();\n   * this.addField(this.$parent.makeDiv('foo', 'bar'));\n   * this.addMandatoryIndicator();\n   * this.addStatus();\n   * </pre>\n   */\n  _render() {\n    throw new Error('sub-classes of FormField must implement a _render method');\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderMandatory();\n    this._renderTooltipText();\n    this._renderErrorStatus();\n    this._renderMenus();\n    this._renderLabel();\n    this._renderLabelVisible();\n    this._renderStatusVisible();\n    this._renderStatusPosition();\n    this._renderFont();\n    this._renderForegroundColor();\n    this._renderBackgroundColor();\n    this._renderLabelFont();\n    this._renderLabelForegroundColor();\n    this._renderLabelBackgroundColor();\n    this._renderGridData();\n    this._renderPreventInitialFocus();\n    this._renderFieldStyle();\n  }\n\n  _remove() {\n    super._remove();\n    this._removeField();\n    this._removeStatus();\n    this._removeLabel();\n    this._removeIcon();\n    this.removeMandatoryIndicator();\n    this._removeDisabledCopyOverlay();\n    dragAndDrop.uninstallDragAndDropHandler(this);\n  }\n\n  setFieldStyle(fieldStyle) {\n    this.setProperty('fieldStyle', fieldStyle);\n  }\n\n  _renderFieldStyle() {\n    this._renderFieldStyleInternal(this.$container);\n    this._renderFieldStyleInternal(this.$fieldContainer);\n    this._renderFieldStyleInternal(this.$field);\n    if (this.rendered) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n\n  _renderFieldStyleInternal($element) {\n    if (!$element) {\n      return;\n    }\n    $element.toggleClass('alternative', this.fieldStyle === FormField.FieldStyle.ALTERNATIVE);\n  }\n\n  setMandatory(mandatory) {\n    this.setProperty('mandatory', mandatory);\n  }\n\n  _renderMandatory() {\n    this.$container.toggleClass('mandatory', this.mandatory);\n  }\n\n  /**\n   * Override this function to return another error status property.\n   * The default implementation returns the property 'errorStatus'.\n   *\n   * @return {Status}\n   */\n  _errorStatus() {\n    return this.errorStatus;\n  }\n\n  setErrorStatus(errorStatus) {\n    this.setProperty('errorStatus', errorStatus);\n  }\n\n  _setErrorStatus(errorStatus) {\n    errorStatus = Status.ensure(errorStatus);\n    this._setProperty('errorStatus', errorStatus);\n  }\n\n  /**\n   * Adds the given (functional) error status to the list of error status. Prefer this function over #setErrorStatus\n   * when you don't want to mess with the internal error states of the field (parsing, validation).\n   *\n   * @param errorStatus\n   */\n  addErrorStatus(errorStatus) {\n    if (!(errorStatus instanceof Status)) {\n      throw new Error('errorStatus is not a Status');\n    }\n    let status = this._errorStatus();\n    if (status) {\n      status = status.ensureChildren(); // new instance is required for property change\n    } else {\n      status = Status.ok('Root');\n    }\n    status.addStatus(errorStatus);\n    this.setErrorStatus(status);\n  }\n\n  /**\n   * Whether or not the error status is or has the given status type.\n   * @param statusType\n   * @returns {boolean}\n   */\n  containsStatus(statusType) {\n    if (!this.errorStatus) {\n      return false;\n    }\n    return this.errorStatus.containsStatus(statusType);\n  }\n\n  setSuppressStatus(suppressStatus) {\n    this.setProperty('suppressStatus', suppressStatus);\n  }\n\n  _renderSuppressStatus() {\n    this._renderErrorStatus();\n  }\n\n  /**\n   * @returns {boolean} Whether or not error status icon is suppressed\n   */\n  _isSuppressStatusIcon() {\n    return scout.isOneOf(this.suppressStatus, FormField.SuppressStatus.ALL, FormField.SuppressStatus.ICON);\n  }\n\n  /**\n   * @returns {boolean} Whether or not error status CSS class is suppressed on field\n   */\n  _isSuppressStatusField() {\n    return scout.isOneOf(this.suppressStatus, FormField.SuppressStatus.ALL, FormField.SuppressStatus.FIELD);\n  }\n\n  /**\n   * Removes all status (incl. children) with the given type.\n   * @param {object} statusType\n   */\n  removeErrorStatus(statusType) {\n    this.removeErrorStatusByPredicate(status => {\n      return status instanceof statusType;\n    });\n  }\n\n  removeErrorStatusByPredicate(predicate) {\n    let status = this._errorStatus();\n    if (!status) {\n      return;\n    }\n    if (status.containsStatusByPredicate(predicate)) {\n      let newStatus = status.clone();\n      newStatus.removeAllStatusByPredicate(predicate);\n      // If no other status remains -> clear error status\n      if (newStatus.hasChildren()) {\n        this.setErrorStatus(newStatus);\n      } else {\n        this.clearErrorStatus();\n      }\n    }\n  }\n\n  clearErrorStatus() {\n    this.setErrorStatus(null);\n  }\n\n  _renderErrorStatus() {\n    let status = this._errorStatus(),\n      hasStatus = !!status,\n      statusClass = (hasStatus && !this._isSuppressStatusField()) ? 'has-' + status.cssClass() : '';\n\n    this._updateErrorStatusClasses(statusClass, hasStatus);\n    this._updateFieldStatus();\n  }\n\n  _updateErrorStatusClasses(statusClass, hasStatus) {\n    this._updateErrorStatusClassesOnElement(this.$container, statusClass, hasStatus);\n    this._updateErrorStatusClassesOnElement(this.$field, statusClass, hasStatus);\n  }\n\n  _updateErrorStatusClassesOnElement($element, statusClass, hasStatus) {\n    if (!$element) {\n      return;\n    }\n    $element\n      .removeClass(FormField.SEVERITY_CSS_CLASSES)\n      .addClass(statusClass, hasStatus);\n  }\n\n  setTooltipText(tooltipText) {\n    this.setProperty('tooltipText', tooltipText);\n  }\n\n  _renderTooltipText() {\n    this._updateTooltip();\n  }\n\n  setTooltipAnchor(tooltipAnchor) {\n    this.setProperty('tooltipAnchor', tooltipAnchor);\n  }\n\n  _renderTooltipAnchor() {\n    this._updateTooltip();\n  }\n\n  _updateTooltip() {\n    let hasTooltipText = this.hasStatusTooltip();\n    this.$container.toggleClass('has-tooltip', hasTooltipText);\n    if (this.$field) {\n      this.$field.toggleClass('has-tooltip', hasTooltipText);\n    }\n    this._updateFieldStatus();\n\n    if (this.$fieldContainer) {\n      if (this.hasOnFieldTooltip()) {\n        let creatorFunc = this.onFieldTooltipOptionsCreator || this._createOnFieldTooltipOptions;\n        tooltips.install(this.$fieldContainer, creatorFunc.call(this));\n      } else {\n        tooltips.uninstall(this.$fieldContainer);\n      }\n    }\n  }\n\n  hasStatusTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.DEFAULT &&\n      strings.hasText(this.tooltipText);\n  }\n\n  hasOnFieldTooltip() {\n    return this.tooltipAnchor === FormField.TooltipAnchor.ON_FIELD &&\n      strings.hasText(this.tooltipText);\n  }\n\n  setOnFieldTooltipOptionsCreator(onFieldTooltipOptionsCreator) {\n    this.onFieldTooltipOptionsCreator = onFieldTooltipOptionsCreator;\n  }\n\n  _createOnFieldTooltipOptions() {\n    return {\n      parent: this,\n      text: this.tooltipText,\n      arrowPosition: 50\n    };\n  }\n\n  /**\n   * @override\n   */\n  _renderVisible() {\n    super._renderVisible();\n    if (this.rendered) {\n      // Make sure error status is hidden / shown when visibility changes\n      this._renderErrorStatus();\n    }\n  }\n\n  setLabel(label) {\n    this.setProperty('label', label);\n  }\n\n  _renderLabel() {\n    let label = this.label;\n    if (this.labelPosition === FormField.LabelPosition.ON_FIELD) {\n      this._renderPlaceholder();\n      if (this.$label) {\n        this.$label.text('');\n      }\n    } else if (this.$label) {\n      this._removePlaceholder();\n      // Make sure an empty label has the same height as the other labels, especially important for top labels\n      this.$label\n        .contentOrNbsp(this.labelHtmlEnabled, label, 'empty')\n        .toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n\n      // Invalidate layout if label width depends on its content\n      if (this.labelUseUiWidth || this.labelWidthInPixel === FormField.LabelWidth.UI) {\n        this.invalidateLayoutTree();\n      }\n    }\n  }\n\n  /**\n   * Renders an empty label for button-like fields that don't have a regular label but which do want to support the 'labelVisible'\n   * property in order to provide some layout-flexibility. Makes sure the empty label has the same height as the other labels,\n   * which is especially important for top labels.\n   */\n  _renderEmptyLabel() {\n    this.$label\n      .html('&nbsp;')\n      .toggleClass('top', this.labelPosition === FormField.LabelPosition.TOP);\n  }\n\n  _renderPlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder(this.label);\n    }\n  }\n\n  /**\n   * @param $field (optional) argument is required by DateField.js, when not set this.$field is used\n   */\n  _removePlaceholder($field) {\n    $field = scout.nvl($field, this.$field);\n    if ($field) {\n      $field.placeholder('');\n    }\n  }\n\n  setLabelVisible(visible) {\n    this.setProperty('labelVisible', visible);\n  }\n\n  _renderLabelVisible() {\n    let visible = this.labelVisible;\n    this._renderChildVisible(this.$label, visible);\n    this.$container.toggleClass('label-hidden', !visible);\n    if (this.rendered && this.labelPosition === FormField.LabelPosition.TOP) {\n      // See _renderLabelPosition why it is necessary to invalidate parent as well.\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n\n  setLabelWidthInPixel(labelWidthInPixel) {\n    this.setProperty('labelWidthInPixel', labelWidthInPixel);\n  }\n\n  _renderLabelWidthInPixel() {\n    this.invalidateLayoutTree();\n  }\n\n  setLabelUseUiWidth(labelUseUiWidth) {\n    this.setProperty('labelUseUiWidth', labelUseUiWidth);\n  }\n\n  _renderLabelUseUiWidth() {\n    this.invalidateLayoutTree();\n  }\n\n  setStatusVisible(visible) {\n    this.setProperty('statusVisible', visible);\n  }\n\n  _renderStatusVisible() {\n    this._updateFieldStatus();\n  }\n\n  setStatusPosition(statusPosition) {\n    this.setProperty('statusPosition', statusPosition);\n  }\n\n  _renderStatusPosition(statusPosition) {\n    this._updateFieldStatus();\n  }\n\n  _tooltip() {\n    if (this.fieldStatus) {\n      return this.fieldStatus.tooltip;\n    }\n    return null;\n  }\n\n  _updateFieldStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    // compute status\n    let menus,\n      errorStatus = this._errorStatus(),\n      status = null,\n      statusVisible = this._computeStatusVisible(),\n      autoRemove = true;\n\n    this.fieldStatus.setPosition(this.statusPosition);\n    this.fieldStatus.setVisible(statusVisible);\n    if (!statusVisible) {\n      return;\n    }\n\n    if (errorStatus) {\n      // If the field is used as a cell editor in a editable table, then no validation errors should be shown.\n      // (parsing and validation will be handled by the cell/column itself)\n      if (this.mode === FormField.Mode.CELLEDITOR) {\n        return;\n      }\n      status = errorStatus;\n      autoRemove = !status.isError();\n      menus = this._getMenusForStatus(errorStatus);\n    } else if (this.hasStatusTooltip()) {\n      status = scout.create('Status', {\n        message: this.tooltipText,\n        severity: Status.Severity.INFO\n      });\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this.getContextMenuItems();\n    } else {\n      // If there are menus, show them in the tooltip. But only if there is a tooltipText, don't do it if there is an error status.\n      // Menus make most likely no sense if an error status is displayed\n      menus = this.getContextMenuItems();\n    }\n\n    this.fieldStatus.update(status, menus, autoRemove, this._isInitialShowStatus());\n  }\n\n  _isInitialShowStatus() {\n    return !!this._errorStatus();\n  }\n\n  /**\n   * Computes whether the $status should be visible based on statusVisible, errorStatus and tooltip.\n   * -> errorStatus and tooltip override statusVisible, so $status may be visible event though statusVisible is set to false\n   */\n  _computeStatusVisible() {\n    let status = this._errorStatus(),\n      statusVisible = this.statusVisible,\n      hasStatus = !!status,\n      hasTooltip = this.hasStatusTooltip();\n\n    return !this._isSuppressStatusIcon() && this.visible && (statusVisible || hasStatus || hasTooltip || (this._hasMenus() && this.menusVisible));\n  }\n\n  _renderChildVisible($child, visible) {\n    if (!$child) {\n      return;\n    }\n    if ($child.isVisible() !== visible) {\n      $child.setVisible(visible);\n      this.invalidateLayoutTree();\n      return true;\n    }\n  }\n\n  setLabelPosition(labelPosition) {\n    this.setProperty('labelPosition', labelPosition);\n  }\n\n  // Don't include in renderProperties, it is not necessary to execute it initially because the positioning is done by _renderLabel\n  _renderLabelPosition(position) {\n    this._renderLabel();\n    if (this.rendered) {\n      // Necessary to invalidate parent as well if parent uses the logical grid.\n      // LogicalGridData uses another row height depending of the label position\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) {\n        htmlCompParent.invalidateLayoutTree();\n      }\n      this.invalidateLayoutTree();\n    }\n  }\n\n  setLabelHtmlEnabled(labelHtmlEnabled) {\n    this.setProperty('labelHtmlEnabled', labelHtmlEnabled);\n  }\n\n  _renderLabelHtmlEnabled() {\n    // Render the label again when html enabled changes dynamically\n    this._renderLabel();\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    if (this.$field) {\n      this.$field.setEnabled(this.enabledComputed);\n    }\n    this._updateDisabledCopyOverlay();\n    this._installOrUninstallDragAndDropHandler();\n  }\n\n  /**\n   * @override Wigdet.js\n   */\n  _renderDisabledStyle() {\n    this._renderDisabledStyleInternal(this.$container);\n    this._renderDisabledStyleInternal(this.$fieldContainer);\n    this._renderDisabledStyleInternal(this.$field);\n    this._renderDisabledStyleInternal(this.$mandatory);\n  }\n\n  setFont(font) {\n    this.setProperty('font', font);\n  }\n\n  _renderFont() {\n    styles.legacyFont(this, this.$field);\n  }\n\n  setForegroundColor(foregroundColor) {\n    this.setProperty('foregroundColor', foregroundColor);\n  }\n\n  _renderForegroundColor() {\n    styles.legacyForegroundColor(this, this.$field);\n  }\n\n  setBackgroundColor(backgroundColor) {\n    this.setProperty('backgroundColor', backgroundColor);\n  }\n\n  _renderBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$field);\n  }\n\n  setLabelFont(labelFont) {\n    this.setProperty('labelFont', labelFont);\n  }\n\n  _renderLabelFont() {\n    styles.legacyFont(this, this.$label, 'label');\n  }\n\n  setLabelForegroundColor(labelForegroundColor) {\n    this.setProperty('labelForegroundColor', labelForegroundColor);\n  }\n\n  _renderLabelForegroundColor() {\n    styles.legacyForegroundColor(this, this.$label, 'label');\n  }\n\n  setLabelBackgroundColor(labelBackgroundColor) {\n    this.setProperty('labelBackgroundColor', labelBackgroundColor);\n  }\n\n  _renderLabelBackgroundColor() {\n    styles.legacyBackgroundColor(this, this.$label, 'label');\n  }\n\n  setGridDataHints(gridData) {\n    this.setProperty('gridDataHints', gridData);\n  }\n\n  _setGridDataHints(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridDataHints', GridData.ensure(gridData));\n  }\n\n  _renderGridDataHints() {\n    this.parent.invalidateLogicalGrid();\n  }\n\n  _setGridData(gridData) {\n    if (!gridData) {\n      gridData = new GridData();\n    }\n    this._setProperty('gridData', GridData.ensure(gridData));\n  }\n\n  _renderGridData() {\n    if (this.rendered) {\n      let htmlCompParent = this.htmlComp.getParent();\n      if (htmlCompParent) { // may be null if $container is detached\n        htmlCompParent.invalidateLayoutTree();\n      }\n    }\n  }\n\n  setMenus(menus) {\n    this.setProperty('menus', menus);\n  }\n\n  _setMenus(menus) {\n    menus = arrays.ensure(menus);\n    this.menus.forEach(function(menu) {\n      menu.off('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n\n    this.updateKeyStrokes(menus, this.menus);\n    this._setProperty('menus', menus);\n\n    this.menus.forEach(function(menu) {\n      menu.on('propertyChange', this._menuPropertyChangeHandler);\n    }, this);\n  }\n\n  insertMenu(menuToInsert) {\n    this.insertMenus([menuToInsert]);\n  }\n\n  insertMenus(menusToInsert) {\n    menusToInsert = arrays.ensure(menusToInsert);\n    if (menusToInsert.length === 0) {\n      return;\n    }\n    this.setMenus(this.menus.concat(menusToInsert));\n  }\n\n  deleteMenu(menuToDelete) {\n    this.deleteMenus([menuToDelete]);\n  }\n\n  deleteMenus(menusToDelete) {\n    menusToDelete = arrays.ensure(menusToDelete);\n    if (menusToDelete.length === 0) {\n      return;\n    }\n    let menus = this.menus.slice();\n    arrays.removeAll(menus, menusToDelete);\n    this.setMenus(menus);\n  }\n\n  _onMenuPropertyChange(event) {\n    if (event.propertyName === 'visible' && this.rendered) {\n      this._updateMenus();\n    }\n  }\n\n  getContextMenuItems(onlyVisible = true) {\n    if (this.currentMenuTypes.length) {\n      return menuUtil.filter(this.menus, this.currentMenuTypes, onlyVisible);\n    } else if (onlyVisible) {\n      return this.menus.filter(menu => menu.visible);\n    }\n    return this.menus;\n  }\n\n  _getMenusForStatus(status) {\n    return this.statusMenuMappings.filter(mapping => {\n      if (!mapping.menu || !mapping.menu.visible) {\n        return false;\n      }\n      // Show the menus which are mapped to the status code and severity (if set)\n      return (mapping.codes.length === 0 || mapping.codes.indexOf(status.code) > -1) &&\n        (mapping.severities.length === 0 || mapping.severities.indexOf(status.severity) > -1);\n    }).map(mapping => {\n      return mapping.menu;\n    });\n  }\n\n  _hasMenus() {\n    return !!(this.menus && this.getContextMenuItems().length > 0);\n  }\n\n  _updateMenus() {\n    this.$container.toggleClass('has-menus', this._hasMenus() && this.menusVisible);\n    this._updateFieldStatus();\n  }\n\n  _renderMenus() {\n    this._updateMenus();\n  }\n\n  _renderStatusMenuMappings() {\n    this._updateMenus();\n  }\n\n  setMenusVisible(menusVisible) {\n    this.setProperty('menusVisible', menusVisible);\n  }\n\n  /**\n   * override by TabItem\n   **/\n  _setMenusVisible(menusVisible) {\n    this._setProperty('menusVisible', menusVisible);\n  }\n\n  _renderMenusVisible() {\n    this._updateMenus();\n  }\n\n  setCurrentMenuTypes(currentMenuTypes) {\n    this.setProperty('currentMenuTypes', currentMenuTypes);\n  }\n\n  _renderCurrentMenuTypes() {\n    // If a tooltip is shown, update it with the new menus\n    this._updateFieldStatus();\n  }\n\n  _setKeyStrokes(keyStrokes) {\n    this.updateKeyStrokes(keyStrokes, this.keyStrokes);\n    this._setProperty('keyStrokes', keyStrokes);\n  }\n\n  /**\n   * May be overridden to explicitly provide a tooltip $parent\n   */\n  _$tooltipParent() {\n    // Will be determined by the tooltip itself\n    return undefined;\n  }\n\n  _hideStatusMessage() {\n    if (this.fieldStatus) {\n      this.fieldStatus.hideTooltip();\n    }\n  }\n\n  _renderPreventInitialFocus() {\n    this.$container.toggleClass('prevent-initial-focus', !!this.preventInitialFocus);\n  }\n\n  /**\n   * Sets the focus on this field. If the field is not rendered, the focus will be set as soon as it is rendered.\n   *\n   * @override\n   */\n  focus() {\n    if (!this.rendered) {\n      this.session.layoutValidator.schedulePostValidateFunction(this.focus.bind(this));\n      return false;\n    }\n\n    if (!this.enabledComputed) {\n      return false;\n    }\n\n    let focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      return this.session.focusManager.requestFocus(focusableElement);\n    }\n    return false;\n  }\n\n  /**\n   * This method returns the HtmlElement to be used as initial focus element or when {@link #focus()} is called.\n   * It can be overridden, in case the FormField needs to return something other than this.$field[0].\n   *\n   * @override\n   */\n  getFocusableElement() {\n    if (this.rendered && this.$field) {\n      return this.$field[0];\n    }\n    return null;\n  }\n\n  _onFieldFocus(event) {\n    this.setFocused(true);\n  }\n\n  _onFieldBlur() {\n    this.setFocused(false);\n  }\n\n  /**\n   * When calling this function, the same should happen as when clicking into the field. It is used when the label is clicked.<br>\n   * The most basic action is focusing the field but this may differ from field to field.\n   */\n  activate() {\n    if (!this.enabledComputed || !this.rendered) {\n      return;\n    }\n    // Explicitly don't use this.focus() because this.focus uses the focus manager which may be disabled (e.g. on mobile devices)\n    let focusableElement = this.getFocusableElement();\n    if (focusableElement) {\n      $.ensure(focusableElement).focus();\n    }\n  }\n\n  /**\n   * @override\n   */\n  get$Scrollable() {\n    return this.$field;\n  }\n\n  getParentGroupBox() {\n    let parent = this.parent;\n    while (parent && !(parent instanceof GroupBox)) {\n      parent = parent.parent;\n    }\n    return parent;\n  }\n\n  getParentField() {\n    return this.parent;\n  }\n\n  /**\n   * Appends a LABEL element to this.$container and sets the this.$label property.\n   */\n  addLabel() {\n    this.$label = this.$container.appendElement('<label>');\n    tooltips.installForEllipsis(this.$label, {\n      parent: this\n    });\n\n    // Setting the focus programmatically does not work in a mousedown listener on mobile devices,\n    // that is why a click listener is used instead\n    this.$label.on('click', this._onLabelClick.bind(this));\n  }\n\n  _onLabelClick(event) {\n    if (!strings.hasText(this.label)) {\n      // Clicking on \"invisible\" labels should not have any effect since it is confusing\n      return;\n    }\n    this.activate();\n  }\n\n  _removeLabel() {\n    if (!this.$label) {\n      return;\n    }\n    tooltips.uninstall(this.$label);\n    this.$label.remove();\n    this.$label = null;\n  }\n\n  /**\n   * Links the given element with the label by setting aria-labelledby.<br>\n   * This allows screen readers to build a catalog of the elements on the screen and their relationships, for example, to read the label when the input is focused.\n   */\n  _linkWithLabel($element) {\n    if (!this.$label || !$element) {\n      return;\n    }\n\n    fields.linkElementWithLabel($element, this.$label);\n  }\n\n  _removeIcon() {\n    if (!this.$icon) {\n      return;\n    }\n    this.$icon.remove();\n    this.$icon = null;\n  }\n\n  /**\n   * Appends the given field to the this.$container and sets the property this.$field.\n   * The $field is used as $fieldContainer as long as you don't explicitly call addFieldContainer before calling addField.\n   */\n  addField($field) {\n    if (!this.$fieldContainer) {\n      this.addFieldContainer($field);\n    }\n    this.$field = $field;\n    this._linkWithLabel($field);\n    this.$field.on('blur', this._onFieldBlur.bind(this))\n      .on('focus', this._onFieldFocus.bind(this));\n  }\n\n  /**\n   * Call this method before addField if you'd like to have a different field container than $field.\n   */\n  addFieldContainer($fieldContainer) {\n    this.$fieldContainer = $fieldContainer\n      .addClass('field');\n\n    // Only append if not already appended or it is not the last element so that append would move it to the end\n    // This can be important for some widgets, e.g. iframe which would cancel and restart the request on every dom insertion\n    if (this.$container.has($fieldContainer).length === 0 || $fieldContainer.next().length > 0) {\n      $fieldContainer.appendTo(this.$container);\n    }\n  }\n\n  /**\n   * Removes this.$field and this.$fieldContainer and sets the properties to null.\n   */\n  _removeField() {\n    if (this.$field) {\n      this.$field.remove();\n      this.$field = null;\n    }\n    if (this.$fieldContainer) {\n      this.$fieldContainer.remove();\n      this.$fieldContainer = null;\n    }\n  }\n\n  /**\n   * Appends a SPAN element for form-field status to this.$container and sets the this.$status property.\n   */\n  addStatus() {\n    if (this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus = scout.create('FieldStatus', {\n      parent: this,\n      position: this.statusPosition,\n      // This will be done by _updateFieldStatus again, but doing it here prevents unnecessary layout invalidations later on\n      visible: this._computeStatusVisible()\n    });\n    this.fieldStatus.render();\n    this.$status = this.fieldStatus.$container;\n    this._updateFieldStatus();\n  }\n\n  _removeStatus() {\n    if (!this.fieldStatus) {\n      return;\n    }\n    this.fieldStatus.destroy();\n    this.$status = null;\n    this.fieldStatus = null;\n  }\n\n  /**\n   * Appends a SPAN element to this.$container and sets the this.$pseudoStatus property.\n   * The purpose of a pseudo status is to consume the space an ordinary status would.\n   * This makes it possible to make components without a status as width as components with a status.\n   */\n  addPseudoStatus() {\n    this.$pseudoStatus = this.$container.appendSpan('status');\n  }\n\n  addMandatoryIndicator() {\n    this.$mandatory = this.$container.appendSpan('mandatory-indicator');\n  }\n\n  removeMandatoryIndicator() {\n    if (!this.$mandatory) {\n      return;\n    }\n    this.$mandatory.remove();\n    this.$mandatory = null;\n  }\n\n  /**\n   * Adds a SPAN element with class 'icon' the the given optional $parent.\n   * When $parent is not set, the element is added to this.$container.\n   * @param $parent (optional)\n   */\n  addIcon($parent) {\n    if (!$parent) {\n      $parent = this.$container;\n    }\n    this.$icon = fields.appendIcon($parent)\n      .on('mousedown', this._onIconMouseDown.bind(this));\n  }\n\n  _onIconMouseDown(event) {\n    if (!this.enabledComputed) {\n      return;\n    }\n    this.$field.focus();\n  }\n\n  /**\n   * Appends a DIV element as form-field container to $parent and sets the this.$container property.\n   * Applies FormFieldLayout to this.$container (if container does not define another layout).\n   * Sets this.htmlComp to the HtmlComponent created for this.$container.\n   *\n   * @param $parent to which container is appended\n   * @param cssClass cssClass to add to the new container DIV\n   * @param layout when layout is undefined, this#_createLayout() is called\n   *\n   */\n  addContainer($parent, cssClass, layout) {\n    this.$container = $parent.appendDiv('form-field');\n    if (cssClass) {\n      this.$container.addClass(cssClass);\n    }\n    let htmlComp = HtmlComponent.install(this.$container, this.session);\n    htmlComp.setLayout(layout || this._createLayout());\n    this.htmlComp = htmlComp;\n  }\n\n  /**\n   * @return {FormFieldLayout|AbstractLayout} the default layout FormFieldLayout. Override this function if your field needs another layout.\n   */\n  _createLayout() {\n    return new FormFieldLayout(this);\n  }\n\n  /**\n   * Updates the \"inner alignment\" of a field. Usually, the GridData hints only have influence on the\n   * LogicalGridLayout. However, the properties \"horizontalAlignment\" and \"verticalAlignment\" are\n   * sometimes used differently. Instead of controlling the field alignment in case fillHorizontal/\n   * fillVertical is false, the developer expects the _contents_ of the field to be aligned correspondingly\n   * inside the field. Technically, this is not correct, but is supported for legacy and convenience\n   * reasons for some of the Scout fields. Those who support the behavior may override _renderGridData()\n   * and call this method. Some CSS classes are then added to the field.\n   *\n   * opts:\n   *   useHorizontalAlignment:\n   *     When this option is true, \"halign-\" classes are added according to gridData.horizontalAlignment.\n   *   useVerticalAlignment:\n   *     When this option is true, \"valign-\" classes are added according to gridData.verticalAlignment.\n   *   $fieldContainer:\n   *     Specifies the div where the classes should be added. If omitted, this.$fieldContainer is used.\n   */\n  updateInnerAlignment(opts) {\n    opts = opts || {};\n    let $fieldContainer = opts.$fieldContainer || this.$fieldContainer;\n\n    this._updateElementInnerAlignment(opts, $fieldContainer);\n    if ($fieldContainer !== this.$container) {\n      // also set the styles to the container\n      this._updateElementInnerAlignment(opts, this.$container);\n    }\n  }\n\n  _updateElementInnerAlignment(opts, $field) {\n    opts = opts || {};\n    let useHorizontalAlignment = scout.nvl(opts.useHorizontalAlignment, true);\n    let useVerticalAlignment = scout.nvl(opts.useVerticalAlignment, true);\n\n    if (!$field) {\n      return;\n    }\n\n    $field.removeClass('has-inner-alignment halign-left halign-center halign-right valign-top valign-middle valign-bottom');\n    if (useHorizontalAlignment || useVerticalAlignment) {\n      // Set horizontal and vertical alignment (from gridData)\n      $field.addClass('has-inner-alignment');\n      let gridData = this.gridData;\n      if (this.parent.logicalGrid) {\n        // If the logical grid is calculated by JS, use the hints instead of the calculated grid data\n        gridData = this.gridDataHints;\n      }\n      if (useHorizontalAlignment) {\n        let hAlign = gridData.horizontalAlignment;\n        $field.addClass(hAlign < 0 ? 'halign-left' : (hAlign > 0 ? 'halign-right' : 'halign-center'));\n      }\n      if (useVerticalAlignment) {\n        let vAlign = gridData.verticalAlignment;\n        $field.addClass(vAlign < 0 ? 'valign-top' : (vAlign > 0 ? 'valign-bottom' : 'valign-middle'));\n      }\n      // Alignment might have affected inner elements (e.g. clear icon)\n      this.invalidateLayout();\n    }\n  }\n\n  addCellEditorFieldCssClasses($field, opts) {\n    $field\n      .addClass('cell-editor-field')\n      .addClass(Device.get().cssClassForEdge());\n    if (opts.cssClass) {\n      $field.addClass(opts.cssClass);\n    }\n  }\n\n  prepareForCellEdit(opts) {\n    opts = opts || {};\n\n    // remove mandatory and status indicators (popup should 'fill' the whole cell)\n    if (this.$mandatory) {\n      this.removeMandatoryIndicator();\n    }\n    if (this.$status) {\n      this.$status.remove();\n      this.$status = null;\n    }\n    if (this.$container) {\n      this.$container.addClass('cell-editor-form-field');\n    }\n    if (this.$field) {\n      this.addCellEditorFieldCssClasses(this.$field, opts);\n    }\n  }\n\n  setDropType(dropType) {\n    this.setProperty('dropType', dropType);\n  }\n\n  _renderDropType() {\n    this._installOrUninstallDragAndDropHandler();\n  }\n\n  setDropMaximumSize(dropMaximumSize) {\n    this.setProperty('dropMaximumSize', dropMaximumSize);\n  }\n\n  _installOrUninstallDragAndDropHandler() {\n    dragAndDrop.installOrUninstallDragAndDropHandler(this._getDragAndDropHandlerOptions());\n  }\n\n  /**\n   *\n   * @return {DragAndDropOptions}\n   * @private\n   */\n  _getDragAndDropHandlerOptions() {\n    return {\n      target: this,\n      doInstall: () => this.dropType && this.enabledComputed,\n      container: () => this.$field || this.$container,\n      dropType: () => this.dropType,\n      onDrop: event => this.trigger('drop', event)\n    };\n  }\n\n  _updateDisabledCopyOverlay() {\n    if (this.disabledCopyOverlay && !Device.get().supportsCopyFromDisabledInputFields()) {\n      if (this.enabledComputed) {\n        this._removeDisabledCopyOverlay();\n      } else {\n        this._renderDisabledCopyOverlay();\n        this.revalidateLayout(); // because bounds of overlay is set in FormFieldLayout\n      }\n    }\n  }\n\n  _renderDisabledCopyOverlay() {\n    if (!this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay = this.$container\n        .appendDiv('disabled-overlay')\n        .on('contextmenu', this._createCopyContextMenu.bind(this));\n    }\n  }\n\n  _removeDisabledCopyOverlay() {\n    if (this.$disabledCopyOverlay) {\n      this.$disabledCopyOverlay.remove();\n      this.$disabledCopyOverlay = null;\n    }\n  }\n\n  _createCopyContextMenu(event) {\n    if (!this.visible || strings.empty(this.displayText)) {\n      return;\n    }\n\n    let menu = scout.create('Menu', {\n      parent: this,\n      text: this.session.text('ui.Copy'),\n      inheritAccessibility: false\n    });\n    menu.on('action', event => {\n      this.exportToClipboard();\n    });\n\n    let popup = scout.create('ContextMenuPopup', {\n      parent: this,\n      menuItems: [menu],\n      cloneMenuItems: false,\n      location: {\n        x: event.pageX,\n        y: event.pageY\n      }\n    });\n    popup.open();\n  }\n\n  /**\n   * Visits this field and all child form fields in pre-order (top-down).\n   *\n   * @param {function(FormField):string|TreeVisitResult|null} visitor\n   * @returns {string} the TreeVisitResult, or nothing to continue.\n   */\n  visitFields(visitor) {\n    return visitor(this);\n  }\n\n  /**\n   * Visit all parent form fields. The visit stops if the parent is no form field anymore (e.g. a form, desktop or session).\n   *\n   * @param {function(FormField)} visitor\n   */\n  visitParentFields(visitor) {\n    let curParent = this.parent;\n    while (curParent instanceof FormField) {\n      visitor(curParent);\n      curParent = curParent.parent;\n    }\n  }\n\n  markAsSaved() {\n    this.setProperty('touched', false);\n    this.updateRequiresSave();\n  }\n\n  touch() {\n    this.setProperty('touched', true);\n    this.updateRequiresSave();\n  }\n\n  /**\n   * Updates the requiresSave property by checking if the field is touched or if computeRequiresSave() returns true.\n   */\n  updateRequiresSave() {\n    if (!this.initialized) {\n      return;\n    }\n    this.requiresSave = this.touched || this.computeRequiresSave();\n  }\n\n  /**\n   * Override this function in order to return whether or not this field requires to be saved.\n   * The default impl. returns false.\n   *\n   * @returns {boolean}\n   */\n  computeRequiresSave() {\n    return false;\n  }\n\n  /**\n   * @typedef ValidationResult\n   * @property {boolean} valid\n   * @property {boolean} validByErrorStatus\n   * @property {boolean} validByMandatory\n   * @property {FormField} field\n   * @property {String} label\n   * @property {function} reveal\n   */\n\n  /**\n   * @returns {ValidationResult}\n   */\n  getValidationResult() {\n    let validByErrorStatus = !this._errorStatus();\n    let validByMandatory = !this.mandatory || !this.empty;\n    let valid = validByErrorStatus && validByMandatory;\n    // noinspection JSValidateTypes\n    return {\n      valid: valid,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory,\n      field: this,\n      label: this.label,\n      reveal: () => {\n        fields.selectAllParentTabsOf(this);\n        this.focus();\n      }\n    };\n  }\n\n  _updateEmpty() {\n    // NOP\n  }\n\n  requestInput() {\n    if (this.enabledComputed && this.rendered) {\n      this.focus();\n    }\n  }\n\n  clone(model, options) {\n    let clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'menus', options);\n    return clone;\n  }\n\n  exportToClipboard() {\n    if (!this.displayText) {\n      return;\n    }\n    let event = new Event({\n      text: this.displayText\n    });\n    this.trigger('clipboardExport', event);\n    if (!event.defaultPrevented) {\n      this._exportToClipboard(event.text);\n    }\n  }\n\n  _exportToClipboard(text) {\n    clipboard.copyText({\n      parent: this,\n      text: text\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}