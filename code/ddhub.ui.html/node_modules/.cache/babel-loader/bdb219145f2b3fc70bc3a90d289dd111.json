{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { KeyStroke } from '../../index';\nexport default class TileGridSelectKeyStroke extends KeyStroke {\n  constructor(tileGrid) {\n    super();\n    this.field = tileGrid;\n    this.shift = !tileGrid.multiSelect ? false : undefined;\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let result = this._computeNewSelection();\n      if (result && result.focusedTile) {\n        return result.focusedTile.$container;\n      }\n    };\n    this.inheritAccessibility = false;\n  }\n\n  /**\n   * Selection handler should be used for every interaction with the tileGrid.\n   * This is necessary to provide the same selection behavior for the tile accordion which uses multiple tile grids\n   */\n  getSelectionHandler() {\n    // Not stored as member variable by purpose because it will be exchanged later by the tile accordion\n    return this.field.selectionHandler;\n  }\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    if (!this.getSelectionHandler().isSelectable()) {\n      return false;\n    }\n    if (this.getSelectionHandler().getFilteredTileCount() === 0) {\n      return false;\n    }\n    return true;\n  }\n  handle(event) {\n    this.getSelectionHandler().executeSelection(this._computeNewSelection(event.shiftKey));\n  }\n  _computeNewSelection(extend) {\n    // To be implemented by subclasses\n  }\n}","map":{"version":3,"names":["KeyStroke","TileGridSelectKeyStroke","constructor","tileGrid","field","shift","multiSelect","undefined","renderingHints","$drawingArea","event","result","_computeNewSelection","focusedTile","$container","inheritAccessibility","getSelectionHandler","selectionHandler","_accept","accepted","isSelectable","getFilteredTileCount","handle","executeSelection","shiftKey","extend"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tile/keystrokes/TileGridSelectKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {KeyStroke} from '../../index';\n\nexport default class TileGridSelectKeyStroke extends KeyStroke {\n\n  constructor(tileGrid) {\n    super();\n    this.field = tileGrid;\n    this.shift = !tileGrid.multiSelect ? false : undefined;\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let result = this._computeNewSelection();\n      if (result && result.focusedTile) {\n        return result.focusedTile.$container;\n      }\n    };\n    this.inheritAccessibility = false;\n  }\n\n  /**\n   * Selection handler should be used for every interaction with the tileGrid.\n   * This is necessary to provide the same selection behavior for the tile accordion which uses multiple tile grids\n   */\n  getSelectionHandler() {\n    // Not stored as member variable by purpose because it will be exchanged later by the tile accordion\n    return this.field.selectionHandler;\n  }\n\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    if (!this.getSelectionHandler().isSelectable()) {\n      return false;\n    }\n    if (this.getSelectionHandler().getFilteredTileCount() === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  handle(event) {\n    this.getSelectionHandler().executeSelection(this._computeNewSelection(event.shiftKey));\n  }\n\n  _computeNewSelection(extend) {\n    // To be implemented by subclasses\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,SAAS,QAAO,aAAa;AAErC,eAAe,MAAMC,uBAAuB,SAASD,SAAS,CAAC;EAE7DE,WAAW,CAACC,QAAQ,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGD,QAAQ;IACrB,IAAI,CAACE,KAAK,GAAG,CAACF,QAAQ,CAACG,WAAW,GAAG,KAAK,GAAGC,SAAS;IACtD,IAAI,CAACC,cAAc,CAACC,YAAY,GAAG,CAACA,YAAY,EAAEC,KAAK,KAAK;MAC1D,IAAIC,MAAM,GAAG,IAAI,CAACC,oBAAoB,EAAE;MACxC,IAAID,MAAM,IAAIA,MAAM,CAACE,WAAW,EAAE;QAChC,OAAOF,MAAM,CAACE,WAAW,CAACC,UAAU;MACtC;IACF,CAAC;IACD,IAAI,CAACC,oBAAoB,GAAG,KAAK;EACnC;;EAEA;AACF;AACA;AACA;EACEC,mBAAmB,GAAG;IACpB;IACA,OAAO,IAAI,CAACZ,KAAK,CAACa,gBAAgB;EACpC;EAEAC,OAAO,CAACR,KAAK,EAAE;IACb,IAAIS,QAAQ,GAAG,KAAK,CAACD,OAAO,CAACR,KAAK,CAAC;IACnC,IAAI,CAACS,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;IACA,IAAI,CAAC,IAAI,CAACH,mBAAmB,EAAE,CAACI,YAAY,EAAE,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAI,IAAI,CAACJ,mBAAmB,EAAE,CAACK,oBAAoB,EAAE,KAAK,CAAC,EAAE;MAC3D,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb;EAEAC,MAAM,CAACZ,KAAK,EAAE;IACZ,IAAI,CAACM,mBAAmB,EAAE,CAACO,gBAAgB,CAAC,IAAI,CAACX,oBAAoB,CAACF,KAAK,CAACc,QAAQ,CAAC,CAAC;EACxF;EAEAZ,oBAAoB,CAACa,MAAM,EAAE;IAC3B;EAAA;AAEJ"},"metadata":{},"sourceType":"module"}