{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays } from '../index';\nimport $ from 'jquery';\nlet uniqueIdSeqNo = 0;\n\n/**\n * @param {(HTMLElement|$)} a HTML or jQuery element to find the corresponding widget for\n * @returns {AnyWidget} the widget for the given element. If the element is not linked with a widget directly, it searches its ancestors for the widget.\n */\nexport function get($elem) {\n  $elem = $.ensure($elem);\n  while ($elem && $elem.length > 0) {\n    let widget = $elem.data('widget');\n    if (widget) {\n      return widget;\n    }\n    $elem = $elem.parent();\n  }\n  return null;\n}\n\n/**\n * Creates a \"unique\" id which may be used in the id attribute of a HTML element.\n * <p>\n * It actually just increases a sequence number prefixed by 'sc' or the given prefix.\n * 'sc' (short for Scout) is added to reduce the possibility of a duplication\n * if scout widgets are embedded into a foreign web site which already uses numbers in its id attributes.\n * So it is not really unique but should be good enough when you know what you are doing.\n */\nexport function createUniqueId(prefix) {\n  prefix = prefix || 'sc';\n  return prefix + uniqueIdSeqNo++;\n}\n\n/**\n * Iterates through the given widgets and toggles the 'first' and 'last' classes on the corresponding widgets if the widgets are visible and rendered.\n */\nexport function updateFirstLastMarker(widgets) {\n  widgets.filter((widget, i, widgets) => {\n    return widget.rendered && widget.isVisible();\n  }).forEach((widget, i, widgets) => {\n    widget.$container.toggleClass('first', i === 0);\n    widget.$container.toggleClass('last', i === widgets.length - 1);\n  });\n}\n\n/**\n * @param {Widget[]} widgets the widgets to check.\n * @param {Widget} [container] if specified, the function returns null if the container is not visible or not rendered. This allows for an early return without the need to check every given widget.\n * @param {boolean} [checkTabbable=true] if true, the resulting widget has to be tabbable, not only focusable.\n * @returns {Widget} the first widget of the given list which is focusable (and tabbable, unless checkTabbable is set to false).\n */\nexport function findFirstFocusableWidget(widgets, container, checkTabbable) {\n  if (container && (!container.rendered || !container.visible)) {\n    return null;\n  }\n  return arrays.find(widgets, widget => widget.isFocusable(checkTabbable));\n}\n\n/**\n * Sets a property using the given setter after reading the value using the getter and preserving it on the preserver using the preserverName.\n * The preserved property can be reset using {@link resetProperty}.\n * @param {function} setter\n * @param {function} getter\n * @param {object} preserver\n * @param {string} preserverName\n */\nexport function preserveAndSetProperty(setter, getter, preserver, preserverName) {\n  if (preserver[preserverName] === null) {\n    preserver[preserverName] = getter();\n  }\n  setter();\n}\n\n/**\n * Resets a property that has been preserved on the preserver by {@link preserveAndSetProperty} using the given setter. Sets the preserved property to null afterwards.\n * @param {function} setter\n * @param {object} preserver\n * @param {string} preserverName\n */\nexport function resetProperty(setter, preserver, preserverName) {\n  if (preserver[preserverName] != null) {\n    setter(preserver[preserverName]);\n    preserver[preserverName] = null;\n  }\n}\nexport default {\n  createUniqueId,\n  findFirstFocusableWidget,\n  get,\n  uniqueIdSeqNo,\n  updateFirstLastMarker,\n  preserveAndSetProperty,\n  resetProperty\n};","map":{"version":3,"names":["arrays","$","uniqueIdSeqNo","get","$elem","ensure","length","widget","data","parent","createUniqueId","prefix","updateFirstLastMarker","widgets","filter","i","rendered","isVisible","forEach","$container","toggleClass","findFirstFocusableWidget","container","checkTabbable","visible","find","isFocusable","preserveAndSetProperty","setter","getter","preserver","preserverName","resetProperty"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/widget/widgets.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays} from '../index';\nimport $ from 'jquery';\n\nlet uniqueIdSeqNo = 0;\n\n/**\n * @param {(HTMLElement|$)} a HTML or jQuery element to find the corresponding widget for\n * @returns {AnyWidget} the widget for the given element. If the element is not linked with a widget directly, it searches its ancestors for the widget.\n */\nexport function get($elem) {\n  $elem = $.ensure($elem);\n  while ($elem && $elem.length > 0) {\n    let widget = $elem.data('widget');\n    if (widget) {\n      return widget;\n    }\n    $elem = $elem.parent();\n  }\n  return null;\n}\n\n/**\n * Creates a \"unique\" id which may be used in the id attribute of a HTML element.\n * <p>\n * It actually just increases a sequence number prefixed by 'sc' or the given prefix.\n * 'sc' (short for Scout) is added to reduce the possibility of a duplication\n * if scout widgets are embedded into a foreign web site which already uses numbers in its id attributes.\n * So it is not really unique but should be good enough when you know what you are doing.\n */\nexport function createUniqueId(prefix) {\n  prefix = prefix || 'sc';\n  return prefix + uniqueIdSeqNo++;\n}\n\n/**\n * Iterates through the given widgets and toggles the 'first' and 'last' classes on the corresponding widgets if the widgets are visible and rendered.\n */\nexport function updateFirstLastMarker(widgets) {\n  widgets.filter((widget, i, widgets) => {\n    return widget.rendered && widget.isVisible();\n  }).forEach((widget, i, widgets) => {\n    widget.$container.toggleClass('first', i === 0);\n    widget.$container.toggleClass('last', i === widgets.length - 1);\n  });\n}\n\n/**\n * @param {Widget[]} widgets the widgets to check.\n * @param {Widget} [container] if specified, the function returns null if the container is not visible or not rendered. This allows for an early return without the need to check every given widget.\n * @param {boolean} [checkTabbable=true] if true, the resulting widget has to be tabbable, not only focusable.\n * @returns {Widget} the first widget of the given list which is focusable (and tabbable, unless checkTabbable is set to false).\n */\nexport function findFirstFocusableWidget(widgets, container, checkTabbable) {\n  if (container && (!container.rendered || !container.visible)) {\n    return null;\n  }\n  return arrays.find(widgets, widget => widget.isFocusable(checkTabbable));\n}\n\n/**\n * Sets a property using the given setter after reading the value using the getter and preserving it on the preserver using the preserverName.\n * The preserved property can be reset using {@link resetProperty}.\n * @param {function} setter\n * @param {function} getter\n * @param {object} preserver\n * @param {string} preserverName\n */\nexport function preserveAndSetProperty(setter, getter, preserver, preserverName) {\n  if (preserver[preserverName] === null) {\n    preserver[preserverName] = getter();\n  }\n  setter();\n}\n\n/**\n * Resets a property that has been preserved on the preserver by {@link preserveAndSetProperty} using the given setter. Sets the preserved property to null afterwards.\n * @param {function} setter\n * @param {object} preserver\n * @param {string} preserverName\n */\nexport function resetProperty(setter, preserver, preserverName) {\n  if (preserver[preserverName] != null) {\n    setter(preserver[preserverName]);\n    preserver[preserverName] = null;\n  }\n}\n\nexport default {\n  createUniqueId,\n  findFirstFocusableWidget,\n  get,\n  uniqueIdSeqNo,\n  updateFirstLastMarker,\n  preserveAndSetProperty,\n  resetProperty\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,QAAO,UAAU;AAC/B,OAAOC,CAAC,MAAM,QAAQ;AAEtB,IAAIC,aAAa,GAAG,CAAC;;AAErB;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAG,CAACC,KAAK,EAAE;EACzBA,KAAK,GAAGH,CAAC,CAACI,MAAM,CAACD,KAAK,CAAC;EACvB,OAAOA,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IAChC,IAAIC,MAAM,GAAGH,KAAK,CAACI,IAAI,CAAC,QAAQ,CAAC;IACjC,IAAID,MAAM,EAAE;MACV,OAAOA,MAAM;IACf;IACAH,KAAK,GAAGA,KAAK,CAACK,MAAM,EAAE;EACxB;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,MAAM,EAAE;EACrCA,MAAM,GAAGA,MAAM,IAAI,IAAI;EACvB,OAAOA,MAAM,GAAGT,aAAa,EAAE;AACjC;;AAEA;AACA;AACA;AACA,OAAO,SAASU,qBAAqB,CAACC,OAAO,EAAE;EAC7CA,OAAO,CAACC,MAAM,CAAC,CAACP,MAAM,EAAEQ,CAAC,EAAEF,OAAO,KAAK;IACrC,OAAON,MAAM,CAACS,QAAQ,IAAIT,MAAM,CAACU,SAAS,EAAE;EAC9C,CAAC,CAAC,CAACC,OAAO,CAAC,CAACX,MAAM,EAAEQ,CAAC,EAAEF,OAAO,KAAK;IACjCN,MAAM,CAACY,UAAU,CAACC,WAAW,CAAC,OAAO,EAAEL,CAAC,KAAK,CAAC,CAAC;IAC/CR,MAAM,CAACY,UAAU,CAACC,WAAW,CAAC,MAAM,EAAEL,CAAC,KAAKF,OAAO,CAACP,MAAM,GAAG,CAAC,CAAC;EACjE,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASe,wBAAwB,CAACR,OAAO,EAAES,SAAS,EAAEC,aAAa,EAAE;EAC1E,IAAID,SAAS,KAAK,CAACA,SAAS,CAACN,QAAQ,IAAI,CAACM,SAAS,CAACE,OAAO,CAAC,EAAE;IAC5D,OAAO,IAAI;EACb;EACA,OAAOxB,MAAM,CAACyB,IAAI,CAACZ,OAAO,EAAEN,MAAM,IAAIA,MAAM,CAACmB,WAAW,CAACH,aAAa,CAAC,CAAC;AAC1E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,sBAAsB,CAACC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAE;EAC/E,IAAID,SAAS,CAACC,aAAa,CAAC,KAAK,IAAI,EAAE;IACrCD,SAAS,CAACC,aAAa,CAAC,GAAGF,MAAM,EAAE;EACrC;EACAD,MAAM,EAAE;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,aAAa,CAACJ,MAAM,EAAEE,SAAS,EAAEC,aAAa,EAAE;EAC9D,IAAID,SAAS,CAACC,aAAa,CAAC,IAAI,IAAI,EAAE;IACpCH,MAAM,CAACE,SAAS,CAACC,aAAa,CAAC,CAAC;IAChCD,SAAS,CAACC,aAAa,CAAC,GAAG,IAAI;EACjC;AACF;AAEA,eAAe;EACbrB,cAAc;EACdW,wBAAwB;EACxBlB,GAAG;EACHD,aAAa;EACbU,qBAAqB;EACrBe,sBAAsB;EACtBK;AACF,CAAC"},"metadata":{},"sourceType":"module"}