{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Column, strings } from '../../index';\nimport $ from 'jquery';\nexport default class BeanColumn extends Column {\n  constructor() {\n    super();\n  }\n  buildCellForRow(row) {\n    let cell = this.cell(row);\n    let cssClass = this._cellCssClass(cell);\n    let style = this._cellStyle(cell);\n    let $cell = $(super._buildCell(cell, '', style, cssClass));\n    let value = this.table.cellValue(this, row);\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n    this._renderValue($cell, value);\n    return $cell[0].outerHTML;\n  }\n\n  /**\n   * Override to render the value.<p>\n   * If you have a large table you should consider overriding buildCellForRow instead and create the html as string instead of using jquery.\n   */\n  _renderValue($cell, value) {\n    // to be implemented by the subclass\n  }\n  _plainTextForRow(row) {\n    let cell = this.table.cell(this, row);\n    if (!cell.plainText) {\n      // Convert to plain text and cache it because rendering is expensive\n      let html = this.buildCellForRow(row);\n      cell.plainText = strings.plainText(html);\n    }\n    return cell.plainText;\n  }\n\n  /**\n   * Default approach reads the html using buildCellForRow and uses _preprocessTextForGrouping to generate the value. Just using text() does not work because new lines get omitted.\n   * If this approach does not work for a specific bean column, just override this method.\n   */\n  cellValueOrTextForCalculation(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForCalculation(plainText);\n  }\n  cellTextForGrouping(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForGrouping(plainText);\n  }\n  cellTextForTextFilter(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForTextFilter(plainText);\n  }\n  compare(row1, row2) {\n    let plainText1 = this._plainTextForRow(row1);\n    let plainText2 = this._plainTextForRow(row2);\n    return this.comparator.compareIgnoreCase(plainText1, plainText2);\n  }\n}","map":{"version":3,"names":["Column","strings","$","BeanColumn","constructor","buildCellForRow","row","cell","cssClass","_cellCssClass","style","_cellStyle","$cell","_buildCell","value","table","cellValue","errorStatus","hasError","_renderValue","outerHTML","_plainTextForRow","plainText","html","cellValueOrTextForCalculation","_preprocessTextForCalculation","cellTextForGrouping","_preprocessTextForGrouping","cellTextForTextFilter","_preprocessTextForTextFilter","compare","row1","row2","plainText1","plainText2","comparator","compareIgnoreCase"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/columns/BeanColumn.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Column, strings} from '../../index';\nimport $ from 'jquery';\n\nexport default class BeanColumn extends Column {\n\n  constructor() {\n    super();\n  }\n\n  buildCellForRow(row) {\n    let cell = this.cell(row);\n    let cssClass = this._cellCssClass(cell);\n    let style = this._cellStyle(cell);\n    let $cell = $(super._buildCell(cell, '', style, cssClass));\n    let value = this.table.cellValue(this, row);\n\n    if (cell.errorStatus) {\n      row.hasError = true;\n    }\n\n    this._renderValue($cell, value);\n    return $cell[0].outerHTML;\n  }\n\n  /**\n   * Override to render the value.<p>\n   * If you have a large table you should consider overriding buildCellForRow instead and create the html as string instead of using jquery.\n   */\n  _renderValue($cell, value) {\n    // to be implemented by the subclass\n  }\n\n  _plainTextForRow(row) {\n    let cell = this.table.cell(this, row);\n    if (!cell.plainText) {\n      // Convert to plain text and cache it because rendering is expensive\n      let html = this.buildCellForRow(row);\n      cell.plainText = strings.plainText(html);\n    }\n    return cell.plainText;\n  }\n\n  /**\n   * Default approach reads the html using buildCellForRow and uses _preprocessTextForGrouping to generate the value. Just using text() does not work because new lines get omitted.\n   * If this approach does not work for a specific bean column, just override this method.\n   */\n  cellValueOrTextForCalculation(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForCalculation(plainText);\n  }\n\n  cellTextForGrouping(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForGrouping(plainText);\n  }\n\n  cellTextForTextFilter(row) {\n    let plainText = this._plainTextForRow(row);\n    return this._preprocessTextForTextFilter(plainText);\n  }\n\n  compare(row1, row2) {\n    let plainText1 = this._plainTextForRow(row1);\n    let plainText2 = this._plainTextForRow(row2);\n    return this.comparator.compareIgnoreCase(plainText1, plainText2);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,OAAO,QAAO,aAAa;AAC3C,OAAOC,CAAC,MAAM,QAAQ;AAEtB,eAAe,MAAMC,UAAU,SAASH,MAAM,CAAC;EAE7CI,WAAW,GAAG;IACZ,KAAK,EAAE;EACT;EAEAC,eAAe,CAACC,GAAG,EAAE;IACnB,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI,CAACD,GAAG,CAAC;IACzB,IAAIE,QAAQ,GAAG,IAAI,CAACC,aAAa,CAACF,IAAI,CAAC;IACvC,IAAIG,KAAK,GAAG,IAAI,CAACC,UAAU,CAACJ,IAAI,CAAC;IACjC,IAAIK,KAAK,GAAGV,CAAC,CAAC,KAAK,CAACW,UAAU,CAACN,IAAI,EAAE,EAAE,EAAEG,KAAK,EAAEF,QAAQ,CAAC,CAAC;IAC1D,IAAIM,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,SAAS,CAAC,IAAI,EAAEV,GAAG,CAAC;IAE3C,IAAIC,IAAI,CAACU,WAAW,EAAE;MACpBX,GAAG,CAACY,QAAQ,GAAG,IAAI;IACrB;IAEA,IAAI,CAACC,YAAY,CAACP,KAAK,EAAEE,KAAK,CAAC;IAC/B,OAAOF,KAAK,CAAC,CAAC,CAAC,CAACQ,SAAS;EAC3B;;EAEA;AACF;AACA;AACA;EACED,YAAY,CAACP,KAAK,EAAEE,KAAK,EAAE;IACzB;EAAA;EAGFO,gBAAgB,CAACf,GAAG,EAAE;IACpB,IAAIC,IAAI,GAAG,IAAI,CAACQ,KAAK,CAACR,IAAI,CAAC,IAAI,EAAED,GAAG,CAAC;IACrC,IAAI,CAACC,IAAI,CAACe,SAAS,EAAE;MACnB;MACA,IAAIC,IAAI,GAAG,IAAI,CAAClB,eAAe,CAACC,GAAG,CAAC;MACpCC,IAAI,CAACe,SAAS,GAAGrB,OAAO,CAACqB,SAAS,CAACC,IAAI,CAAC;IAC1C;IACA,OAAOhB,IAAI,CAACe,SAAS;EACvB;;EAEA;AACF;AACA;AACA;EACEE,6BAA6B,CAAClB,GAAG,EAAE;IACjC,IAAIgB,SAAS,GAAG,IAAI,CAACD,gBAAgB,CAACf,GAAG,CAAC;IAC1C,OAAO,IAAI,CAACmB,6BAA6B,CAACH,SAAS,CAAC;EACtD;EAEAI,mBAAmB,CAACpB,GAAG,EAAE;IACvB,IAAIgB,SAAS,GAAG,IAAI,CAACD,gBAAgB,CAACf,GAAG,CAAC;IAC1C,OAAO,IAAI,CAACqB,0BAA0B,CAACL,SAAS,CAAC;EACnD;EAEAM,qBAAqB,CAACtB,GAAG,EAAE;IACzB,IAAIgB,SAAS,GAAG,IAAI,CAACD,gBAAgB,CAACf,GAAG,CAAC;IAC1C,OAAO,IAAI,CAACuB,4BAA4B,CAACP,SAAS,CAAC;EACrD;EAEAQ,OAAO,CAACC,IAAI,EAAEC,IAAI,EAAE;IAClB,IAAIC,UAAU,GAAG,IAAI,CAACZ,gBAAgB,CAACU,IAAI,CAAC;IAC5C,IAAIG,UAAU,GAAG,IAAI,CAACb,gBAAgB,CAACW,IAAI,CAAC;IAC5C,OAAO,IAAI,CAACG,UAAU,CAACC,iBAAiB,CAACH,UAAU,EAAEC,UAAU,CAAC;EAClE;AACF"},"metadata":{},"sourceType":"module"}