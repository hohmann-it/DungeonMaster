{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { FormFieldLayout, graphics } from '../../../index';\nexport default class ButtonLayout extends FormFieldLayout {\n  constructor(button) {\n    super(button);\n    this.button = button;\n  }\n  layout($container) {\n    super.layout($container);\n    let $icon = this.button.get$Icon(),\n      $submenuIcon = this.button.$submenuIcon,\n      $label = this.button.$buttonLabel,\n      $fieldContainer = this.button.$fieldContainer;\n\n    // Set max width to make it possible to set text-overflow: ellipsis using CSS\n    $label.css('max-width', ''); // reset required because .size() operations below might return wrong results when label contains complex HTML\n    let submenuIconWidth = $submenuIcon ? graphics.size($submenuIcon, {\n      includeMargin: true,\n      exact: true\n    }).width : 0;\n    let iconWidth = $icon.length ? graphics.size($icon, {\n      includeMargin: true,\n      exact: true\n    }).width : 0;\n    // Round up to make sure ellipsis are not shown unnecessarily when having rounding issues (e.g. in IE 11)\n    let labelMaxWidth = Math.ceil($fieldContainer.width() - (submenuIconWidth + iconWidth));\n    $label.css('max-width', labelMaxWidth);\n  }\n  preferredLayoutSize($container, options) {\n    let $label = this.button.$buttonLabel;\n\n    // Reset max width before calculating pref size\n    let maxWidth = $label.css('max-width');\n    $label.css('max-width', '');\n    let prefSize = super.preferredLayoutSize($container, options);\n    $label.css('max-width', maxWidth);\n    return prefSize;\n  }\n}","map":{"version":3,"names":["FormFieldLayout","graphics","ButtonLayout","constructor","button","layout","$container","$icon","get$Icon","$submenuIcon","$label","$buttonLabel","$fieldContainer","css","submenuIconWidth","size","includeMargin","exact","width","iconWidth","length","labelMaxWidth","Math","ceil","preferredLayoutSize","options","maxWidth","prefSize"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/button/ButtonLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {FormFieldLayout, graphics} from '../../../index';\n\nexport default class ButtonLayout extends FormFieldLayout {\n\n  constructor(button) {\n    super(button);\n    this.button = button;\n  }\n\n  layout($container) {\n    super.layout($container);\n\n    let $icon = this.button.get$Icon(),\n      $submenuIcon = this.button.$submenuIcon,\n      $label = this.button.$buttonLabel,\n      $fieldContainer = this.button.$fieldContainer;\n\n    // Set max width to make it possible to set text-overflow: ellipsis using CSS\n    $label.css('max-width', ''); // reset required because .size() operations below might return wrong results when label contains complex HTML\n    let submenuIconWidth = $submenuIcon ? graphics.size($submenuIcon, {\n      includeMargin: true,\n      exact: true\n    }).width : 0;\n    let iconWidth = $icon.length ? graphics.size($icon, {\n      includeMargin: true,\n      exact: true\n    }).width : 0;\n    // Round up to make sure ellipsis are not shown unnecessarily when having rounding issues (e.g. in IE 11)\n    let labelMaxWidth = Math.ceil($fieldContainer.width() - (submenuIconWidth + iconWidth));\n    $label.css('max-width', labelMaxWidth);\n  }\n\n  preferredLayoutSize($container, options) {\n    let $label = this.button.$buttonLabel;\n\n    // Reset max width before calculating pref size\n    let maxWidth = $label.css('max-width');\n    $label.css('max-width', '');\n\n    let prefSize = super.preferredLayoutSize($container, options);\n    $label.css('max-width', maxWidth);\n\n    return prefSize;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,eAAe,EAAEC,QAAQ,QAAO,gBAAgB;AAExD,eAAe,MAAMC,YAAY,SAASF,eAAe,CAAC;EAExDG,WAAW,CAACC,MAAM,EAAE;IAClB,KAAK,CAACA,MAAM,CAAC;IACb,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;EAEAC,MAAM,CAACC,UAAU,EAAE;IACjB,KAAK,CAACD,MAAM,CAACC,UAAU,CAAC;IAExB,IAAIC,KAAK,GAAG,IAAI,CAACH,MAAM,CAACI,QAAQ,EAAE;MAChCC,YAAY,GAAG,IAAI,CAACL,MAAM,CAACK,YAAY;MACvCC,MAAM,GAAG,IAAI,CAACN,MAAM,CAACO,YAAY;MACjCC,eAAe,GAAG,IAAI,CAACR,MAAM,CAACQ,eAAe;;IAE/C;IACAF,MAAM,CAACG,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;IAC7B,IAAIC,gBAAgB,GAAGL,YAAY,GAAGR,QAAQ,CAACc,IAAI,CAACN,YAAY,EAAE;MAChEO,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE;IACT,CAAC,CAAC,CAACC,KAAK,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAGZ,KAAK,CAACa,MAAM,GAAGnB,QAAQ,CAACc,IAAI,CAACR,KAAK,EAAE;MAClDS,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE;IACT,CAAC,CAAC,CAACC,KAAK,GAAG,CAAC;IACZ;IACA,IAAIG,aAAa,GAAGC,IAAI,CAACC,IAAI,CAACX,eAAe,CAACM,KAAK,EAAE,IAAIJ,gBAAgB,GAAGK,SAAS,CAAC,CAAC;IACvFT,MAAM,CAACG,GAAG,CAAC,WAAW,EAAEQ,aAAa,CAAC;EACxC;EAEAG,mBAAmB,CAAClB,UAAU,EAAEmB,OAAO,EAAE;IACvC,IAAIf,MAAM,GAAG,IAAI,CAACN,MAAM,CAACO,YAAY;;IAErC;IACA,IAAIe,QAAQ,GAAGhB,MAAM,CAACG,GAAG,CAAC,WAAW,CAAC;IACtCH,MAAM,CAACG,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC;IAE3B,IAAIc,QAAQ,GAAG,KAAK,CAACH,mBAAmB,CAAClB,UAAU,EAAEmB,OAAO,CAAC;IAC7Df,MAAM,CAACG,GAAG,CAAC,WAAW,EAAEa,QAAQ,CAAC;IAEjC,OAAOC,QAAQ;EACjB;AACF"},"metadata":{},"sourceType":"module"}