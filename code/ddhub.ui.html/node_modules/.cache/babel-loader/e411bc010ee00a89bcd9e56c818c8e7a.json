{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Dimension, graphics, HtmlComponent, PopupLayout } from '../index';\nexport default class TableHeaderMenuLayout extends PopupLayout {\n  constructor(popup) {\n    super(popup);\n    this.popup = popup;\n    this.doubleCalcPrefSize = false;\n  }\n  /**\n   * When this layout method is called we've calculated the pref. size before. Layout does this:\n   * - layout the filter-fields (their size is fixed)\n   * - use the remaining height to layout the filter table\n   */\n  layout($container) {\n    super.layout($container);\n    if (!this.popup.hasFilterFields && !this.popup.hasFilterTable) {\n      return;\n    }\n    let actionColumnSize,\n      filterColumnSize,\n      $filterColumn = this.popup.$columnFilters,\n      filterColumnInsets = graphics.insets($filterColumn),\n      filterColumnMargins = graphics.margins($filterColumn),\n      filterFieldGroupSize = new Dimension();\n    if (this.popup.$body.hasClass('compact')) {\n      // height is auto -> read pref size\n      filterColumnSize = HtmlComponent.get($filterColumn).prefSize();\n    } else {\n      // make filter column as height as body (since body is scrollable pref size is calculated which takes TABLE_MAX_HEIGHT into account)\n      filterColumnSize = this.preferredLayoutSize($container).subtract(graphics.insets($container));\n      filterColumnSize = filterColumnSize.subtract(filterColumnMargins);\n    }\n    // width is always set with css\n    filterColumnSize.width = $filterColumn.cssWidth();\n\n    // Set explicit height, necessary if there is no filter table\n    $filterColumn.cssHeight(filterColumnSize.height);\n\n    // TODO [7.0] cgu this code could be written a lot easier -> replace following code (filter fields, filter table) with HtmlComponent.get($filterColumn).setSize(filterColumnSize);\n    // Same for pref size. To implement max height of table, the RowLayout could read css max-height\n    // Filter fields\n    if (this.popup.hasFilterFields) {\n      let $filterFieldsGroup = this.popup.$filterFieldsGroup,\n        filterFieldHtmlComp = HtmlComponent.get($filterFieldsGroup.find('.form-field'));\n\n      // Layout filter field(s) and get size\n      filterFieldHtmlComp.setSize(new Dimension(filterColumnSize.width - filterColumnInsets.horizontal(), this._filterFieldsGroupBoxHeight()));\n      filterFieldGroupSize = graphics.size($filterFieldsGroup, true);\n    }\n\n    // Filter table\n    if (this.popup.hasFilterTable) {\n      let filterTableContainerHeight,\n        $filterTableGroup = this.popup.$filterTableGroup,\n        filterTableContainerInsets = graphics.insets($filterTableGroup),\n        filterTableHtmlComp = this.popup.filterTable.htmlComp;\n      filterTableContainerHeight = filterColumnSize.height - filterColumnInsets.vertical();\n      // subtract height of filter-fields container\n      filterTableContainerHeight -= filterFieldGroupSize.height;\n      // subtract group-title height\n      filterTableContainerHeight -= this._groupTitleHeight($filterTableGroup);\n      // subtract insets of table container\n      filterTableContainerHeight -= filterTableContainerInsets.vertical();\n      // limit height of table\n      filterTableContainerHeight = Math.min(filterTableContainerHeight, TableHeaderMenuLayout.TABLE_MAX_HEIGHT);\n\n      // Layout filter table\n      filterTableHtmlComp.setSize(new Dimension(filterColumnSize.width - filterColumnInsets.horizontal(), filterTableContainerHeight));\n    }\n\n    // fix width of actions column, so it doesn't become wider when user\n    // hovers over a button and thus the text of the group changes.\n    this._setMaxWidth();\n    actionColumnSize = graphics.size(this.popup.$columnActions);\n    this._setMaxWidth(actionColumnSize.width);\n  }\n  _adjustSizeWithAnchor(prefSize) {\n    let maxWidth,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      popupMargins = htmlComp.margins(),\n      popupBounds = htmlComp.offsetBounds(),\n      $window = this.popup.$container.window(),\n      windowWidth = $window.width();\n    maxWidth = windowWidth - popupMargins.horizontal() - popupBounds.x - windowPaddingX;\n    let compact = popupBounds.width > maxWidth;\n    if (compact) {\n      this.popup.$body.addClass('compact', compact);\n      prefSize = this.preferredLayoutSize(this.popup.$container);\n    }\n    return super._adjustSizeWithAnchor(prefSize);\n  }\n\n  // group title (size used for table + field container)\n  _groupTitleHeight($group) {\n    return graphics.size($group.find('.table-header-menu-group-text'), true).height;\n  }\n  _filterFieldsGroupBoxHeight() {\n    return this.popup.filterFieldsGroupBox.htmlComp.prefSize().height;\n  }\n\n  /**\n   * The preferred layout size of this widget is\n   * + size of table (but height is limited to TABLE_MAX_HEIGHT, if table becomes too large)\n   * + size of filter-fields\n   * + paddings of surrounding containers\n   */\n  preferredLayoutSize($container, options) {\n    let prefSize,\n      filterColumnMargins,\n      filterColumnInsets,\n      rightColumnHeight = 0,\n      leftColumnHeight = 0,\n      containerInsets = graphics.insets($container),\n      oldMaxWidth = this._getMaxWidth();\n    this._setMaxWidth(); // temp. remove max-width so we can determine pref. size\n    leftColumnHeight = graphics.size(this.popup.$columnActions, true).height;\n\n    // Filter table\n    if (this.popup.hasFilterTable) {\n      let $filterTableGroup = this.popup.$filterTableGroup,\n        filterTableHeight = this.popup.filterTable.htmlComp.size(true).height,\n        filterTableContainerInsets = graphics.insets($filterTableGroup),\n        filterTableContainerHeight;\n\n      // limit height of table\n      filterTableHeight = Math.min(filterTableHeight, TableHeaderMenuLayout.TABLE_MAX_HEIGHT);\n      // size of container with table\n      filterTableContainerHeight = filterTableHeight;\n      // add group-title height\n      filterTableContainerHeight += this._groupTitleHeight($filterTableGroup);\n      // add insets of container\n      filterTableContainerHeight += filterTableContainerInsets.vertical();\n      rightColumnHeight += filterTableContainerHeight;\n    }\n\n    // Filter fields\n    if (this.popup.hasFilterFields) {\n      let $filterFieldsGroup = this.popup.$filterFieldsGroup,\n        filterFieldContainerInsets = graphics.insets($filterFieldsGroup),\n        filterFieldContainerHeight;\n\n      // size of group-box with 1 or 2 filter fields\n      filterFieldContainerHeight = this._filterFieldsGroupBoxHeight();\n      // add group-title height\n      filterFieldContainerHeight += this._groupTitleHeight($filterFieldsGroup);\n      // add insets of container\n      filterFieldContainerHeight += filterFieldContainerInsets.vertical();\n      rightColumnHeight += filterFieldContainerHeight;\n    }\n    if (this.popup.hasFilterFields || this.popup.hasFilterTable) {\n      filterColumnMargins = graphics.margins(this.popup.$columnFilters);\n      filterColumnInsets = graphics.insets(this.popup.$columnFilters);\n      rightColumnHeight += filterColumnMargins.vertical();\n      rightColumnHeight += filterColumnInsets.vertical();\n    }\n\n    // Use height of left or right column as preferred size (and add insets of container)\n    prefSize = graphics.prefSize($container);\n    if (!this.popup.$body.hasClass('compact')) {\n      prefSize.height = Math.max(leftColumnHeight, rightColumnHeight) + containerInsets.vertical();\n    } else {\n      prefSize.height = leftColumnHeight + rightColumnHeight + containerInsets.vertical();\n    }\n\n    // restore max-width\n    this._setMaxWidth(oldMaxWidth);\n    return prefSize;\n  }\n  _getMaxWidth() {\n    return this.popup.$columnActions.css('max-width');\n  }\n  _setMaxWidth(maxWidth) {\n    this.popup.$columnActions.css('max-width', maxWidth || '');\n  }\n}\n_defineProperty(TableHeaderMenuLayout, \"TABLE_MAX_HEIGHT\", 330);","map":{"version":3,"names":["Dimension","graphics","HtmlComponent","PopupLayout","TableHeaderMenuLayout","constructor","popup","doubleCalcPrefSize","layout","$container","hasFilterFields","hasFilterTable","actionColumnSize","filterColumnSize","$filterColumn","$columnFilters","filterColumnInsets","insets","filterColumnMargins","margins","filterFieldGroupSize","$body","hasClass","get","prefSize","preferredLayoutSize","subtract","width","cssWidth","cssHeight","height","$filterFieldsGroup","filterFieldHtmlComp","find","setSize","horizontal","_filterFieldsGroupBoxHeight","size","filterTableContainerHeight","$filterTableGroup","filterTableContainerInsets","filterTableHtmlComp","filterTable","htmlComp","vertical","_groupTitleHeight","Math","min","TABLE_MAX_HEIGHT","_setMaxWidth","$columnActions","_adjustSizeWithAnchor","maxWidth","windowPaddingX","popupMargins","popupBounds","offsetBounds","$window","window","windowWidth","x","compact","addClass","$group","filterFieldsGroupBox","options","rightColumnHeight","leftColumnHeight","containerInsets","oldMaxWidth","_getMaxWidth","filterTableHeight","filterFieldContainerInsets","filterFieldContainerHeight","max","css"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableHeaderMenuLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Dimension, graphics, HtmlComponent, PopupLayout} from '../index';\n\nexport default class TableHeaderMenuLayout extends PopupLayout {\n\n  constructor(popup) {\n    super(popup);\n    this.popup = popup;\n    this.doubleCalcPrefSize = false;\n  }\n\n  static TABLE_MAX_HEIGHT = 330;\n\n  /**\n   * When this layout method is called we've calculated the pref. size before. Layout does this:\n   * - layout the filter-fields (their size is fixed)\n   * - use the remaining height to layout the filter table\n   */\n  layout($container) {\n    super.layout($container);\n\n    if (!this.popup.hasFilterFields && !this.popup.hasFilterTable) {\n      return;\n    }\n\n    let\n      actionColumnSize, filterColumnSize,\n      $filterColumn = this.popup.$columnFilters,\n      filterColumnInsets = graphics.insets($filterColumn),\n      filterColumnMargins = graphics.margins($filterColumn),\n      filterFieldGroupSize = new Dimension();\n\n    if (this.popup.$body.hasClass('compact')) {\n      // height is auto -> read pref size\n      filterColumnSize = HtmlComponent.get($filterColumn).prefSize();\n    } else {\n      // make filter column as height as body (since body is scrollable pref size is calculated which takes TABLE_MAX_HEIGHT into account)\n      filterColumnSize = this.preferredLayoutSize($container).subtract(graphics.insets($container));\n      filterColumnSize = filterColumnSize.subtract(filterColumnMargins);\n    }\n    // width is always set with css\n    filterColumnSize.width = $filterColumn.cssWidth();\n\n    // Set explicit height, necessary if there is no filter table\n    $filterColumn.cssHeight(filterColumnSize.height);\n\n    // TODO [7.0] cgu this code could be written a lot easier -> replace following code (filter fields, filter table) with HtmlComponent.get($filterColumn).setSize(filterColumnSize);\n    // Same for pref size. To implement max height of table, the RowLayout could read css max-height\n    // Filter fields\n    if (this.popup.hasFilterFields) {\n      let\n        $filterFieldsGroup = this.popup.$filterFieldsGroup,\n        filterFieldHtmlComp = HtmlComponent.get($filterFieldsGroup.find('.form-field'));\n\n      // Layout filter field(s) and get size\n      filterFieldHtmlComp.setSize(new Dimension(filterColumnSize.width - filterColumnInsets.horizontal(), this._filterFieldsGroupBoxHeight()));\n      filterFieldGroupSize = graphics.size($filterFieldsGroup, true);\n    }\n\n    // Filter table\n    if (this.popup.hasFilterTable) {\n      let\n        filterTableContainerHeight,\n        $filterTableGroup = this.popup.$filterTableGroup,\n        filterTableContainerInsets = graphics.insets($filterTableGroup),\n        filterTableHtmlComp = this.popup.filterTable.htmlComp;\n\n      filterTableContainerHeight = filterColumnSize.height - filterColumnInsets.vertical();\n      // subtract height of filter-fields container\n      filterTableContainerHeight -= filterFieldGroupSize.height;\n      // subtract group-title height\n      filterTableContainerHeight -= this._groupTitleHeight($filterTableGroup);\n      // subtract insets of table container\n      filterTableContainerHeight -= filterTableContainerInsets.vertical();\n      // limit height of table\n      filterTableContainerHeight = Math.min(filterTableContainerHeight, TableHeaderMenuLayout.TABLE_MAX_HEIGHT);\n\n      // Layout filter table\n      filterTableHtmlComp.setSize(new Dimension(\n        filterColumnSize.width - filterColumnInsets.horizontal(),\n        filterTableContainerHeight));\n    }\n\n    // fix width of actions column, so it doesn't become wider when user\n    // hovers over a button and thus the text of the group changes.\n    this._setMaxWidth();\n    actionColumnSize = graphics.size(this.popup.$columnActions);\n    this._setMaxWidth(actionColumnSize.width);\n  }\n\n  _adjustSizeWithAnchor(prefSize) {\n    let maxWidth,\n      htmlComp = this.popup.htmlComp,\n      windowPaddingX = this.popup.windowPaddingX,\n      popupMargins = htmlComp.margins(),\n      popupBounds = htmlComp.offsetBounds(),\n      $window = this.popup.$container.window(),\n      windowWidth = $window.width();\n\n    maxWidth = (windowWidth - popupMargins.horizontal() - popupBounds.x - windowPaddingX);\n    let compact = popupBounds.width > maxWidth;\n    if (compact) {\n      this.popup.$body.addClass('compact', compact);\n      prefSize = this.preferredLayoutSize(this.popup.$container);\n    }\n\n    return super._adjustSizeWithAnchor(prefSize);\n  }\n\n  // group title (size used for table + field container)\n  _groupTitleHeight($group) {\n    return graphics.size($group.find('.table-header-menu-group-text'), true).height;\n  }\n\n  _filterFieldsGroupBoxHeight() {\n    return this.popup.filterFieldsGroupBox.htmlComp.prefSize().height;\n  }\n\n  /**\n   * The preferred layout size of this widget is\n   * + size of table (but height is limited to TABLE_MAX_HEIGHT, if table becomes too large)\n   * + size of filter-fields\n   * + paddings of surrounding containers\n   */\n  preferredLayoutSize($container, options) {\n    let prefSize, filterColumnMargins, filterColumnInsets,\n      rightColumnHeight = 0,\n      leftColumnHeight = 0,\n      containerInsets = graphics.insets($container),\n      oldMaxWidth = this._getMaxWidth();\n\n    this._setMaxWidth(); // temp. remove max-width so we can determine pref. size\n    leftColumnHeight = graphics.size(this.popup.$columnActions, true).height;\n\n    // Filter table\n    if (this.popup.hasFilterTable) {\n      let\n        $filterTableGroup = this.popup.$filterTableGroup,\n        filterTableHeight = this.popup.filterTable.htmlComp.size(true).height,\n        filterTableContainerInsets = graphics.insets($filterTableGroup),\n        filterTableContainerHeight;\n\n      // limit height of table\n      filterTableHeight = Math.min(filterTableHeight, TableHeaderMenuLayout.TABLE_MAX_HEIGHT);\n      // size of container with table\n      filterTableContainerHeight = filterTableHeight;\n      // add group-title height\n      filterTableContainerHeight += this._groupTitleHeight($filterTableGroup);\n      // add insets of container\n      filterTableContainerHeight += filterTableContainerInsets.vertical();\n\n      rightColumnHeight += filterTableContainerHeight;\n    }\n\n    // Filter fields\n    if (this.popup.hasFilterFields) {\n      let\n        $filterFieldsGroup = this.popup.$filterFieldsGroup,\n        filterFieldContainerInsets = graphics.insets($filterFieldsGroup),\n        filterFieldContainerHeight;\n\n      // size of group-box with 1 or 2 filter fields\n      filterFieldContainerHeight = this._filterFieldsGroupBoxHeight();\n      // add group-title height\n      filterFieldContainerHeight += this._groupTitleHeight($filterFieldsGroup);\n      // add insets of container\n      filterFieldContainerHeight += filterFieldContainerInsets.vertical();\n\n      rightColumnHeight += filterFieldContainerHeight;\n    }\n\n    if (this.popup.hasFilterFields || this.popup.hasFilterTable) {\n      filterColumnMargins = graphics.margins(this.popup.$columnFilters);\n      filterColumnInsets = graphics.insets(this.popup.$columnFilters);\n      rightColumnHeight += filterColumnMargins.vertical();\n      rightColumnHeight += filterColumnInsets.vertical();\n    }\n\n    // Use height of left or right column as preferred size (and add insets of container)\n    prefSize = graphics.prefSize($container);\n    if (!this.popup.$body.hasClass('compact')) {\n      prefSize.height = Math.max(leftColumnHeight, rightColumnHeight) + containerInsets.vertical();\n    } else {\n      prefSize.height = leftColumnHeight + rightColumnHeight + containerInsets.vertical();\n    }\n\n    // restore max-width\n    this._setMaxWidth(oldMaxWidth);\n\n    return prefSize;\n  }\n\n  _getMaxWidth() {\n    return this.popup.$columnActions.css('max-width');\n  }\n\n  _setMaxWidth(maxWidth) {\n    this.popup.$columnActions.css('max-width', maxWidth || '');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}