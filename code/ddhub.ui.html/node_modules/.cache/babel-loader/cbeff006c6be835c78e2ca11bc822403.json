{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Device, graphics, icons, TableControl, tooltips } from '../../index';\nimport $ from 'jquery';\nexport default class AggregateTableControl extends TableControl {\n  constructor() {\n    super();\n    this._tableDataScrollHandler = this._onTableDataScroll.bind(this);\n    this._tableColumnResizedHandler = this._onTableColumnResized.bind(this);\n    this._tableColumnMovedHandler = this._onTableColumnMoved.bind(this);\n    this._tableColumnStructureChangedHandler = this._onTableColumnStructureChanged.bind(this);\n    this._tableChangedHandler = this._onTableChanged.bind(this);\n    this._aggregationFunctionChangedHandler = this._onAggregationFunctionChanged.bind(this);\n    this.animateDuration = AggregateTableControl.CONTAINER_ANIMATE_DURATION;\n    this.aggregateRow = [];\n    this.cssClass = 'aggregate';\n    this.height = 0; // Will be as height as a row\n    this.iconId = icons.SUM;\n    this.tooltipText = '${textKey:ui.Total}';\n    this.resizerVisible = false;\n  }\n  _init(model) {\n    super._init(model);\n    this.table.on('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.on('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n  _destroy() {\n    super._destroy();\n    this.table.off('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.off('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n  _render() {\n    super._render();\n    this._updateEnabledAndSelectedState();\n    this.height = this.table.rowHeight + graphics.insets(this.table.footer.$controlContainer).vertical();\n  }\n  _renderContent($parent) {\n    this.$contentContainer = $parent.appendDiv('table-aggregate');\n    this._aggregate();\n    this._renderAggregate();\n    this._reconcileScrollPos();\n    this.table.$data.on('scroll', this._tableDataScrollHandler);\n    this.table.on('columnResized', this._tableColumnResizedHandler);\n    this.table.on('columnMoved', this._tableColumnMovedHandler);\n    this.table.on('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n  _removeContent() {\n    this.$contentContainer.remove();\n    this.table.$data.off('scroll', this._tableDataScrollHandler);\n    this.table.off('columnResized', this._tableColumnResizedHandler);\n    this.table.off('columnMoved', this._tableColumnMovedHandler);\n    this.table.off('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n  _renderAggregate() {\n    let aggregateCells = [];\n    this.table.visibleColumns().forEach(function (column, c) {\n      let aggregateValue, cell, $cell;\n      aggregateValue = this.aggregateRow[c];\n      // Aggregation functions are not available if column is grouped -> do not show aggregated value\n      let isEmpty = aggregateValue === undefined || aggregateValue === null || column.grouped;\n      if (isEmpty) {\n        cell = column.createAggrEmptyCell();\n      } else {\n        cell = column.createAggrValueCell(aggregateValue);\n      }\n      $cell = $(column.buildCell(cell, {}));\n      if (!isEmpty) {\n        aggregateCells.push($cell);\n      }\n\n      // install tooltips\n      this._installCellTooltip($cell);\n\n      // If aggregation is based on the selection and not on all rows -> mark it\n      if (this.aggregateRow.selection) {\n        $cell.addClass('selection');\n      }\n      $cell.appendTo(this.$contentContainer);\n    }, this);\n    if (this.aggregateRow.selection) {\n      this.$contentContainer.addClass('selection');\n    }\n    aggregateCells.forEach($c => this.table._resizeAggregateCell($c));\n  }\n  _rerenderAggregate() {\n    this.$contentContainer.empty();\n    this._renderAggregate();\n    this._reconcileScrollPos();\n  }\n  _installCellTooltip($cell) {\n    tooltips.install($cell, {\n      parent: this,\n      text: this.table._cellTooltipText.bind(this.table),\n      htmlEnabled: true,\n      arrowPosition: 50,\n      arrowPositionUnit: '%',\n      nativeTooltip: !Device.get().isCustomEllipsisTooltipPossible()\n    });\n  }\n  _aggregate() {\n    let rows,\n      aggregateRow = [],\n      selectedRows = this.table.selectedRows;\n    if (selectedRows.length > 1) {\n      rows = selectedRows;\n      aggregateRow.selection = true;\n    } else {\n      rows = this.table.filteredRows();\n    }\n    this.table._forEachVisibleColumn('aggrStart', aggregateRow);\n    rows.forEach(function (row) {\n      this.table._forEachVisibleColumn('aggrStep', aggregateRow, row);\n    }, this);\n    this.table._forEachVisibleColumn('aggrFinish', aggregateRow);\n    this.aggregateRow = aggregateRow;\n    if (this.contentRendered && this.selected) {\n      this._rerenderAggregate();\n    }\n  }\n  _reconcileScrollPos() {\n    // When scrolling horizontally scroll aggregate content as well\n    let scrollLeft = this.table.$data.scrollLeft();\n    this.$contentContainer.scrollLeft(scrollLeft);\n  }\n  _updateEnabledAndSelectedState(aggregationFunctionChanged) {\n    if (!this.initialized) {\n      // During init the columns are not resolved yet -> containsAggregatedNumberColumn won't return a correct value\n      return;\n    }\n    let enabled = this.table.containsAggregatedNumberColumn();\n\n    // Select control if enabled, aggregation function changed and table is not grouped\n    if (enabled) {\n      if (aggregationFunctionChanged && !this.table.isGrouped()) {\n        this.setSelected(true);\n      }\n    } else if (this.selected) {\n      // Make sure a disabled control is not selected\n      this.setSelected(false);\n    }\n    this.setEnabled(enabled);\n  }\n  _setEnabled(enabled) {\n    super._setEnabled(enabled);\n    this._updateEnabledAndSelectedState();\n  }\n  _setSelected(selected) {\n    this._setProperty('selected', selected);\n    this._updateEnabledAndSelectedState();\n  }\n  _onTableDataScroll() {\n    this._reconcileScrollPos();\n  }\n\n  /**\n   * Generic handler for various events\n   * @private\n   */\n  _onTableChanged() {\n    this._aggregate();\n  }\n  _onAggregationFunctionChanged() {\n    this._updateEnabledAndSelectedState(true);\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n  _onTableColumnResized() {\n    this._rerenderAggregate();\n  }\n  _onTableColumnMoved(event) {\n    // move aggregated value in aggregateRow\n    arrays.move(this.aggregateRow, event.oldPos, event.newPos);\n    this._rerenderAggregate();\n  }\n  _onTableColumnStructureChanged() {\n    this._updateEnabledAndSelectedState();\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n}\n_defineProperty(AggregateTableControl, \"CONTAINER_ANIMATE_DURATION\", 200);","map":{"version":3,"names":["arrays","Device","graphics","icons","TableControl","tooltips","$","AggregateTableControl","constructor","_tableDataScrollHandler","_onTableDataScroll","bind","_tableColumnResizedHandler","_onTableColumnResized","_tableColumnMovedHandler","_onTableColumnMoved","_tableColumnStructureChangedHandler","_onTableColumnStructureChanged","_tableChangedHandler","_onTableChanged","_aggregationFunctionChangedHandler","_onAggregationFunctionChanged","animateDuration","CONTAINER_ANIMATE_DURATION","aggregateRow","cssClass","height","iconId","SUM","tooltipText","resizerVisible","_init","model","table","on","_destroy","off","_render","_updateEnabledAndSelectedState","rowHeight","insets","footer","$controlContainer","vertical","_renderContent","$parent","$contentContainer","appendDiv","_aggregate","_renderAggregate","_reconcileScrollPos","$data","_removeContent","remove","aggregateCells","visibleColumns","forEach","column","c","aggregateValue","cell","$cell","isEmpty","undefined","grouped","createAggrEmptyCell","createAggrValueCell","buildCell","push","_installCellTooltip","selection","addClass","appendTo","$c","_resizeAggregateCell","_rerenderAggregate","empty","install","parent","text","_cellTooltipText","htmlEnabled","arrowPosition","arrowPositionUnit","nativeTooltip","get","isCustomEllipsisTooltipPossible","rows","selectedRows","length","filteredRows","_forEachVisibleColumn","row","contentRendered","selected","scrollLeft","aggregationFunctionChanged","initialized","enabled","containsAggregatedNumberColumn","isGrouped","setSelected","setEnabled","_setEnabled","_setSelected","_setProperty","event","move","oldPos","newPos"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/controls/AggregateTableControl.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Device, graphics, icons, TableControl, tooltips} from '../../index';\nimport $ from 'jquery';\n\nexport default class AggregateTableControl extends TableControl {\n\n  constructor() {\n    super();\n    this._tableDataScrollHandler = this._onTableDataScroll.bind(this);\n    this._tableColumnResizedHandler = this._onTableColumnResized.bind(this);\n    this._tableColumnMovedHandler = this._onTableColumnMoved.bind(this);\n    this._tableColumnStructureChangedHandler = this._onTableColumnStructureChanged.bind(this);\n    this._tableChangedHandler = this._onTableChanged.bind(this);\n    this._aggregationFunctionChangedHandler = this._onAggregationFunctionChanged.bind(this);\n\n    this.animateDuration = AggregateTableControl.CONTAINER_ANIMATE_DURATION;\n    this.aggregateRow = [];\n    this.cssClass = 'aggregate';\n    this.height = 0; // Will be as height as a row\n    this.iconId = icons.SUM;\n    this.tooltipText = '${textKey:ui.Total}';\n    this.resizerVisible = false;\n  }\n\n  static CONTAINER_ANIMATE_DURATION = 200;\n\n  _init(model) {\n    super._init(model);\n    this.table.on('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.on('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n\n  _destroy() {\n    super._destroy();\n    this.table.off('columnStructureChanged', this._tableColumnStructureChangedHandler);\n    this.table.off('aggregationFunctionChanged', this._aggregationFunctionChangedHandler);\n  }\n\n  _render() {\n    super._render();\n    this._updateEnabledAndSelectedState();\n    this.height = this.table.rowHeight + graphics.insets(this.table.footer.$controlContainer).vertical();\n  }\n\n  _renderContent($parent) {\n    this.$contentContainer = $parent.appendDiv('table-aggregate');\n\n    this._aggregate();\n    this._renderAggregate();\n    this._reconcileScrollPos();\n\n    this.table.$data.on('scroll', this._tableDataScrollHandler);\n    this.table.on('columnResized', this._tableColumnResizedHandler);\n    this.table.on('columnMoved', this._tableColumnMovedHandler);\n    this.table.on('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n\n  _removeContent() {\n    this.$contentContainer.remove();\n\n    this.table.$data.off('scroll', this._tableDataScrollHandler);\n    this.table.off('columnResized', this._tableColumnResizedHandler);\n    this.table.off('columnMoved', this._tableColumnMovedHandler);\n    this.table.off('rowsSelected rowsInserted rowsUpdated rowsDeleted filter group allRowsDeleted', this._tableChangedHandler);\n  }\n\n  _renderAggregate() {\n    let aggregateCells = [];\n    this.table.visibleColumns().forEach(function(column, c) {\n      let aggregateValue, cell, $cell;\n\n      aggregateValue = this.aggregateRow[c];\n      // Aggregation functions are not available if column is grouped -> do not show aggregated value\n      let isEmpty = aggregateValue === undefined || aggregateValue === null || column.grouped;\n      if (isEmpty) {\n        cell = column.createAggrEmptyCell();\n      } else {\n        cell = column.createAggrValueCell(aggregateValue);\n      }\n      $cell = $(column.buildCell(cell, {}));\n      if (!isEmpty) {\n        aggregateCells.push($cell);\n      }\n\n      // install tooltips\n      this._installCellTooltip($cell);\n\n      // If aggregation is based on the selection and not on all rows -> mark it\n      if (this.aggregateRow.selection) {\n        $cell.addClass('selection');\n      }\n\n      $cell.appendTo(this.$contentContainer);\n    }, this);\n\n    if (this.aggregateRow.selection) {\n      this.$contentContainer.addClass('selection');\n    }\n\n    aggregateCells.forEach($c => this.table._resizeAggregateCell($c));\n  }\n\n  _rerenderAggregate() {\n    this.$contentContainer.empty();\n    this._renderAggregate();\n    this._reconcileScrollPos();\n  }\n\n  _installCellTooltip($cell) {\n    tooltips.install($cell, {\n      parent: this,\n      text: this.table._cellTooltipText.bind(this.table),\n      htmlEnabled: true,\n      arrowPosition: 50,\n      arrowPositionUnit: '%',\n      nativeTooltip: !Device.get().isCustomEllipsisTooltipPossible()\n    });\n  }\n\n  _aggregate() {\n    let rows,\n      aggregateRow = [],\n      selectedRows = this.table.selectedRows;\n\n    if (selectedRows.length > 1) {\n      rows = selectedRows;\n      aggregateRow.selection = true;\n    } else {\n      rows = this.table.filteredRows();\n    }\n\n    this.table._forEachVisibleColumn('aggrStart', aggregateRow);\n    rows.forEach(function(row) {\n      this.table._forEachVisibleColumn('aggrStep', aggregateRow, row);\n    }, this);\n    this.table._forEachVisibleColumn('aggrFinish', aggregateRow);\n\n    this.aggregateRow = aggregateRow;\n    if (this.contentRendered && this.selected) {\n      this._rerenderAggregate();\n    }\n  }\n\n  _reconcileScrollPos() {\n    // When scrolling horizontally scroll aggregate content as well\n    let scrollLeft = this.table.$data.scrollLeft();\n    this.$contentContainer.scrollLeft(scrollLeft);\n  }\n\n  _updateEnabledAndSelectedState(aggregationFunctionChanged) {\n    if (!this.initialized) {\n      // During init the columns are not resolved yet -> containsAggregatedNumberColumn won't return a correct value\n      return;\n    }\n    let enabled = this.table.containsAggregatedNumberColumn();\n\n    // Select control if enabled, aggregation function changed and table is not grouped\n    if (enabled) {\n      if (aggregationFunctionChanged && !this.table.isGrouped()) {\n        this.setSelected(true);\n      }\n    } else if (this.selected) {\n      // Make sure a disabled control is not selected\n      this.setSelected(false);\n    }\n    this.setEnabled(enabled);\n  }\n\n  _setEnabled(enabled) {\n    super._setEnabled(enabled);\n    this._updateEnabledAndSelectedState();\n  }\n\n  _setSelected(selected) {\n    this._setProperty('selected', selected);\n    this._updateEnabledAndSelectedState();\n  }\n\n  _onTableDataScroll() {\n    this._reconcileScrollPos();\n  }\n\n  /**\n   * Generic handler for various events\n   * @private\n   */\n  _onTableChanged() {\n    this._aggregate();\n  }\n\n  _onAggregationFunctionChanged() {\n    this._updateEnabledAndSelectedState(true);\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n\n  _onTableColumnResized() {\n    this._rerenderAggregate();\n  }\n\n  _onTableColumnMoved(event) {\n    // move aggregated value in aggregateRow\n    arrays.move(this.aggregateRow, event.oldPos, event.newPos);\n    this._rerenderAggregate();\n  }\n\n  _onTableColumnStructureChanged() {\n    this._updateEnabledAndSelectedState();\n    if (this.contentRendered && this.selected) {\n      this._aggregate();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}