{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Form, scout } from '../index';\n\n/**\n * Controller with functionality to register and render message boxes.\n *\n * The message boxes are put into the list 'messageBoxes' contained in 'displayParent'.\n */\nexport default class MessageBoxController {\n  constructor(displayParent, session) {\n    this.displayParent = displayParent;\n    this.session = session;\n  }\n\n  /**\n   * Adds the given message box to this controller and renders it.\n   */\n  registerAndRender(messageBox) {\n    scout.assertProperty(messageBox, 'displayParent');\n    this.displayParent.messageBoxes.push(messageBox);\n    this._render(messageBox);\n  }\n\n  /**\n   * Removes the given message box from this controller and DOM. However, the message box's adapter is not destroyed. That only happens once the message box is closed.\n   */\n  unregisterAndRemove(messageBox) {\n    if (messageBox) {\n      arrays.remove(this.displayParent.messageBoxes, messageBox);\n      this._remove(messageBox);\n    }\n  }\n\n  /**\n   * Removes all message boxes registered with this controller from DOM.\n   */\n  remove() {\n    this.displayParent.messageBoxes.forEach(this._remove.bind(this));\n  }\n\n  /**\n   * Renders all message boxes registered with this controller.\n   */\n  render() {\n    this.displayParent.messageBoxes.forEach(msgBox => {\n      msgBox.setDisplayParent(this.displayParent);\n      this._render(msgBox);\n    });\n  }\n  _render(messageBox) {\n    // missing displayParent (when render is called by reload), use displayParent of MessageBoxController\n    if (!messageBox.displayParent) {\n      messageBox._setProperty('displayParent', this.displayParent);\n    }\n    // Use parent's function or (if not implemented) our own.\n    if (this.displayParent.acceptView) {\n      if (!this.displayParent.acceptView(messageBox)) {\n        return;\n      }\n    } else if (!this.acceptView(messageBox)) {\n      return;\n    }\n\n    // Prevent \"Already rendered\" errors --> TODO [7.0] bsh: Remove this hack! Fix it on model if possible. See #162954.\n    if (messageBox.rendered) {\n      return;\n    }\n    // Open all message boxes in the center of the desktop, except message-boxes that belong to a popup-window\n    // Since the message box doesn't have a DOM element as parent when render is called, we must find the\n    // entryPoint by using the model.\n    let $mbParent;\n    if (this.displayParent instanceof Form && this.displayParent.isPopupWindow()) {\n      $mbParent = this.displayParent.popupWindow.$container;\n    } else {\n      $mbParent = this.session.desktop.$container;\n    }\n    // start focus tracking if not already started.\n    messageBox.setTrackFocus(true);\n    messageBox.render($mbParent);\n\n    // Only display the message box if its 'displayParent' is visible to the user.\n    if (!this.displayParent.inFront()) {\n      messageBox.detach();\n    }\n  }\n  _remove(messageBox) {\n    messageBox.remove();\n  }\n\n  /**\n   * Attaches all message boxes to their original DOM parents.\n   * In contrast to 'render', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already attached.\n   */\n  attach() {\n    this.displayParent.messageBoxes.forEach(messageBox => {\n      messageBox.attach();\n    }, this);\n  }\n\n  /**\n   * Detaches all message boxes from their DOM parents. Thereby, modality glassPanes are not detached.\n   * In contrast to 'remove', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already detached.\n   */\n  detach() {\n    this.displayParent.messageBoxes.forEach(messageBox => {\n      messageBox.detach();\n    }, this);\n  }\n  acceptView(view) {\n    return this.displayParent.rendered;\n  }\n}","map":{"version":3,"names":["arrays","Form","scout","MessageBoxController","constructor","displayParent","session","registerAndRender","messageBox","assertProperty","messageBoxes","push","_render","unregisterAndRemove","remove","_remove","forEach","bind","render","msgBox","setDisplayParent","_setProperty","acceptView","rendered","$mbParent","isPopupWindow","popupWindow","$container","desktop","setTrackFocus","inFront","detach","attach","view"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/messagebox/MessageBoxController.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Form, scout} from '../index';\n\n/**\n * Controller with functionality to register and render message boxes.\n *\n * The message boxes are put into the list 'messageBoxes' contained in 'displayParent'.\n */\nexport default class MessageBoxController {\n\n  constructor(displayParent, session) {\n    this.displayParent = displayParent;\n    this.session = session;\n  }\n\n  /**\n   * Adds the given message box to this controller and renders it.\n   */\n  registerAndRender(messageBox) {\n    scout.assertProperty(messageBox, 'displayParent');\n    this.displayParent.messageBoxes.push(messageBox);\n    this._render(messageBox);\n  }\n\n  /**\n   * Removes the given message box from this controller and DOM. However, the message box's adapter is not destroyed. That only happens once the message box is closed.\n   */\n  unregisterAndRemove(messageBox) {\n    if (messageBox) {\n      arrays.remove(this.displayParent.messageBoxes, messageBox);\n      this._remove(messageBox);\n    }\n  }\n\n  /**\n   * Removes all message boxes registered with this controller from DOM.\n   */\n  remove() {\n    this.displayParent.messageBoxes.forEach(this._remove.bind(this));\n  }\n\n  /**\n   * Renders all message boxes registered with this controller.\n   */\n  render() {\n    this.displayParent.messageBoxes.forEach(msgBox => {\n      msgBox.setDisplayParent(this.displayParent);\n      this._render(msgBox);\n    });\n  }\n\n  _render(messageBox) {\n    // missing displayParent (when render is called by reload), use displayParent of MessageBoxController\n    if (!messageBox.displayParent) {\n      messageBox._setProperty('displayParent', this.displayParent);\n    }\n    // Use parent's function or (if not implemented) our own.\n    if (this.displayParent.acceptView) {\n      if (!this.displayParent.acceptView(messageBox)) {\n        return;\n      }\n    } else if (!this.acceptView(messageBox)) {\n      return;\n    }\n\n    // Prevent \"Already rendered\" errors --> TODO [7.0] bsh: Remove this hack! Fix it on model if possible. See #162954.\n    if (messageBox.rendered) {\n      return;\n    }\n    // Open all message boxes in the center of the desktop, except message-boxes that belong to a popup-window\n    // Since the message box doesn't have a DOM element as parent when render is called, we must find the\n    // entryPoint by using the model.\n    let $mbParent;\n    if (this.displayParent instanceof Form && this.displayParent.isPopupWindow()) {\n      $mbParent = this.displayParent.popupWindow.$container;\n    } else {\n      $mbParent = this.session.desktop.$container;\n    }\n    // start focus tracking if not already started.\n    messageBox.setTrackFocus(true);\n    messageBox.render($mbParent);\n\n    // Only display the message box if its 'displayParent' is visible to the user.\n    if (!this.displayParent.inFront()) {\n      messageBox.detach();\n    }\n  }\n\n  _remove(messageBox) {\n    messageBox.remove();\n  }\n\n  /**\n   * Attaches all message boxes to their original DOM parents.\n   * In contrast to 'render', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already attached.\n   */\n  attach() {\n    this.displayParent.messageBoxes.forEach(messageBox => {\n      messageBox.attach();\n    }, this);\n  }\n\n  /**\n   * Detaches all message boxes from their DOM parents. Thereby, modality glassPanes are not detached.\n   * In contrast to 'remove', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.\n   *\n   * This method has no effect if already detached.\n   */\n  detach() {\n    this.displayParent.messageBoxes.forEach(messageBox => {\n      messageBox.detach();\n    }, this);\n  }\n\n  acceptView(view) {\n    return this.displayParent.rendered;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}