{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, EventDelegator, FormField, objects, scout, TableRow } from '../../../index';\nexport default class TableField extends FormField {\n  constructor() {\n    super();\n    this.gridDataHints.weightY = 1.0;\n    this.gridDataHints.h = 3;\n    this.eventDelegator = null;\n    this._tableChangedHandler = this._onTableChanged.bind(this);\n    this._deletedRows = objects.createMap();\n    this._insertedRows = objects.createMap();\n    this._updatedRows = objects.createMap();\n    this._checkedRows = objects.createMap();\n    this._addWidgetProperties(['table']);\n  }\n  _init(model) {\n    super._init(model);\n    this._setTable(this.table);\n  }\n  _render() {\n    this.addContainer(this.$parent, 'table-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    this.addStatus();\n    this._renderTable();\n  }\n  setTable(table) {\n    this.setProperty('table', table);\n  }\n  _setTable(table) {\n    if (this.table) {\n      this.table.off(TableField.TABLE_CHANGE_EVENTS, this._tableChangedHandler);\n      if (this.eventDelegator) {\n        this.eventDelegator.destroy();\n        this.eventDelegator = null;\n      }\n    }\n    this._setProperty('table', table);\n    if (table) {\n      table.on(TableField.TABLE_CHANGE_EVENTS, this._tableChangedHandler);\n      this.eventDelegator = EventDelegator.create(this, table, {\n        delegateProperties: ['enabled', 'disabledStyle', 'loading']\n      });\n      table.setDisabledStyle(this.disabledStyle);\n      table.setLoading(this.loading);\n      table.setScrollTop(this.scrollTop);\n    }\n  }\n  _renderTable() {\n    if (!this.table) {\n      return;\n    }\n    this.table.render();\n    this.addField(this.table.$container);\n    this.$field.addDeviceClass();\n    this.invalidateLayoutTree();\n  }\n  _removeTable() {\n    if (!this.table) {\n      return;\n    }\n    this.table.remove();\n    this._removeField();\n    this.invalidateLayoutTree();\n  }\n  computeRequiresSave() {\n    return Object.keys(this._deletedRows).length > 0 || Object.keys(this._insertedRows).length > 0 || Object.keys(this._updatedRows).length > 0 || Object.keys(this._checkedRows).length > 0;\n  }\n  _onTableChanged(event) {\n    if (scout.isOneOf(event.type, 'rowsDeleted', 'allRowsDeleted')) {\n      this._updateDeletedRows(event.rows);\n    } else if (event.type === 'rowsInserted') {\n      this._updateInsertedRows(event.rows);\n    } else if (event.type === 'rowsUpdated') {\n      this._updateUpdatedRows(event.rows);\n    } else if (event.type === 'rowsChecked') {\n      this._updateCheckedRows(event.rows);\n    }\n  }\n  _updateDeletedRows(rows) {\n    rows.forEach(function (row) {\n      if (row.id in this._insertedRows) {\n        // If a row is contained in _insertedRows an inserted row has been deleted again.\n        // In that case we can remove that row from the maps and don't have to add it to deletedRows as well.\n        delete this._insertedRows[row.id];\n        delete this._updatedRows[row.id];\n        delete this._checkedRows[row.id];\n        return;\n      }\n      this._deletedRows[row.id] = row;\n    }, this);\n  }\n  _updateInsertedRows(rows) {\n    rows.forEach(function (row) {\n      this._insertedRows[row.id] = row;\n    }, this);\n  }\n  _updateUpdatedRows(rows) {\n    rows.forEach(function (row) {\n      if (row.status === TableRow.Status.NON_CHANGED) {\n        return;\n      }\n      this._updatedRows[row.id] = row;\n    }, this);\n  }\n\n  /**\n   * If a row already exists in the _checkedRows array, remove it (row was checked/unchecked again, which\n   * means it is no longer changed). Add it to the array otherwise.\n   */\n  _updateCheckedRows(rows) {\n    rows.forEach(function (row) {\n      if (row.id in this._checkedRows) {\n        delete this._checkedRows[row.id];\n      } else {\n        this._checkedRows[row.id] = row;\n      }\n    }, this);\n  }\n  markAsSaved() {\n    super.markAsSaved();\n    this._deletedRows = objects.createMap();\n    this._insertedRows = objects.createMap();\n    this._updatedRows = objects.createMap();\n    this._checkedRows = objects.createMap();\n    this.table.markRowsAsNonChanged();\n  }\n  getValidationResult() {\n    let desc = super.getValidationResult();\n    if (desc && !desc.valid) {\n      return desc;\n    }\n    let validByErrorStatus = !this.errorStatus;\n    let validByMandatory = !this.mandatory || !this.empty;\n\n    // check cells\n    let rows = arrays.ensure(this.table.rows);\n    let columns = arrays.ensure(this.table.columns);\n    let reveal = () => {};\n    let label = this.label || '';\n    rows.some(function (row) {\n      return columns.some(column => {\n        let ret = column.isContentValid(row);\n        if (!ret.valid) {\n          reveal = () => {\n            desc.reveal();\n            this.table.focusCell(column, row);\n          };\n          if (label) {\n            label += ': ';\n          }\n          label += column.text;\n          validByErrorStatus = validByErrorStatus && ret.validByErrorStatus;\n          validByMandatory = validByMandatory && ret.validByMandatory;\n          return !(validByErrorStatus || validByMandatory);\n        }\n        return false;\n      }, this);\n    }, this);\n    return {\n      valid: validByErrorStatus && validByMandatory,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory,\n      field: this,\n      label: label,\n      reveal: reveal\n    };\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.table;\n  }\n}\n_defineProperty(TableField, \"TABLE_CHANGE_EVENTS\", 'rowsInserted rowsDeleted allRowsDeleted rowsUpdated rowsChecked');","map":{"version":3,"names":["arrays","EventDelegator","FormField","objects","scout","TableRow","TableField","constructor","gridDataHints","weightY","h","eventDelegator","_tableChangedHandler","_onTableChanged","bind","_deletedRows","createMap","_insertedRows","_updatedRows","_checkedRows","_addWidgetProperties","_init","model","_setTable","table","_render","addContainer","$parent","addLabel","addMandatoryIndicator","addStatus","_renderTable","setTable","setProperty","off","TABLE_CHANGE_EVENTS","destroy","_setProperty","on","create","delegateProperties","setDisabledStyle","disabledStyle","setLoading","loading","setScrollTop","scrollTop","render","addField","$container","$field","addDeviceClass","invalidateLayoutTree","_removeTable","remove","_removeField","computeRequiresSave","Object","keys","length","event","isOneOf","type","_updateDeletedRows","rows","_updateInsertedRows","_updateUpdatedRows","_updateCheckedRows","forEach","row","id","status","Status","NON_CHANGED","markAsSaved","markRowsAsNonChanged","getValidationResult","desc","valid","validByErrorStatus","errorStatus","validByMandatory","mandatory","empty","ensure","columns","reveal","label","some","column","ret","isContentValid","focusCell","text","field","getDelegateScrollable"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/tablefield/TableField.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, EventDelegator, FormField, objects, scout, TableRow} from '../../../index';\n\nexport default class TableField extends FormField {\n\n  constructor() {\n    super();\n\n    this.gridDataHints.weightY = 1.0;\n    this.gridDataHints.h = 3;\n    this.eventDelegator = null;\n    this._tableChangedHandler = this._onTableChanged.bind(this);\n    this._deletedRows = objects.createMap();\n    this._insertedRows = objects.createMap();\n    this._updatedRows = objects.createMap();\n    this._checkedRows = objects.createMap();\n    this._addWidgetProperties(['table']);\n  }\n\n  static TABLE_CHANGE_EVENTS = 'rowsInserted rowsDeleted allRowsDeleted rowsUpdated rowsChecked';\n\n  _init(model) {\n    super._init(model);\n\n    this._setTable(this.table);\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'table-field');\n    this.addLabel();\n    this.addMandatoryIndicator();\n    this.addStatus();\n    this._renderTable();\n  }\n\n  setTable(table) {\n    this.setProperty('table', table);\n  }\n\n  _setTable(table) {\n    if (this.table) {\n      this.table.off(TableField.TABLE_CHANGE_EVENTS, this._tableChangedHandler);\n      if (this.eventDelegator) {\n        this.eventDelegator.destroy();\n        this.eventDelegator = null;\n      }\n    }\n    this._setProperty('table', table);\n    if (table) {\n      table.on(TableField.TABLE_CHANGE_EVENTS, this._tableChangedHandler);\n      this.eventDelegator = EventDelegator.create(this, table, {\n        delegateProperties: ['enabled', 'disabledStyle', 'loading']\n      });\n      table.setDisabledStyle(this.disabledStyle);\n      table.setLoading(this.loading);\n      table.setScrollTop(this.scrollTop);\n    }\n  }\n\n  _renderTable() {\n    if (!this.table) {\n      return;\n    }\n    this.table.render();\n    this.addField(this.table.$container);\n    this.$field.addDeviceClass();\n    this.invalidateLayoutTree();\n  }\n\n  _removeTable() {\n    if (!this.table) {\n      return;\n    }\n    this.table.remove();\n    this._removeField();\n    this.invalidateLayoutTree();\n  }\n\n  computeRequiresSave() {\n    return Object.keys(this._deletedRows).length > 0 ||\n      Object.keys(this._insertedRows).length > 0 ||\n      Object.keys(this._updatedRows).length > 0 ||\n      Object.keys(this._checkedRows).length > 0;\n  }\n\n  _onTableChanged(event) {\n    if (scout.isOneOf(event.type, 'rowsDeleted', 'allRowsDeleted')) {\n      this._updateDeletedRows(event.rows);\n    } else if (event.type === 'rowsInserted') {\n      this._updateInsertedRows(event.rows);\n    } else if (event.type === 'rowsUpdated') {\n      this._updateUpdatedRows(event.rows);\n    } else if (event.type === 'rowsChecked') {\n      this._updateCheckedRows(event.rows);\n    }\n  }\n\n  _updateDeletedRows(rows) {\n    rows.forEach(function(row) {\n      if (row.id in this._insertedRows) {\n        // If a row is contained in _insertedRows an inserted row has been deleted again.\n        // In that case we can remove that row from the maps and don't have to add it to deletedRows as well.\n        delete this._insertedRows[row.id];\n        delete this._updatedRows[row.id];\n        delete this._checkedRows[row.id];\n        return;\n      }\n      this._deletedRows[row.id] = row;\n    }, this);\n  }\n\n  _updateInsertedRows(rows) {\n    rows.forEach(function(row) {\n      this._insertedRows[row.id] = row;\n    }, this);\n  }\n\n  _updateUpdatedRows(rows) {\n    rows.forEach(function(row) {\n      if (row.status === TableRow.Status.NON_CHANGED) {\n        return;\n      }\n      this._updatedRows[row.id] = row;\n    }, this);\n  }\n\n  /**\n   * If a row already exists in the _checkedRows array, remove it (row was checked/unchecked again, which\n   * means it is no longer changed). Add it to the array otherwise.\n   */\n  _updateCheckedRows(rows) {\n    rows.forEach(function(row) {\n      if (row.id in this._checkedRows) {\n        delete this._checkedRows[row.id];\n      } else {\n        this._checkedRows[row.id] = row;\n      }\n    }, this);\n  }\n\n  markAsSaved() {\n    super.markAsSaved();\n    this._deletedRows = objects.createMap();\n    this._insertedRows = objects.createMap();\n    this._updatedRows = objects.createMap();\n    this._checkedRows = objects.createMap();\n    this.table.markRowsAsNonChanged();\n  }\n\n  getValidationResult() {\n    let desc = super.getValidationResult();\n    if (desc && !desc.valid) {\n      return desc;\n    }\n\n    let validByErrorStatus = !this.errorStatus;\n    let validByMandatory = !this.mandatory || !this.empty;\n\n    // check cells\n    let rows = arrays.ensure(this.table.rows);\n    let columns = arrays.ensure(this.table.columns);\n    let reveal = () => {\n    };\n    let label = this.label || '';\n\n    rows.some(function(row) {\n      return columns.some(column => {\n        let ret = column.isContentValid(row);\n        if (!ret.valid) {\n          reveal = () => {\n            desc.reveal();\n            this.table.focusCell(column, row);\n          };\n          if (label) {\n            label += ': ';\n          }\n          label += column.text;\n          validByErrorStatus = validByErrorStatus && ret.validByErrorStatus;\n          validByMandatory = validByMandatory && ret.validByMandatory;\n          return !(validByErrorStatus || validByMandatory);\n        }\n        return false;\n      }, this);\n    }, this);\n\n    return {\n      valid: validByErrorStatus && validByMandatory,\n      validByErrorStatus: validByErrorStatus,\n      validByMandatory: validByMandatory,\n      field: this,\n      label: label,\n      reveal: reveal\n    };\n  }\n\n  /**\n   * @override\n   */\n  getDelegateScrollable() {\n    return this.table;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}