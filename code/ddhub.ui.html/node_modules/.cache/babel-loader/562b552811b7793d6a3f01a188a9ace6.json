{"ast":null,"code":"/*\n * Copyright (c) 2010-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, LookupCall, objects, scout } from '../index';\nimport $ from 'jquery';\n\n/**\n * A lookup call that can load lookup rows from a REST service.\n *\n * API:\n * ----\n * By default, the REST service is expected to listen for POST requests at the URL defined by\n * this.resourceUrl. It receives a restriction object and must return a list of matching lookup rows.\n * The serialization format is JSON.\n *\n * Lookup rows:\n * ------------\n * The standard lookup row properties defined by Scout are usually sufficient (see AbstractLookupRowDo.java).\n *\n * Restriction:\n * ------------\n * The restriction object consists of a number of 'well-known' properties (e.g. 'text' in QueryBy.TEXT\n * mode, see AbstractLookupRestrictionDo.java for details) and additional, service-dependent properties\n * that can either be predefined in the model or added programmatically at runtime. Since all of those\n * properties are sent in the same restriction object, some care must be taken to prevent accidental\n * overwriting of properties.\n *\n * Order of precedence (lowest to highest):\n * 1. Restrictions automatically applied to all clones after their creation in the respective cloneFor method.\n *    These are: 'active' (ALL, TEXT, REC) and 'maxRowCount' (ALL, TEXT, REC)\n * 2. Restrictions predefined in the model property 'restriction', shared by all clones.\n * 3. Restrictions applied to clones programmatically, e.g. during a 'prepareLookupCall' event.\n * 4. Hard-coded properties that are fundamental to the respective queryBy mode (cannot be overridden).\n *    These are: 'ids' (KEY, KEYS) and 'text' (TEXT)\n */\nexport default class RestLookupCall extends LookupCall {\n  constructor() {\n    super();\n    this.resourceUrl = null;\n    this.maxTextLength = null;\n\n    // for predefined restrictions only (e.g. in JSON or sub-classes), don't change this attribute! this instance is shared with all clones!\n    this.restriction = null;\n\n    // dynamically added restrictions. after setting this attribute, this instance is shared with all following clones!\n    this._restriction = null;\n    this._ajaxCall = null;\n    this._deferred = null;\n\n    // RestLookupCall implements getByKeys\n    this.batch = true;\n  }\n\n  /**\n   * Use this function with caution! Added restrictions will be shared among cloned instances\n   * and the current instance if this function was also called before cloning!\n   */\n  addRestriction(key, value) {\n    if (!this._restriction) {\n      this._restriction = {};\n    }\n    this._restriction[key] = value;\n  }\n\n  /**\n   * Adds the given key-value pair to 'this._restriction', but only if there is no predefined\n   * value for this key in 'this.restriction'. This prevents unintentional overriding of\n   * user-defined model restrictions.\n   */\n  _addRestrictionIfAbsent(key, value) {\n    if (!this.restriction || objects.isNullOrUndefined(this.restriction[key])) {\n      this.addRestriction(key, value);\n    }\n  }\n  _getAll() {\n    return this._call();\n  }\n  _getByText(text) {\n    this.addRestriction('text', text);\n    return this._call();\n  }\n  _getByKey(key) {\n    this.addRestriction('ids', arrays.ensure(key));\n    return this._call();\n  }\n  _getByKeys(keys) {\n    this.addRestriction('ids', arrays.ensure(keys));\n    return this._call();\n  }\n  cloneForAll() {\n    let clone = super.cloneForAll();\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n  cloneForText(text) {\n    let clone = super.cloneForText(text);\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n  cloneForRec(parentKey) {\n    let clone = super.cloneForRec(parentKey);\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n  _acceptLookupRow(lookupRowDo) {\n    return true;\n  }\n  _createLookupRowFromDo(lookupRowDo) {\n    // propagate all properties from lookup row do to scout lookup row (there might be custom ones on specific lookup row dos)\n    let clonedLookupRowDo = $.extend({}, lookupRowDo);\n    // text, enabled and active are the same for Scout LookupRow and Studio LookupRowDo\n\n    // id -> key\n    clonedLookupRowDo.key = clonedLookupRowDo.id;\n    delete clonedLookupRowDo.id;\n\n    // parentId -> parentKey\n    clonedLookupRowDo.parentKey = clonedLookupRowDo.parentId;\n    delete clonedLookupRowDo.parentId;\n\n    // unused on Scout LookupRow\n    delete clonedLookupRowDo._type;\n    if (this.maxTextLength) {\n      let text = clonedLookupRowDo.text;\n      if (text.length > this.maxTextLength) {\n        clonedLookupRowDo.text = text.substr(0, this.maxTextLength) + '...';\n        clonedLookupRowDo.tooltipText = text;\n      }\n    }\n    return scout.create('LookupRow', clonedLookupRowDo, {\n      ensureUniqueId: false\n    });\n  }\n  _call() {\n    this._deferred = $.Deferred();\n    this._ajaxCall = this._createAjaxCall();\n    this._ajaxCall.call().then((data, textStatus, jqXHR) => {\n      let lookupRows = arrays.ensure(data ? data.rows : null).filter(this._acceptLookupRow.bind(this)).map(this._createLookupRowFromDo.bind(this));\n      this._deferred.resolve({\n        queryBy: this.queryBy,\n        text: this.searchText,\n        key: this.key,\n        lookupRows: lookupRows\n      });\n    }).catch(ajaxError => {\n      this._deferred.resolve({\n        queryBy: this.queryBy,\n        text: this.searchText,\n        key: this.key,\n        lookupRows: [],\n        exception: this.session.text('ErrorWhileLoadingData')\n      });\n    });\n    return this._deferred.promise();\n  }\n  abort() {\n    this._deferred.reject({\n      canceled: true\n    });\n    this._ajaxCall.abort();\n    super.abort();\n  }\n  _getCallUrl() {\n    return this.resourceUrl;\n  }\n  _getRestrictionForAjaxCall() {\n    if (!this.restriction && !this._restriction) {\n      return null;\n    }\n    let resolveValue = value => {\n      if (typeof value === 'function') {\n        // Dynamic evaluation of the restriction value\n        return value(this);\n      }\n      return value;\n    };\n    let resolvedRestriction = {};\n    let restriction = $.extend({}, this.restriction, this._restriction);\n    Object.keys(restriction).forEach(key => {\n      let value = restriction[key];\n      let newValue;\n      if (Array.isArray(value)) {\n        // Resolve each array element individually, remove null values\n        newValue = value.map(resolveValue).filter(Boolean);\n        newValue = newValue.length ? newValue : null;\n      } else {\n        newValue = resolveValue(value);\n      }\n      // Only add non-null restrictions\n      if (!objects.isNullOrUndefined(newValue)) {\n        resolvedRestriction[key] = newValue;\n      }\n    });\n    return resolvedRestriction;\n  }\n  _createAjaxCall() {\n    let url = this._getCallUrl();\n    let restriction = this._getRestrictionForAjaxCall();\n    let data = restriction ? JSON.stringify(restriction) : null;\n    let ajaxOptions = {\n      type: 'POST',\n      data: data,\n      dataType: 'json',\n      contentType: 'application/json; charset=UTF-8',\n      cache: false,\n      url: url,\n      timeout: 0\n    };\n    return scout.create('AjaxCall', {\n      ajaxOptions: ajaxOptions,\n      name: 'RestLookupCall',\n      retryIntervals: [100, 500, 500, 500]\n    }, {\n      ensureUniqueId: false\n    });\n  }\n}","map":{"version":3,"names":["arrays","LookupCall","objects","scout","$","RestLookupCall","constructor","resourceUrl","maxTextLength","restriction","_restriction","_ajaxCall","_deferred","batch","addRestriction","key","value","_addRestrictionIfAbsent","isNullOrUndefined","_getAll","_call","_getByText","text","_getByKey","ensure","_getByKeys","keys","cloneForAll","clone","maxRowCount","cloneForText","cloneForRec","parentKey","_acceptLookupRow","lookupRowDo","_createLookupRowFromDo","clonedLookupRowDo","extend","id","parentId","_type","length","substr","tooltipText","create","ensureUniqueId","Deferred","_createAjaxCall","call","then","data","textStatus","jqXHR","lookupRows","rows","filter","bind","map","resolve","queryBy","searchText","catch","ajaxError","exception","session","promise","abort","reject","canceled","_getCallUrl","_getRestrictionForAjaxCall","resolveValue","resolvedRestriction","Object","forEach","newValue","Array","isArray","Boolean","url","JSON","stringify","ajaxOptions","type","dataType","contentType","cache","timeout","name","retryIntervals"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/lookup/RestLookupCall.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, LookupCall, objects, scout} from '../index';\nimport $ from 'jquery';\n\n/**\n * A lookup call that can load lookup rows from a REST service.\n *\n * API:\n * ----\n * By default, the REST service is expected to listen for POST requests at the URL defined by\n * this.resourceUrl. It receives a restriction object and must return a list of matching lookup rows.\n * The serialization format is JSON.\n *\n * Lookup rows:\n * ------------\n * The standard lookup row properties defined by Scout are usually sufficient (see AbstractLookupRowDo.java).\n *\n * Restriction:\n * ------------\n * The restriction object consists of a number of 'well-known' properties (e.g. 'text' in QueryBy.TEXT\n * mode, see AbstractLookupRestrictionDo.java for details) and additional, service-dependent properties\n * that can either be predefined in the model or added programmatically at runtime. Since all of those\n * properties are sent in the same restriction object, some care must be taken to prevent accidental\n * overwriting of properties.\n *\n * Order of precedence (lowest to highest):\n * 1. Restrictions automatically applied to all clones after their creation in the respective cloneFor method.\n *    These are: 'active' (ALL, TEXT, REC) and 'maxRowCount' (ALL, TEXT, REC)\n * 2. Restrictions predefined in the model property 'restriction', shared by all clones.\n * 3. Restrictions applied to clones programmatically, e.g. during a 'prepareLookupCall' event.\n * 4. Hard-coded properties that are fundamental to the respective queryBy mode (cannot be overridden).\n *    These are: 'ids' (KEY, KEYS) and 'text' (TEXT)\n */\nexport default class RestLookupCall extends LookupCall {\n\n  constructor() {\n    super();\n    this.resourceUrl = null;\n    this.maxTextLength = null;\n\n    // for predefined restrictions only (e.g. in JSON or sub-classes), don't change this attribute! this instance is shared with all clones!\n    this.restriction = null;\n\n    // dynamically added restrictions. after setting this attribute, this instance is shared with all following clones!\n    this._restriction = null;\n\n    this._ajaxCall = null;\n    this._deferred = null;\n\n    // RestLookupCall implements getByKeys\n    this.batch = true;\n  }\n\n  /**\n   * Use this function with caution! Added restrictions will be shared among cloned instances\n   * and the current instance if this function was also called before cloning!\n   */\n  addRestriction(key, value) {\n    if (!this._restriction) {\n      this._restriction = {};\n    }\n    this._restriction[key] = value;\n  }\n\n  /**\n   * Adds the given key-value pair to 'this._restriction', but only if there is no predefined\n   * value for this key in 'this.restriction'. This prevents unintentional overriding of\n   * user-defined model restrictions.\n   */\n  _addRestrictionIfAbsent(key, value) {\n    if (!this.restriction || objects.isNullOrUndefined(this.restriction[key])) {\n      this.addRestriction(key, value);\n    }\n  }\n\n  _getAll() {\n    return this._call();\n  }\n\n  _getByText(text) {\n    this.addRestriction('text', text);\n    return this._call();\n  }\n\n  _getByKey(key) {\n    this.addRestriction('ids', arrays.ensure(key));\n    return this._call();\n  }\n\n  _getByKeys(keys) {\n    this.addRestriction('ids', arrays.ensure(keys));\n    return this._call();\n  }\n\n  cloneForAll() {\n    let clone = super.cloneForAll();\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n\n  cloneForText(text) {\n    let clone = super.cloneForText(text);\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n\n  cloneForRec(parentKey) {\n    let clone = super.cloneForRec(parentKey);\n    clone._addRestrictionIfAbsent('active', true);\n    clone._addRestrictionIfAbsent('maxRowCount', this.maxRowCount);\n    return clone;\n  }\n\n  _acceptLookupRow(lookupRowDo) {\n    return true;\n  }\n\n  _createLookupRowFromDo(lookupRowDo) {\n    // propagate all properties from lookup row do to scout lookup row (there might be custom ones on specific lookup row dos)\n    let clonedLookupRowDo = $.extend({}, lookupRowDo);\n    // text, enabled and active are the same for Scout LookupRow and Studio LookupRowDo\n\n    // id -> key\n    clonedLookupRowDo.key = clonedLookupRowDo.id;\n    delete clonedLookupRowDo.id;\n\n    // parentId -> parentKey\n    clonedLookupRowDo.parentKey = clonedLookupRowDo.parentId;\n    delete clonedLookupRowDo.parentId;\n\n    // unused on Scout LookupRow\n    delete clonedLookupRowDo._type;\n\n    if (this.maxTextLength) {\n      let text = clonedLookupRowDo.text;\n      if (text.length > this.maxTextLength) {\n        clonedLookupRowDo.text = text.substr(0, this.maxTextLength) + '...';\n        clonedLookupRowDo.tooltipText = text;\n      }\n    }\n\n    return scout.create('LookupRow', clonedLookupRowDo, {ensureUniqueId: false});\n  }\n\n  _call() {\n    this._deferred = $.Deferred();\n    this._ajaxCall = this._createAjaxCall();\n\n    this._ajaxCall.call()\n      .then((data, textStatus, jqXHR) => {\n        let lookupRows = arrays.ensure(data ? data.rows : null)\n          .filter(this._acceptLookupRow.bind(this))\n          .map(this._createLookupRowFromDo.bind(this));\n        this._deferred.resolve({\n          queryBy: this.queryBy,\n          text: this.searchText,\n          key: this.key,\n          lookupRows: lookupRows\n        });\n      })\n      .catch(ajaxError => {\n        this._deferred.resolve({\n          queryBy: this.queryBy,\n          text: this.searchText,\n          key: this.key,\n          lookupRows: [],\n          exception: this.session.text('ErrorWhileLoadingData')\n        });\n      });\n\n    return this._deferred.promise();\n  }\n\n  abort() {\n    this._deferred.reject({\n      canceled: true\n    });\n    this._ajaxCall.abort();\n    super.abort();\n  }\n\n  _getCallUrl() {\n    return this.resourceUrl;\n  }\n\n  _getRestrictionForAjaxCall() {\n    if (!this.restriction && !this._restriction) {\n      return null;\n    }\n\n    let resolveValue = value => {\n      if (typeof value === 'function') {\n        // Dynamic evaluation of the restriction value\n        return value(this);\n      }\n      return value;\n    };\n\n    let resolvedRestriction = {};\n    let restriction = $.extend({}, this.restriction, this._restriction);\n    Object.keys(restriction).forEach(key => {\n      let value = restriction[key];\n      let newValue;\n      if (Array.isArray(value)) {\n        // Resolve each array element individually, remove null values\n        newValue = value.map(resolveValue).filter(Boolean);\n        newValue = newValue.length ? newValue : null;\n      } else {\n        newValue = resolveValue(value);\n      }\n      // Only add non-null restrictions\n      if (!objects.isNullOrUndefined(newValue)) {\n        resolvedRestriction[key] = newValue;\n      }\n    });\n    return resolvedRestriction;\n  }\n\n  _createAjaxCall() {\n    let url = this._getCallUrl();\n    let restriction = this._getRestrictionForAjaxCall();\n    let data = restriction ? JSON.stringify(restriction) : null;\n    let ajaxOptions = {\n      type: 'POST',\n      data: data,\n      dataType: 'json',\n      contentType: 'application/json; charset=UTF-8',\n      cache: false,\n      url: url,\n      timeout: 0\n    };\n    return scout.create('AjaxCall', {\n      ajaxOptions: ajaxOptions,\n      name: 'RestLookupCall',\n      retryIntervals: [100, 500, 500, 500]\n    }, {\n      ensureUniqueId: false\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}