{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, graphics, menus as menuUtil } from '../../index';\nexport default class MenuBoxLayout extends AbstractLayout {\n  constructor(menuBox) {\n    super();\n    this.menuBox = menuBox;\n    // References to prevent too many DOM updates\n    this.firstMenu = null;\n    this.lastMenu = null;\n  }\n\n  /**\n   * @override AbstractLayout.js\n   */\n  layout($container) {\n    let htmlContainer = this.menuBox.htmlComp,\n      containerSize = htmlContainer.size(),\n      menus = this.visibleMenus(),\n      menusWidth = 0;\n\n    // Make sure open popups are at the correct position after layouting\n    this.menuBox.session.layoutValidator.schedulePostValidateFunction(() => {\n      menus.forEach(menu => {\n        if (menu.popup) {\n          menu.popup.position();\n        }\n      });\n    });\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoCompact(menus);\n    this.undoShrink(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Menus don't fit\n\n    // First approach: Set menuBox into compact mode\n    this.compact(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Second approach: Make text invisible and only show the icon (if available)\n    this.shrink(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Third approach: Create ellipsis and move overflown menus into it\n    this.collapse(menus, containerSize, menusWidth);\n  }\n  preferredLayoutSize($container) {\n    let menus = this.visibleMenus();\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoCompact(menus);\n    this.undoShrink(menus);\n    return this.actualPrefSize();\n  }\n  compact(menus) {\n    if (this.menuBox.compactOrig === undefined) {\n      this.menuBox.compactOrig = this.menuBox.compact;\n      this.menuBox.htmlComp.suppressInvalidate = true;\n      this.menuBox.setCompact(true);\n      this.menuBox.htmlComp.suppressInvalidate = false;\n    }\n    this.compactMenus(menus);\n  }\n  undoCompact(menus) {\n    if (this.menuBox.compactOrig !== undefined) {\n      this.menuBox.htmlComp.suppressInvalidate = true;\n      this.menuBox.setCompact(this.menuBox.compactOrig);\n      this.menuBox.htmlComp.suppressInvalidate = false;\n      this.menuBox.compactOrig = undefined;\n    }\n    this.undoCompactMenus(menus);\n  }\n\n  /**\n   * Sets all menus into compact mode.\n   */\n  compactMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.compactOrig !== undefined) {\n        // already done\n        return;\n      }\n      menu.compactOrig = menu.compact;\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setCompact(true);\n      menu.htmlComp.suppressInvalidate = false;\n    });\n    if (this._ellipsis) {\n      this._ellipsis.setCompact(true);\n    }\n  }\n\n  /**\n   * Restores to the previous state of the compact property.\n   */\n  undoCompactMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.compactOrig === undefined) {\n        return;\n      }\n      // Restore old compact state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setCompact(menu.compactOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.compactOrig = undefined;\n    });\n    if (this._ellipsis) {\n      this._ellipsis.setCompact(false);\n    }\n  }\n  shrink(menus) {\n    this.shrinkMenus(menus);\n  }\n\n  /**\n   * Makes the text invisible of all menus with an icon.\n   */\n  shrinkMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig !== undefined) {\n        // already done\n        return;\n      }\n      if (menu.iconId) {\n        menu.textVisibleOrig = menu.textVisible;\n        menu.htmlComp.suppressInvalidate = true;\n        menu.setTextVisible(false);\n        menu.htmlComp.suppressInvalidate = false;\n      }\n    });\n  }\n  undoShrink(menus) {\n    this.undoShrinkMenus(menus);\n  }\n  undoShrinkMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig === undefined) {\n        return;\n      }\n      // Restore old text visible state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setTextVisible(menu.textVisibleOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.textVisibleOrig = undefined;\n    });\n  }\n  collapse(menus, containerSize, menusWidth) {\n    this._createAndRenderEllipsis(this.menuBox.$container);\n    let collapsedMenus = this._moveOverflowMenusIntoEllipsis(containerSize, menusWidth);\n    this.updateFirstAndLastMenuMarker(collapsedMenus);\n  }\n\n  /**\n   * Undoes the collapsing by removing ellipsis and rendering non rendered menus.\n   */\n  undoCollapse(menus) {\n    menus = menus || this.visibleMenus();\n    this._destroyEllipsis();\n    this._removeMenusFromEllipsis(menus);\n  }\n  _createAndRenderEllipsis($container) {\n    let ellipsis = menuUtil.createEllipsisMenu({\n      parent: this.menuBox,\n      hidden: false,\n      compact: this.menuBox.compact\n    });\n    ellipsis.uiCssClass = this.menuBox.uiMenuCssClass;\n    ellipsis.render($container);\n    this._ellipsis = ellipsis;\n  }\n  _destroyEllipsis() {\n    if (this._ellipsis) {\n      this._ellipsis.destroy();\n      this._ellipsis = null;\n    }\n  }\n\n  /**\n   * Moves every menu which doesn't fit into the container into the ellipsis menu.\n   * Returns the list of \"surviving\" menus (with the ellipsis menu being the last element).\n   */\n  _moveOverflowMenusIntoEllipsis(containerSize, menusWidth) {\n    let collapsedMenus = [this._ellipsis];\n    let ellipsisSize = graphics.size(this._ellipsis.$container, true);\n    menusWidth += ellipsisSize.width;\n    this.visibleMenus().slice().reverse().forEach(menu => {\n      if (menusWidth > containerSize.width) {\n        // Menu does not fit -> move to ellipsis menu\n        let menuSize = graphics.size(menu.$container, true);\n        menusWidth -= menuSize.width;\n        menuUtil.moveMenuIntoEllipsis(menu, this._ellipsis);\n      } else {\n        collapsedMenus.unshift(menu); // add as first element\n      }\n    });\n\n    return collapsedMenus;\n  }\n  _removeMenusFromEllipsis(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => menuUtil.removeMenuFromEllipsis(menu, this.menuBox.$container));\n  }\n  actualPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n    let menusWidth = this._menusWidth(menus);\n    let prefSize = graphics.prefSize(this.menuBox.$container);\n    prefSize.width = menusWidth + this.menuBox.htmlComp.insets().horizontal();\n    return prefSize;\n  }\n\n  /**\n   * @return {number} the current width of all menus incl. the ellipsis\n   */\n  _menusWidth(menus) {\n    let menusWidth = 0;\n    let size = menu => graphics.size(menu.htmlComp.$comp, {\n      includeMargin: true,\n      exact: true\n    });\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.rendered) {\n        menusWidth += size(menu).width;\n      }\n    });\n    if (this._ellipsis) {\n      menusWidth += size(this._ellipsis).width;\n    }\n    return menusWidth;\n  }\n  compactPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoShrink(menus);\n    this.compact(menus);\n    return this.actualPrefSize();\n  }\n  shrinkPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.compact(menus);\n    this.shrink(menus);\n    return this.actualPrefSize();\n  }\n  visibleMenus() {\n    return this.menuBox.menus.filter(menu => menu.visible);\n  }\n  updateFirstAndLastMenuMarker(menus) {\n    // Find first and last rendered menu\n    let firstMenu = null;\n    let lastMenu = null;\n    (menus || []).forEach(menu => {\n      if (menu.rendered) {\n        if (!firstMenu) {\n          firstMenu = menu;\n        }\n        lastMenu = menu;\n      }\n    });\n\n    // Check if first or last menu has changed (prevents unnecessary DOM updates)\n    if (firstMenu !== this.firstMenu || lastMenu !== this.lastMenu) {\n      // Remove existing markers\n      if (this.firstMenu && this.firstMenu.rendered) {\n        this.firstMenu.$container.removeClass('first');\n      }\n      if (this.lastMenu && this.lastMenu.rendered) {\n        this.lastMenu.$container.removeClass('last');\n      }\n      // Remember found menus\n      this.firstMenu = firstMenu;\n      this.lastMenu = lastMenu;\n      // Add markers to found menus\n      if (this.firstMenu) {\n        this.firstMenu.$container.addClass('first');\n      }\n      if (this.lastMenu) {\n        this.lastMenu.$container.addClass('last');\n      }\n    }\n  }\n}","map":{"version":3,"names":["AbstractLayout","graphics","menus","menuUtil","MenuBoxLayout","constructor","menuBox","firstMenu","lastMenu","layout","$container","htmlContainer","htmlComp","containerSize","size","visibleMenus","menusWidth","session","layoutValidator","schedulePostValidateFunction","forEach","menu","popup","position","updateFirstAndLastMenuMarker","undoCollapse","undoCompact","undoShrink","actualPrefSize","width","compact","shrink","collapse","preferredLayoutSize","compactOrig","undefined","suppressInvalidate","setCompact","compactMenus","undoCompactMenus","_ellipsis","shrinkMenus","textVisibleOrig","iconId","textVisible","setTextVisible","undoShrinkMenus","_createAndRenderEllipsis","collapsedMenus","_moveOverflowMenusIntoEllipsis","_destroyEllipsis","_removeMenusFromEllipsis","ellipsis","createEllipsisMenu","parent","hidden","uiCssClass","uiMenuCssClass","render","destroy","ellipsisSize","slice","reverse","menuSize","moveMenuIntoEllipsis","unshift","removeMenuFromEllipsis","_menusWidth","prefSize","insets","horizontal","$comp","includeMargin","exact","rendered","compactPrefSize","shrinkPrefSize","filter","visible","removeClass","addClass"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/menu/menubox/MenuBoxLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, graphics, menus as menuUtil} from '../../index';\n\nexport default class MenuBoxLayout extends AbstractLayout {\n\n  constructor(menuBox) {\n    super();\n    this.menuBox = menuBox;\n    // References to prevent too many DOM updates\n    this.firstMenu = null;\n    this.lastMenu = null;\n  }\n\n  /**\n   * @override AbstractLayout.js\n   */\n  layout($container) {\n    let htmlContainer = this.menuBox.htmlComp,\n      containerSize = htmlContainer.size(),\n      menus = this.visibleMenus(),\n      menusWidth = 0;\n\n    // Make sure open popups are at the correct position after layouting\n    this.menuBox.session.layoutValidator.schedulePostValidateFunction(() => {\n      menus.forEach(menu => {\n        if (menu.popup) {\n          menu.popup.position();\n        }\n      });\n    });\n\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoCompact(menus);\n    this.undoShrink(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Menus don't fit\n\n    // First approach: Set menuBox into compact mode\n    this.compact(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Second approach: Make text invisible and only show the icon (if available)\n    this.shrink(menus);\n    menusWidth = this.actualPrefSize(menus).width;\n    if (menusWidth <= containerSize.width) {\n      // OK, every menu fits into container\n      return;\n    }\n\n    // Third approach: Create ellipsis and move overflown menus into it\n    this.collapse(menus, containerSize, menusWidth);\n  }\n\n  preferredLayoutSize($container) {\n    let menus = this.visibleMenus();\n\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoCompact(menus);\n    this.undoShrink(menus);\n\n    return this.actualPrefSize();\n  }\n\n  compact(menus) {\n    if (this.menuBox.compactOrig === undefined) {\n      this.menuBox.compactOrig = this.menuBox.compact;\n      this.menuBox.htmlComp.suppressInvalidate = true;\n      this.menuBox.setCompact(true);\n      this.menuBox.htmlComp.suppressInvalidate = false;\n    }\n\n    this.compactMenus(menus);\n  }\n\n  undoCompact(menus) {\n    if (this.menuBox.compactOrig !== undefined) {\n      this.menuBox.htmlComp.suppressInvalidate = true;\n      this.menuBox.setCompact(this.menuBox.compactOrig);\n      this.menuBox.htmlComp.suppressInvalidate = false;\n      this.menuBox.compactOrig = undefined;\n    }\n\n    this.undoCompactMenus(menus);\n  }\n\n  /**\n   * Sets all menus into compact mode.\n   */\n  compactMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.compactOrig !== undefined) {\n        // already done\n        return;\n      }\n      menu.compactOrig = menu.compact;\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setCompact(true);\n      menu.htmlComp.suppressInvalidate = false;\n    });\n\n    if (this._ellipsis) {\n      this._ellipsis.setCompact(true);\n    }\n  }\n\n  /**\n   * Restores to the previous state of the compact property.\n   */\n  undoCompactMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.compactOrig === undefined) {\n        return;\n      }\n      // Restore old compact state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setCompact(menu.compactOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.compactOrig = undefined;\n    });\n\n    if (this._ellipsis) {\n      this._ellipsis.setCompact(false);\n    }\n  }\n\n  shrink(menus) {\n    this.shrinkMenus(menus);\n  }\n\n  /**\n   * Makes the text invisible of all menus with an icon.\n   */\n  shrinkMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig !== undefined) {\n        // already done\n        return;\n      }\n      if (menu.iconId) {\n        menu.textVisibleOrig = menu.textVisible;\n        menu.htmlComp.suppressInvalidate = true;\n        menu.setTextVisible(false);\n        menu.htmlComp.suppressInvalidate = false;\n      }\n    });\n  }\n\n  undoShrink(menus) {\n    this.undoShrinkMenus(menus);\n  }\n\n  undoShrinkMenus(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.textVisibleOrig === undefined) {\n        return;\n      }\n      // Restore old text visible state\n      menu.htmlComp.suppressInvalidate = true;\n      menu.setTextVisible(menu.textVisibleOrig);\n      menu.htmlComp.suppressInvalidate = false;\n      menu.textVisibleOrig = undefined;\n    });\n  }\n\n  collapse(menus, containerSize, menusWidth) {\n    this._createAndRenderEllipsis(this.menuBox.$container);\n    let collapsedMenus = this._moveOverflowMenusIntoEllipsis(containerSize, menusWidth);\n    this.updateFirstAndLastMenuMarker(collapsedMenus);\n  }\n\n  /**\n   * Undoes the collapsing by removing ellipsis and rendering non rendered menus.\n   */\n  undoCollapse(menus) {\n    menus = menus || this.visibleMenus();\n    this._destroyEllipsis();\n    this._removeMenusFromEllipsis(menus);\n  }\n\n  _createAndRenderEllipsis($container) {\n    let ellipsis = menuUtil.createEllipsisMenu({\n      parent: this.menuBox,\n      hidden: false,\n      compact: this.menuBox.compact\n    });\n    ellipsis.uiCssClass = this.menuBox.uiMenuCssClass;\n    ellipsis.render($container);\n    this._ellipsis = ellipsis;\n  }\n\n  _destroyEllipsis() {\n    if (this._ellipsis) {\n      this._ellipsis.destroy();\n      this._ellipsis = null;\n    }\n  }\n\n  /**\n   * Moves every menu which doesn't fit into the container into the ellipsis menu.\n   * Returns the list of \"surviving\" menus (with the ellipsis menu being the last element).\n   */\n  _moveOverflowMenusIntoEllipsis(containerSize, menusWidth) {\n    let collapsedMenus = [this._ellipsis];\n    let ellipsisSize = graphics.size(this._ellipsis.$container, true);\n    menusWidth += ellipsisSize.width;\n    this.visibleMenus().slice().reverse().forEach(menu => {\n      if (menusWidth > containerSize.width) {\n        // Menu does not fit -> move to ellipsis menu\n        let menuSize = graphics.size(menu.$container, true);\n        menusWidth -= menuSize.width;\n        menuUtil.moveMenuIntoEllipsis(menu, this._ellipsis);\n      } else {\n        collapsedMenus.unshift(menu); // add as first element\n      }\n    });\n    return collapsedMenus;\n  }\n\n  _removeMenusFromEllipsis(menus) {\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => menuUtil.removeMenuFromEllipsis(menu, this.menuBox.$container));\n  }\n\n  actualPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n    let menusWidth = this._menusWidth(menus);\n    let prefSize = graphics.prefSize(this.menuBox.$container);\n    prefSize.width = menusWidth + this.menuBox.htmlComp.insets().horizontal();\n    return prefSize;\n  }\n\n  /**\n   * @return {number} the current width of all menus incl. the ellipsis\n   */\n  _menusWidth(menus) {\n    let menusWidth = 0;\n    let size = menu => graphics.size(menu.htmlComp.$comp, {includeMargin: true, exact: true});\n\n    menus = menus || this.visibleMenus();\n    menus.forEach(menu => {\n      if (menu.rendered) {\n        menusWidth += size(menu).width;\n      }\n    });\n    if (this._ellipsis) {\n      menusWidth += size(this._ellipsis).width;\n    }\n\n    return menusWidth;\n  }\n\n  compactPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.undoShrink(menus);\n    this.compact(menus);\n\n    return this.actualPrefSize();\n  }\n\n  shrinkPrefSize(menus) {\n    menus = menus || this.visibleMenus();\n\n    this.updateFirstAndLastMenuMarker(menus);\n    this.undoCollapse(menus);\n    this.compact(menus);\n    this.shrink(menus);\n\n    return this.actualPrefSize();\n  }\n\n  visibleMenus() {\n    return this.menuBox.menus.filter(menu => menu.visible);\n  }\n\n  updateFirstAndLastMenuMarker(menus) {\n    // Find first and last rendered menu\n    let firstMenu = null;\n    let lastMenu = null;\n    (menus || []).forEach(menu => {\n      if (menu.rendered) {\n        if (!firstMenu) {\n          firstMenu = menu;\n        }\n        lastMenu = menu;\n      }\n    });\n\n    // Check if first or last menu has changed (prevents unnecessary DOM updates)\n    if (firstMenu !== this.firstMenu || lastMenu !== this.lastMenu) {\n      // Remove existing markers\n      if (this.firstMenu && this.firstMenu.rendered) {\n        this.firstMenu.$container.removeClass('first');\n      }\n      if (this.lastMenu && this.lastMenu.rendered) {\n        this.lastMenu.$container.removeClass('last');\n      }\n      // Remember found menus\n      this.firstMenu = firstMenu;\n      this.lastMenu = lastMenu;\n      // Add markers to found menus\n      if (this.firstMenu) {\n        this.firstMenu.$container.addClass('first');\n      }\n      if (this.lastMenu) {\n        this.lastMenu.$container.addClass('last');\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAc,EAAEC,QAAQ,EAAEC,KAAK,IAAIC,QAAQ,QAAO,aAAa;AAEvE,eAAe,MAAMC,aAAa,SAASJ,cAAc,CAAC;EAExDK,WAAW,CAACC,OAAO,EAAE;IACnB,KAAK,EAAE;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB;IACA,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;;EAEA;AACF;AACA;EACEC,MAAM,CAACC,UAAU,EAAE;IACjB,IAAIC,aAAa,GAAG,IAAI,CAACL,OAAO,CAACM,QAAQ;MACvCC,aAAa,GAAGF,aAAa,CAACG,IAAI,EAAE;MACpCZ,KAAK,GAAG,IAAI,CAACa,YAAY,EAAE;MAC3BC,UAAU,GAAG,CAAC;;IAEhB;IACA,IAAI,CAACV,OAAO,CAACW,OAAO,CAACC,eAAe,CAACC,4BAA4B,CAAC,MAAM;MACtEjB,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACC,KAAK,EAAE;UACdD,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAE;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACC,4BAA4B,CAACtB,KAAK,CAAC;IACxC,IAAI,CAACuB,YAAY,CAACvB,KAAK,CAAC;IACxB,IAAI,CAACwB,WAAW,CAACxB,KAAK,CAAC;IACvB,IAAI,CAACyB,UAAU,CAACzB,KAAK,CAAC;IACtBc,UAAU,GAAG,IAAI,CAACY,cAAc,CAAC1B,KAAK,CAAC,CAAC2B,KAAK;IAC7C,IAAIb,UAAU,IAAIH,aAAa,CAACgB,KAAK,EAAE;MACrC;MACA;IACF;;IAEA;;IAEA;IACA,IAAI,CAACC,OAAO,CAAC5B,KAAK,CAAC;IACnBc,UAAU,GAAG,IAAI,CAACY,cAAc,CAAC1B,KAAK,CAAC,CAAC2B,KAAK;IAC7C,IAAIb,UAAU,IAAIH,aAAa,CAACgB,KAAK,EAAE;MACrC;MACA;IACF;;IAEA;IACA,IAAI,CAACE,MAAM,CAAC7B,KAAK,CAAC;IAClBc,UAAU,GAAG,IAAI,CAACY,cAAc,CAAC1B,KAAK,CAAC,CAAC2B,KAAK;IAC7C,IAAIb,UAAU,IAAIH,aAAa,CAACgB,KAAK,EAAE;MACrC;MACA;IACF;;IAEA;IACA,IAAI,CAACG,QAAQ,CAAC9B,KAAK,EAAEW,aAAa,EAAEG,UAAU,CAAC;EACjD;EAEAiB,mBAAmB,CAACvB,UAAU,EAAE;IAC9B,IAAIR,KAAK,GAAG,IAAI,CAACa,YAAY,EAAE;IAE/B,IAAI,CAACS,4BAA4B,CAACtB,KAAK,CAAC;IACxC,IAAI,CAACuB,YAAY,CAACvB,KAAK,CAAC;IACxB,IAAI,CAACwB,WAAW,CAACxB,KAAK,CAAC;IACvB,IAAI,CAACyB,UAAU,CAACzB,KAAK,CAAC;IAEtB,OAAO,IAAI,CAAC0B,cAAc,EAAE;EAC9B;EAEAE,OAAO,CAAC5B,KAAK,EAAE;IACb,IAAI,IAAI,CAACI,OAAO,CAAC4B,WAAW,KAAKC,SAAS,EAAE;MAC1C,IAAI,CAAC7B,OAAO,CAAC4B,WAAW,GAAG,IAAI,CAAC5B,OAAO,CAACwB,OAAO;MAC/C,IAAI,CAACxB,OAAO,CAACM,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;MAC/C,IAAI,CAAC9B,OAAO,CAAC+B,UAAU,CAAC,IAAI,CAAC;MAC7B,IAAI,CAAC/B,OAAO,CAACM,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;IAClD;IAEA,IAAI,CAACE,YAAY,CAACpC,KAAK,CAAC;EAC1B;EAEAwB,WAAW,CAACxB,KAAK,EAAE;IACjB,IAAI,IAAI,CAACI,OAAO,CAAC4B,WAAW,KAAKC,SAAS,EAAE;MAC1C,IAAI,CAAC7B,OAAO,CAACM,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;MAC/C,IAAI,CAAC9B,OAAO,CAAC+B,UAAU,CAAC,IAAI,CAAC/B,OAAO,CAAC4B,WAAW,CAAC;MACjD,IAAI,CAAC5B,OAAO,CAACM,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;MAChD,IAAI,CAAC9B,OAAO,CAAC4B,WAAW,GAAGC,SAAS;IACtC;IAEA,IAAI,CAACI,gBAAgB,CAACrC,KAAK,CAAC;EAC9B;;EAEA;AACF;AACA;EACEoC,YAAY,CAACpC,KAAK,EAAE;IAClBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACa,WAAW,KAAKC,SAAS,EAAE;QAClC;QACA;MACF;MACAd,IAAI,CAACa,WAAW,GAAGb,IAAI,CAACS,OAAO;MAC/BT,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;MACvCf,IAAI,CAACgB,UAAU,CAAC,IAAI,CAAC;MACrBhB,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;IAC1C,CAAC,CAAC;IAEF,IAAI,IAAI,CAACI,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACH,UAAU,CAAC,IAAI,CAAC;IACjC;EACF;;EAEA;AACF;AACA;EACEE,gBAAgB,CAACrC,KAAK,EAAE;IACtBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACa,WAAW,KAAKC,SAAS,EAAE;QAClC;MACF;MACA;MACAd,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;MACvCf,IAAI,CAACgB,UAAU,CAAChB,IAAI,CAACa,WAAW,CAAC;MACjCb,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;MACxCf,IAAI,CAACa,WAAW,GAAGC,SAAS;IAC9B,CAAC,CAAC;IAEF,IAAI,IAAI,CAACK,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACH,UAAU,CAAC,KAAK,CAAC;IAClC;EACF;EAEAN,MAAM,CAAC7B,KAAK,EAAE;IACZ,IAAI,CAACuC,WAAW,CAACvC,KAAK,CAAC;EACzB;;EAEA;AACF;AACA;EACEuC,WAAW,CAACvC,KAAK,EAAE;IACjBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACqB,eAAe,KAAKP,SAAS,EAAE;QACtC;QACA;MACF;MACA,IAAId,IAAI,CAACsB,MAAM,EAAE;QACftB,IAAI,CAACqB,eAAe,GAAGrB,IAAI,CAACuB,WAAW;QACvCvB,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;QACvCf,IAAI,CAACwB,cAAc,CAAC,KAAK,CAAC;QAC1BxB,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;MAC1C;IACF,CAAC,CAAC;EACJ;EAEAT,UAAU,CAACzB,KAAK,EAAE;IAChB,IAAI,CAAC4C,eAAe,CAAC5C,KAAK,CAAC;EAC7B;EAEA4C,eAAe,CAAC5C,KAAK,EAAE;IACrBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACqB,eAAe,KAAKP,SAAS,EAAE;QACtC;MACF;MACA;MACAd,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;MACvCf,IAAI,CAACwB,cAAc,CAACxB,IAAI,CAACqB,eAAe,CAAC;MACzCrB,IAAI,CAACT,QAAQ,CAACwB,kBAAkB,GAAG,KAAK;MACxCf,IAAI,CAACqB,eAAe,GAAGP,SAAS;IAClC,CAAC,CAAC;EACJ;EAEAH,QAAQ,CAAC9B,KAAK,EAAEW,aAAa,EAAEG,UAAU,EAAE;IACzC,IAAI,CAAC+B,wBAAwB,CAAC,IAAI,CAACzC,OAAO,CAACI,UAAU,CAAC;IACtD,IAAIsC,cAAc,GAAG,IAAI,CAACC,8BAA8B,CAACpC,aAAa,EAAEG,UAAU,CAAC;IACnF,IAAI,CAACQ,4BAA4B,CAACwB,cAAc,CAAC;EACnD;;EAEA;AACF;AACA;EACEvB,YAAY,CAACvB,KAAK,EAAE;IAClBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpC,IAAI,CAACmC,gBAAgB,EAAE;IACvB,IAAI,CAACC,wBAAwB,CAACjD,KAAK,CAAC;EACtC;EAEA6C,wBAAwB,CAACrC,UAAU,EAAE;IACnC,IAAI0C,QAAQ,GAAGjD,QAAQ,CAACkD,kBAAkB,CAAC;MACzCC,MAAM,EAAE,IAAI,CAAChD,OAAO;MACpBiD,MAAM,EAAE,KAAK;MACbzB,OAAO,EAAE,IAAI,CAACxB,OAAO,CAACwB;IACxB,CAAC,CAAC;IACFsB,QAAQ,CAACI,UAAU,GAAG,IAAI,CAAClD,OAAO,CAACmD,cAAc;IACjDL,QAAQ,CAACM,MAAM,CAAChD,UAAU,CAAC;IAC3B,IAAI,CAAC8B,SAAS,GAAGY,QAAQ;EAC3B;EAEAF,gBAAgB,GAAG;IACjB,IAAI,IAAI,CAACV,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,CAACmB,OAAO,EAAE;MACxB,IAAI,CAACnB,SAAS,GAAG,IAAI;IACvB;EACF;;EAEA;AACF;AACA;AACA;EACES,8BAA8B,CAACpC,aAAa,EAAEG,UAAU,EAAE;IACxD,IAAIgC,cAAc,GAAG,CAAC,IAAI,CAACR,SAAS,CAAC;IACrC,IAAIoB,YAAY,GAAG3D,QAAQ,CAACa,IAAI,CAAC,IAAI,CAAC0B,SAAS,CAAC9B,UAAU,EAAE,IAAI,CAAC;IACjEM,UAAU,IAAI4C,YAAY,CAAC/B,KAAK;IAChC,IAAI,CAACd,YAAY,EAAE,CAAC8C,KAAK,EAAE,CAACC,OAAO,EAAE,CAAC1C,OAAO,CAACC,IAAI,IAAI;MACpD,IAAIL,UAAU,GAAGH,aAAa,CAACgB,KAAK,EAAE;QACpC;QACA,IAAIkC,QAAQ,GAAG9D,QAAQ,CAACa,IAAI,CAACO,IAAI,CAACX,UAAU,EAAE,IAAI,CAAC;QACnDM,UAAU,IAAI+C,QAAQ,CAAClC,KAAK;QAC5B1B,QAAQ,CAAC6D,oBAAoB,CAAC3C,IAAI,EAAE,IAAI,CAACmB,SAAS,CAAC;MACrD,CAAC,MAAM;QACLQ,cAAc,CAACiB,OAAO,CAAC5C,IAAI,CAAC,CAAC,CAAC;MAChC;IACF,CAAC,CAAC;;IACF,OAAO2B,cAAc;EACvB;EAEAG,wBAAwB,CAACjD,KAAK,EAAE;IAC9BA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAIlB,QAAQ,CAAC+D,sBAAsB,CAAC7C,IAAI,EAAE,IAAI,CAACf,OAAO,CAACI,UAAU,CAAC,CAAC;EACvF;EAEAkB,cAAc,CAAC1B,KAAK,EAAE;IACpBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpC,IAAIC,UAAU,GAAG,IAAI,CAACmD,WAAW,CAACjE,KAAK,CAAC;IACxC,IAAIkE,QAAQ,GAAGnE,QAAQ,CAACmE,QAAQ,CAAC,IAAI,CAAC9D,OAAO,CAACI,UAAU,CAAC;IACzD0D,QAAQ,CAACvC,KAAK,GAAGb,UAAU,GAAG,IAAI,CAACV,OAAO,CAACM,QAAQ,CAACyD,MAAM,EAAE,CAACC,UAAU,EAAE;IACzE,OAAOF,QAAQ;EACjB;;EAEA;AACF;AACA;EACED,WAAW,CAACjE,KAAK,EAAE;IACjB,IAAIc,UAAU,GAAG,CAAC;IAClB,IAAIF,IAAI,GAAGO,IAAI,IAAIpB,QAAQ,CAACa,IAAI,CAACO,IAAI,CAACT,QAAQ,CAAC2D,KAAK,EAAE;MAACC,aAAa,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAI,CAAC,CAAC;IAEzFvE,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IACpCb,KAAK,CAACkB,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACqD,QAAQ,EAAE;QACjB1D,UAAU,IAAIF,IAAI,CAACO,IAAI,CAAC,CAACQ,KAAK;MAChC;IACF,CAAC,CAAC;IACF,IAAI,IAAI,CAACW,SAAS,EAAE;MAClBxB,UAAU,IAAIF,IAAI,CAAC,IAAI,CAAC0B,SAAS,CAAC,CAACX,KAAK;IAC1C;IAEA,OAAOb,UAAU;EACnB;EAEA2D,eAAe,CAACzE,KAAK,EAAE;IACrBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IAEpC,IAAI,CAACS,4BAA4B,CAACtB,KAAK,CAAC;IACxC,IAAI,CAACuB,YAAY,CAACvB,KAAK,CAAC;IACxB,IAAI,CAACyB,UAAU,CAACzB,KAAK,CAAC;IACtB,IAAI,CAAC4B,OAAO,CAAC5B,KAAK,CAAC;IAEnB,OAAO,IAAI,CAAC0B,cAAc,EAAE;EAC9B;EAEAgD,cAAc,CAAC1E,KAAK,EAAE;IACpBA,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACa,YAAY,EAAE;IAEpC,IAAI,CAACS,4BAA4B,CAACtB,KAAK,CAAC;IACxC,IAAI,CAACuB,YAAY,CAACvB,KAAK,CAAC;IACxB,IAAI,CAAC4B,OAAO,CAAC5B,KAAK,CAAC;IACnB,IAAI,CAAC6B,MAAM,CAAC7B,KAAK,CAAC;IAElB,OAAO,IAAI,CAAC0B,cAAc,EAAE;EAC9B;EAEAb,YAAY,GAAG;IACb,OAAO,IAAI,CAACT,OAAO,CAACJ,KAAK,CAAC2E,MAAM,CAACxD,IAAI,IAAIA,IAAI,CAACyD,OAAO,CAAC;EACxD;EAEAtD,4BAA4B,CAACtB,KAAK,EAAE;IAClC;IACA,IAAIK,SAAS,GAAG,IAAI;IACpB,IAAIC,QAAQ,GAAG,IAAI;IACnB,CAACN,KAAK,IAAI,EAAE,EAAEkB,OAAO,CAACC,IAAI,IAAI;MAC5B,IAAIA,IAAI,CAACqD,QAAQ,EAAE;QACjB,IAAI,CAACnE,SAAS,EAAE;UACdA,SAAS,GAAGc,IAAI;QAClB;QACAb,QAAQ,GAAGa,IAAI;MACjB;IACF,CAAC,CAAC;;IAEF;IACA,IAAId,SAAS,KAAK,IAAI,CAACA,SAAS,IAAIC,QAAQ,KAAK,IAAI,CAACA,QAAQ,EAAE;MAC9D;MACA,IAAI,IAAI,CAACD,SAAS,IAAI,IAAI,CAACA,SAAS,CAACmE,QAAQ,EAAE;QAC7C,IAAI,CAACnE,SAAS,CAACG,UAAU,CAACqE,WAAW,CAAC,OAAO,CAAC;MAChD;MACA,IAAI,IAAI,CAACvE,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACkE,QAAQ,EAAE;QAC3C,IAAI,CAAClE,QAAQ,CAACE,UAAU,CAACqE,WAAW,CAAC,MAAM,CAAC;MAC9C;MACA;MACA,IAAI,CAACxE,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;MACxB;MACA,IAAI,IAAI,CAACD,SAAS,EAAE;QAClB,IAAI,CAACA,SAAS,CAACG,UAAU,CAACsE,QAAQ,CAAC,OAAO,CAAC;MAC7C;MACA,IAAI,IAAI,CAACxE,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,CAACE,UAAU,CAACsE,QAAQ,CAAC,MAAM,CAAC;MAC3C;IACF;EACF;AACF"},"metadata":{},"sourceType":"module"}