{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, objects, scout, Status } from '../index';\nimport $ from 'jquery';\nimport { assertValue } from '../scout';\nexport default class MaxLengthHandler {\n  constructor(options) {\n    options = options || {};\n    assertValue(options.target, 'target is mandatory');\n    this.$textInputField = null;\n    this.onInputFieldPaste = this._onInputFieldPaste.bind(this);\n    $.extend(this, options);\n  }\n  install($textInputField) {\n    this.uninstall();\n    if (!$textInputField || !$textInputField.is('input:text') && !$textInputField.is('textarea')) {\n      return;\n    }\n    if ($textInputField) {\n      this.$textInputField = $textInputField;\n      this.$textInputField.on('paste', this.onInputFieldPaste);\n    }\n  }\n  uninstall() {\n    if (this.$textInputField) {\n      this.$textInputField.off('paste', this.onInputFieldPaste);\n    }\n  }\n  render() {\n    if (!this.$textInputField || objects.isNullOrUndefined(this.target.maxLength)) {\n      return;\n    }\n    this.$textInputField.attr('maxlength', this.target.maxLength);\n\n    // Make sure current text does not exceed max length\n    let text = this.$textInputField.val();\n    if (text.length > this.target.maxLength) {\n      this.$textInputField.val(text.slice(0, this.target.maxLength));\n    }\n    if (!this.target.rendering) {\n      this.target.parseAndSetValue(this.target._readDisplayText());\n    }\n  }\n  _onInputFieldPaste(event) {\n    if (!this.$textInputField || objects.isNullOrUndefined(this.target.maxLength)) {\n      return;\n    }\n    // must read out the text and selection size now because when the callback is executed, the clipboard content has already been applied to the input field\n    let textSize = this.$textInputField.val().length - this._getSelectionSize();\n    this._getClipboardData(event, pastedText => {\n      if (!pastedText) {\n        return;\n      }\n      if (textSize + pastedText.length > this.target.maxLength) {\n        this._showNotification('ui.PastedTextTooLong');\n      }\n    });\n  }\n  _getSelectionSize() {\n    let start = scout.nvl(this.$textInputField[0].selectionStart, null);\n    let end = scout.nvl(this.$textInputField[0].selectionEnd, null);\n    if (start === null || end === null) {\n      return 0;\n    }\n    return end - start;\n  }\n\n  /**\n   * Get clipboard data, different strategies for browsers.\n   * Must use a callback because this is required by Chrome's clipboard API.\n   */\n  _getClipboardData(event, doneHandler) {\n    let data = event.originalEvent.clipboardData || this.target.$container.window(true).clipboardData;\n    if (data) {\n      // Chrome, Firefox\n      if (data.items && data.items.length) {\n        let item = arrays.find(data.items, item => {\n          return item.type === 'text/plain';\n        });\n        if (item) {\n          item.getAsString(doneHandler);\n        }\n        return;\n      }\n\n      // IE, Safari\n      if (data.getData) {\n        doneHandler(data.getData('Text'));\n      }\n    }\n\n    // Can't access clipboard -> don't call done handler\n  }\n\n  _showNotification(textKey) {\n    scout.create('DesktopNotification', {\n      parent: this.target,\n      severity: Status.Severity.WARNING,\n      message: this.target.session.text(textKey)\n    }).show();\n  }\n}","map":{"version":3,"names":["arrays","objects","scout","Status","$","assertValue","MaxLengthHandler","constructor","options","target","$textInputField","onInputFieldPaste","_onInputFieldPaste","bind","extend","install","uninstall","is","on","off","render","isNullOrUndefined","maxLength","attr","text","val","length","slice","rendering","parseAndSetValue","_readDisplayText","event","textSize","_getSelectionSize","_getClipboardData","pastedText","_showNotification","start","nvl","selectionStart","end","selectionEnd","doneHandler","data","originalEvent","clipboardData","$container","window","items","item","find","type","getAsString","getData","textKey","create","parent","severity","Severity","WARNING","message","session","show"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/MaxLengthHandler.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, objects, scout, Status} from '../index';\nimport $ from 'jquery';\nimport {assertValue} from '../scout';\n\nexport default class MaxLengthHandler {\n\n  constructor(options) {\n    options = options || {};\n    assertValue(options.target, 'target is mandatory');\n\n    this.$textInputField = null;\n    this.onInputFieldPaste = this._onInputFieldPaste.bind(this);\n    $.extend(this, options);\n  }\n\n  install($textInputField) {\n    this.uninstall();\n    if (!$textInputField || (!$textInputField.is('input:text') && !$textInputField.is('textarea'))) {\n      return;\n    }\n    if ($textInputField) {\n      this.$textInputField = $textInputField;\n      this.$textInputField.on('paste', this.onInputFieldPaste);\n    }\n  }\n\n  uninstall() {\n    if (this.$textInputField) {\n      this.$textInputField.off('paste', this.onInputFieldPaste);\n    }\n  }\n\n  render() {\n    if (!this.$textInputField || objects.isNullOrUndefined(this.target.maxLength)) {\n      return;\n    }\n    this.$textInputField.attr('maxlength', this.target.maxLength);\n\n    // Make sure current text does not exceed max length\n    let text = this.$textInputField.val();\n    if (text.length > this.target.maxLength) {\n      this.$textInputField.val(text.slice(0, this.target.maxLength));\n    }\n    if (!this.target.rendering) {\n      this.target.parseAndSetValue(this.target._readDisplayText());\n    }\n  }\n\n  _onInputFieldPaste(event) {\n    if (!this.$textInputField || objects.isNullOrUndefined(this.target.maxLength)) {\n      return;\n    }\n    // must read out the text and selection size now because when the callback is executed, the clipboard content has already been applied to the input field\n    let textSize = this.$textInputField.val().length - this._getSelectionSize();\n\n    this._getClipboardData(event, pastedText => {\n      if (!pastedText) {\n        return;\n      }\n      if ((textSize + pastedText.length) > this.target.maxLength) {\n        this._showNotification('ui.PastedTextTooLong');\n      }\n    });\n  }\n\n  _getSelectionSize() {\n    let start = scout.nvl(this.$textInputField[0].selectionStart, null);\n    let end = scout.nvl(this.$textInputField[0].selectionEnd, null);\n    if (start === null || end === null) {\n      return 0;\n    }\n    return end - start;\n  }\n\n  /**\n   * Get clipboard data, different strategies for browsers.\n   * Must use a callback because this is required by Chrome's clipboard API.\n   */\n  _getClipboardData(event, doneHandler) {\n    let data = event.originalEvent.clipboardData || this.target.$container.window(true).clipboardData;\n    if (data) {\n      // Chrome, Firefox\n      if (data.items && data.items.length) {\n        let item = arrays.find(data.items, item => {\n          return item.type === 'text/plain';\n        });\n        if (item) {\n          item.getAsString(doneHandler);\n        }\n        return;\n      }\n\n      // IE, Safari\n      if (data.getData) {\n        doneHandler(data.getData('Text'));\n      }\n    }\n\n    // Can't access clipboard -> don't call done handler\n  }\n\n  _showNotification(textKey) {\n    scout.create('DesktopNotification', {\n      parent: this.target,\n      severity: Status.Severity.WARNING,\n      message: this.target.session.text(textKey)\n    }).show();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}