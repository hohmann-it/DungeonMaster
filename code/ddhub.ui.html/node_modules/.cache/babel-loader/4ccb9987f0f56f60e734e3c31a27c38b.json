{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n/**\n * Modifier like shift, ctrl or alt used in keystrokes.\n *\n * A keystroke can consist of multiple modifierBitMask, which can be represented by bitwise OR'ing them together.\n */\n\nconst NONE = 0; // without any modifier\nconst CTRL = 1 << 0; // with the ctrl modifier (NOSONAR)\nconst CTRL_UNDEFINED = 1 << 1; // with or without the ctrl modifier (NOSONAR)\nconst SHIFT = 1 << 2; // with the shift modifier (NOSONAR)\nconst SHIFT_UNDEFINED = 1 << 3; // with or without the shift modifier (NOSONAR)\nconst ALT = 1 << 4; // with the alt modifier (NOSONAR)\nconst ALT_UNDEFINED = 1 << 5; // with or without the alt modifier (NOSONAR)\n\nexport function isCtrl(modifierBitMask) {\n  return _eval(modifierBitMask, CTRL, CTRL_UNDEFINED);\n}\nexport function isShift(modifierBitMask) {\n  return _eval(modifierBitMask, SHIFT, SHIFT_UNDEFINED);\n}\nexport function isAlt(modifierBitMask) {\n  return _eval(modifierBitMask, ALT, ALT_UNDEFINED);\n}\nexport function _eval(testee, modifier, modifierUndefined) {\n  if ((modifierUndefined & testee) > 0) {\n    // NOSONAR\n    return undefined;\n  }\n  return (modifier & testee) > 0; // NOSONAR\n}\n\nexport function toModifierBitMask(event) {\n  let modifierBitMask = 0;\n  modifierBitMask |= event.ctrlKey ? CTRL : 0; // NOSONAR\n  modifierBitMask |= event.altKey ? ALT : 0; // NOSONAR\n  modifierBitMask |= event.shiftKey ? SHIFT : 0; // NOSONAR\n  return modifierBitMask;\n}\nexport default {\n  ALT,\n  ALT_UNDEFINED,\n  CTRL,\n  CTRL_UNDEFINED,\n  NONE,\n  SHIFT,\n  SHIFT_UNDEFINED,\n  isAlt,\n  isCtrl,\n  isShift,\n  toModifierBitMask\n};","map":{"version":3,"names":["NONE","CTRL","CTRL_UNDEFINED","SHIFT","SHIFT_UNDEFINED","ALT","ALT_UNDEFINED","isCtrl","modifierBitMask","_eval","isShift","isAlt","testee","modifier","modifierUndefined","undefined","toModifierBitMask","event","ctrlKey","altKey","shiftKey"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/keystroke/keyStrokeModifier.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n/**\n * Modifier like shift, ctrl or alt used in keystrokes.\n *\n * A keystroke can consist of multiple modifierBitMask, which can be represented by bitwise OR'ing them together.\n */\n\nconst NONE = 0; // without any modifier\nconst CTRL = 1 << 0; // with the ctrl modifier (NOSONAR)\nconst CTRL_UNDEFINED = 1 << 1; // with or without the ctrl modifier (NOSONAR)\nconst SHIFT = 1 << 2; // with the shift modifier (NOSONAR)\nconst SHIFT_UNDEFINED = 1 << 3; // with or without the shift modifier (NOSONAR)\nconst ALT = 1 << 4; // with the alt modifier (NOSONAR)\nconst ALT_UNDEFINED = 1 << 5; // with or without the alt modifier (NOSONAR)\n\nexport function isCtrl(modifierBitMask) {\n  return _eval(modifierBitMask, CTRL, CTRL_UNDEFINED);\n}\n\nexport function isShift(modifierBitMask) {\n  return _eval(modifierBitMask, SHIFT, SHIFT_UNDEFINED);\n}\n\nexport function isAlt(modifierBitMask) {\n  return _eval(modifierBitMask, ALT, ALT_UNDEFINED);\n}\n\nexport function _eval(testee, modifier, modifierUndefined) {\n  if ((modifierUndefined & testee) > 0) { // NOSONAR\n    return undefined;\n  }\n  return (modifier & testee) > 0; // NOSONAR\n}\n\nexport function toModifierBitMask(event) {\n  let modifierBitMask = 0;\n  modifierBitMask |= event.ctrlKey ? CTRL : 0; // NOSONAR\n  modifierBitMask |= event.altKey ? ALT : 0; // NOSONAR\n  modifierBitMask |= event.shiftKey ? SHIFT : 0; // NOSONAR\n  return modifierBitMask;\n}\n\nexport default {\n  ALT,\n  ALT_UNDEFINED,\n  CTRL,\n  CTRL_UNDEFINED,\n  NONE,\n  SHIFT,\n  SHIFT_UNDEFINED,\n  isAlt,\n  isCtrl,\n  isShift,\n  toModifierBitMask\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAG,CAAC,CAAC,CAAC;AAChB,MAAMC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACrB,MAAMC,cAAc,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/B,MAAMC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACtB,MAAMC,eAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAChC,MAAMC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACpB,MAAMC,aAAa,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE9B,OAAO,SAASC,MAAM,CAACC,eAAe,EAAE;EACtC,OAAOC,KAAK,CAACD,eAAe,EAAEP,IAAI,EAAEC,cAAc,CAAC;AACrD;AAEA,OAAO,SAASQ,OAAO,CAACF,eAAe,EAAE;EACvC,OAAOC,KAAK,CAACD,eAAe,EAAEL,KAAK,EAAEC,eAAe,CAAC;AACvD;AAEA,OAAO,SAASO,KAAK,CAACH,eAAe,EAAE;EACrC,OAAOC,KAAK,CAACD,eAAe,EAAEH,GAAG,EAAEC,aAAa,CAAC;AACnD;AAEA,OAAO,SAASG,KAAK,CAACG,MAAM,EAAEC,QAAQ,EAAEC,iBAAiB,EAAE;EACzD,IAAI,CAACA,iBAAiB,GAAGF,MAAM,IAAI,CAAC,EAAE;IAAE;IACtC,OAAOG,SAAS;EAClB;EACA,OAAO,CAACF,QAAQ,GAAGD,MAAM,IAAI,CAAC,CAAC,CAAC;AAClC;;AAEA,OAAO,SAASI,iBAAiB,CAACC,KAAK,EAAE;EACvC,IAAIT,eAAe,GAAG,CAAC;EACvBA,eAAe,IAAIS,KAAK,CAACC,OAAO,GAAGjB,IAAI,GAAG,CAAC,CAAC,CAAC;EAC7CO,eAAe,IAAIS,KAAK,CAACE,MAAM,GAAGd,GAAG,GAAG,CAAC,CAAC,CAAC;EAC3CG,eAAe,IAAIS,KAAK,CAACG,QAAQ,GAAGjB,KAAK,GAAG,CAAC,CAAC,CAAC;EAC/C,OAAOK,eAAe;AACxB;AAEA,eAAe;EACbH,GAAG;EACHC,aAAa;EACbL,IAAI;EACJC,cAAc;EACdF,IAAI;EACJG,KAAK;EACLC,eAAe;EACfO,KAAK;EACLJ,MAAM;EACNG,OAAO;EACPM;AACF,CAAC"},"metadata":{},"sourceType":"module"}