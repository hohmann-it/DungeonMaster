{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, BasicField, Device, Dimension, FormField, graphics, HtmlComponent, HtmlEnvironment, Insets, Rectangle, scout, scrollbars } from '../../index';\n\n/**\n * Form-Field Layout, for a form-field with label, status, mandatory-indicator and a field.\n * This layout class works with a FormField instance, since we must access properties of the model.\n * Note: we use optGet() here, since some form-fields have only a bare HTML element as field, other\n * (composite) form-fields work with a HtmlComponent which has its own LayoutManager.\n */\nexport default class FormFieldLayout extends AbstractLayout {\n  constructor(formField) {\n    super();\n    this.formField = formField;\n    this._initDefaults();\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmentPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this.formField.one('remove', () => {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    });\n  }\n\n  // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n\n  _initDefaults() {\n    this.mandatoryIndicatorWidth = HtmlEnvironment.get().fieldMandatoryIndicatorWidth;\n    this.statusWidth = HtmlEnvironment.get().fieldStatusWidth;\n    this.rowHeight = HtmlEnvironment.get().formRowHeight;\n    this.compactFieldWidth = FormFieldLayout.COMPACT_FIELD_WIDTH;\n  }\n  _onHtmlEnvironmentPropertyChange() {\n    this._initDefaults();\n    this.formField.invalidateLayoutTree();\n  }\n  layout($container) {\n    let containerPadding,\n      fieldOffset,\n      fieldSize,\n      fieldBounds,\n      htmlField,\n      labelHasFieldWidth,\n      top,\n      bottom,\n      left,\n      right,\n      htmlContainer = HtmlComponent.get($container),\n      formField = this.formField,\n      tooltip = formField._tooltip(),\n      labelWidth = this.labelWidth(),\n      statusWidth = this.statusWidth;\n\n    // Note: Position coordinates start _inside_ the border, therefore we only use the padding\n    containerPadding = htmlContainer.insets({\n      includeBorder: false\n    });\n    top = containerPadding.top;\n    right = containerPadding.right;\n    bottom = containerPadding.bottom;\n    left = containerPadding.left;\n    if (this._isLabelVisible()) {\n      // currently a gui only flag, necessary for sequencebox\n      if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          labelWidth = 0;\n        } else {\n          labelWidth = graphics.prefSize(formField.$label).width;\n        }\n      }\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        graphics.setBounds(formField.$label, left, top, labelWidth, this.rowHeight);\n        left += labelWidth + formField.$label.cssMarginX();\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        let labelHeight = graphics.prefSize(formField.$label).height;\n        // prefSize rounds the value -> ensure label height is set to that value to prevent gaps between container and label.\n        // In addition, this also ensures that the correct height is set when changing the label position from left to top\n        formField.$label.cssHeight(labelHeight);\n        top += labelHeight + formField.$label.cssMarginY();\n        labelHasFieldWidth = true;\n      }\n    }\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      formField.$mandatory.cssTop(top).cssLeft(left).cssWidth(this.mandatoryIndicatorWidth);\n      left += formField.$mandatory.outerWidth(true);\n    }\n    if (this._isStatusVisible()) {\n      formField.$status.cssWidth(statusWidth);\n      // If both status and label position is \"top\", pull status up (without margin on the right side)\n      if (formField.statusPosition === FormField.StatusPosition.TOP && labelHasFieldWidth) {\n        let statusHeight = graphics.prefSize(formField.$status, {\n          useCssSize: true\n        }).height;\n        // Vertically center status with label\n        let statusTop = containerPadding.top + formField.$label.cssPaddingTop() + formField.$label.height() / 2 - statusHeight / 2;\n        formField.$status.cssTop(statusTop).cssRight(right + formField.$label.cssMarginRight()).cssHeight(statusHeight);\n        // Add padding to label to prevent overlay of text and status icon\n        let w = graphics.size(formField.$status, true).width;\n        formField.$label.cssPaddingRight(w);\n      } else {\n        // Default status position\n        formField.$status.cssTop(top).cssRight(right).cssHeight(this.rowHeight);\n        right += statusWidth + formField.$status.cssMarginX();\n      }\n    }\n    if (formField.$fieldContainer) {\n      // Calculate the additional field offset (because of label, mandatory indicator etc.) without the containerInset.\n      fieldOffset = new Insets(top - containerPadding.top, right - containerPadding.right, bottom - containerPadding.bottom, left - containerPadding.left);\n      // Calculate field size: \"available size\" - \"insets (border and padding)\" - \"additional offset\" - \"field's margin\"\n      let fieldMargins = graphics.margins(formField.$fieldContainer);\n      fieldSize = htmlContainer.availableSize({\n        exact: true\n      }).subtract(htmlContainer.insets()).subtract(fieldOffset).subtract(fieldMargins);\n      fieldBounds = new Rectangle(left, top, fieldSize.width, fieldSize.height);\n      if (formField.$fieldContainer.css('position') !== 'absolute') {\n        fieldBounds.x = 0;\n        fieldBounds.y = 0;\n      }\n      htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (htmlField) {\n        htmlField.setBounds(fieldBounds);\n      } else {\n        graphics.setBounds(formField.$fieldContainer, fieldBounds);\n      }\n      if (this.compactFieldWidth > -1) {\n        formField.$field.toggleClass('compact', fieldBounds.width <= this.compactFieldWidth);\n        formField.$container.toggleClass('compact', fieldBounds.width <= this.compactFieldWidth);\n      }\n      if (labelHasFieldWidth) {\n        let fieldWidth = fieldSize.add(fieldMargins).width - formField.$label.cssMarginX();\n        if (formField.$mandatory && formField.$mandatory.isVisible()) {\n          fieldWidth += formField.$mandatory.outerWidth(true);\n        }\n        formField.$label.cssWidth(fieldWidth);\n      }\n    }\n    if (formField.$fieldContainer) {\n      // Icons are placed inside the field (as overlay)\n      let $iconInput = this._$elementForIconLayout();\n      let fieldBorder = graphics.borders($iconInput);\n      let inputBounds = graphics.offsetBounds($iconInput);\n      top += fieldBorder.top;\n      right += fieldBorder.right;\n      fieldBounds.x += fieldBorder.left;\n      fieldBounds.y += fieldBorder.top;\n      fieldBounds.height = inputBounds.height - fieldBorder.top - fieldBorder.bottom;\n      fieldBounds.width = inputBounds.width - fieldBorder.left - fieldBorder.right;\n      if (formField.$icon) {\n        this._layoutIcon(formField, fieldBounds, right, top);\n      }\n\n      // Clear icon if present\n      if (formField.$clearIcon) {\n        this._layoutClearIcon(formField, fieldBounds, right, top);\n      }\n    }\n\n    // Make sure tooltip is at correct position after layouting, if there is one\n    if (tooltip && tooltip.rendered) {\n      tooltip.position();\n    }\n\n    // Check for scrollbars, update them if necessary\n    if (formField.$field) {\n      scrollbars.update(formField.$field, true);\n    }\n    this._layoutDisabledCopyOverlay();\n  }\n  _layoutDisabledCopyOverlay() {\n    if (this.formField.$field && this.formField.$disabledCopyOverlay) {\n      let $overlay = this.formField.$disabledCopyOverlay;\n      let $field = this.formField.$field;\n      let pos = $field.position();\n      let padding = graphics.insets($field, {\n        includePadding: true\n      });\n\n      // subtract scrollbars sizes from width and height so overlay does not block scrollbars\n      // we read the size from the scrollbar from our device, because we already determined\n      // it on startup. Only do this when element is scrollable.\n      let elem = $field[0];\n      let overflowX = $field.css('overflow-x');\n      let overflowY = $field.css('overflow-y');\n      let scrollHorizontal = overflowX === 'scroll' || overflowX === 'auto' && elem.scrollWidth - elem.clientWidth > 0;\n      let scrollVertical = overflowY === 'scroll' || overflowY === 'auto' && elem.scrollHeight - elem.clientHeight > 0;\n      let scrollbarSize = Device.get().scrollbarWidth;\n      $overlay.css('top', pos.top).css('left', pos.left).width($field.width() + padding.horizontal() - (scrollVertical ? scrollbarSize : 0)).height($field.height() + padding.vertical() - (scrollHorizontal ? scrollbarSize : 0));\n    }\n  }\n  _isLabelVisible() {\n    return !!this.formField.$label && this.formField.labelVisible;\n  }\n  _isStatusVisible() {\n    return !!this.formField.$status && (this.formField.statusVisible || this.formField.$status.isVisible());\n  }\n  preferredLayoutSize($container, options) {\n    let htmlContainer = HtmlComponent.get(this.formField.$container);\n    let formField = this.formField;\n    let prefSizeLabel = new Dimension();\n    let prefSizeMandatory = new Dimension();\n    let prefSizeStatus = new Dimension();\n    let prefSizeField = new Dimension();\n    let widthHint = scout.nvl(options.widthHint, 0);\n    let heightHint = scout.nvl(options.heightHint, 0);\n    // Status is only pulled up if status AND label are on top\n    let statusOnTop = formField.statusPosition === FormField.StatusPosition.TOP && this._isLabelVisible() && formField.labelPosition === FormField.LabelPosition.TOP;\n\n    // Calculate the preferred sizes of the individual parts\n    // Mandatory indicator\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      prefSizeMandatory.width = this.mandatoryIndicatorWidth + formField.$mandatory.cssMarginX();\n      widthHint -= prefSizeMandatory.width;\n    }\n\n    // Label\n    if (this._isLabelVisible()) {\n      prefSizeLabel.width = this.labelWidth() + formField.$label.cssMarginX();\n      prefSizeLabel.height = this.rowHeight;\n      if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        // Label is always as width as the field if it is on top\n        prefSizeLabel.width = 0;\n        prefSizeLabel.height = graphics.prefSize(formField.$label, true).height;\n      } else if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          prefSizeLabel.width = 0;\n        } else {\n          prefSizeLabel = graphics.prefSize(formField.$label, true);\n        }\n      }\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        widthHint -= prefSizeLabel.width;\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        heightHint -= prefSizeLabel.height;\n      }\n    }\n\n    // Status\n    if (this._isStatusVisible()) {\n      prefSizeStatus.width = this.statusWidth + formField.$status.cssMarginX();\n      if (!statusOnTop) {\n        prefSizeStatus.height = this.rowHeight;\n        widthHint -= prefSizeStatus.width;\n      }\n    }\n\n    // Field\n    if (formField.$fieldContainer) {\n      let fieldMargins = graphics.margins(formField.$fieldContainer);\n      let htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (!htmlField) {\n        widthHint -= fieldMargins.horizontal();\n        heightHint -= fieldMargins.vertical();\n      }\n      if (options.widthHint) {\n        options.widthHint = widthHint;\n      }\n      if (options.heightHint) {\n        options.heightHint = heightHint;\n      }\n      if (htmlField) {\n        prefSizeField = htmlField.prefSize(options).add(fieldMargins);\n      } else {\n        prefSizeField = graphics.prefSize(formField.$fieldContainer, options).add(fieldMargins);\n      }\n    }\n\n    // Now sum up to calculate the preferred size of the container\n    let prefSize = new Dimension();\n\n    // Field is the base, and it should be at least as height as a form row height.\n    prefSize.width = prefSizeField.width;\n    prefSize.height = prefSizeField.height;\n\n    // Mandatory\n    prefSize.width += prefSizeMandatory.width;\n    prefSize.height = Math.max(prefSize.height, prefSizeMandatory.height);\n\n    // Label\n    if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n      prefSize.width += prefSizeLabel.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeLabel.height);\n    } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n      prefSize.width = Math.max(prefSize.width, prefSizeLabel.width);\n      prefSize.height += prefSizeLabel.height;\n    }\n\n    // Status\n    if (!statusOnTop) {\n      prefSize.width += prefSizeStatus.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeStatus.height);\n    }\n\n    // Add padding and border\n    prefSize = prefSize.add(htmlContainer.insets());\n    return prefSize;\n  }\n\n  /**\n   * @returns {$} the input element used to position the icon. May be overridden if another element than $field should be used.\n   */\n  _$elementForIconLayout() {\n    return this.formField.$field;\n  }\n  _layoutIcon(formField, fieldBounds, right, top) {\n    let height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    formField.$icon.cssRight(right).cssTop(fieldBounds.y).cssHeight(height);\n  }\n  _layoutClearIcon(formField, fieldBounds, right, top) {\n    let height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    if (formField instanceof BasicField && formField.gridData.horizontalAlignment > 0) {\n      formField.$clearIcon.cssLeft(fieldBounds.x).cssRight('').cssTop(fieldBounds.y).cssHeight(height);\n    } else {\n      formField.$clearIcon.cssLeft('').cssRight(right).cssTop(fieldBounds.y).cssHeight(height);\n    }\n  }\n  labelWidth() {\n    // use configured label width in pixel or default label width\n    if (FormField.LabelWidth.DEFAULT === this.formField.labelWidthInPixel) {\n      return HtmlEnvironment.get().fieldLabelWidth;\n    }\n    return this.formField.labelWidthInPixel;\n  }\n}\n_defineProperty(FormFieldLayout, \"COMPACT_FIELD_WIDTH\", 61);","map":{"version":3,"names":["AbstractLayout","BasicField","Device","Dimension","FormField","graphics","HtmlComponent","HtmlEnvironment","Insets","Rectangle","scout","scrollbars","FormFieldLayout","constructor","formField","_initDefaults","htmlPropertyChangeHandler","_onHtmlEnvironmentPropertyChange","bind","get","on","one","off","mandatoryIndicatorWidth","fieldMandatoryIndicatorWidth","statusWidth","fieldStatusWidth","rowHeight","formRowHeight","compactFieldWidth","COMPACT_FIELD_WIDTH","invalidateLayoutTree","layout","$container","containerPadding","fieldOffset","fieldSize","fieldBounds","htmlField","labelHasFieldWidth","top","bottom","left","right","htmlContainer","tooltip","_tooltip","labelWidth","insets","includeBorder","_isLabelVisible","labelWidthInPixel","LabelWidth","UI","labelUseUiWidth","$label","hasClass","prefSize","width","isOneOf","labelPosition","LabelPosition","DEFAULT","LEFT","setBounds","cssMarginX","TOP","labelHeight","height","cssHeight","cssMarginY","$mandatory","isVisible","cssTop","cssLeft","cssWidth","outerWidth","_isStatusVisible","$status","statusPosition","StatusPosition","statusHeight","useCssSize","statusTop","cssPaddingTop","cssRight","cssMarginRight","w","size","cssPaddingRight","$fieldContainer","fieldMargins","margins","availableSize","exact","subtract","css","x","y","optGet","$field","toggleClass","fieldWidth","add","$iconInput","_$elementForIconLayout","fieldBorder","borders","inputBounds","offsetBounds","$icon","_layoutIcon","$clearIcon","_layoutClearIcon","rendered","position","update","_layoutDisabledCopyOverlay","$disabledCopyOverlay","$overlay","pos","padding","includePadding","elem","overflowX","overflowY","scrollHorizontal","scrollWidth","clientWidth","scrollVertical","scrollHeight","clientHeight","scrollbarSize","scrollbarWidth","horizontal","vertical","labelVisible","statusVisible","preferredLayoutSize","options","prefSizeLabel","prefSizeMandatory","prefSizeStatus","prefSizeField","widthHint","nvl","heightHint","statusOnTop","Math","max","gridData","horizontalAlignment","fieldLabelWidth"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/FormFieldLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, BasicField, Device, Dimension, FormField, graphics, HtmlComponent, HtmlEnvironment, Insets, Rectangle, scout, scrollbars} from '../../index';\n\n/**\n * Form-Field Layout, for a form-field with label, status, mandatory-indicator and a field.\n * This layout class works with a FormField instance, since we must access properties of the model.\n * Note: we use optGet() here, since some form-fields have only a bare HTML element as field, other\n * (composite) form-fields work with a HtmlComponent which has its own LayoutManager.\n */\nexport default class FormFieldLayout extends AbstractLayout {\n\n  constructor(formField) {\n    super();\n    this.formField = formField;\n    this._initDefaults();\n\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmentPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this.formField.one('remove', () => {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    });\n  }\n\n  // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n  static COMPACT_FIELD_WIDTH = 61;\n\n  _initDefaults() {\n    this.mandatoryIndicatorWidth = HtmlEnvironment.get().fieldMandatoryIndicatorWidth;\n    this.statusWidth = HtmlEnvironment.get().fieldStatusWidth;\n    this.rowHeight = HtmlEnvironment.get().formRowHeight;\n    this.compactFieldWidth = FormFieldLayout.COMPACT_FIELD_WIDTH;\n  }\n\n  _onHtmlEnvironmentPropertyChange() {\n    this._initDefaults();\n    this.formField.invalidateLayoutTree();\n  }\n\n  layout($container) {\n    let containerPadding, fieldOffset, fieldSize, fieldBounds, htmlField, labelHasFieldWidth, top, bottom, left, right,\n      htmlContainer = HtmlComponent.get($container),\n      formField = this.formField,\n      tooltip = formField._tooltip(),\n      labelWidth = this.labelWidth(),\n      statusWidth = this.statusWidth;\n\n    // Note: Position coordinates start _inside_ the border, therefore we only use the padding\n    containerPadding = htmlContainer.insets({\n      includeBorder: false\n    });\n    top = containerPadding.top;\n    right = containerPadding.right;\n    bottom = containerPadding.bottom;\n    left = containerPadding.left;\n\n    if (this._isLabelVisible()) {\n      // currently a gui only flag, necessary for sequencebox\n      if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          labelWidth = 0;\n        } else {\n          labelWidth = graphics.prefSize(formField.$label).width;\n        }\n      }\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        graphics.setBounds(formField.$label, left, top, labelWidth, this.rowHeight);\n        left += labelWidth + formField.$label.cssMarginX();\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        let labelHeight = graphics.prefSize(formField.$label).height;\n        // prefSize rounds the value -> ensure label height is set to that value to prevent gaps between container and label.\n        // In addition, this also ensures that the correct height is set when changing the label position from left to top\n        formField.$label.cssHeight(labelHeight);\n        top += labelHeight + formField.$label.cssMarginY();\n        labelHasFieldWidth = true;\n      }\n    }\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      formField.$mandatory\n        .cssTop(top)\n        .cssLeft(left)\n        .cssWidth(this.mandatoryIndicatorWidth);\n      left += formField.$mandatory.outerWidth(true);\n    }\n    if (this._isStatusVisible()) {\n      formField.$status\n        .cssWidth(statusWidth);\n      // If both status and label position is \"top\", pull status up (without margin on the right side)\n      if (formField.statusPosition === FormField.StatusPosition.TOP && labelHasFieldWidth) {\n        let statusHeight = graphics.prefSize(formField.$status, {\n          useCssSize: true\n        }).height;\n        // Vertically center status with label\n        let statusTop = containerPadding.top + formField.$label.cssPaddingTop() + (formField.$label.height() / 2) - (statusHeight / 2);\n        formField.$status\n          .cssTop(statusTop)\n          .cssRight(right + formField.$label.cssMarginRight())\n          .cssHeight(statusHeight);\n        // Add padding to label to prevent overlay of text and status icon\n        let w = graphics.size(formField.$status, true).width;\n        formField.$label.cssPaddingRight(w);\n      } else {\n        // Default status position\n        formField.$status\n          .cssTop(top)\n          .cssRight(right)\n          .cssHeight(this.rowHeight);\n        right += statusWidth + formField.$status.cssMarginX();\n      }\n    }\n\n    if (formField.$fieldContainer) {\n      // Calculate the additional field offset (because of label, mandatory indicator etc.) without the containerInset.\n      fieldOffset = new Insets(\n        top - containerPadding.top,\n        right - containerPadding.right,\n        bottom - containerPadding.bottom,\n        left - containerPadding.left);\n      // Calculate field size: \"available size\" - \"insets (border and padding)\" - \"additional offset\" - \"field's margin\"\n      let fieldMargins = graphics.margins(formField.$fieldContainer);\n      fieldSize = htmlContainer.availableSize({\n        exact: true\n      })\n        .subtract(htmlContainer.insets())\n        .subtract(fieldOffset)\n        .subtract(fieldMargins);\n      fieldBounds = new Rectangle(left, top, fieldSize.width, fieldSize.height);\n      if (formField.$fieldContainer.css('position') !== 'absolute') {\n        fieldBounds.x = 0;\n        fieldBounds.y = 0;\n      }\n      htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (htmlField) {\n        htmlField.setBounds(fieldBounds);\n      } else {\n        graphics.setBounds(formField.$fieldContainer, fieldBounds);\n      }\n      if (this.compactFieldWidth > -1) {\n        formField.$field.toggleClass('compact', fieldBounds.width <= this.compactFieldWidth);\n        formField.$container.toggleClass('compact', fieldBounds.width <= this.compactFieldWidth);\n      }\n\n      if (labelHasFieldWidth) {\n        let fieldWidth = fieldSize.add(fieldMargins).width - formField.$label.cssMarginX();\n        if (formField.$mandatory && formField.$mandatory.isVisible()) {\n          fieldWidth += formField.$mandatory.outerWidth(true);\n        }\n        formField.$label.cssWidth(fieldWidth);\n      }\n    }\n\n    if (formField.$fieldContainer) {\n      // Icons are placed inside the field (as overlay)\n      let $iconInput = this._$elementForIconLayout();\n      let fieldBorder = graphics.borders($iconInput);\n      let inputBounds = graphics.offsetBounds($iconInput);\n      top += fieldBorder.top;\n      right += fieldBorder.right;\n      fieldBounds.x += fieldBorder.left;\n      fieldBounds.y += fieldBorder.top;\n      fieldBounds.height = inputBounds.height - fieldBorder.top - fieldBorder.bottom;\n      fieldBounds.width = inputBounds.width - fieldBorder.left - fieldBorder.right;\n\n      if (formField.$icon) {\n        this._layoutIcon(formField, fieldBounds, right, top);\n      }\n\n      // Clear icon if present\n      if (formField.$clearIcon) {\n        this._layoutClearIcon(formField, fieldBounds, right, top);\n      }\n    }\n\n    // Make sure tooltip is at correct position after layouting, if there is one\n    if (tooltip && tooltip.rendered) {\n      tooltip.position();\n    }\n\n    // Check for scrollbars, update them if necessary\n    if (formField.$field) {\n      scrollbars.update(formField.$field, true);\n    }\n\n    this._layoutDisabledCopyOverlay();\n  }\n\n  _layoutDisabledCopyOverlay() {\n    if (this.formField.$field && this.formField.$disabledCopyOverlay) {\n      let $overlay = this.formField.$disabledCopyOverlay;\n      let $field = this.formField.$field;\n\n      let pos = $field.position();\n      let padding = graphics.insets($field, {\n        includePadding: true\n      });\n\n      // subtract scrollbars sizes from width and height so overlay does not block scrollbars\n      // we read the size from the scrollbar from our device, because we already determined\n      // it on startup. Only do this when element is scrollable.\n      let elem = $field[0];\n      let overflowX = $field.css('overflow-x');\n      let overflowY = $field.css('overflow-y');\n      let scrollHorizontal = overflowX === 'scroll' || overflowX === 'auto' && (elem.scrollWidth - elem.clientWidth) > 0;\n      let scrollVertical = overflowY === 'scroll' || overflowY === 'auto' && (elem.scrollHeight - elem.clientHeight) > 0;\n      let scrollbarSize = Device.get().scrollbarWidth;\n\n      $overlay\n        .css('top', pos.top)\n        .css('left', pos.left)\n        .width($field.width() + padding.horizontal() - (scrollVertical ? scrollbarSize : 0))\n        .height($field.height() + padding.vertical() - (scrollHorizontal ? scrollbarSize : 0));\n\n    }\n  }\n\n  _isLabelVisible() {\n    return !!this.formField.$label && this.formField.labelVisible;\n  }\n\n  _isStatusVisible() {\n    return !!this.formField.$status && (this.formField.statusVisible || this.formField.$status.isVisible());\n  }\n\n  preferredLayoutSize($container, options) {\n    let htmlContainer = HtmlComponent.get(this.formField.$container);\n    let formField = this.formField;\n    let prefSizeLabel = new Dimension();\n    let prefSizeMandatory = new Dimension();\n    let prefSizeStatus = new Dimension();\n    let prefSizeField = new Dimension();\n    let widthHint = scout.nvl(options.widthHint, 0);\n    let heightHint = scout.nvl(options.heightHint, 0);\n    // Status is only pulled up if status AND label are on top\n    let statusOnTop = formField.statusPosition === FormField.StatusPosition.TOP && this._isLabelVisible() && formField.labelPosition === FormField.LabelPosition.TOP;\n\n    // Calculate the preferred sizes of the individual parts\n    // Mandatory indicator\n    if (formField.$mandatory && formField.$mandatory.isVisible()) {\n      prefSizeMandatory.width = this.mandatoryIndicatorWidth + formField.$mandatory.cssMarginX();\n      widthHint -= prefSizeMandatory.width;\n    }\n\n    // Label\n    if (this._isLabelVisible()) {\n      prefSizeLabel.width = this.labelWidth() + formField.$label.cssMarginX();\n      prefSizeLabel.height = this.rowHeight;\n      if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        // Label is always as width as the field if it is on top\n        prefSizeLabel.width = 0;\n        prefSizeLabel.height = graphics.prefSize(formField.$label, true).height;\n      } else if (formField.labelWidthInPixel === FormField.LabelWidth.UI || formField.labelUseUiWidth) {\n        if (formField.$label.hasClass('empty')) {\n          prefSizeLabel.width = 0;\n        } else {\n          prefSizeLabel = graphics.prefSize(formField.$label, true);\n        }\n      }\n\n      if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n        widthHint -= prefSizeLabel.width;\n      } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n        heightHint -= prefSizeLabel.height;\n      }\n    }\n\n    // Status\n    if (this._isStatusVisible()) {\n      prefSizeStatus.width = this.statusWidth + formField.$status.cssMarginX();\n      if (!statusOnTop) {\n        prefSizeStatus.height = this.rowHeight;\n        widthHint -= prefSizeStatus.width;\n      }\n    }\n\n    // Field\n    if (formField.$fieldContainer) {\n      let fieldMargins = graphics.margins(formField.$fieldContainer);\n      let htmlField = HtmlComponent.optGet(formField.$fieldContainer);\n      if (!htmlField) {\n        widthHint -= fieldMargins.horizontal();\n        heightHint -= fieldMargins.vertical();\n      }\n      if (options.widthHint) {\n        options.widthHint = widthHint;\n      }\n      if (options.heightHint) {\n        options.heightHint = heightHint;\n      }\n      if (htmlField) {\n        prefSizeField = htmlField.prefSize(options)\n          .add(fieldMargins);\n      } else {\n        prefSizeField = graphics.prefSize(formField.$fieldContainer, options)\n          .add(fieldMargins);\n      }\n    }\n\n    // Now sum up to calculate the preferred size of the container\n    let prefSize = new Dimension();\n\n    // Field is the base, and it should be at least as height as a form row height.\n    prefSize.width = prefSizeField.width;\n    prefSize.height = prefSizeField.height;\n\n    // Mandatory\n    prefSize.width += prefSizeMandatory.width;\n    prefSize.height = Math.max(prefSize.height, prefSizeMandatory.height);\n\n    // Label\n    if (scout.isOneOf(formField.labelPosition, FormField.LabelPosition.DEFAULT, FormField.LabelPosition.LEFT)) {\n      prefSize.width += prefSizeLabel.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeLabel.height);\n    } else if (formField.labelPosition === FormField.LabelPosition.TOP) {\n      prefSize.width = Math.max(prefSize.width, prefSizeLabel.width);\n      prefSize.height += prefSizeLabel.height;\n    }\n\n    // Status\n    if (!statusOnTop) {\n      prefSize.width += prefSizeStatus.width;\n      prefSize.height = Math.max(prefSize.height, prefSizeStatus.height);\n    }\n\n    // Add padding and border\n    prefSize = prefSize.add(htmlContainer.insets());\n\n    return prefSize;\n  }\n\n  /**\n   * @returns {$} the input element used to position the icon. May be overridden if another element than $field should be used.\n   */\n  _$elementForIconLayout() {\n    return this.formField.$field;\n  }\n\n  _layoutIcon(formField, fieldBounds, right, top) {\n    let height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    formField.$icon\n      .cssRight(right)\n      .cssTop(fieldBounds.y)\n      .cssHeight(height);\n  }\n\n  _layoutClearIcon(formField, fieldBounds, right, top) {\n    let height = this.rowHeight;\n    if (fieldBounds) {\n      // If field is bigger than rowHeight (e.g. if used in desktop cell editor), make sure icon is as height as field\n      height = fieldBounds.height;\n    }\n    if (formField instanceof BasicField && formField.gridData.horizontalAlignment > 0) {\n      formField.$clearIcon\n        .cssLeft(fieldBounds.x)\n        .cssRight('')\n        .cssTop(fieldBounds.y)\n        .cssHeight(height);\n    } else {\n      formField.$clearIcon\n        .cssLeft('')\n        .cssRight(right)\n        .cssTop(fieldBounds.y)\n        .cssHeight(height);\n    }\n  }\n\n  labelWidth() {\n    // use configured label width in pixel or default label width\n    if (FormField.LabelWidth.DEFAULT === this.formField.labelWidthInPixel) {\n      return HtmlEnvironment.get().fieldLabelWidth;\n    }\n    return this.formField.labelWidthInPixel;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}