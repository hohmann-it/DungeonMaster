{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { BasicField, fields, InputFieldKeyStrokeContext, objects, scout, Status, StringFieldCtrlEnterKeyStroke, StringFieldEnterKeyStroke, StringFieldLayout, strings, texts } from '../../../index';\nexport default class StringField extends BasicField {\n  constructor() {\n    super();\n    this.format;\n    this.hasAction = false;\n    this.inputMasked = false;\n    this.inputObfuscated = false;\n    this.maxLength = 4000;\n    this.maxLengthHandler = scout.create('MaxLengthHandler', {\n      target: this\n    });\n    this.multilineText = false;\n    this.selectionStart = 0;\n    this.selectionEnd = 0;\n    this.selectionTrackingEnabled = false;\n    this.spellCheckEnabled = false;\n    this.trimText = true;\n    this.wrapText = false;\n    this._onSelectionChangingActionHandler = this._onSelectionChangingAction.bind(this);\n  }\n  /**\n   * Resolves the text key if value contains one.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    value = texts.resolveText(value, this.session.locale.languageTag);\n    super._initValue(value);\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n    this.keyStrokeContext.registerKeyStroke([new StringFieldEnterKeyStroke(this), new StringFieldCtrlEnterKeyStroke(this)]);\n  }\n\n  /**\n   * @override\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n  _init(model) {\n    super._init(model);\n    this._setMultilineText(this.multilineText);\n  }\n  _render() {\n    this.addContainer(this.$parent, 'string-field', new StringFieldLayout(this));\n    this.addLabel();\n    this.addMandatoryIndicator();\n    let $field;\n    if (this.multilineText) {\n      $field = this._makeMultilineField();\n      this.$container.addClass('multiline');\n    } else {\n      $field = fields.makeTextField(this.$parent);\n    }\n    this.addField($field);\n    this.maxLengthHandler.install($field);\n    this.addStatus();\n  }\n  _makeMultilineField() {\n    let mouseDownHandler = function () {\n      this.mouseClicked = true;\n    }.bind(this);\n    return this.$parent.makeElement('<textarea>').on('DOMMouseScroll mousewheel', this._onMouseWheel.bind(this)).on('mousedown', mouseDownHandler).on('focus', event => {\n      this.$field.off('mousedown', mouseDownHandler);\n      if (!this.mouseClicked) {\n        // only trigger on tab focus in\n        setTimeout(() => {\n          if (!this.rendered || this.session.focusManager.isElementCovertByGlassPane(this.$field)) {\n            return;\n          }\n          this._renderSelectionStart();\n          this._renderSelectionEnd();\n        });\n      }\n      this.mouseClicked = false;\n    }).on('focusout', () => {\n      this.$field.on('mousedown', mouseDownHandler);\n    }).addDeviceClass();\n  }\n  _onFieldBlur() {\n    super._onFieldBlur();\n    if (this.multilineText) {\n      this._updateSelection();\n    }\n    if (this.inputObfuscated) {\n      // Restore obfuscated display text.\n      this.$field.val(this.displayText);\n    }\n  }\n  _onMouseWheel(event) {\n    event = event.originalEvent || this.$container.window(true).event.originalEvent;\n    // noinspection JSUnresolvedVariable\n    let delta = event.wheelDelta ? -event.wheelDelta : event.detail;\n    let scrollTop = this.$field[0].scrollTop;\n    if (delta < 0 && scrollTop === 0) {\n      // StringField is scrolled to the very top -> parent may scroll\n      return;\n    }\n    let maxScrollTop = this.$field[0].scrollHeight - this.$field[0].clientHeight;\n    if (delta > 0 && scrollTop >= maxScrollTop - 1) {\n      // -1 because it can sometimes happen that scrollTop is maxScrollTop -1 or +1, just because clientHeight and scrollHeight are rounded values\n      // StringField is scrolled to the very bottom -> parent may scroll\n      this.$field[0].scrollTop = maxScrollTop; // Ensure it is really at the bottom (not -1px above)\n      return;\n    }\n    // Don't allow others to scroll (e.g. Scrollbar) while scrolling in the text area\n    event.stopPropagation();\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderInputMasked();\n    this._renderWrapText();\n    this._renderFormat();\n    this._renderSpellCheckEnabled();\n    this._renderHasAction();\n    this._renderMaxLength();\n    this._renderSelectionTrackingEnabled();\n    // Do not render selectionStart and selectionEnd here, because that would cause the focus to\n    // be set to <textarea>s in IE. Instead, the selection is rendered when the focus has entered\n    // the field, see _render(). #168648\n    this._renderDropType();\n  }\n\n  /**\n   * Adds a click handler instead of a mouse down handler because it executes an action.\n   * @override\n   */\n  addIcon() {\n    this.$icon = fields.appendIcon(this.$container).on('click', this._onIconClick.bind(this));\n  }\n\n  /**\n   * override to ensure dropdown fields and touch mode smart fields does not have a clear icon.\n   */\n  isClearable() {\n    return super.isClearable() && !this.multilineText;\n  }\n  setSelectionStart(selectionStart) {\n    this.setProperty('selectionStart', selectionStart);\n  }\n  _renderSelectionStart() {\n    if (scout.nvl(this.selectionStart, null) !== null) {\n      this.$field[0].selectionStart = this.selectionStart;\n    }\n  }\n  setSelectionEnd(selectionEnd) {\n    this.setProperty('selectionEnd', selectionEnd);\n  }\n  _renderSelectionEnd() {\n    if (scout.nvl(this.selectionEnd, null) !== null) {\n      this.$field[0].selectionEnd = this.selectionEnd;\n    }\n  }\n  setSelectionTrackingEnabled(selectionTrackingEnabled) {\n    this.setProperty('selectionTrackingEnabled', selectionTrackingEnabled);\n  }\n  _renderSelectionTrackingEnabled() {\n    this.$field.off('select', this._onSelectionChangingActionHandler).off('mousedown', this._onSelectionChangingActionHandler).off('keydown', this._onSelectionChangingActionHandler).off('input', this._onSelectionChangingActionHandler);\n    if (this.selectionTrackingEnabled) {\n      this.$field.on('select', this._onSelectionChangingActionHandler).on('mousedown', this._onSelectionChangingActionHandler).on('keydown', this._onSelectionChangingActionHandler).on('input', this._onSelectionChangingActionHandler);\n    }\n  }\n  setInputMasked(inputMasked) {\n    this.setProperty('inputMasked', inputMasked);\n  }\n  _renderInputMasked() {\n    if (this.multilineText) {\n      return;\n    }\n    this.$field.attr('type', this.inputMasked ? 'password' : 'text');\n  }\n  _renderInputObfuscated() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderDisplayText is called first\n      // (inputObfuscated flag might be still in the old state in _renderDisplayText).\n      this.$field.val('');\n    }\n  }\n  setHasAction(hasAction) {\n    this.setProperty('hasAction', hasAction);\n  }\n  _renderHasAction() {\n    if (this.hasAction) {\n      if (!this.$icon) {\n        this.addIcon();\n        this.$icon.addClass('action');\n      }\n      this.$container.addClass('has-icon');\n    } else {\n      this._removeIcon();\n      this.$container.removeClass('has-icon');\n    }\n    this.revalidateLayout();\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    this.revalidateLayout();\n  }\n  setFormatUpper(formatUpper) {\n    if (formatUpper) {\n      this.setFormat(StringField.Format.UPPER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n  setFormatLower(formatLower) {\n    if (formatLower) {\n      this.setFormat(StringField.Format.LOWER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n  setFormat(format) {\n    this.setProperty('format', format);\n  }\n  _renderFormat() {\n    if (this.format === StringField.Format.LOWER) {\n      this.$field.css('text-transform', 'lowercase');\n    } else if (this.format === StringField.Format.UPPER) {\n      this.$field.css('text-transform', 'uppercase');\n    } else {\n      this.$field.css('text-transform', '');\n    }\n  }\n  setSpellCheckEnabled(spellCheckEnabled) {\n    this.setProperty('spellCheckEnabled', spellCheckEnabled);\n  }\n  _renderSpellCheckEnabled() {\n    if (this.spellCheckEnabled) {\n      this.$field.attr('spellcheck', 'true');\n    } else {\n      this.$field.attr('spellcheck', 'false');\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderInputObfuscated is called first\n      // (inputObfuscated flag might be still in the old state in this method).\n      this.$field.val('');\n      return;\n    }\n    let displayText = strings.nvl(this.displayText);\n    let oldDisplayText = strings.nvl(this.$field.val());\n    let oldSelection = this._getSelection();\n    super._renderDisplayText();\n    // Try to keep the current selection for cases where the old and new display\n    // text only differ because of the automatic trimming.\n    if (this.trimText && oldDisplayText !== displayText) {\n      let matches = oldDisplayText.match(StringField.TRIM_REGEXP);\n      if (matches && matches[2] === displayText) {\n        this._setSelection({\n          start: Math.max(oldSelection.start - matches[1].length, 0),\n          end: Math.min(oldSelection.end - matches[1].length, displayText.length)\n        });\n      }\n    }\n  }\n  insertText(text) {\n    if (!this.rendered) {\n      this._postRenderActions.push(this.insertText.bind(this, text));\n      return;\n    }\n    this._insertText(text);\n  }\n  _insertText(textToInsert) {\n    if (!textToInsert) {\n      return;\n    }\n\n    // Prevent insert if new length would exceed maxLength to prevent unintended deletion of characters at the end of the string\n    let selection = this._getSelection();\n    let text = this._applyTextToSelection(this.$field.val(), textToInsert, selection);\n    if (text.length > this.maxLength) {\n      this._showNotification('ui.CannotInsertTextTooLong');\n      return;\n    }\n    this.$field.val(text);\n    this._setSelection(selection.start + textToInsert.length);\n\n    // Make sure display text gets sent (necessary if field does not have the focus)\n    if (this.updateDisplayTextOnModify) {\n      // If flag is true, we need to send two events (First while typing=true, second = false)\n      this.acceptInput(true);\n    }\n    this.acceptInput();\n  }\n  _applyTextToSelection(text, textToInsert, selection) {\n    if (this.inputObfuscated) {\n      // Use empty text when input is obfuscated, otherwise text will be added to obfuscated text\n      text = '';\n    }\n    return text.slice(0, selection.start) + textToInsert + text.slice(selection.end);\n  }\n  setWrapText(wrapText) {\n    this.setProperty('wrapText', wrapText);\n  }\n  _renderWrapText() {\n    this.$field.attr('wrap', this.wrapText ? 'soft' : 'off');\n  }\n  setTrimText(trimText) {\n    this.setProperty('trimText', trimText);\n  }\n  _renderTrimText() {\n    // nop, property used in _validateDisplayText()\n  }\n  _setMultilineText(multilineText) {\n    this._setProperty('multilineText', multilineText);\n    this.keyStrokeContext.setMultiline(this.multilineText);\n  }\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: !this.multilineText\n    });\n  }\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n  setMaxLength(maxLength) {\n    this.setProperty('maxLength', maxLength);\n  }\n  _renderMaxLength() {\n    this.maxLengthHandler.render();\n  }\n  _onIconClick(event) {\n    this.acceptInput();\n    this.$field.focus();\n    this.trigger('action');\n  }\n  _onSelectionChangingAction(event) {\n    if (event.type === 'mousedown') {\n      this.$field.window().one('mouseup.stringfield', () => {\n        // For some reason, when clicking side an existing selection (which clears the selection), the old\n        // selection is still visible. To get around this case, we use setTimeout to handle the new selection\n        // after it really has been changed.\n        setTimeout(this._updateSelection.bind(this));\n      });\n    } else if (event.type === 'keydown') {\n      // Use set timeout to let the cursor move to the target position\n      setTimeout(this._updateSelection.bind(this));\n    } else {\n      this._updateSelection();\n    }\n  }\n  _getSelection() {\n    let start = scout.nvl(this.$field[0].selectionStart, null);\n    let end = scout.nvl(this.$field[0].selectionEnd, null);\n    if (start === null || end === null) {\n      start = 0;\n      end = 0;\n    }\n    return {\n      start: start,\n      end: end\n    };\n  }\n  _setSelection(selectionStart, selectionEnd) {\n    if (typeof selectionStart === 'number') {\n      selectionEnd = scout.nvl(selectionEnd, selectionStart);\n    } else if (typeof selectionStart === 'object') {\n      selectionEnd = selectionStart.end;\n      selectionStart = selectionStart.start;\n    }\n    this.$field[0].selectionStart = selectionStart;\n    this.$field[0].selectionEnd = selectionEnd;\n    this._updateSelection();\n  }\n  _updateSelection() {\n    let oldSelectionStart = this.selectionStart;\n    let oldSelectionEnd = this.selectionEnd;\n    this.selectionStart = this.$field[0].selectionStart;\n    this.selectionEnd = this.$field[0].selectionEnd;\n    if (this.selectionTrackingEnabled) {\n      let selectionChanged = this.selectionStart !== oldSelectionStart || this.selectionEnd !== oldSelectionEnd;\n      if (selectionChanged) {\n        this.triggerSelectionChange();\n      }\n    }\n  }\n  triggerSelectionChange() {\n    this.trigger('selectionChange', {\n      selectionStart: this.selectionStart,\n      selectionEnd: this.selectionEnd\n    });\n  }\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    value = strings.asString(value);\n    if (this.trimText) {\n      value = value.trim();\n    }\n    return super._validateValue(value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _clear() {\n    super._clear();\n\n    // Disable obfuscation when user clicks on clear icon.\n    this.inputObfuscated = false;\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _updateEmpty() {\n    this.empty = strings.empty(this.value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  acceptInput(whileTyping) {\n    let displayText = scout.nvl(this._readDisplayText(), '');\n    if (this.inputObfuscated && displayText !== '') {\n      // Disable obfuscation if user has typed text (on focus, field will be cleared if obfuscated, so any typed text is new text).\n      this.inputObfuscated = false;\n    }\n    super.acceptInput(whileTyping);\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _onFieldFocus(event) {\n    super._onFieldFocus(event);\n    if (this.inputObfuscated) {\n      this.$field.val('');\n\n      // Without properly setting selection start and end, cursor is not visible in IE and Firefox.\n      setTimeout(() => {\n        if (!this.rendered) {\n          return;\n        }\n        let $field = this.$field[0];\n        $field.selectionStart = 0;\n        $field.selectionEnd = 0;\n      });\n    }\n  }\n  _showNotification(textKey) {\n    scout.create('DesktopNotification', {\n      parent: this,\n      severity: Status.Severity.WARNING,\n      message: this.session.text(textKey)\n    }).show();\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _checkDisplayTextChanged(displayText, whileTyping) {\n    let displayTextChanged = super._checkDisplayTextChanged(displayText, whileTyping);\n\n    // Display text hasn't changed if input is obfuscated and current display text is empty (because field will be cleared if user focuses obfuscated text field).\n    if (displayTextChanged && this.inputObfuscated && displayText === '') {\n      return false;\n    }\n    return displayTextChanged;\n  }\n}\n_defineProperty(StringField, \"Format\", {\n  LOWER: 'a' /* IStringField.FORMAT_LOWER */,\n  UPPER: 'A' /* IStringField.FORMAT_UPPER */\n});\n_defineProperty(StringField, \"TRIM_REGEXP\", new RegExp('^(\\\\s*)(.*?)(\\\\s*)$'));","map":{"version":3,"names":["BasicField","fields","InputFieldKeyStrokeContext","objects","scout","Status","StringFieldCtrlEnterKeyStroke","StringFieldEnterKeyStroke","StringFieldLayout","strings","texts","StringField","constructor","format","hasAction","inputMasked","inputObfuscated","maxLength","maxLengthHandler","create","target","multilineText","selectionStart","selectionEnd","selectionTrackingEnabled","spellCheckEnabled","trimText","wrapText","_onSelectionChangingActionHandler","_onSelectionChangingAction","bind","_initValue","value","resolveText","session","locale","languageTag","_initKeyStrokeContext","keyStrokeContext","registerKeyStroke","_createKeyStrokeContext","_init","model","_setMultilineText","_render","addContainer","$parent","addLabel","addMandatoryIndicator","$field","_makeMultilineField","$container","addClass","makeTextField","addField","install","addStatus","mouseDownHandler","mouseClicked","makeElement","on","_onMouseWheel","event","off","setTimeout","rendered","focusManager","isElementCovertByGlassPane","_renderSelectionStart","_renderSelectionEnd","addDeviceClass","_onFieldBlur","_updateSelection","val","displayText","originalEvent","window","delta","wheelDelta","detail","scrollTop","maxScrollTop","scrollHeight","clientHeight","stopPropagation","_renderProperties","_renderInputMasked","_renderWrapText","_renderFormat","_renderSpellCheckEnabled","_renderHasAction","_renderMaxLength","_renderSelectionTrackingEnabled","_renderDropType","addIcon","$icon","appendIcon","_onIconClick","isClearable","setSelectionStart","setProperty","nvl","setSelectionEnd","setSelectionTrackingEnabled","setInputMasked","attr","_renderInputObfuscated","focused","setHasAction","_removeIcon","removeClass","revalidateLayout","_renderEnabled","setFormatUpper","formatUpper","setFormat","Format","UPPER","setFormatLower","formatLower","LOWER","css","setSpellCheckEnabled","_renderDisplayText","oldDisplayText","oldSelection","_getSelection","matches","match","TRIM_REGEXP","_setSelection","start","Math","max","length","end","min","insertText","text","_postRenderActions","push","_insertText","textToInsert","selection","_applyTextToSelection","_showNotification","updateDisplayTextOnModify","acceptInput","slice","setWrapText","setTrimText","_renderTrimText","_setProperty","setMultiline","_renderGridData","updateInnerAlignment","useHorizontalAlignment","_renderGridDataHints","setMaxLength","render","focus","trigger","type","one","oldSelectionStart","oldSelectionEnd","selectionChanged","triggerSelectionChange","_validateValue","isNullOrUndefined","asString","trim","_clear","_updateEmpty","empty","whileTyping","_readDisplayText","_onFieldFocus","textKey","parent","severity","Severity","WARNING","message","show","_checkDisplayTextChanged","displayTextChanged","RegExp"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/stringfield/StringField.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {BasicField, fields, InputFieldKeyStrokeContext, objects, scout, Status, StringFieldCtrlEnterKeyStroke, StringFieldEnterKeyStroke, StringFieldLayout, strings, texts} from '../../../index';\n\nexport default class StringField extends BasicField {\n  constructor() {\n    super();\n\n    this.format;\n    this.hasAction = false;\n    this.inputMasked = false;\n    this.inputObfuscated = false;\n    this.maxLength = 4000;\n    this.maxLengthHandler = scout.create('MaxLengthHandler', {target: this});\n    this.multilineText = false;\n    this.selectionStart = 0;\n    this.selectionEnd = 0;\n    this.selectionTrackingEnabled = false;\n    this.spellCheckEnabled = false;\n    this.trimText = true;\n    this.wrapText = false;\n\n    this._onSelectionChangingActionHandler = this._onSelectionChangingAction.bind(this);\n  }\n\n  static Format = {\n    LOWER: 'a' /* IStringField.FORMAT_LOWER */,\n    UPPER: 'A' /* IStringField.FORMAT_UPPER */\n  };\n\n  static TRIM_REGEXP = new RegExp('^(\\\\s*)(.*?)(\\\\s*)$');\n\n  /**\n   * Resolves the text key if value contains one.\n   * This cannot be done in _init because the value field would call _setValue first\n   */\n  _initValue(value) {\n    value = texts.resolveText(value, this.session.locale.languageTag);\n    super._initValue(value);\n  }\n\n  /**\n   * @override ModelAdapter.js\n   */\n  _initKeyStrokeContext() {\n    super._initKeyStrokeContext();\n\n    this.keyStrokeContext.registerKeyStroke([\n      new StringFieldEnterKeyStroke(this),\n      new StringFieldCtrlEnterKeyStroke(this)\n    ]);\n  }\n\n  /**\n   * @override\n   */\n  _createKeyStrokeContext() {\n    return new InputFieldKeyStrokeContext();\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setMultilineText(this.multilineText);\n  }\n\n  _render() {\n    this.addContainer(this.$parent, 'string-field', new StringFieldLayout(this));\n    this.addLabel();\n    this.addMandatoryIndicator();\n\n    let $field;\n    if (this.multilineText) {\n      $field = this._makeMultilineField();\n      this.$container.addClass('multiline');\n    } else {\n      $field = fields.makeTextField(this.$parent);\n    }\n\n    this.addField($field);\n    this.maxLengthHandler.install($field);\n    this.addStatus();\n  }\n\n  _makeMultilineField() {\n    let mouseDownHandler = function() {\n      this.mouseClicked = true;\n    }.bind(this);\n\n    return this.$parent.makeElement('<textarea>')\n      .on('DOMMouseScroll mousewheel', this._onMouseWheel.bind(this))\n      .on('mousedown', mouseDownHandler)\n      .on('focus', event => {\n        this.$field.off('mousedown', mouseDownHandler);\n        if (!this.mouseClicked) { // only trigger on tab focus in\n          setTimeout(() => {\n            if (!this.rendered || this.session.focusManager.isElementCovertByGlassPane(this.$field)) {\n              return;\n            }\n            this._renderSelectionStart();\n            this._renderSelectionEnd();\n          });\n        }\n        this.mouseClicked = false;\n      })\n      .on('focusout', () => {\n        this.$field.on('mousedown', mouseDownHandler);\n      })\n      .addDeviceClass();\n  }\n\n  _onFieldBlur() {\n    super._onFieldBlur();\n    if (this.multilineText) {\n      this._updateSelection();\n    }\n    if (this.inputObfuscated) {\n      // Restore obfuscated display text.\n      this.$field.val(this.displayText);\n    }\n  }\n\n  _onMouseWheel(event) {\n    event = event.originalEvent || this.$container.window(true).event.originalEvent;\n    // noinspection JSUnresolvedVariable\n    let delta = event.wheelDelta ? -event.wheelDelta : event.detail;\n    let scrollTop = this.$field[0].scrollTop;\n    if (delta < 0 && scrollTop === 0) {\n      // StringField is scrolled to the very top -> parent may scroll\n      return;\n    }\n    let maxScrollTop = this.$field[0].scrollHeight - this.$field[0].clientHeight;\n    if (delta > 0 && scrollTop >= maxScrollTop - 1) { // -1 because it can sometimes happen that scrollTop is maxScrollTop -1 or +1, just because clientHeight and scrollHeight are rounded values\n      // StringField is scrolled to the very bottom -> parent may scroll\n      this.$field[0].scrollTop = maxScrollTop; // Ensure it is really at the bottom (not -1px above)\n      return;\n    }\n    // Don't allow others to scroll (e.g. Scrollbar) while scrolling in the text area\n    event.stopPropagation();\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n\n    this._renderInputMasked();\n    this._renderWrapText();\n    this._renderFormat();\n    this._renderSpellCheckEnabled();\n    this._renderHasAction();\n    this._renderMaxLength();\n    this._renderSelectionTrackingEnabled();\n    // Do not render selectionStart and selectionEnd here, because that would cause the focus to\n    // be set to <textarea>s in IE. Instead, the selection is rendered when the focus has entered\n    // the field, see _render(). #168648\n    this._renderDropType();\n  }\n\n  /**\n   * Adds a click handler instead of a mouse down handler because it executes an action.\n   * @override\n   */\n  addIcon() {\n    this.$icon = fields.appendIcon(this.$container)\n      .on('click', this._onIconClick.bind(this));\n  }\n\n  /**\n   * override to ensure dropdown fields and touch mode smart fields does not have a clear icon.\n   */\n  isClearable() {\n    return super.isClearable() && !this.multilineText;\n  }\n\n  setSelectionStart(selectionStart) {\n    this.setProperty('selectionStart', selectionStart);\n  }\n\n  _renderSelectionStart() {\n    if (scout.nvl(this.selectionStart, null) !== null) {\n      this.$field[0].selectionStart = this.selectionStart;\n    }\n  }\n\n  setSelectionEnd(selectionEnd) {\n    this.setProperty('selectionEnd', selectionEnd);\n  }\n\n  _renderSelectionEnd() {\n    if (scout.nvl(this.selectionEnd, null) !== null) {\n      this.$field[0].selectionEnd = this.selectionEnd;\n    }\n  }\n\n  setSelectionTrackingEnabled(selectionTrackingEnabled) {\n    this.setProperty('selectionTrackingEnabled', selectionTrackingEnabled);\n  }\n\n  _renderSelectionTrackingEnabled() {\n    this.$field\n      .off('select', this._onSelectionChangingActionHandler)\n      .off('mousedown', this._onSelectionChangingActionHandler)\n      .off('keydown', this._onSelectionChangingActionHandler)\n      .off('input', this._onSelectionChangingActionHandler);\n    if (this.selectionTrackingEnabled) {\n      this.$field.on('select', this._onSelectionChangingActionHandler)\n        .on('mousedown', this._onSelectionChangingActionHandler)\n        .on('keydown', this._onSelectionChangingActionHandler)\n        .on('input', this._onSelectionChangingActionHandler);\n    }\n  }\n\n  setInputMasked(inputMasked) {\n    this.setProperty('inputMasked', inputMasked);\n  }\n\n  _renderInputMasked() {\n    if (this.multilineText) {\n      return;\n    }\n    this.$field.attr('type', this.inputMasked ? 'password' : 'text');\n  }\n\n  _renderInputObfuscated() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderDisplayText is called first\n      // (inputObfuscated flag might be still in the old state in _renderDisplayText).\n      this.$field.val('');\n    }\n  }\n\n  setHasAction(hasAction) {\n    this.setProperty('hasAction', hasAction);\n  }\n\n  _renderHasAction() {\n    if (this.hasAction) {\n      if (!this.$icon) {\n        this.addIcon();\n        this.$icon.addClass('action');\n      }\n      this.$container.addClass('has-icon');\n    } else {\n      this._removeIcon();\n      this.$container.removeClass('has-icon');\n    }\n    this.revalidateLayout();\n  }\n\n  /**\n   * @override\n   */\n  _renderEnabled() {\n    super._renderEnabled();\n    this.revalidateLayout();\n  }\n\n  setFormatUpper(formatUpper) {\n    if (formatUpper) {\n      this.setFormat(StringField.Format.UPPER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n\n  setFormatLower(formatLower) {\n    if (formatLower) {\n      this.setFormat(StringField.Format.LOWER);\n    } else {\n      this.setFormat(null);\n    }\n  }\n\n  setFormat(format) {\n    this.setProperty('format', format);\n  }\n\n  _renderFormat() {\n    if (this.format === StringField.Format.LOWER) {\n      this.$field.css('text-transform', 'lowercase');\n    } else if (this.format === StringField.Format.UPPER) {\n      this.$field.css('text-transform', 'uppercase');\n    } else {\n      this.$field.css('text-transform', '');\n    }\n  }\n\n  setSpellCheckEnabled(spellCheckEnabled) {\n    this.setProperty('spellCheckEnabled', spellCheckEnabled);\n  }\n\n  _renderSpellCheckEnabled() {\n    if (this.spellCheckEnabled) {\n      this.$field.attr('spellcheck', 'true');\n    } else {\n      this.$field.attr('spellcheck', 'false');\n    }\n  }\n\n  /**\n   * @override\n   */\n  _renderDisplayText() {\n    if (this.inputObfuscated && this.focused) {\n      // If a new display text is set (e.g. because value in model changed) and field is focused,\n      // do not display new display text but clear content (as in _onFieldFocus).\n      // Depending on order of property render, either this or _renderInputObfuscated is called first\n      // (inputObfuscated flag might be still in the old state in this method).\n      this.$field.val('');\n      return;\n    }\n\n    let displayText = strings.nvl(this.displayText);\n    let oldDisplayText = strings.nvl(this.$field.val());\n    let oldSelection = this._getSelection();\n    super._renderDisplayText();\n    // Try to keep the current selection for cases where the old and new display\n    // text only differ because of the automatic trimming.\n    if (this.trimText && oldDisplayText !== displayText) {\n      let matches = oldDisplayText.match(StringField.TRIM_REGEXP);\n      if (matches && matches[2] === displayText) {\n        this._setSelection({\n          start: Math.max(oldSelection.start - matches[1].length, 0),\n          end: Math.min(oldSelection.end - matches[1].length, displayText.length)\n        });\n      }\n    }\n  }\n\n  insertText(text) {\n    if (!this.rendered) {\n      this._postRenderActions.push(this.insertText.bind(this, text));\n      return;\n    }\n    this._insertText(text);\n  }\n\n  _insertText(textToInsert) {\n    if (!textToInsert) {\n      return;\n    }\n\n    // Prevent insert if new length would exceed maxLength to prevent unintended deletion of characters at the end of the string\n    let selection = this._getSelection();\n    let text = this._applyTextToSelection(this.$field.val(), textToInsert, selection);\n    if (text.length > this.maxLength) {\n      this._showNotification('ui.CannotInsertTextTooLong');\n      return;\n    }\n\n    this.$field.val(text);\n    this._setSelection(selection.start + textToInsert.length);\n\n    // Make sure display text gets sent (necessary if field does not have the focus)\n    if (this.updateDisplayTextOnModify) {\n      // If flag is true, we need to send two events (First while typing=true, second = false)\n      this.acceptInput(true);\n    }\n    this.acceptInput();\n  }\n\n  _applyTextToSelection(text, textToInsert, selection) {\n    if (this.inputObfuscated) {\n      // Use empty text when input is obfuscated, otherwise text will be added to obfuscated text\n      text = '';\n    }\n    return text.slice(0, selection.start) + textToInsert + text.slice(selection.end);\n  }\n\n  setWrapText(wrapText) {\n    this.setProperty('wrapText', wrapText);\n  }\n\n  _renderWrapText() {\n    this.$field.attr('wrap', this.wrapText ? 'soft' : 'off');\n  }\n\n  setTrimText(trimText) {\n    this.setProperty('trimText', trimText);\n  }\n\n  _renderTrimText() {\n    // nop, property used in _validateDisplayText()\n  }\n\n  _setMultilineText(multilineText) {\n    this._setProperty('multilineText', multilineText);\n    this.keyStrokeContext.setMultiline(this.multilineText);\n  }\n\n  _renderGridData() {\n    super._renderGridData();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: !this.multilineText\n    });\n  }\n\n  _renderGridDataHints() {\n    super._renderGridDataHints();\n    this.updateInnerAlignment({\n      useHorizontalAlignment: true\n    });\n  }\n\n  setMaxLength(maxLength) {\n    this.setProperty('maxLength', maxLength);\n  }\n\n  _renderMaxLength() {\n    this.maxLengthHandler.render();\n  }\n\n  _onIconClick(event) {\n    this.acceptInput();\n    this.$field.focus();\n    this.trigger('action');\n  }\n\n  _onSelectionChangingAction(event) {\n    if (event.type === 'mousedown') {\n      this.$field.window().one('mouseup.stringfield', () => {\n        // For some reason, when clicking side an existing selection (which clears the selection), the old\n        // selection is still visible. To get around this case, we use setTimeout to handle the new selection\n        // after it really has been changed.\n        setTimeout(this._updateSelection.bind(this));\n      });\n    } else if (event.type === 'keydown') {\n      // Use set timeout to let the cursor move to the target position\n      setTimeout(this._updateSelection.bind(this));\n    } else {\n      this._updateSelection();\n    }\n  }\n\n  _getSelection() {\n    let start = scout.nvl(this.$field[0].selectionStart, null);\n    let end = scout.nvl(this.$field[0].selectionEnd, null);\n    if (start === null || end === null) {\n      start = 0;\n      end = 0;\n    }\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  _setSelection(selectionStart, selectionEnd) {\n    if (typeof selectionStart === 'number') {\n      selectionEnd = scout.nvl(selectionEnd, selectionStart);\n    } else if (typeof selectionStart === 'object') {\n      selectionEnd = selectionStart.end;\n      selectionStart = selectionStart.start;\n    }\n    this.$field[0].selectionStart = selectionStart;\n    this.$field[0].selectionEnd = selectionEnd;\n    this._updateSelection();\n  }\n\n  _updateSelection() {\n    let oldSelectionStart = this.selectionStart;\n    let oldSelectionEnd = this.selectionEnd;\n    this.selectionStart = this.$field[0].selectionStart;\n    this.selectionEnd = this.$field[0].selectionEnd;\n    if (this.selectionTrackingEnabled) {\n      let selectionChanged = this.selectionStart !== oldSelectionStart || this.selectionEnd !== oldSelectionEnd;\n      if (selectionChanged) {\n        this.triggerSelectionChange();\n      }\n    }\n  }\n\n  triggerSelectionChange() {\n    this.trigger('selectionChange', {\n      selectionStart: this.selectionStart,\n      selectionEnd: this.selectionEnd\n    });\n  }\n\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    value = strings.asString(value);\n    if (this.trimText) {\n      value = value.trim();\n    }\n    return super._validateValue(value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _clear() {\n    super._clear();\n\n    // Disable obfuscation when user clicks on clear icon.\n    this.inputObfuscated = false;\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _updateEmpty() {\n    this.empty = strings.empty(this.value);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  acceptInput(whileTyping) {\n    let displayText = scout.nvl(this._readDisplayText(), '');\n    if (this.inputObfuscated && displayText !== '') {\n      // Disable obfuscation if user has typed text (on focus, field will be cleared if obfuscated, so any typed text is new text).\n      this.inputObfuscated = false;\n    }\n\n    super.acceptInput(whileTyping);\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _onFieldFocus(event) {\n    super._onFieldFocus(event);\n\n    if (this.inputObfuscated) {\n      this.$field.val('');\n\n      // Without properly setting selection start and end, cursor is not visible in IE and Firefox.\n      setTimeout(() => {\n        if (!this.rendered) {\n          return;\n        }\n        let $field = this.$field[0];\n        $field.selectionStart = 0;\n        $field.selectionEnd = 0;\n      });\n    }\n  }\n\n  _showNotification(textKey) {\n    scout.create('DesktopNotification', {\n      parent: this,\n      severity: Status.Severity.WARNING,\n      message: this.session.text(textKey)\n    }).show();\n  }\n\n  /**\n   * @override BasicField.js\n   */\n  _checkDisplayTextChanged(displayText, whileTyping) {\n    let displayTextChanged = super._checkDisplayTextChanged(displayText, whileTyping);\n\n    // Display text hasn't changed if input is obfuscated and current display text is empty (because field will be cleared if user focuses obfuscated text field).\n    if (displayTextChanged && this.inputObfuscated && displayText === '') {\n      return false;\n    }\n\n    return displayTextChanged;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}