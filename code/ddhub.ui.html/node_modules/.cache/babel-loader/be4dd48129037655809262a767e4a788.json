{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { Action } from '../index';\nexport default class Mode extends Action {\n  constructor() {\n    super();\n    this.selected = false;\n    this.ref = null; // Arbitrary reference value, can be used to find and select modes (see ModeSelector.js)\n  }\n\n  _init(model) {\n    model.owner = model.parent;\n    super._init(model);\n  }\n  _render() {\n    super._render();\n    this.$container.addClass('button mode');\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSelected();\n  }\n  setSelected(selected) {\n    this.setProperty('selected', selected);\n  }\n  _renderSelected() {\n    this.$container.select(this.selected);\n  }\n\n  /**\n   * @Override Action.js\n   */\n  doAction() {\n    if (!this.prepareDoAction()) {\n      return false;\n    }\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n    return true;\n  }\n\n  /**\n   * @Override Action.js\n   */\n  toggle() {\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n  }\n  _renderIconId() {\n    super._renderIconId();\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n  _renderText() {\n    super._renderText();\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n  _updateLabelAndIconStyle() {\n    let hasText = !!this.text;\n    this.get$Icon().toggleClass('with-label', hasText);\n  }\n}","map":{"version":3,"names":["Action","Mode","constructor","selected","ref","_init","model","owner","parent","_render","$container","addClass","_renderProperties","_renderSelected","setSelected","setProperty","select","doAction","prepareDoAction","toggle","_renderIconId","_updateLabelAndIconStyle","invalidateLayoutTree","_renderText","hasText","text","get$Icon","toggleClass"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/modeselector/Mode.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {Action} from '../index';\n\nexport default class Mode extends Action {\n\n  constructor() {\n    super();\n\n    this.selected = false;\n    this.ref = null; // Arbitrary reference value, can be used to find and select modes (see ModeSelector.js)\n  }\n\n  _init(model) {\n    model.owner = model.parent;\n    super._init(model);\n  }\n\n  _render() {\n    super._render();\n    this.$container.addClass('button mode');\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSelected();\n  }\n\n  setSelected(selected) {\n    this.setProperty('selected', selected);\n  }\n\n  _renderSelected() {\n    this.$container.select(this.selected);\n  }\n\n  /**\n   * @Override Action.js\n   */\n  doAction() {\n    if (!this.prepareDoAction()) {\n      return false;\n    }\n\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n\n    return true;\n  }\n\n  /**\n   * @Override Action.js\n   */\n  toggle() {\n    if (!this.selected) {\n      this.setSelected(true);\n    }\n  }\n\n  _renderIconId() {\n    super._renderIconId();\n\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n\n  _renderText() {\n    super._renderText();\n\n    this._updateLabelAndIconStyle();\n    // Invalidate layout because mode may now be longer or shorter\n    this.invalidateLayoutTree();\n  }\n\n  _updateLabelAndIconStyle() {\n    let hasText = !!this.text;\n    this.get$Icon().toggleClass('with-label', hasText);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,QAAO,UAAU;AAE/B,eAAe,MAAMC,IAAI,SAASD,MAAM,CAAC;EAEvCE,WAAW,GAAG;IACZ,KAAK,EAAE;IAEP,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;EACnB;;EAEAC,KAAK,CAACC,KAAK,EAAE;IACXA,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACE,MAAM;IAC1B,KAAK,CAACH,KAAK,CAACC,KAAK,CAAC;EACpB;EAEAG,OAAO,GAAG;IACR,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACC,UAAU,CAACC,QAAQ,CAAC,aAAa,CAAC;EACzC;EAEAC,iBAAiB,GAAG;IAClB,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAC,WAAW,CAACX,QAAQ,EAAE;IACpB,IAAI,CAACY,WAAW,CAAC,UAAU,EAAEZ,QAAQ,CAAC;EACxC;EAEAU,eAAe,GAAG;IAChB,IAAI,CAACH,UAAU,CAACM,MAAM,CAAC,IAAI,CAACb,QAAQ,CAAC;EACvC;;EAEA;AACF;AACA;EACEc,QAAQ,GAAG;IACT,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE,EAAE;MAC3B,OAAO,KAAK;IACd;IAEA,IAAI,CAAC,IAAI,CAACf,QAAQ,EAAE;MAClB,IAAI,CAACW,WAAW,CAAC,IAAI,CAAC;IACxB;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEK,MAAM,GAAG;IACP,IAAI,CAAC,IAAI,CAAChB,QAAQ,EAAE;MAClB,IAAI,CAACW,WAAW,CAAC,IAAI,CAAC;IACxB;EACF;EAEAM,aAAa,GAAG;IACd,KAAK,CAACA,aAAa,EAAE;IAErB,IAAI,CAACC,wBAAwB,EAAE;IAC/B;IACA,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EAEAC,WAAW,GAAG;IACZ,KAAK,CAACA,WAAW,EAAE;IAEnB,IAAI,CAACF,wBAAwB,EAAE;IAC/B;IACA,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EAEAD,wBAAwB,GAAG;IACzB,IAAIG,OAAO,GAAG,CAAC,CAAC,IAAI,CAACC,IAAI;IACzB,IAAI,CAACC,QAAQ,EAAE,CAACC,WAAW,CAAC,YAAY,EAAEH,OAAO,CAAC;EACpD;AACF"},"metadata":{},"sourceType":"module"}