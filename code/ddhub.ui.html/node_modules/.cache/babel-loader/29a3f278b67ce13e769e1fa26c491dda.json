{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, CodeType, objects, scout, texts } from '../index';\nimport $ from 'jquery';\n\n/**\n * This default language is used whenever a code registers its texts in scout.texts.\n */\nlet defaultLanguage = 'en';\nlet registry = {};\nexport function bootstrap(url) {\n  let promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n}\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\nexport function init(data) {\n  data = data || {};\n  Object.keys(data).forEach(codeTypeId => {\n    add(data[codeTypeId]);\n  }, this);\n}\n\n/**\n * @param codes one or more codeTypes, maybe an object or an array\n */\nexport function add(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(codeType => {\n    codeType = CodeType.ensure(codeType);\n    registry[codeType.id] = codeType;\n  }, this);\n}\n\n/**\n * @param codeTypes code types or code type ids to remove\n */\nexport function remove(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(codeType => {\n    let id;\n    if (typeof codeType === 'string') {\n      id = codeType;\n    } else {\n      id = codeType.id;\n    }\n    delete registry[id];\n  }, this);\n}\n\n/**\n * Returns a code for the given codeId. When you work with hard-coded codes\n * you should always use this function and not <code>optGet</code>.\n *\n * The codeId is a string in the following format:\n *\n * \"[CodeType.id] [Code.id]\"\n *\n * Examples:\n * \"71074 104860\"\n * \"MessageChannel Phone\"\n *\n * CodeType.id and Code.id are separated by a space.\n * The Code.id alone is not unique, that's why the CodeType.id must be always provided.\n *\n * You can also call this function with two arguments. In that case the first argument\n * is the codeTypeId and the second is the codeId.\n *\n * @param {string} vararg either only \"[CodeType.id]\" or \"[CodeType.id] [Code.id]\"\n * @param {string} [codeId]\n * @returns {Code} a code for the given codeId\n * @throw {Error} if code does not exist\n */\nexport function get(vararg, codeId) {\n  // eslint-disable-next-line prefer-rest-params\n  return _get('get', objects.argumentsToArray(arguments));\n}\n\n/**\n * Same as <code>get</code>, but does not throw an error if the code does not exist.\n * You should always use this function when you work with codes coming from a dynamic data source.\n *\n * @param vararg\n * @param codeId\n * @returns {Code} code for the given codeId or undefined if code does not exist\n */\nexport function optGet(vararg, codeId) {\n  // eslint-disable-next-line prefer-rest-params\n  return _get('optGet', objects.argumentsToArray(arguments));\n}\nexport function _get(funcName, funcArgs) {\n  let codeTypeId, codeId;\n  if (funcArgs.length === 2) {\n    codeTypeId = funcArgs[0];\n    codeId = funcArgs[1];\n  } else {\n    let tmp = funcArgs[0].split(' ');\n    if (tmp.length !== 2) {\n      throw new Error('Invalid string. Must have format \"[CodeType.id] [Code.id]\"');\n    }\n    codeTypeId = tmp[0];\n    codeId = tmp[1];\n  }\n  scout.assertParameter('codeTypeId', codeTypeId);\n  scout.assertParameter('codeId', codeId);\n  return codeType(codeTypeId)[funcName](codeId);\n}\nexport function codeType(codeTypeId, optional) {\n  let codeType = registry[codeTypeId];\n  if (!optional && !codeType) {\n    throw new Error('No CodeType found for id=' + codeTypeId);\n  }\n  return codeType;\n}\nexport function generateTextKey(code) {\n  // Use __ as prefix to reduce the possibility of overriding 'real' keys\n  return '__code.' + code.id;\n}\n\n/**\n * Registers texts for a code. It uses the method generateTextKey to generate the text key.\n * The texts for the default locale specified by defaultLanguage are used as default texts.\n *\n * @param code the code to register the text for\n * @param textsArg an object with the languageTag as key and the translated text as value\n * @return {string} the generated text key\n */\nexport function registerTexts(code, textsArg) {\n  let key = generateTextKey(code);\n\n  // In case of changed defaultLanguage clear the 'default' entry\n  texts.get('default').remove(key);\n  for (let languageTag in textsArg) {\n    // NOSONAR\n    let text = textsArg[languageTag];\n    // Use defaultLanguage as default, if specified (may be changed or set to null by the app).\n    if (languageTag && languageTag === defaultLanguage) {\n      languageTag = 'default';\n    }\n    texts.get(languageTag).add(key, text);\n  }\n  return key;\n}\nexport default {\n  add,\n  bootstrap,\n  codeType,\n  defaultLanguage,\n  generateTextKey,\n  get,\n  init,\n  optGet,\n  registerTexts,\n  registry,\n  remove\n};","map":{"version":3,"names":["arrays","CodeType","objects","scout","texts","$","defaultLanguage","registry","bootstrap","url","promise","ajaxJson","resolvedPromise","then","_preInit","bind","data","error","init","Object","keys","forEach","codeTypeId","add","codeTypes","ensure","codeType","id","remove","get","vararg","codeId","_get","argumentsToArray","arguments","optGet","funcName","funcArgs","length","tmp","split","Error","assertParameter","optional","generateTextKey","code","registerTexts","textsArg","key","languageTag","text"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/code/codes.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, CodeType, objects, scout, texts} from '../index';\nimport $ from 'jquery';\n\n/**\n * This default language is used whenever a code registers its texts in scout.texts.\n */\nlet defaultLanguage = 'en';\n\nlet registry = {};\n\nexport function bootstrap(url) {\n  let promise = url ? $.ajaxJson(url) : $.resolvedPromise({});\n  return promise.then(_preInit.bind(this, url));\n}\n\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\n\nexport function init(data) {\n  data = data || {};\n  Object.keys(data).forEach(codeTypeId => {\n    add(data[codeTypeId]);\n  }, this);\n}\n\n/**\n * @param codes one or more codeTypes, maybe an object or an array\n */\nexport function add(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(codeType => {\n    codeType = CodeType.ensure(codeType);\n    registry[codeType.id] = codeType;\n  }, this);\n}\n\n/**\n * @param codeTypes code types or code type ids to remove\n */\nexport function remove(codeTypes) {\n  codeTypes = arrays.ensure(codeTypes);\n  codeTypes.forEach(codeType => {\n    let id;\n    if (typeof codeType === 'string') {\n      id = codeType;\n    } else {\n      id = codeType.id;\n    }\n    delete registry[id];\n  }, this);\n}\n\n/**\n * Returns a code for the given codeId. When you work with hard-coded codes\n * you should always use this function and not <code>optGet</code>.\n *\n * The codeId is a string in the following format:\n *\n * \"[CodeType.id] [Code.id]\"\n *\n * Examples:\n * \"71074 104860\"\n * \"MessageChannel Phone\"\n *\n * CodeType.id and Code.id are separated by a space.\n * The Code.id alone is not unique, that's why the CodeType.id must be always provided.\n *\n * You can also call this function with two arguments. In that case the first argument\n * is the codeTypeId and the second is the codeId.\n *\n * @param {string} vararg either only \"[CodeType.id]\" or \"[CodeType.id] [Code.id]\"\n * @param {string} [codeId]\n * @returns {Code} a code for the given codeId\n * @throw {Error} if code does not exist\n */\nexport function get(vararg, codeId) {\n  // eslint-disable-next-line prefer-rest-params\n  return _get('get', objects.argumentsToArray(arguments));\n}\n\n/**\n * Same as <code>get</code>, but does not throw an error if the code does not exist.\n * You should always use this function when you work with codes coming from a dynamic data source.\n *\n * @param vararg\n * @param codeId\n * @returns {Code} code for the given codeId or undefined if code does not exist\n */\nexport function optGet(vararg, codeId) {\n  // eslint-disable-next-line prefer-rest-params\n  return _get('optGet', objects.argumentsToArray(arguments));\n}\n\nexport function _get(funcName, funcArgs) {\n  let codeTypeId, codeId;\n  if (funcArgs.length === 2) {\n    codeTypeId = funcArgs[0];\n    codeId = funcArgs[1];\n  } else {\n    let tmp = funcArgs[0].split(' ');\n    if (tmp.length !== 2) {\n      throw new Error('Invalid string. Must have format \"[CodeType.id] [Code.id]\"');\n    }\n    codeTypeId = tmp[0];\n    codeId = tmp[1];\n  }\n  scout.assertParameter('codeTypeId', codeTypeId);\n  scout.assertParameter('codeId', codeId);\n  return codeType(codeTypeId)[funcName](codeId);\n}\n\nexport function codeType(codeTypeId, optional) {\n  let codeType = registry[codeTypeId];\n  if (!optional && !codeType) {\n    throw new Error('No CodeType found for id=' + codeTypeId);\n  }\n  return codeType;\n}\n\nexport function generateTextKey(code) {\n  // Use __ as prefix to reduce the possibility of overriding 'real' keys\n  return '__code.' + code.id;\n}\n\n/**\n * Registers texts for a code. It uses the method generateTextKey to generate the text key.\n * The texts for the default locale specified by defaultLanguage are used as default texts.\n *\n * @param code the code to register the text for\n * @param textsArg an object with the languageTag as key and the translated text as value\n * @return {string} the generated text key\n */\nexport function registerTexts(code, textsArg) {\n  let key = generateTextKey(code);\n\n  // In case of changed defaultLanguage clear the 'default' entry\n  texts.get('default').remove(key);\n\n  for (let languageTag in textsArg) { // NOSONAR\n    let text = textsArg[languageTag];\n    // Use defaultLanguage as default, if specified (may be changed or set to null by the app).\n    if (languageTag && languageTag === defaultLanguage) {\n      languageTag = 'default';\n    }\n    texts.get(languageTag).add(key, text);\n  }\n  return key;\n}\n\nexport default {\n  add,\n  bootstrap,\n  codeType,\n  defaultLanguage,\n  generateTextKey,\n  get,\n  init,\n  optGet,\n  registerTexts,\n  registry,\n  remove\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}