{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, TextMap } from '../index';\nimport $ from 'jquery';\nconst TEXT_KEY_REGEX = /\\${textKey:([^}]*)}/;\nlet textsByLocale = {};\nexport function bootstrap(url) {\n  if (!url) {\n    return $.resolvedPromise({});\n  }\n  let promises = [];\n  let urls = arrays.ensure(url);\n  urls.forEach(url => promises.push($.ajaxJson(url).then(_preInit.bind(this, url))));\n  return $.promiseAll(promises);\n}\n\n// private\nexport function _setTextsByLocale(val) {\n  textsByLocale = val;\n}\n\n// private\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\nexport function init(model) {\n  let languageTags = Object.keys(model);\n  languageTags.forEach(languageTag => {\n    get(languageTag).addAll(model[languageTag]);\n  }, this);\n}\n\n/**\n * Links the texts of the given languageTag to make parent lookup possible (e.g. look first in de-CH, then in de, then in default)\n */\nexport function link(languageTag) {\n  let tags = createOrderedLanguageTags(languageTag);\n  let child;\n  tags.forEach(tag => {\n    let texts = _get(tag);\n    if (!texts) {\n      // If there are no texts for the given tag, create an empty Texts object for linking purpose\n      texts = new TextMap();\n      put(tag, texts);\n    }\n    if (child) {\n      child.setParent(texts);\n    }\n    child = texts;\n  }, this);\n}\n\n/**\n * Creates an array containing all relevant tags.\n * <p>\n * Examples:<br>\n * - 'de-CH' generates the array: ['de-CH', 'de', 'default']\n * - 'de' generates the array: ['de', 'default']\n * - 'default' generates the array: ['default']\n */\nexport function createOrderedLanguageTags(languageTag) {\n  let tags = [],\n    i = languageTag.lastIndexOf('-');\n  tags.push(languageTag);\n  while (i >= 0) {\n    languageTag = languageTag.substring(0, i);\n    tags.push(languageTag);\n    i = languageTag.lastIndexOf('-');\n  }\n  if (languageTag !== 'default') {\n    tags.push('default');\n  }\n  return tags;\n}\n\n/**\n * Returns the (modifiable) TextMap for the given language tag.\n */\nexport function get(languageTag) {\n  let texts = _get(languageTag);\n  if (texts) {\n    return texts;\n  }\n  link(languageTag);\n  texts = _get(languageTag);\n  if (!texts) {\n    throw new Error('Texts missing for the language tag ' + languageTag);\n  }\n  return texts;\n}\n\n// private\nexport function _get(languageTag) {\n  return textsByLocale[languageTag];\n}\n\n/**\n * Registers the text map for the given locale.\n * If there already is a text map registered for that locale, it will be replaced, meaning existing texts for that locale are deleted.\n *\n * @param {TextMap} textMap\n */\nexport function put(languageTag, textMap) {\n  textsByLocale[languageTag] = textMap;\n}\n\n/**\n * Extracts NLS texts from the DOM tree. Texts are expected in the following format:\n *\n *   <scout-text data-key=\"...\" data-value=\"...\" />\n *\n * This method returns a map with all found texts. It must be called before scout.prepareDOM()\n * is called, as that method removes all <scout-text> tags.\n */\nexport function readFromDOM() {\n  let textMap = {};\n  $('scout-text').each(function () {\n    // No need to unescape strings (the browser did this already)\n    let key = $(this).data('key');\n    // noinspection UnnecessaryLocalVariableJS\n    let value = $(this).data('value');\n    textMap[key] = value;\n  });\n  return textMap;\n}\n\n/**\n * @param {string} key to convert into a string with the form '${textKey:AKey}'.\n * @return {string} text containing the text key like like '${textKey:AKey}'.\n */\nexport function buildKey(key) {\n  return '${textKey:' + key + '}';\n}\n\n/**\n * @param {string} value text which contains a text key like '${textKey:AKey}'.\n * @return {string} the resolved key or the unchanged value if the text key could not be extracted.\n */\nexport function resolveKey(value) {\n  let result = TEXT_KEY_REGEX.exec(value);\n  if (result && result.length === 2) {\n    return result[1];\n  }\n  return value;\n}\n\n/**\n * @param {string} value text which contains a text key like '${textKey:AKey}'.\n * @param {string} languageTag the languageTag to use for the text lookup with the resolved key.\n * @return {string} the resolved text in the language of the given session or the unchanged text if the text key could not be extracted.\n */\nexport function resolveText(value, languageTag) {\n  let key = resolveKey(value);\n  if (key !== value) {\n    return get(languageTag).get(key);\n  }\n  return value;\n}\n\n/**\n * Utility function to easily replace an object property which contains a text key like '${textKey:AKey}'.\n *\n * @param {object} object object having a text property which contains a text-key\n * @param {string} [textProperty] name of the property where a text-key should be replaced by a text. By default 'text' is used as property name.\n * @param {Session} [session] can be undefined when given 'object' has a session property, otherwise mandatory\n */\nexport function resolveTextProperty(object, textProperty, session) {\n  textProperty = textProperty || 'text';\n  session = object.session || session;\n  let value = object[textProperty];\n  let text = resolveText(value, session.locale.languageTag);\n  if (text !== value) {\n    object[textProperty] = text;\n  }\n}\nexport default {\n  TEXT_KEY_REGEX,\n  bootstrap,\n  buildKey,\n  createOrderedLanguageTags,\n  get,\n  init,\n  link,\n  put,\n  readFromDOM,\n  resolveKey,\n  resolveText,\n  resolveTextProperty,\n  textsByLocale\n};","map":{"version":3,"names":["arrays","TextMap","$","TEXT_KEY_REGEX","textsByLocale","bootstrap","url","resolvedPromise","promises","urls","ensure","forEach","push","ajaxJson","then","_preInit","bind","promiseAll","_setTextsByLocale","val","data","error","init","model","languageTags","Object","keys","languageTag","get","addAll","link","tags","createOrderedLanguageTags","child","tag","texts","_get","put","setParent","i","lastIndexOf","substring","Error","textMap","readFromDOM","each","key","value","buildKey","resolveKey","result","exec","length","resolveText","resolveTextProperty","object","textProperty","session","text","locale"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/text/texts.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, TextMap} from '../index';\nimport $ from 'jquery';\n\nconst TEXT_KEY_REGEX = /\\${textKey:([^}]*)}/;\n\nlet textsByLocale = {};\n\nexport function bootstrap(url) {\n  if (!url) {\n    return $.resolvedPromise({});\n  }\n  let promises = [];\n  let urls = arrays.ensure(url);\n  urls.forEach(url => promises.push(\n    $.ajaxJson(url).then(_preInit.bind(this, url)))\n  );\n  return $.promiseAll(promises);\n}\n\n// private\nexport function _setTextsByLocale(val) {\n  textsByLocale = val;\n}\n\n// private\nexport function _preInit(url, data) {\n  if (data && data.error) {\n    // The result may contain a json error (e.g. session timeout) -> abort processing\n    throw {\n      error: data.error,\n      url: url\n    };\n  }\n  init(data);\n}\n\nexport function init(model) {\n  let languageTags = Object.keys(model);\n  languageTags.forEach(languageTag => {\n    get(languageTag).addAll(model[languageTag]);\n  }, this);\n}\n\n/**\n * Links the texts of the given languageTag to make parent lookup possible (e.g. look first in de-CH, then in de, then in default)\n */\nexport function link(languageTag) {\n  let tags = createOrderedLanguageTags(languageTag);\n  let child;\n  tags.forEach(tag => {\n    let texts = _get(tag);\n    if (!texts) {\n      // If there are no texts for the given tag, create an empty Texts object for linking purpose\n      texts = new TextMap();\n      put(tag, texts);\n    }\n    if (child) {\n      child.setParent(texts);\n    }\n    child = texts;\n  }, this);\n}\n\n/**\n * Creates an array containing all relevant tags.\n * <p>\n * Examples:<br>\n * - 'de-CH' generates the array: ['de-CH', 'de', 'default']\n * - 'de' generates the array: ['de', 'default']\n * - 'default' generates the array: ['default']\n */\nexport function createOrderedLanguageTags(languageTag) {\n  let tags = [],\n    i = languageTag.lastIndexOf('-');\n\n  tags.push(languageTag);\n\n  while (i >= 0) {\n    languageTag = languageTag.substring(0, i);\n    tags.push(languageTag);\n    i = languageTag.lastIndexOf('-');\n  }\n\n  if (languageTag !== 'default') {\n    tags.push('default');\n  }\n  return tags;\n}\n\n/**\n * Returns the (modifiable) TextMap for the given language tag.\n */\nexport function get(languageTag) {\n  let texts = _get(languageTag);\n  if (texts) {\n    return texts;\n  }\n\n  link(languageTag);\n  texts = _get(languageTag);\n  if (!texts) {\n    throw new Error('Texts missing for the language tag ' + languageTag);\n  }\n  return texts;\n}\n\n// private\nexport function _get(languageTag) {\n  return textsByLocale[languageTag];\n}\n\n/**\n * Registers the text map for the given locale.\n * If there already is a text map registered for that locale, it will be replaced, meaning existing texts for that locale are deleted.\n *\n * @param {TextMap} textMap\n */\nexport function put(languageTag, textMap) {\n  textsByLocale[languageTag] = textMap;\n}\n\n/**\n * Extracts NLS texts from the DOM tree. Texts are expected in the following format:\n *\n *   <scout-text data-key=\"...\" data-value=\"...\" />\n *\n * This method returns a map with all found texts. It must be called before scout.prepareDOM()\n * is called, as that method removes all <scout-text> tags.\n */\nexport function readFromDOM() {\n  let textMap = {};\n  $('scout-text').each(function() {\n    // No need to unescape strings (the browser did this already)\n    let key = $(this).data('key');\n    // noinspection UnnecessaryLocalVariableJS\n    let value = $(this).data('value');\n    textMap[key] = value;\n  });\n  return textMap;\n}\n\n/**\n * @param {string} key to convert into a string with the form '${textKey:AKey}'.\n * @return {string} text containing the text key like like '${textKey:AKey}'.\n */\nexport function buildKey(key) {\n  return '${textKey:' + key + '}';\n}\n\n/**\n * @param {string} value text which contains a text key like '${textKey:AKey}'.\n * @return {string} the resolved key or the unchanged value if the text key could not be extracted.\n */\nexport function resolveKey(value) {\n  let result = TEXT_KEY_REGEX.exec(value);\n  if (result && result.length === 2) {\n    return result[1];\n  }\n  return value;\n}\n\n/**\n * @param {string} value text which contains a text key like '${textKey:AKey}'.\n * @param {string} languageTag the languageTag to use for the text lookup with the resolved key.\n * @return {string} the resolved text in the language of the given session or the unchanged text if the text key could not be extracted.\n */\nexport function resolveText(value, languageTag) {\n  let key = resolveKey(value);\n  if (key !== value) {\n    return get(languageTag).get(key);\n  }\n  return value;\n}\n\n/**\n * Utility function to easily replace an object property which contains a text key like '${textKey:AKey}'.\n *\n * @param {object} object object having a text property which contains a text-key\n * @param {string} [textProperty] name of the property where a text-key should be replaced by a text. By default 'text' is used as property name.\n * @param {Session} [session] can be undefined when given 'object' has a session property, otherwise mandatory\n */\nexport function resolveTextProperty(object, textProperty, session) {\n  textProperty = textProperty || 'text';\n  session = object.session || session;\n  let value = object[textProperty];\n  let text = resolveText(value, session.locale.languageTag);\n  if (text !== value) {\n    object[textProperty] = text;\n  }\n}\n\nexport default {\n  TEXT_KEY_REGEX,\n  bootstrap,\n  buildKey,\n  createOrderedLanguageTags,\n  get,\n  init,\n  link,\n  put,\n  readFromDOM,\n  resolveKey,\n  resolveText,\n  resolveTextProperty,\n  textsByLocale\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}