{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\n/**\n * Utility methods for focus.\n */\n\n/**\n * @return {boolean} whether the given element is focusable by mouse.\n */\nexport function isFocusableByMouse(element) {\n  let $element = $(element);\n  return !$element.hasClass('unfocusable') && !$element.closest('.unfocusable').length;\n}\n\n/**\n * @return {boolean} whether the given element has a parent which is focusable by mouse.\n */\nexport function containsParentFocusableByMouse(element, entryPoint) {\n  let $focusableParentElements = $(element).parents(':focusable').not(entryPoint) /* Exclude $entryPoint as all elements are its descendants. However, the $entryPoint is only focusable to provide Portlet support. */.filter(function () {\n    return isFocusableByMouse(this);\n  });\n  return $focusableParentElements.length > 0;\n}\n\n/**\n * @return {boolean} whether the given element contains content which is selectable to the user, e.g. to be copied into clipboard.\n * It also returns true for disabled text-fields, because the user must be able to select and copy text from these text-fields.\n */\nexport function isSelectableText(element) {\n  let $element = $(element);\n\n  // Find closest element which has a 'user-select' with a value other than 'auto'. If that value\n  // is 'none', the text is not selectable. This code mimics the \"inheritance behavior\" of the CSS\n  // property \"-moz-user-select: -moz-none\" as described in [1].  This does not seem to work in some\n  // cases in Firefox, even with bug [2] fixed. As a workaround, we implement the desired behavior here.\n  //\n  // Note: Some additional CSS rules are required for events other than 'mousedown', see main.css.\n  //\n  // [1] https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n  // [2] https://bugzilla.mozilla.org/show_bug.cgi?id=648624\n  let $el = $element;\n  while ($el.css('user-select') === 'auto') {\n    $el = $el.parent();\n    // Fix for Firefox: parent of BODY element is HtmlDocument. When calling $el.css on the HtmlDocument\n    // Firefox throws an error that ownerDocument is undefined. Thus we don't go higher than BODY element\n    // and assume body is never selectable.\n    if ($el.is('body')) {\n      return false;\n    }\n  }\n  if ($el.css('user-select') === 'none') {\n    return false;\n  }\n  if ($element.is('input[disabled][type=text], textarea[disabled]')) {\n    return true;\n  }\n  // When element or its children have text, it should be selectable.\n  // The old implementation only looked at the text of the element itself\n  // but not at the text of its children. With the old approach it was not\n  // possible to select something inside of a TD, for instance:\n  //   <td><span>Foo</span></td>\n  // Because TD itself has no text at all.\n  // When an element has no text we return false, because if we could select\n  // empty elements, we'd loose focus more often.\n  return $element.text().trim().length > 0;\n}\n\n/**\n * Returns true if the given HTML element is the active element in its own document, false otherwise\n * @param element\n */\nexport function isActiveElement(element) {\n  if (!element) {\n    return false;\n  }\n  let activeElement;\n  if (element instanceof $) {\n    activeElement = element.activeElement(true);\n    element = element[0];\n  } else {\n    activeElement = (element instanceof Document ? element : element.ownerDocument).activeElement;\n  }\n  return activeElement === element;\n}\nexport default {\n  containsParentFocusableByMouse,\n  isActiveElement,\n  isFocusableByMouse,\n  isSelectableText\n};","map":{"version":3,"names":["$","isFocusableByMouse","element","$element","hasClass","closest","length","containsParentFocusableByMouse","entryPoint","$focusableParentElements","parents","not","filter","isSelectableText","$el","css","parent","is","text","trim","isActiveElement","activeElement","Document","ownerDocument"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/focus/focusUtils.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport $ from 'jquery';\n\n/**\n * Utility methods for focus.\n */\n\n/**\n * @return {boolean} whether the given element is focusable by mouse.\n */\nexport function isFocusableByMouse(element) {\n  let $element = $(element);\n  return !$element.hasClass('unfocusable') && !$element.closest('.unfocusable').length;\n}\n\n/**\n * @return {boolean} whether the given element has a parent which is focusable by mouse.\n */\nexport function containsParentFocusableByMouse(element, entryPoint) {\n  let $focusableParentElements = $(element)\n    .parents(':focusable')\n    .not(entryPoint) /* Exclude $entryPoint as all elements are its descendants. However, the $entryPoint is only focusable to provide Portlet support. */\n    .filter(function() {\n      return isFocusableByMouse(this);\n    });\n  return ($focusableParentElements.length > 0);\n}\n\n/**\n * @return {boolean} whether the given element contains content which is selectable to the user, e.g. to be copied into clipboard.\n * It also returns true for disabled text-fields, because the user must be able to select and copy text from these text-fields.\n */\nexport function isSelectableText(element) {\n  let $element = $(element);\n\n  // Find closest element which has a 'user-select' with a value other than 'auto'. If that value\n  // is 'none', the text is not selectable. This code mimics the \"inheritance behavior\" of the CSS\n  // property \"-moz-user-select: -moz-none\" as described in [1].  This does not seem to work in some\n  // cases in Firefox, even with bug [2] fixed. As a workaround, we implement the desired behavior here.\n  //\n  // Note: Some additional CSS rules are required for events other than 'mousedown', see main.css.\n  //\n  // [1] https://developer.mozilla.org/en-US/docs/Web/CSS/user-select\n  // [2] https://bugzilla.mozilla.org/show_bug.cgi?id=648624\n  let $el = $element;\n  while ($el.css('user-select') === 'auto') {\n    $el = $el.parent();\n    // Fix for Firefox: parent of BODY element is HtmlDocument. When calling $el.css on the HtmlDocument\n    // Firefox throws an error that ownerDocument is undefined. Thus we don't go higher than BODY element\n    // and assume body is never selectable.\n    if ($el.is('body')) {\n      return false;\n    }\n  }\n  if ($el.css('user-select') === 'none') {\n    return false;\n  }\n\n  if ($element.is('input[disabled][type=text], textarea[disabled]')) {\n    return true;\n  }\n  // When element or its children have text, it should be selectable.\n  // The old implementation only looked at the text of the element itself\n  // but not at the text of its children. With the old approach it was not\n  // possible to select something inside of a TD, for instance:\n  //   <td><span>Foo</span></td>\n  // Because TD itself has no text at all.\n  // When an element has no text we return false, because if we could select\n  // empty elements, we'd loose focus more often.\n  return $element.text().trim().length > 0;\n}\n\n/**\n * Returns true if the given HTML element is the active element in its own document, false otherwise\n * @param element\n */\nexport function isActiveElement(element) {\n  if (!element) {\n    return false;\n  }\n  let activeElement;\n  if (element instanceof $) {\n    activeElement = element.activeElement(true);\n    element = element[0];\n  } else {\n    activeElement = (element instanceof Document ? element : element.ownerDocument).activeElement;\n  }\n  return activeElement === element;\n}\n\nexport default {\n  containsParentFocusableByMouse,\n  isActiveElement,\n  isFocusableByMouse,\n  isSelectableText\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAC,MAAM,QAAQ;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,OAAO,EAAE;EAC1C,IAAIC,QAAQ,GAAGH,CAAC,CAACE,OAAO,CAAC;EACzB,OAAO,CAACC,QAAQ,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAACD,QAAQ,CAACE,OAAO,CAAC,cAAc,CAAC,CAACC,MAAM;AACtF;;AAEA;AACA;AACA;AACA,OAAO,SAASC,8BAA8B,CAACL,OAAO,EAAEM,UAAU,EAAE;EAClE,IAAIC,wBAAwB,GAAGT,CAAC,CAACE,OAAO,CAAC,CACtCQ,OAAO,CAAC,YAAY,CAAC,CACrBC,GAAG,CAACH,UAAU,CAAC,CAAC,sIAChBI,MAAM,CAAC,YAAW;IACjB,OAAOX,kBAAkB,CAAC,IAAI,CAAC;EACjC,CAAC,CAAC;EACJ,OAAQQ,wBAAwB,CAACH,MAAM,GAAG,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASO,gBAAgB,CAACX,OAAO,EAAE;EACxC,IAAIC,QAAQ,GAAGH,CAAC,CAACE,OAAO,CAAC;;EAEzB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIY,GAAG,GAAGX,QAAQ;EAClB,OAAOW,GAAG,CAACC,GAAG,CAAC,aAAa,CAAC,KAAK,MAAM,EAAE;IACxCD,GAAG,GAAGA,GAAG,CAACE,MAAM,EAAE;IAClB;IACA;IACA;IACA,IAAIF,GAAG,CAACG,EAAE,CAAC,MAAM,CAAC,EAAE;MAClB,OAAO,KAAK;IACd;EACF;EACA,IAAIH,GAAG,CAACC,GAAG,CAAC,aAAa,CAAC,KAAK,MAAM,EAAE;IACrC,OAAO,KAAK;EACd;EAEA,IAAIZ,QAAQ,CAACc,EAAE,CAAC,gDAAgD,CAAC,EAAE;IACjE,OAAO,IAAI;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOd,QAAQ,CAACe,IAAI,EAAE,CAACC,IAAI,EAAE,CAACb,MAAM,GAAG,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASc,eAAe,CAAClB,OAAO,EAAE;EACvC,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO,KAAK;EACd;EACA,IAAImB,aAAa;EACjB,IAAInB,OAAO,YAAYF,CAAC,EAAE;IACxBqB,aAAa,GAAGnB,OAAO,CAACmB,aAAa,CAAC,IAAI,CAAC;IAC3CnB,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC;EACtB,CAAC,MAAM;IACLmB,aAAa,GAAG,CAACnB,OAAO,YAAYoB,QAAQ,GAAGpB,OAAO,GAAGA,OAAO,CAACqB,aAAa,EAAEF,aAAa;EAC/F;EACA,OAAOA,aAAa,KAAKnB,OAAO;AAClC;AAEA,eAAe;EACbK,8BAA8B;EAC9Ba,eAAe;EACfnB,kBAAkB;EAClBY;AACF,CAAC"},"metadata":{},"sourceType":"module"}