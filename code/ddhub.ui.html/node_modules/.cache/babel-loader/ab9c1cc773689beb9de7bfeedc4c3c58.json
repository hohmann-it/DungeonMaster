{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Page, scout, Status } from '../../../index';\nimport $ from 'jquery';\n\n/**\n * @class\n * @extends Page\n */\nexport default class PageWithTable extends Page {\n  constructor() {\n    super();\n    this.nodeType = Page.NodeType.TABLE;\n    this.alwaysCreateChildPage = false;\n    this._tableRowDeleteHandler = this._onTableRowsDeleted.bind(this);\n    this._tableRowInsertHandler = this._onTableRowsInserted.bind(this);\n    this._tableRowUpdateHandler = this._onTableRowsUpdated.bind(this);\n    this._tableRowActionHandler = this._onTableRowAction.bind(this);\n    this._tableRowOrderChangeHandler = this._onTableRowOrderChanged.bind(this);\n    this._tableDataLoadHandler = this.loadTableData.bind(this);\n  }\n\n  /**\n   * @override Page\n   */\n  _initDetailTable(table) {\n    super._initDetailTable(table);\n    table.on('rowsDeleted allRowsDeleted', this._tableRowDeleteHandler);\n    table.on('rowsInserted', this._tableRowInsertHandler);\n    table.on('rowsUpdated', this._tableRowUpdateHandler);\n    table.on('rowAction', this._tableRowActionHandler);\n    table.on('rowOrderChanged', this._tableRowOrderChangeHandler);\n    table.on('reload', this._tableDataLoadHandler);\n    table.hasReloadHandler = true;\n  }\n\n  /**\n   * @override Page\n   */\n  _destroyDetailTable(table) {\n    table.off('rowsDeleted allRowsDeleted', this._tableRowDeleteHandler);\n    table.off('rowsInserted', this._tableRowInsertHandler);\n    table.off('rowsUpdated', this._tableRowUpdateHandler);\n    table.off('rowAction', this._tableRowActionHandler);\n    table.off('rowOrderChanged', this._tableRowOrderChangeHandler);\n    table.off('reload', this._tableDataLoadHandler);\n    super._destroyDetailTable(table);\n  }\n  _onTableRowsDeleted(event) {\n    if (this.leaf) {\n      // when page is a leaf we do nothing at all\n      return;\n    }\n    let rows = arrays.ensure(event.rows),\n      childPages = rows.map(row => {\n        let childPage = row.page;\n        childPage.unlinkWithRow(row);\n        return childPage;\n      }, this);\n    this.getOutline().mediator.onTableRowsDeleted(rows, childPages, this);\n  }\n\n  /**\n   * We must set childNodeIndex on each created childPage because it is required to\n   * determine the order of nodes in the tree.\n   */\n  _onTableRowsInserted(event) {\n    if (this.leaf) {\n      // when page is a leaf we do nothing at all\n      return;\n    }\n    let rows = arrays.ensure(event.rows),\n      childPages = rows.map(function (row) {\n        return this._createChildPageInternal(row);\n      }, this);\n    this.getOutline().mediator.onTableRowsInserted(rows, childPages, this);\n  }\n  _onTableRowsUpdated(event) {\n    this.getOutline().mediator.onTableRowsUpdated(event, this);\n  }\n  _onTableRowAction(event) {\n    this.getOutline().mediator.onTableRowAction(event, this);\n  }\n  _onTableRowOrderChanged(event) {\n    if (event.animating) {\n      // do nothing while row order animation is in progress\n      return;\n    }\n    this.getOutline().mediator.onTableRowOrderChanged(event, this);\n  }\n  _createChildPageInternal(row) {\n    let childPage = this.createChildPage(row);\n    if (childPage === null && this.alwaysCreateChildPage) {\n      childPage = this.createDefaultChildPage(row);\n    }\n    childPage.linkWithRow(row);\n    childPage = childPage.updatePageFromTableRow(row);\n    return childPage;\n  }\n\n  /**\n   * Override this method to return a specific Page instance for the given table-row.\n   * The default impl. returns null, which means a AutoLeaftPageWithNodes instance will be created for the table-row.\n   */\n  createChildPage(row) {\n    return null;\n  }\n  createDefaultChildPage(row) {\n    return scout.create('AutoLeafPageWithNodes', {\n      parent: this.getOutline(),\n      row: row\n    });\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  loadChildren() {\n    // It's allowed to have no table - but we don't have to load data in that case\n    if (!this.detailTable) {\n      return $.resolvedDeferred();\n    }\n    return this.loadTableData();\n  }\n  _createSearchFilter() {\n    let firstFormTableControl = arrays.find(this.detailTable.tableControls, tableControl => {\n      return tableControl.form;\n    });\n    if (firstFormTableControl) {\n      return firstFormTableControl.form.exportData();\n    }\n    return null;\n  }\n\n  /**\n   * see Java: AbstractPageWithTable#loadChildren that's where the table is reloaded and the tree is rebuilt, called by AbstractTree#P_UIFacade\n   * @returns {$.Deferred}\n   */\n  loadTableData() {\n    this.ensureDetailTable();\n    this.detailTable.deleteAllRows();\n    this.detailTable.setLoading(true);\n    return this._loadTableData(this._createSearchFilter()).then(this._onLoadTableDataDone.bind(this)).catch(this._onLoadTableDataFail.bind(this)).then(this._onLoadTableDataAlways.bind(this));\n  }\n\n  /**\n   * Override this method to load table data (rows to be added to table).\n   * This is an asynchronous operation working with a Deferred. When table data load is successful\n   * <code>_onLoadTableDataDone(data)</code> will be called. When a failure occurs while loading table\n   * data <code>_onLoadTableDataFail(data)</code> will be called.\n   * <p>\n   * When you want to return static data you still need a deferred. But you can resolve it\n   * immediately. Example code:\n   * <code>\n   *   var deferred = $.Deferred();\n   *   deferred.resolve([{...},{...}]);\n   *   return deferred;\n   * </code>\n   *\n   * @param searchFilter The search filter as exported by the search form or null.\n   *\n   * @return {Promise}\n   */\n  _loadTableData(searchFilter) {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method is called when table data load is successful. It should transform the table data\n   * object to table rows.\n   *\n   * @param tableData data loaded by <code>_loadTableData</code>\n   */\n  _onLoadTableDataDone(tableData) {\n    let rows = this._transformTableDataToTableRows(tableData);\n    if (rows && rows.length > 0) {\n      this.detailTable.insertRows(rows);\n    }\n  }\n  _onLoadTableDataFail(error) {\n    this.detailTable.setTableStatus(Status.error({\n      message: this.session.text('ErrorWhileLoadingData')\n    }));\n    $.log.error('Failed to load tableData. error=', error);\n  }\n  _onLoadTableDataAlways() {\n    this.childrenLoaded = true;\n    this.detailTable.setLoading(false);\n  }\n\n  /**\n   * This method converts the loaded table data, which can be any object, into table rows.\n   * You must override this method unless tableData is already an array of table rows.\n   *\n   * @param tableData\n   * @returns\n   */\n  _transformTableDataToTableRows(tableData) {\n    return tableData;\n  }\n}","map":{"version":3,"names":["arrays","Page","scout","Status","$","PageWithTable","constructor","nodeType","NodeType","TABLE","alwaysCreateChildPage","_tableRowDeleteHandler","_onTableRowsDeleted","bind","_tableRowInsertHandler","_onTableRowsInserted","_tableRowUpdateHandler","_onTableRowsUpdated","_tableRowActionHandler","_onTableRowAction","_tableRowOrderChangeHandler","_onTableRowOrderChanged","_tableDataLoadHandler","loadTableData","_initDetailTable","table","on","hasReloadHandler","_destroyDetailTable","off","event","leaf","rows","ensure","childPages","map","row","childPage","page","unlinkWithRow","getOutline","mediator","onTableRowsDeleted","_createChildPageInternal","onTableRowsInserted","onTableRowsUpdated","onTableRowAction","animating","onTableRowOrderChanged","createChildPage","createDefaultChildPage","linkWithRow","updatePageFromTableRow","create","parent","loadChildren","detailTable","resolvedDeferred","_createSearchFilter","firstFormTableControl","find","tableControls","tableControl","form","exportData","ensureDetailTable","deleteAllRows","setLoading","_loadTableData","then","_onLoadTableDataDone","catch","_onLoadTableDataFail","_onLoadTableDataAlways","searchFilter","tableData","_transformTableDataToTableRows","length","insertRows","error","setTableStatus","message","session","text","log","childrenLoaded"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/outline/pages/PageWithTable.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Page, scout, Status} from '../../../index';\nimport $ from 'jquery';\n\n/**\n * @class\n * @extends Page\n */\nexport default class PageWithTable extends Page {\n\n  constructor() {\n    super();\n\n    this.nodeType = Page.NodeType.TABLE;\n    this.alwaysCreateChildPage = false;\n\n    this._tableRowDeleteHandler = this._onTableRowsDeleted.bind(this);\n    this._tableRowInsertHandler = this._onTableRowsInserted.bind(this);\n    this._tableRowUpdateHandler = this._onTableRowsUpdated.bind(this);\n    this._tableRowActionHandler = this._onTableRowAction.bind(this);\n    this._tableRowOrderChangeHandler = this._onTableRowOrderChanged.bind(this);\n    this._tableDataLoadHandler = this.loadTableData.bind(this);\n  }\n\n  /**\n   * @override Page\n   */\n  _initDetailTable(table) {\n    super._initDetailTable(table);\n    table.on('rowsDeleted allRowsDeleted', this._tableRowDeleteHandler);\n    table.on('rowsInserted', this._tableRowInsertHandler);\n    table.on('rowsUpdated', this._tableRowUpdateHandler);\n    table.on('rowAction', this._tableRowActionHandler);\n    table.on('rowOrderChanged', this._tableRowOrderChangeHandler);\n    table.on('reload', this._tableDataLoadHandler);\n    table.hasReloadHandler = true;\n  }\n\n  /**\n   * @override Page\n   */\n  _destroyDetailTable(table) {\n    table.off('rowsDeleted allRowsDeleted', this._tableRowDeleteHandler);\n    table.off('rowsInserted', this._tableRowInsertHandler);\n    table.off('rowsUpdated', this._tableRowUpdateHandler);\n    table.off('rowAction', this._tableRowActionHandler);\n    table.off('rowOrderChanged', this._tableRowOrderChangeHandler);\n    table.off('reload', this._tableDataLoadHandler);\n    super._destroyDetailTable(table);\n  }\n\n  _onTableRowsDeleted(event) {\n    if (this.leaf) { // when page is a leaf we do nothing at all\n      return;\n    }\n    let rows = arrays.ensure(event.rows),\n      childPages = rows.map(row => {\n        let childPage = row.page;\n        childPage.unlinkWithRow(row);\n        return childPage;\n      }, this);\n\n    this.getOutline().mediator.onTableRowsDeleted(rows, childPages, this);\n  }\n\n  /**\n   * We must set childNodeIndex on each created childPage because it is required to\n   * determine the order of nodes in the tree.\n   */\n  _onTableRowsInserted(event) {\n    if (this.leaf) { // when page is a leaf we do nothing at all\n      return;\n    }\n\n    let rows = arrays.ensure(event.rows),\n      childPages = rows.map(function(row) {\n        return this._createChildPageInternal(row);\n      }, this);\n\n    this.getOutline().mediator.onTableRowsInserted(rows, childPages, this);\n  }\n\n  _onTableRowsUpdated(event) {\n    this.getOutline().mediator.onTableRowsUpdated(event, this);\n  }\n\n  _onTableRowAction(event) {\n    this.getOutline().mediator.onTableRowAction(event, this);\n  }\n\n  _onTableRowOrderChanged(event) {\n    if (event.animating) { // do nothing while row order animation is in progress\n      return;\n    }\n    this.getOutline().mediator.onTableRowOrderChanged(event, this);\n  }\n\n  _createChildPageInternal(row) {\n    let childPage = this.createChildPage(row);\n    if (childPage === null && this.alwaysCreateChildPage) {\n      childPage = this.createDefaultChildPage(row);\n    }\n    childPage.linkWithRow(row);\n    childPage = childPage.updatePageFromTableRow(row);\n    return childPage;\n  }\n\n  /**\n   * Override this method to return a specific Page instance for the given table-row.\n   * The default impl. returns null, which means a AutoLeaftPageWithNodes instance will be created for the table-row.\n   */\n  createChildPage(row) {\n    return null;\n  }\n\n  createDefaultChildPage(row) {\n    return scout.create('AutoLeafPageWithNodes', {\n      parent: this.getOutline(),\n      row: row\n    });\n  }\n\n  /**\n   * @override TreeNode.js\n   */\n  loadChildren() {\n    // It's allowed to have no table - but we don't have to load data in that case\n    if (!this.detailTable) {\n      return $.resolvedDeferred();\n    }\n    return this.loadTableData();\n  }\n\n  _createSearchFilter() {\n    let firstFormTableControl = arrays.find(this.detailTable.tableControls, tableControl => {\n      return tableControl.form;\n    });\n    if (firstFormTableControl) {\n      return firstFormTableControl.form.exportData();\n    }\n    return null;\n  }\n\n  /**\n   * see Java: AbstractPageWithTable#loadChildren that's where the table is reloaded and the tree is rebuilt, called by AbstractTree#P_UIFacade\n   * @returns {$.Deferred}\n   */\n  loadTableData() {\n    this.ensureDetailTable();\n    this.detailTable.deleteAllRows();\n    this.detailTable.setLoading(true);\n    return this._loadTableData(this._createSearchFilter())\n      .then(this._onLoadTableDataDone.bind(this))\n      .catch(this._onLoadTableDataFail.bind(this))\n      .then(this._onLoadTableDataAlways.bind(this));\n  }\n\n  /**\n   * Override this method to load table data (rows to be added to table).\n   * This is an asynchronous operation working with a Deferred. When table data load is successful\n   * <code>_onLoadTableDataDone(data)</code> will be called. When a failure occurs while loading table\n   * data <code>_onLoadTableDataFail(data)</code> will be called.\n   * <p>\n   * When you want to return static data you still need a deferred. But you can resolve it\n   * immediately. Example code:\n   * <code>\n   *   var deferred = $.Deferred();\n   *   deferred.resolve([{...},{...}]);\n   *   return deferred;\n   * </code>\n   *\n   * @param searchFilter The search filter as exported by the search form or null.\n   *\n   * @return {Promise}\n   */\n  _loadTableData(searchFilter) {\n    return $.resolvedDeferred();\n  }\n\n  /**\n   * This method is called when table data load is successful. It should transform the table data\n   * object to table rows.\n   *\n   * @param tableData data loaded by <code>_loadTableData</code>\n   */\n  _onLoadTableDataDone(tableData) {\n    let rows = this._transformTableDataToTableRows(tableData);\n    if (rows && rows.length > 0) {\n      this.detailTable.insertRows(rows);\n    }\n  }\n\n  _onLoadTableDataFail(error) {\n    this.detailTable.setTableStatus(Status.error({\n      message: this.session.text('ErrorWhileLoadingData')\n    }));\n    $.log.error('Failed to load tableData. error=', error);\n  }\n\n  _onLoadTableDataAlways() {\n    this.childrenLoaded = true;\n    this.detailTable.setLoading(false);\n  }\n\n  /**\n   * This method converts the loaded table data, which can be any object, into table rows.\n   * You must override this method unless tableData is already an array of table rows.\n   *\n   * @param tableData\n   * @returns\n   */\n  _transformTableDataToTableRows(tableData) {\n    return tableData;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}