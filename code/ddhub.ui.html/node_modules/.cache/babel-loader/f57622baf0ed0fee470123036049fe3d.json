{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { GridData, LogicalGrid } from '../../index';\n\n/**\n * @abstract\n */\nexport default class AbstractGrid extends LogicalGrid {\n  constructor(options) {\n    super(options);\n    this.gridRows = 0;\n    this.gridColumns = 0;\n  }\n\n  /**\n   * Expects this.gridConfig to be set\n   * @override\n   */\n  _validate(gridContainer) {\n    // reset old state\n    this.gridRows = 0;\n    this.gridConfig.setWidget(gridContainer);\n    // step 0: column count\n    this.gridColumns = this.gridConfig.getGridColumnCount();\n    let containingGridXYCount = 0;\n    let notContainingGridXYCount = 0;\n    // build\n    let widgets = [];\n    this.gridConfig.getGridWidgets().forEach(widget => {\n      if (widget.isVisible()) {\n        widgets.push(widget);\n        let hints = widget.gridDataHints;\n        if (hints && hints.x >= 0 && hints.y >= 0) {\n          containingGridXYCount++;\n        } else {\n          notContainingGridXYCount++;\n        }\n      } else {\n        let gd = GridData.createFromHints(widget, 1);\n        widget.gridData = gd;\n      }\n    });\n    if (containingGridXYCount > 0 && notContainingGridXYCount === 0) {\n      this.layoutAllStatic(widgets);\n    } else {\n      this.layoutAllDynamic(widgets);\n    }\n  }\n  layoutAllStatic(widgets) {\n    let hints = [];\n    widgets.forEach(v => {\n      hints.push(GridData.createFromHints(v, 1));\n    });\n    let totalGridW = hints.reduce((x, y) => {\n      let y1 = y.x + y.w;\n      return y1 > x ? y1 : x;\n    }, 1);\n    let totalGridH = hints.reduce((x, y) => {\n      let y1 = y.y + y.h;\n      return y1 > x ? y1 : x;\n    }, 0);\n    widgets.forEach(v => {\n      v.gridData = GridData.createFromHints(v, totalGridW);\n    });\n    this.gridRows = totalGridH;\n    this.gridColumns = totalGridW;\n  }\n  layoutAllDynamic(widgets) {\n    // abstract, must be implemented by sub classes\n  }\n  getGridColumnCount() {\n    return this.gridColumns;\n  }\n  getGridRowCount() {\n    return this.gridRows;\n  }\n\n  /**\n   * If grid w is greater than column count, grid w will be set to the column count.\n   */\n  static getGridDataFromHints(widget, groupBoxColumnCount) {\n    let data = GridData.createFromHints(widget, groupBoxColumnCount);\n    data.w = Math.min(groupBoxColumnCount, data.w);\n    return data;\n  }\n}","map":{"version":3,"names":["GridData","LogicalGrid","AbstractGrid","constructor","options","gridRows","gridColumns","_validate","gridContainer","gridConfig","setWidget","getGridColumnCount","containingGridXYCount","notContainingGridXYCount","widgets","getGridWidgets","forEach","widget","isVisible","push","hints","gridDataHints","x","y","gd","createFromHints","gridData","layoutAllStatic","layoutAllDynamic","v","totalGridW","reduce","y1","w","totalGridH","h","getGridRowCount","getGridDataFromHints","groupBoxColumnCount","data","Math","min"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/layout/logicalgrid/AbstractGrid.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {GridData, LogicalGrid} from '../../index';\n\n/**\n * @abstract\n */\nexport default class AbstractGrid extends LogicalGrid {\n\n  constructor(options) {\n    super(options);\n    this.gridRows = 0;\n    this.gridColumns = 0;\n  }\n\n  /**\n   * Expects this.gridConfig to be set\n   * @override\n   */\n  _validate(gridContainer) {\n    // reset old state\n    this.gridRows = 0;\n    this.gridConfig.setWidget(gridContainer);\n    // step 0: column count\n    this.gridColumns = this.gridConfig.getGridColumnCount();\n    let containingGridXYCount = 0;\n    let notContainingGridXYCount = 0;\n    // build\n    let widgets = [];\n    this.gridConfig.getGridWidgets().forEach(widget => {\n      if (widget.isVisible()) {\n        widgets.push(widget);\n        let hints = widget.gridDataHints;\n        if (hints && hints.x >= 0 && hints.y >= 0) {\n          containingGridXYCount++;\n        } else {\n          notContainingGridXYCount++;\n        }\n      } else {\n        let gd = GridData.createFromHints(widget, 1);\n        widget.gridData = gd;\n      }\n    });\n    if (containingGridXYCount > 0 && notContainingGridXYCount === 0) {\n      this.layoutAllStatic(widgets);\n    } else {\n      this.layoutAllDynamic(widgets);\n    }\n  }\n\n  layoutAllStatic(widgets) {\n    let hints = [];\n    widgets.forEach(v => {\n      hints.push(GridData.createFromHints(v, 1));\n    });\n    let totalGridW = hints.reduce((x, y) => {\n      let y1 = y.x + y.w;\n      return y1 > x ? y1 : x;\n    }, 1);\n    let totalGridH = hints.reduce((x, y) => {\n      let y1 = y.y + y.h;\n      return y1 > x ? y1 : x;\n    }, 0);\n    widgets.forEach(v => {\n      v.gridData = GridData.createFromHints(v, totalGridW);\n    });\n    this.gridRows = totalGridH;\n    this.gridColumns = totalGridW;\n  }\n\n  layoutAllDynamic(widgets) {\n    // abstract, must be implemented by sub classes\n  }\n\n  getGridColumnCount() {\n    return this.gridColumns;\n  }\n\n  getGridRowCount() {\n    return this.gridRows;\n  }\n\n  /**\n   * If grid w is greater than column count, grid w will be set to the column count.\n   */\n  static getGridDataFromHints(widget, groupBoxColumnCount) {\n    let data = GridData.createFromHints(widget, groupBoxColumnCount);\n    data.w = Math.min(groupBoxColumnCount, data.w);\n    return data;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}