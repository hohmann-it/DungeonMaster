{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { keys, KeyStroke, strings } from '../../../index';\nexport default class TagFieldEnterKeyStroke extends KeyStroke {\n  constructor(tagField) {\n    super();\n    this.field = tagField;\n    this.which = [keys.ENTER];\n    this.renderingHints.render = false;\n    this.preventDefault = false;\n    this.stopPropagation = true;\n  }\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    // set the stopPropagation flag dynamically. While the user is typing we only want the field\n    // to apply the current displayText as tag, when the user presses ENTER. But when the displayText\n    // is empty, the ENTER key should propagate up to the form.\n    this.stopPropagation = strings.hasText(this.field._readDisplayText());\n    return this.field.isInputFocused();\n  }\n  handle(event) {\n    this.field.acceptInput();\n  }\n}","map":{"version":3,"names":["keys","KeyStroke","strings","TagFieldEnterKeyStroke","constructor","tagField","field","which","ENTER","renderingHints","render","preventDefault","stopPropagation","_accept","event","accepted","hasText","_readDisplayText","isInputFocused","handle","acceptInput"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/tagfield/TagFieldEnterKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {keys, KeyStroke, strings} from '../../../index';\n\nexport default class TagFieldEnterKeyStroke extends KeyStroke {\n\n  constructor(tagField) {\n    super();\n    this.field = tagField;\n    this.which = [keys.ENTER];\n    this.renderingHints.render = false;\n    this.preventDefault = false;\n    this.stopPropagation = true;\n  }\n\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    // set the stopPropagation flag dynamically. While the user is typing we only want the field\n    // to apply the current displayText as tag, when the user presses ENTER. But when the displayText\n    // is empty, the ENTER key should propagate up to the form.\n    this.stopPropagation = strings.hasText(this.field._readDisplayText());\n    return this.field.isInputFocused();\n  }\n\n  handle(event) {\n    this.field.acceptInput();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,IAAI,EAAEC,SAAS,EAAEC,OAAO,QAAO,gBAAgB;AAEvD,eAAe,MAAMC,sBAAsB,SAASF,SAAS,CAAC;EAE5DG,WAAW,CAACC,QAAQ,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGD,QAAQ;IACrB,IAAI,CAACE,KAAK,GAAG,CAACP,IAAI,CAACQ,KAAK,CAAC;IACzB,IAAI,CAACC,cAAc,CAACC,MAAM,GAAG,KAAK;IAClC,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,eAAe,GAAG,IAAI;EAC7B;EAEAC,OAAO,CAACC,KAAK,EAAE;IACb,IAAIC,QAAQ,GAAG,KAAK,CAACF,OAAO,CAACC,KAAK,CAAC;IACnC,IAAI,CAACC,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;IACA;IACA;IACA;IACA,IAAI,CAACH,eAAe,GAAGV,OAAO,CAACc,OAAO,CAAC,IAAI,CAACV,KAAK,CAACW,gBAAgB,EAAE,CAAC;IACrE,OAAO,IAAI,CAACX,KAAK,CAACY,cAAc,EAAE;EACpC;EAEAC,MAAM,CAACL,KAAK,EAAE;IACZ,IAAI,CAACR,KAAK,CAACc,WAAW,EAAE;EAC1B;AACF"},"metadata":{},"sourceType":"module"}