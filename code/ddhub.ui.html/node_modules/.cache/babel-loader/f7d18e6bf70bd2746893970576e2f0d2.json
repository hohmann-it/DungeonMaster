{"ast":null,"code":"function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ValueFieldAdapter } from '../../../index';\nexport default class FileChooserFieldAdapter extends ValueFieldAdapter {\n  constructor() {\n    super();\n  }\n  _onWidgetPropertyChange(event) {\n    super._onWidgetPropertyChange(event);\n    if (event.propertyName === 'value') {\n      this._onValueChange(event);\n    }\n  }\n  _onValueChange(event) {\n    let success = this.widget.fileInput.upload();\n    if (!success) {\n      this.widget.fileInput.clear();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _syncDisplayText(displayText) {\n    this.widget.setDisplayText(displayText);\n    // When displayText comes from the server we must not call parseAndSetValue here.\n  }\n\n  /**\n   * Handle events in this order value, displayText. This allows to set a null value and set a display-text\n   * anyway. Otherwise the field would be empty. Note: this order is not a perfect solution for every case,\n   * but it solves the issue reported in ticket #290908.\n   *\n   * @override\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties).sort(this._createPropertySortFunc(FileChooserFieldAdapter.PROPERTIES_ORDER));\n  }\n}\n_defineProperty(FileChooserFieldAdapter, \"PROPERTIES_ORDER\", ['value', 'displayText']);","map":{"version":3,"names":["ValueFieldAdapter","FileChooserFieldAdapter","constructor","_onWidgetPropertyChange","event","propertyName","_onValueChange","success","widget","fileInput","upload","clear","_syncDisplayText","displayText","setDisplayText","_orderPropertyNamesOnSync","newProperties","Object","keys","sort","_createPropertySortFunc","PROPERTIES_ORDER"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/filechooserfield/FileChooserFieldAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ValueFieldAdapter} from '../../../index';\n\nexport default class FileChooserFieldAdapter extends ValueFieldAdapter {\n\n  constructor() {\n    super();\n  }\n\n  static PROPERTIES_ORDER = ['value', 'displayText'];\n\n  _onWidgetPropertyChange(event) {\n    super._onWidgetPropertyChange(event);\n\n    if (event.propertyName === 'value') {\n      this._onValueChange(event);\n    }\n  }\n\n  _onValueChange(event) {\n    let success = this.widget.fileInput.upload();\n    if (!success) {\n      this.widget.fileInput.clear();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _syncDisplayText(displayText) {\n    this.widget.setDisplayText(displayText);\n    // When displayText comes from the server we must not call parseAndSetValue here.\n  }\n\n  /**\n   * Handle events in this order value, displayText. This allows to set a null value and set a display-text\n   * anyway. Otherwise the field would be empty. Note: this order is not a perfect solution for every case,\n   * but it solves the issue reported in ticket #290908.\n   *\n   * @override\n   */\n  _orderPropertyNamesOnSync(newProperties) {\n    return Object.keys(newProperties).sort(this._createPropertySortFunc(FileChooserFieldAdapter.PROPERTIES_ORDER));\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,iBAAiB,QAAO,gBAAgB;AAEhD,eAAe,MAAMC,uBAAuB,SAASD,iBAAiB,CAAC;EAErEE,WAAW,GAAG;IACZ,KAAK,EAAE;EACT;EAIAC,uBAAuB,CAACC,KAAK,EAAE;IAC7B,KAAK,CAACD,uBAAuB,CAACC,KAAK,CAAC;IAEpC,IAAIA,KAAK,CAACC,YAAY,KAAK,OAAO,EAAE;MAClC,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC;IAC5B;EACF;EAEAE,cAAc,CAACF,KAAK,EAAE;IACpB,IAAIG,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,SAAS,CAACC,MAAM,EAAE;IAC5C,IAAI,CAACH,OAAO,EAAE;MACZ,IAAI,CAACC,MAAM,CAACC,SAAS,CAACE,KAAK,EAAE;IAC/B;EACF;;EAEA;AACF;AACA;EACEC,gBAAgB,CAACC,WAAW,EAAE;IAC5B,IAAI,CAACL,MAAM,CAACM,cAAc,CAACD,WAAW,CAAC;IACvC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,yBAAyB,CAACC,aAAa,EAAE;IACvC,OAAOC,MAAM,CAACC,IAAI,CAACF,aAAa,CAAC,CAACG,IAAI,CAAC,IAAI,CAACC,uBAAuB,CAACnB,uBAAuB,CAACoB,gBAAgB,CAAC,CAAC;EAChH;AACF;AAAC,gBAzCoBpB,uBAAuB,sBAMhB,CAAC,OAAO,EAAE,aAAa,CAAC"},"metadata":{},"sourceType":"module"}