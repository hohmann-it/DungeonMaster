{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { keys, KeyStroke } from '../../index';\nexport default class TableStartCellEditKeyStroke extends KeyStroke {\n  constructor(table) {\n    super();\n    this.field = table;\n    this.ctrl = true;\n    this.which = [keys.ENTER];\n    this.stopPropagation = true;\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let editPosition = event._editPosition,\n        columnIndex = this.field.visibleColumns().indexOf(editPosition.column);\n      if (columnIndex === 0) {\n        // Other key strokes like PageDown, Home etc. are displayed in the row -> make sure the cell edit key stroke will be displayed next to the other ones\n        return editPosition.row.$row;\n      }\n      return this.field.$cell(columnIndex, editPosition.row.$row);\n    };\n  }\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n    if (this.field.cellEditorPopup) {\n      // Already open\n      return false;\n    }\n    let selectedRows = this.field.selectedRows;\n    if (!selectedRows.length) {\n      return false;\n    }\n    let position = this.field.nextEditableCellPosForRow(0, selectedRows[0]);\n    if (position) {\n      event._editPosition = position;\n      return true;\n    }\n    return false;\n  }\n  handle(event) {\n    let editPosition = event._editPosition;\n    this.field.prepareCellEdit(editPosition.column, editPosition.row, true);\n  }\n}","map":{"version":3,"names":["keys","KeyStroke","TableStartCellEditKeyStroke","constructor","table","field","ctrl","which","ENTER","stopPropagation","renderingHints","$drawingArea","event","editPosition","_editPosition","columnIndex","visibleColumns","indexOf","column","row","$row","$cell","_accept","accepted","cellEditorPopup","selectedRows","length","position","nextEditableCellPosForRow","handle","prepareCellEdit"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/keystrokes/TableStartCellEditKeyStroke.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {keys, KeyStroke} from '../../index';\n\nexport default class TableStartCellEditKeyStroke extends KeyStroke {\n\n  constructor(table) {\n    super();\n    this.field = table;\n    this.ctrl = true;\n    this.which = [keys.ENTER];\n    this.stopPropagation = true;\n    this.renderingHints.$drawingArea = ($drawingArea, event) => {\n      let editPosition = event._editPosition,\n        columnIndex = this.field.visibleColumns().indexOf(editPosition.column);\n      if (columnIndex === 0) {\n        // Other key strokes like PageDown, Home etc. are displayed in the row -> make sure the cell edit key stroke will be displayed next to the other ones\n        return editPosition.row.$row;\n      }\n      return this.field.$cell(columnIndex, editPosition.row.$row);\n    };\n  }\n\n  _accept(event) {\n    let accepted = super._accept(event);\n    if (!accepted) {\n      return false;\n    }\n\n    if (this.field.cellEditorPopup) {\n      // Already open\n      return false;\n    }\n\n    let selectedRows = this.field.selectedRows;\n    if (!selectedRows.length) {\n      return false;\n    }\n\n    let position = this.field.nextEditableCellPosForRow(0, selectedRows[0]);\n    if (position) {\n      event._editPosition = position;\n      return true;\n    }\n    return false;\n  }\n\n  handle(event) {\n    let editPosition = event._editPosition;\n    this.field.prepareCellEdit(editPosition.column, editPosition.row, true);\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,IAAI,EAAEC,SAAS,QAAO,aAAa;AAE3C,eAAe,MAAMC,2BAA2B,SAASD,SAAS,CAAC;EAEjEE,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGD,KAAK;IAClB,IAAI,CAACE,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,CAACP,IAAI,CAACQ,KAAK,CAAC;IACzB,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,cAAc,CAACC,YAAY,GAAG,CAACA,YAAY,EAAEC,KAAK,KAAK;MAC1D,IAAIC,YAAY,GAAGD,KAAK,CAACE,aAAa;QACpCC,WAAW,GAAG,IAAI,CAACV,KAAK,CAACW,cAAc,EAAE,CAACC,OAAO,CAACJ,YAAY,CAACK,MAAM,CAAC;MACxE,IAAIH,WAAW,KAAK,CAAC,EAAE;QACrB;QACA,OAAOF,YAAY,CAACM,GAAG,CAACC,IAAI;MAC9B;MACA,OAAO,IAAI,CAACf,KAAK,CAACgB,KAAK,CAACN,WAAW,EAAEF,YAAY,CAACM,GAAG,CAACC,IAAI,CAAC;IAC7D,CAAC;EACH;EAEAE,OAAO,CAACV,KAAK,EAAE;IACb,IAAIW,QAAQ,GAAG,KAAK,CAACD,OAAO,CAACV,KAAK,CAAC;IACnC,IAAI,CAACW,QAAQ,EAAE;MACb,OAAO,KAAK;IACd;IAEA,IAAI,IAAI,CAAClB,KAAK,CAACmB,eAAe,EAAE;MAC9B;MACA,OAAO,KAAK;IACd;IAEA,IAAIC,YAAY,GAAG,IAAI,CAACpB,KAAK,CAACoB,YAAY;IAC1C,IAAI,CAACA,YAAY,CAACC,MAAM,EAAE;MACxB,OAAO,KAAK;IACd;IAEA,IAAIC,QAAQ,GAAG,IAAI,CAACtB,KAAK,CAACuB,yBAAyB,CAAC,CAAC,EAAEH,YAAY,CAAC,CAAC,CAAC,CAAC;IACvE,IAAIE,QAAQ,EAAE;MACZf,KAAK,CAACE,aAAa,GAAGa,QAAQ;MAC9B,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAE,MAAM,CAACjB,KAAK,EAAE;IACZ,IAAIC,YAAY,GAAGD,KAAK,CAACE,aAAa;IACtC,IAAI,CAACT,KAAK,CAACyB,eAAe,CAACjB,YAAY,CAACK,MAAM,EAAEL,YAAY,CAACM,GAAG,EAAE,IAAI,CAAC;EACzE;AACF"},"metadata":{},"sourceType":"module"}