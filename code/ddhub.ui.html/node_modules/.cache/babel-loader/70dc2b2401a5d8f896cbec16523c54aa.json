{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, RoundingMode, strings } from '../index';\n\n/**\n * Converts the given decimal number to base-62 (i.e. the same value, but\n * represented by [a-zA-Z0-9] instead of only [0-9].\n */\nexport function toBase62(number) {\n  if (number === undefined) {\n    return undefined;\n  }\n  let symbols = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split('');\n  let base = 62;\n  let s = '';\n  let n;\n  while (number >= 1) {\n    n = Math.floor(number / base);\n    s = symbols[number - base * n] + s;\n    number = n;\n  }\n  return s;\n}\n\n/**\n * Returns a random sequence of characters out of the set [a-zA-Z0-9] with the\n * given length. The default length is 8.\n */\nexport function randomId(length) {\n  length = length || 8;\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\nlet _correlationCounter = 1;\n\n/**\n * Generates a random ID suitable for use as correlation ID.\n *\n * Example:\n *\n *   Hq5JY2kz3n/27\n *\n * The ID is generated from two different alphabets: 1. only letter, 2. only digits. By\n * always selecting a random digit after two random characters, accidental \"rude words\"\n * can be prevented.\n *\n * The characters[01olOL] are not used at all because they are easily confused.\n *\n * For a length of 11 (default), this method can theoretically generate over 200 trillion\n * different IDs:\n *\n *   46^7 * 8^3 = 223'138'640'494'592\n *\n * To further reduce the risk of collisions, a monotonically increasing counter is added\n * at the end of the result string (separated by \"/\").\n */\nexport function correlationId(length) {\n  length = length || 11;\n  let letters = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ';\n  let digits = '23456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    if ((i + 1) % 3 === 0) {\n      result += digits[Math.floor(Math.random() * digits.length)];\n    } else {\n      result += letters[Math.floor(Math.random() * letters.length)];\n    }\n  }\n  return result + '/' + _correlationCounter++;\n}\n\n/**\n * Rounds a number to the given number of decimal places.\n *\n * Numbers should not be rounded with the built-in Number.toFixed() method, since it\n * behaves differently on different browsers. However, it is safe to apply toFixed()\n * to the result of this method to ensure a fixed number of decimal places (filled up\n * with 0's) because this operation does not involve any rounding anymore.\n * <p>\n * If decimalPlaces is omitted, the number will be rounded to integer by default.\n * Rounding mode {@link RoundingMode.HALF_UP} is used as default.\n */\nexport function round(number, roundingMode, decimalPlaces) {\n  if (number === null || number === undefined) {\n    return number;\n  }\n  decimalPlaces = decimalPlaces || 0;\n\n  // Do _not_ multiply with powers of 10 here, because that might cause rounding errors!\n  // Example: 1.005 with 2 decimal places would result in 100.49999999999999\n  number = shiftDecimalPoint(number, decimalPlaces);\n  switch (roundingMode) {\n    case RoundingMode.UP:\n      if (number < 0) {\n        number = -Math.ceil(Math.abs(number));\n      } else {\n        number = Math.ceil(number);\n      }\n      break;\n    case RoundingMode.DOWN:\n      if (number < 0) {\n        number = -Math.floor(Math.abs(number));\n      } else {\n        number = Math.floor(number);\n      }\n      break;\n    case RoundingMode.CEILING:\n      number = Math.ceil(number);\n      break;\n    case RoundingMode.FLOOR:\n      number = Math.floor(number);\n      break;\n    case RoundingMode.HALF_DOWN:\n      if (number < 0) {\n        number = Math.round(number);\n      } else {\n        number = -Math.round(-number);\n      }\n      break;\n    // case RoundingMode.HALF_EVEN:\n    // case RoundingMode.UNNECESSARY:\n    // not implemented, default is used.\n    default:\n      // RoundingMode.HALF_UP is used as default\n      if (number < 0) {\n        number = -Math.round(Math.abs(number));\n      } else {\n        number = Math.round(number);\n      }\n  }\n  return shiftDecimalPoint(number, -decimalPlaces);\n}\n\n/**\n * Shifts the decimal point in the given number by a certain distance. While the result is also\n * number, the method uses string operations to move the decimal point. This prevents rounding\n * errors as long as the number does not exceed JavaScript's Number precision.\n *\n * The argument 'move' describes the distance how far the decimal point should be moved:\n *     0 = do no move      (1.57 --> 1.57)\n *   > 0 = move to right   (1.57 --> 15.7)\n *   < 0 = move to left    (1.57 --> 0.157)\n */\nexport function shiftDecimalPoint(number, move) {\n  if (number === null || number === undefined || !move) {\n    return number;\n  }\n  let sign = number ? number < 0 ? -1 : 1 : 0;\n  let distance = Math.abs(move);\n  number = Math.abs(number);\n  let s = strings.asString(number);\n  if (s.indexOf('e') !== -1) {\n    s = number.toFixed(20);\n  }\n  let a;\n  if (move < 0) {\n    // move to left\n    s = strings.repeat('0', distance) + s;\n    a = s.split('.', 2);\n    if (a.length === 1) {\n      s = s.substr(0, s.length - distance) + '.' + s.substr(s.length - distance);\n    } else {\n      s = a[0].substr(0, a[0].length - distance) + '.' + a[0].substr(a[0].length - distance) + a[1];\n    }\n  } else if (move > 0) {\n    // move to right\n    s += strings.repeat('0', distance);\n    a = s.split('.', 2);\n    if (a.length === 2) {\n      s = a[0] + a[1].substr(0, distance) + '.' + a[1].substr(distance);\n    }\n  }\n  // Remove multiple leading zeros to prevent interpretation as octal number\n  s = s.replace(/^0*(\\d)/g, '$1');\n  return Number(s) * sign;\n}\n\n/**\n * Ensures that the given number is really a number.\n * <p>\n * If it already is a number, the number will be returned.\n * Otherwise a Number is created.\n *\n * @param {number|string} number may be of type number or string.\n */\nexport function ensure(number) {\n  if (objects.isNullOrUndefined(number)) {\n    return number;\n  }\n  return Number(number);\n}\n\n/**\n * Returns true if the given number is of type number but not NaN.\n */\nexport function isNumber(number) {\n  return typeof number === 'number' && !isNaN(number);\n}\n\n/**\n * Returns true if the given number is an integer.\n */\nexport function isInteger(number) {\n  return isNumber(number) && isFinite(number) && Math.floor(number) === number;\n}\nexport function _setCorrelationCounter(val) {\n  _correlationCounter = val;\n}\nexport default {\n  correlationId,\n  ensure,\n  isNumber,\n  isInteger,\n  randomId,\n  round,\n  shiftDecimalPoint,\n  toBase62\n};","map":{"version":3,"names":["objects","RoundingMode","strings","toBase62","number","undefined","symbols","split","base","s","n","Math","floor","randomId","length","alphabet","result","i","random","_correlationCounter","correlationId","letters","digits","round","roundingMode","decimalPlaces","shiftDecimalPoint","UP","ceil","abs","DOWN","CEILING","FLOOR","HALF_DOWN","move","sign","distance","asString","indexOf","toFixed","a","repeat","substr","replace","Number","ensure","isNullOrUndefined","isNumber","isNaN","isInteger","isFinite","_setCorrelationCounter","val"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/numbers.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, RoundingMode, strings} from '../index';\n\n/**\n * Converts the given decimal number to base-62 (i.e. the same value, but\n * represented by [a-zA-Z0-9] instead of only [0-9].\n */\nexport function toBase62(number) {\n  if (number === undefined) {\n    return undefined;\n  }\n  let symbols = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split('');\n  let base = 62;\n  let s = '';\n  let n;\n  while (number >= 1) {\n    n = Math.floor(number / base);\n    s = symbols[(number - (base * n))] + s;\n    number = n;\n  }\n  return s;\n}\n\n/**\n * Returns a random sequence of characters out of the set [a-zA-Z0-9] with the\n * given length. The default length is 8.\n */\nexport function randomId(length) {\n  length = length || 8;\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return result;\n}\n\nlet _correlationCounter = 1;\n\n/**\n * Generates a random ID suitable for use as correlation ID.\n *\n * Example:\n *\n *   Hq5JY2kz3n/27\n *\n * The ID is generated from two different alphabets: 1. only letter, 2. only digits. By\n * always selecting a random digit after two random characters, accidental \"rude words\"\n * can be prevented.\n *\n * The characters[01olOL] are not used at all because they are easily confused.\n *\n * For a length of 11 (default), this method can theoretically generate over 200 trillion\n * different IDs:\n *\n *   46^7 * 8^3 = 223'138'640'494'592\n *\n * To further reduce the risk of collisions, a monotonically increasing counter is added\n * at the end of the result string (separated by \"/\").\n */\nexport function correlationId(length) {\n  length = length || 11;\n  let letters = 'abcdefghjkmnpqrstuvwxyzABCDEFGHJKMNPQRSTUVWXYZ';\n  let digits = '23456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    if ((i + 1) % 3 === 0) {\n      result += digits[Math.floor(Math.random() * digits.length)];\n    } else {\n      result += letters[Math.floor(Math.random() * letters.length)];\n    }\n  }\n  return result + '/' + (_correlationCounter++);\n}\n\n/**\n * Rounds a number to the given number of decimal places.\n *\n * Numbers should not be rounded with the built-in Number.toFixed() method, since it\n * behaves differently on different browsers. However, it is safe to apply toFixed()\n * to the result of this method to ensure a fixed number of decimal places (filled up\n * with 0's) because this operation does not involve any rounding anymore.\n * <p>\n * If decimalPlaces is omitted, the number will be rounded to integer by default.\n * Rounding mode {@link RoundingMode.HALF_UP} is used as default.\n */\nexport function round(number, roundingMode, decimalPlaces) {\n  if (number === null || number === undefined) {\n    return number;\n  }\n  decimalPlaces = decimalPlaces || 0;\n\n  // Do _not_ multiply with powers of 10 here, because that might cause rounding errors!\n  // Example: 1.005 with 2 decimal places would result in 100.49999999999999\n  number = shiftDecimalPoint(number, decimalPlaces);\n\n  switch (roundingMode) {\n    case RoundingMode.UP:\n      if (number < 0) {\n        number = -Math.ceil(Math.abs(number));\n      } else {\n        number = Math.ceil(number);\n      }\n      break;\n    case RoundingMode.DOWN:\n      if (number < 0) {\n        number = -Math.floor(Math.abs(number));\n      } else {\n        number = Math.floor(number);\n      }\n      break;\n    case RoundingMode.CEILING:\n      number = Math.ceil(number);\n      break;\n    case RoundingMode.FLOOR:\n      number = Math.floor(number);\n      break;\n    case RoundingMode.HALF_DOWN:\n      if (number < 0) {\n        number = Math.round(number);\n      } else {\n        number = -Math.round(-number);\n      }\n      break;\n    // case RoundingMode.HALF_EVEN:\n    // case RoundingMode.UNNECESSARY:\n    // not implemented, default is used.\n    default:\n      // RoundingMode.HALF_UP is used as default\n      if (number < 0) {\n        number = -Math.round(Math.abs(number));\n      } else {\n        number = Math.round(number);\n      }\n  }\n\n  return shiftDecimalPoint(number, -decimalPlaces);\n}\n\n/**\n * Shifts the decimal point in the given number by a certain distance. While the result is also\n * number, the method uses string operations to move the decimal point. This prevents rounding\n * errors as long as the number does not exceed JavaScript's Number precision.\n *\n * The argument 'move' describes the distance how far the decimal point should be moved:\n *     0 = do no move      (1.57 --> 1.57)\n *   > 0 = move to right   (1.57 --> 15.7)\n *   < 0 = move to left    (1.57 --> 0.157)\n */\nexport function shiftDecimalPoint(number, move) {\n  if (number === null || number === undefined || !move) {\n    return number;\n  }\n\n  let sign = (number ? (number < 0 ? -1 : 1) : 0);\n  let distance = Math.abs(move);\n\n  number = Math.abs(number);\n  let s = strings.asString(number);\n  if (s.indexOf('e') !== -1) {\n    s = number.toFixed(20);\n  }\n  let a;\n  if (move < 0) {\n    // move to left\n    s = strings.repeat('0', distance) + s;\n    a = s.split('.', 2);\n    if (a.length === 1) {\n      s = s.substr(0, s.length - distance) + '.' + s.substr(s.length - distance);\n    } else {\n      s = a[0].substr(0, a[0].length - distance) + '.' + a[0].substr(a[0].length - distance) + a[1];\n    }\n  } else if (move > 0) {\n    // move to right\n    s += strings.repeat('0', distance);\n    a = s.split('.', 2);\n    if (a.length === 2) {\n      s = a[0] + a[1].substr(0, distance) + '.' + a[1].substr(distance);\n    }\n  }\n  // Remove multiple leading zeros to prevent interpretation as octal number\n  s = s.replace(/^0*(\\d)/g, '$1');\n  return Number(s) * sign;\n}\n\n/**\n * Ensures that the given number is really a number.\n * <p>\n * If it already is a number, the number will be returned.\n * Otherwise a Number is created.\n *\n * @param {number|string} number may be of type number or string.\n */\nexport function ensure(number) {\n  if (objects.isNullOrUndefined(number)) {\n    return number;\n  }\n  return Number(number);\n}\n\n/**\n * Returns true if the given number is of type number but not NaN.\n */\nexport function isNumber(number) {\n  return typeof number === 'number' && !isNaN(number);\n}\n\n/**\n * Returns true if the given number is an integer.\n */\nexport function isInteger(number) {\n  return isNumber(number) && isFinite(number) && Math.floor(number) === number;\n}\n\nexport function _setCorrelationCounter(val) {\n  _correlationCounter = val;\n}\n\nexport default {\n  correlationId,\n  ensure,\n  isNumber,\n  isInteger,\n  randomId,\n  round,\n  shiftDecimalPoint,\n  toBase62\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}