{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension } from '../index';\nexport default class GroupLayout extends AbstractLayout {\n  constructor(group) {\n    super();\n    this.group = group;\n  }\n  layout($container) {\n    let htmlComp = this.group.htmlComp;\n    let containerSize = htmlComp.availableSize().subtract(htmlComp.insets());\n    let htmlHeader = this.group.htmlHeader;\n    let headerSize = htmlHeader.prefSize({\n      widthHint: containerSize.width\n    });\n    headerSize.width = containerSize.width;\n    headerSize = headerSize.subtract(htmlHeader.margins());\n    htmlHeader.setSize(headerSize);\n    let htmlFooter = this.group.htmlFooter;\n    if (htmlFooter.isVisible()) {\n      let footerSize = htmlFooter.prefSize({\n        includeMargin: false,\n        useCssSize: true\n      });\n      footerSize.width = containerSize.width;\n      htmlFooter.setSize(footerSize.subtract(htmlFooter.margins()));\n    }\n\n    // 1st condition: Set size only if group is expanded\n    // 2nd condition: There is no need to update it during the expand animation (the body will be layouted correctly before the animation starts)\n    // 3rd condition: When Group.setCollapsed(false) has been called an event is triggered that might causes invalidating layout on other all groups (inclusive currently expanding group).\n    //                The body of the currently expanding group is not rendered at this time.\n    // 4th condition: When body is invisible by property (bodyVisible)\n    if (this.group.collapsed || this.group.bodyAnimating || !this.group.body.rendered || !this.group.body.isVisible()) {\n      return;\n    }\n    let htmlBody = this.group.body.htmlComp;\n    let bodySize = containerSize.subtract(htmlBody.margins());\n    bodySize.height -= headerSize.height;\n    if (htmlFooter.isVisible()) {\n      bodySize.height -= htmlFooter.prefSize(true).height;\n    }\n    htmlBody.setSize(bodySize);\n  }\n  invalidate(htmlSource) {\n    let htmlBody = this.group.body.htmlComp;\n    // If a child triggers a layout invalidation, the animation should be stopped and restarted because the body will likely have another height.\n    // This will happen for sure if a child is an image which will be loaded during the animation.\n    if (htmlBody && this.group.bodyAnimating && htmlSource && htmlSource.isDescendantOf(this.group.htmlComp)) {\n      // Stop running animation\n      this.group.body.$container.stop();\n\n      // Resize to new height\n      this.group.resizeBody();\n    }\n  }\n  preferredLayoutSize($container, options) {\n    options = options || {};\n    let prefSize;\n    let htmlComp = this.group.htmlComp;\n    let htmlHeader = this.group.htmlHeader;\n    let htmlBody = this.group.body.htmlComp;\n    let htmlFooter = this.group.htmlFooter;\n\n    // HeightHint not supported\n    options.heightHint = null;\n    if (this.group.bodyAnimating) {\n      // Return the current size when the body is collapsing or expanding\n      // so that the widgets on the bottom and on top move smoothly with the animation\n      prefSize = htmlBody.size(true);\n    } else if (this.group.collapsed || !this.group.body.rendered || !this.group.body.isVisible()) {\n      // Body may not be rendered even if collapsed is false if property has changed but _renderCollapse not called yet\n      // (if revalidateLayoutTree is called during collapsed property event)\n      prefSize = new Dimension(0, 0);\n    } else {\n      prefSize = htmlBody.prefSize(options).add(htmlBody.margins());\n    }\n    prefSize = prefSize.add(htmlComp.insets({\n      includeMargin: true\n    }));\n    prefSize.height += htmlHeader.prefSize(options).add(htmlHeader.margins()).height;\n    if (htmlFooter.isVisible()) {\n      prefSize.height += htmlFooter.prefSize({\n        includeMargin: true,\n        useCssSize: true\n      }).height;\n    }\n    return prefSize;\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","GroupLayout","constructor","group","layout","$container","htmlComp","containerSize","availableSize","subtract","insets","htmlHeader","headerSize","prefSize","widthHint","width","margins","setSize","htmlFooter","isVisible","footerSize","includeMargin","useCssSize","collapsed","bodyAnimating","body","rendered","htmlBody","bodySize","height","invalidate","htmlSource","isDescendantOf","stop","resizeBody","preferredLayoutSize","options","heightHint","size","add"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/group/GroupLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension} from '../index';\n\nexport default class GroupLayout extends AbstractLayout {\n\n  constructor(group) {\n    super();\n    this.group = group;\n  }\n\n  layout($container) {\n    let htmlComp = this.group.htmlComp;\n    let containerSize = htmlComp.availableSize()\n      .subtract(htmlComp.insets());\n\n    let htmlHeader = this.group.htmlHeader;\n    let headerSize = htmlHeader.prefSize({\n      widthHint: containerSize.width\n    });\n    headerSize.width = containerSize.width;\n    headerSize = headerSize.subtract(htmlHeader.margins());\n    htmlHeader.setSize(headerSize);\n\n    let htmlFooter = this.group.htmlFooter;\n    if (htmlFooter.isVisible()) {\n      let footerSize = htmlFooter.prefSize({\n        includeMargin: false,\n        useCssSize: true\n      });\n      footerSize.width = containerSize.width;\n      htmlFooter.setSize(footerSize.subtract(htmlFooter.margins()));\n    }\n\n    // 1st condition: Set size only if group is expanded\n    // 2nd condition: There is no need to update it during the expand animation (the body will be layouted correctly before the animation starts)\n    // 3rd condition: When Group.setCollapsed(false) has been called an event is triggered that might causes invalidating layout on other all groups (inclusive currently expanding group).\n    //                The body of the currently expanding group is not rendered at this time.\n    // 4th condition: When body is invisible by property (bodyVisible)\n    if (this.group.collapsed || this.group.bodyAnimating || !this.group.body.rendered || !this.group.body.isVisible()) {\n      return;\n    }\n\n    let htmlBody = this.group.body.htmlComp;\n    let bodySize = containerSize.subtract(htmlBody.margins());\n    bodySize.height -= headerSize.height;\n    if (htmlFooter.isVisible()) {\n      bodySize.height -= htmlFooter.prefSize(true).height;\n    }\n    htmlBody.setSize(bodySize);\n  }\n\n  invalidate(htmlSource) {\n    let htmlBody = this.group.body.htmlComp;\n    // If a child triggers a layout invalidation, the animation should be stopped and restarted because the body will likely have another height.\n    // This will happen for sure if a child is an image which will be loaded during the animation.\n    if (htmlBody && this.group.bodyAnimating && htmlSource && htmlSource.isDescendantOf(this.group.htmlComp)) {\n      // Stop running animation\n      this.group.body.$container.stop();\n\n      // Resize to new height\n      this.group.resizeBody();\n    }\n  }\n\n  preferredLayoutSize($container, options) {\n    options = options || {};\n    let prefSize;\n    let htmlComp = this.group.htmlComp;\n    let htmlHeader = this.group.htmlHeader;\n    let htmlBody = this.group.body.htmlComp;\n    let htmlFooter = this.group.htmlFooter;\n\n    // HeightHint not supported\n    options.heightHint = null;\n\n    if (this.group.bodyAnimating) {\n      // Return the current size when the body is collapsing or expanding\n      // so that the widgets on the bottom and on top move smoothly with the animation\n      prefSize = htmlBody.size(true);\n    } else if (this.group.collapsed || !this.group.body.rendered || !this.group.body.isVisible()) {\n      // Body may not be rendered even if collapsed is false if property has changed but _renderCollapse not called yet\n      // (if revalidateLayoutTree is called during collapsed property event)\n      prefSize = new Dimension(0, 0);\n    } else {\n      prefSize = htmlBody.prefSize(options)\n        .add(htmlBody.margins());\n    }\n    prefSize = prefSize.add(htmlComp.insets({\n      includeMargin: true\n    }));\n    prefSize.height += htmlHeader.prefSize(options)\n      .add(htmlHeader.margins()).height;\n    if (htmlFooter.isVisible()) {\n      prefSize.height += htmlFooter.prefSize({\n        includeMargin: true,\n        useCssSize: true\n      }).height;\n    }\n    return prefSize;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}