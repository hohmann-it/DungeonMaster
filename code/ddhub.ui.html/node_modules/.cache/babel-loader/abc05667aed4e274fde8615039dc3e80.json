{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { ModelAdapter } from '../index';\nexport default class FormAdapter extends ModelAdapter {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @override\n   */\n  _initModel(model, parent) {\n    model = super._initModel(model, parent);\n    // Set logical grid to null -> Calculation happens on server side\n    model.logicalGrid = null;\n    return model;\n  }\n  _onWidgetEvent(event) {\n    if (event.type === 'abort') {\n      this._onWidgetAbort(event);\n    } else if (event.type === 'close') {\n      this._onWidgetClose(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n  _onWidgetAbort(event) {\n    // Do not close the form immediately, server will send the close event\n    event.preventDefault();\n    this._send('formClosing');\n    // Waiting for the current request to complete is necessary to be able to check whether the form is still open after the close request.\n    this.session.onRequestsDone(() => {\n      if (this.widget) {\n        this.widget._afterAbort();\n      }\n    });\n  }\n  _onWidgetClose(event) {\n    this._send('close');\n  }\n  onModelAction(event) {\n    if (event.type === 'requestFocus') {\n      this._onRequestFocus(event);\n    } else if (event.type === 'requestInput') {\n      this._onRequestInput(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n  _onRequestFocus(event) {\n    this.session.getOrCreateWidget(event.formField, this.widget).focus();\n  }\n  _onRequestInput(event) {\n    this.session.getOrCreateWidget(event.formField, this.widget).requestInput();\n  }\n}","map":{"version":3,"names":["ModelAdapter","FormAdapter","constructor","_initModel","model","parent","logicalGrid","_onWidgetEvent","event","type","_onWidgetAbort","_onWidgetClose","preventDefault","_send","session","onRequestsDone","widget","_afterAbort","onModelAction","_onRequestFocus","_onRequestInput","getOrCreateWidget","formField","focus","requestInput"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/FormAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {ModelAdapter} from '../index';\n\nexport default class FormAdapter extends ModelAdapter {\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * @override\n   */\n  _initModel(model, parent) {\n    model = super._initModel(model, parent);\n    // Set logical grid to null -> Calculation happens on server side\n    model.logicalGrid = null;\n    return model;\n  }\n\n  _onWidgetEvent(event) {\n    if (event.type === 'abort') {\n      this._onWidgetAbort(event);\n    } else if (event.type === 'close') {\n      this._onWidgetClose(event);\n    } else {\n      super._onWidgetEvent(event);\n    }\n  }\n\n  _onWidgetAbort(event) {\n    // Do not close the form immediately, server will send the close event\n    event.preventDefault();\n\n    this._send('formClosing');\n    // Waiting for the current request to complete is necessary to be able to check whether the form is still open after the close request.\n    this.session.onRequestsDone(() => {\n      if (this.widget) {\n        this.widget._afterAbort();\n      }\n    });\n  }\n\n  _onWidgetClose(event) {\n    this._send('close');\n  }\n\n  onModelAction(event) {\n    if (event.type === 'requestFocus') {\n      this._onRequestFocus(event);\n    } else if (event.type === 'requestInput') {\n      this._onRequestInput(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n\n  _onRequestFocus(event) {\n    this.session.getOrCreateWidget(event.formField, this.widget).focus();\n  }\n\n  _onRequestInput(event) {\n    this.session.getOrCreateWidget(event.formField, this.widget).requestInput();\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAY,QAAO,UAAU;AAErC,eAAe,MAAMC,WAAW,SAASD,YAAY,CAAC;EAEpDE,WAAW,GAAG;IACZ,KAAK,EAAE;EACT;;EAEA;AACF;AACA;EACEC,UAAU,CAACC,KAAK,EAAEC,MAAM,EAAE;IACxBD,KAAK,GAAG,KAAK,CAACD,UAAU,CAACC,KAAK,EAAEC,MAAM,CAAC;IACvC;IACAD,KAAK,CAACE,WAAW,GAAG,IAAI;IACxB,OAAOF,KAAK;EACd;EAEAG,cAAc,CAACC,KAAK,EAAE;IACpB,IAAIA,KAAK,CAACC,IAAI,KAAK,OAAO,EAAE;MAC1B,IAAI,CAACC,cAAc,CAACF,KAAK,CAAC;IAC5B,CAAC,MAAM,IAAIA,KAAK,CAACC,IAAI,KAAK,OAAO,EAAE;MACjC,IAAI,CAACE,cAAc,CAACH,KAAK,CAAC;IAC5B,CAAC,MAAM;MACL,KAAK,CAACD,cAAc,CAACC,KAAK,CAAC;IAC7B;EACF;EAEAE,cAAc,CAACF,KAAK,EAAE;IACpB;IACAA,KAAK,CAACI,cAAc,EAAE;IAEtB,IAAI,CAACC,KAAK,CAAC,aAAa,CAAC;IACzB;IACA,IAAI,CAACC,OAAO,CAACC,cAAc,CAAC,MAAM;MAChC,IAAI,IAAI,CAACC,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;MAC3B;IACF,CAAC,CAAC;EACJ;EAEAN,cAAc,CAACH,KAAK,EAAE;IACpB,IAAI,CAACK,KAAK,CAAC,OAAO,CAAC;EACrB;EAEAK,aAAa,CAACV,KAAK,EAAE;IACnB,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;MACjC,IAAI,CAACU,eAAe,CAACX,KAAK,CAAC;IAC7B,CAAC,MAAM,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;MACxC,IAAI,CAACW,eAAe,CAACZ,KAAK,CAAC;IAC7B,CAAC,MAAM;MACL,KAAK,CAACU,aAAa,CAACV,KAAK,CAAC;IAC5B;EACF;EAEAW,eAAe,CAACX,KAAK,EAAE;IACrB,IAAI,CAACM,OAAO,CAACO,iBAAiB,CAACb,KAAK,CAACc,SAAS,EAAE,IAAI,CAACN,MAAM,CAAC,CAACO,KAAK,EAAE;EACtE;EAEAH,eAAe,CAACZ,KAAK,EAAE;IACrB,IAAI,CAACM,OAAO,CAACO,iBAAiB,CAACb,KAAK,CAACc,SAAS,EAAE,IAAI,CAACN,MAAM,CAAC,CAACQ,YAAY,EAAE;EAC7E;AACF"},"metadata":{},"sourceType":"module"}