{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { App, objects, Outline, scout, TreeAdapter } from '../../index';\nexport default class OutlineAdapter extends TreeAdapter {\n  constructor() {\n    super();\n    this._filterDirty = false;\n    this._nodeIdToRowMap = {};\n    this._detailTableRowInitHandler = this._onDetailTableRowInit.bind(this);\n    this._detailTableRowsInsertedHandler = this._onDetailTableRowsInserted.bind(this);\n    this._detailTableFilterRemoved = this._onDetailTableFilterRemoved.bind(this);\n  }\n  _onPageChanged(event) {\n    let page = this.widget._nodeById(event.nodeId);\n    page.overviewIconId = event.overviewIconId;\n    page.detailFormVisible = event.detailFormVisible;\n    let detailForm = this.session.getOrCreateWidget(event.detailForm, this.widget);\n    page.setDetailForm(detailForm);\n    page.navigateButtonsVisible = event.navigateButtonsVisible;\n    page.detailTableVisible = event.detailTableVisible;\n    let detailTable = this.session.getOrCreateWidget(event.detailTable, this.widget);\n    if (page.detailTable !== detailTable) {\n      if (page.detailTable) {\n        this._destroyDetailTable(page);\n      }\n      page.setDetailTable(detailTable);\n      if (page.detailTable) {\n        this._initDetailTable(page);\n      }\n    }\n    this.widget.pageChanged(page);\n  }\n  onModelAction(event) {\n    if (event.type === 'pageChanged') {\n      this._onPageChanged(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n  _initDetailTable(page) {\n    // link already existing rows now\n    page.detailTable.rows.forEach(this._linkNodeWithRow.bind(this));\n    // rows which are inserted later are linked by _onDetailTableRowInit\n    page.detailTable.on('rowInit', this._detailTableRowInitHandler);\n    page.detailTable.on('rowsInserted', this._detailTableRowsInsertedHandler);\n    page.detailTable.on('filterRemoved', this._detailTableFilterRemoved);\n  }\n  _destroyDetailTable(page) {\n    this._nodeIdToRowMap = {};\n    page.detailTable.rows.forEach(this._unlinkNodeWithRow.bind(this));\n    page.detailTable.off('rowInit', this._detailTableRowInitHandler);\n    page.detailTable.off('rowsInserted', this._detailTableRowsInsertedHandler);\n    page.detailTable.off('filterRemoved', this._detailTableFilterRemoved);\n  }\n  _linkNodeWithRow(row) {\n    scout.assertParameter('row', row);\n    let node,\n      nodeId = row.nodeId;\n    if (nodeId === undefined) {\n      // nodeId is undefined if no node exists for that row (e.g. happens if the page containing the row is a leaf page)\n      return;\n    }\n    node = this.widget.nodesMap[nodeId];\n    if (node) {\n      node.linkWithRow(row);\n    } else {\n      // Prepare for linking later because node has not been inserted yet\n      // see: #_linkNodeWithRowLater\n      this._nodeIdToRowMap[nodeId] = row;\n    }\n  }\n  _unlinkNodeWithRow(row) {\n    let node = this.widget.nodesMap[row.nodeId];\n    if (node) {\n      node.unlinkWithRow(row);\n    }\n  }\n  _onDetailTableRowInit(event) {\n    this._linkNodeWithRow(event.row);\n    let node = this.widget.nodesMap[event.row.nodeId];\n    if (this.widget.isSelectedNode(node) && !this.widget.detailContent) {\n      // Table row detail could not be created because the link from page to row was missing at the time the node got selected -> do it now\n      this.widget.updateDetailContent();\n    }\n  }\n  _onDetailTableRowsInserted(event) {\n    let table = event.source;\n    if (this._filterDirty || table._filterCount() > 0 && event.rows.some(row => !row.filterAccepted)) {\n      this._filterDirty = false;\n      // Explicitly call filter if some of the new rows are not accepted.\n      // If they are accepted, table.insertRows() will trigger a filter event by itself that will be mediated to the outline by OutlineMediator.js\n      this.widget.filter();\n    }\n  }\n  _onDetailTableFilterRemoved(event) {\n    let table = event.source;\n    if (table.modelAdapter && table.modelAdapter._rebuildingTable) {\n      // If a column is removed, the tableAdapter prevents filtering because the flag _rebuildingTable is true\n      // -> the outline does not get informed, hence the nodes stay invisible.\n      this._filterDirty = true;\n    }\n  }\n\n  /**\n   * Link node with row, if it hasn't been linked yet.\n   */\n  _linkNodeWithRowLater(page) {\n    if (!page.parentNode || !page.parentNode.detailTable) {\n      return;\n    }\n    if (!this._nodeIdToRowMap.hasOwnProperty(page.id)) {\n      return;\n    }\n    let row = this._nodeIdToRowMap[page.id];\n    page.linkWithRow(row);\n    delete this._nodeIdToRowMap[page.id];\n  }\n\n  /**\n   * Static method to modify the prototype of Outline.\n   */\n  static modifyOutlinePrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n    objects.replacePrototypeFunction(Outline, '_computeDetailContent', OutlineAdapter._computeDetailContentRemote, true);\n    objects.replacePrototypeFunction(Outline, 'updateDetailMenus', OutlineAdapter.updateDetailMenusRemote, true);\n    objects.replacePrototypeFunction(Outline, '_initTreeNodeInternal', OutlineAdapter._initTreeNodeInternalRemote, true);\n  }\n\n  /**\n   * Replacement for Outline#_computeDetailContent(). 'This' points to the outline.\n   */\n  static _computeDetailContentRemote() {\n    if (!this.modelAdapter) {\n      return this._computeDetailContentOrig();\n    }\n    let selectedPage = this.selectedNode();\n    if (!selectedPage) {\n      // Detail content is shown for the selected node only\n      return null;\n    }\n\n    // if there is a detail form, use this\n    if (selectedPage.detailForm || selectedPage.detailFormResolved) {\n      // If there is a detail form -> return (and set flag to true to make updateDetailMenusRemote work)\n      selectedPage.detailFormResolved = true;\n      return this._computeDetailContentOrig();\n    }\n\n    // It is not known yet whether there is a detail form -> wait for the requests to be processed before showing the table row detail\n    if (!this.session.areRequestsPending() && !this.session.areEventsQueued()) {\n      // There are no requests pending -> return (and set flag to true to make updateDetailMenusRemote work)\n      selectedPage.detailFormResolved = true;\n      return this._computeDetailContentOrig();\n    }\n\n    // Wait for the requests to complete\n    this.session.listen().done(function (selectedPage) {\n      if (selectedPage.detailFormResolved) {\n        // No need to update detail content again if resolved is true\n        return;\n      }\n      // Make sure the next time the page is selected it returns immediately and does not wait for requests to be completed\n      selectedPage.detailFormResolved = true;\n      this.updateDetailContent();\n    }.bind(this, selectedPage));\n  }\n\n  /**\n   * Replacement for Outline#updateDetailMenusRemote(). 'This' points to the outline.\n   */\n  static updateDetailMenusRemote() {\n    if (!this.modelAdapter) {\n      return this.updateDetailMenusOrig();\n    }\n    if (this.selectedNode() && this.selectedNode().detailFormResolved) {\n      return this.updateDetailMenusOrig();\n    }\n  }\n\n  /**\n   * Replaced to make sure page is correctly initialized (linked with row).\n   * This cannot be done using pageInit event because the page needs to be initialized during the outline initialization\n   * and the event listener can only be attached afterwards.\n   */\n  static _initTreeNodeInternalRemote(page, parentNode) {\n    this._initTreeNodeInternalOrig(page, parentNode);\n    if (!this.modelAdapter) {\n      return;\n    }\n    // The current method may be called during init of the Outline\n    // -> widget is not set yet but the following methods need it\n    this.modelAdapter.widget = this;\n    if (page.detailTable) {\n      this.modelAdapter._initDetailTable(page);\n    }\n    this.modelAdapter._linkNodeWithRowLater(page);\n  }\n}\nApp.addListener('bootstrap', OutlineAdapter.modifyOutlinePrototype);","map":{"version":3,"names":["App","objects","Outline","scout","TreeAdapter","OutlineAdapter","constructor","_filterDirty","_nodeIdToRowMap","_detailTableRowInitHandler","_onDetailTableRowInit","bind","_detailTableRowsInsertedHandler","_onDetailTableRowsInserted","_detailTableFilterRemoved","_onDetailTableFilterRemoved","_onPageChanged","event","page","widget","_nodeById","nodeId","overviewIconId","detailFormVisible","detailForm","session","getOrCreateWidget","setDetailForm","navigateButtonsVisible","detailTableVisible","detailTable","_destroyDetailTable","setDetailTable","_initDetailTable","pageChanged","onModelAction","type","rows","forEach","_linkNodeWithRow","on","_unlinkNodeWithRow","off","row","assertParameter","node","undefined","nodesMap","linkWithRow","unlinkWithRow","isSelectedNode","detailContent","updateDetailContent","table","source","_filterCount","some","filterAccepted","filter","modelAdapter","_rebuildingTable","_linkNodeWithRowLater","parentNode","hasOwnProperty","id","modifyOutlinePrototype","get","remote","replacePrototypeFunction","_computeDetailContentRemote","updateDetailMenusRemote","_initTreeNodeInternalRemote","_computeDetailContentOrig","selectedPage","selectedNode","detailFormResolved","areRequestsPending","areEventsQueued","listen","done","updateDetailMenusOrig","_initTreeNodeInternalOrig","addListener"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/outline/OutlineAdapter.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {App, objects, Outline, scout, TreeAdapter} from '../../index';\n\nexport default class OutlineAdapter extends TreeAdapter {\n\n  constructor() {\n    super();\n    this._filterDirty = false;\n    this._nodeIdToRowMap = {};\n    this._detailTableRowInitHandler = this._onDetailTableRowInit.bind(this);\n    this._detailTableRowsInsertedHandler = this._onDetailTableRowsInserted.bind(this);\n    this._detailTableFilterRemoved = this._onDetailTableFilterRemoved.bind(this);\n  }\n\n  _onPageChanged(event) {\n    let page = this.widget._nodeById(event.nodeId);\n    page.overviewIconId = event.overviewIconId;\n\n    page.detailFormVisible = event.detailFormVisible;\n    let detailForm = this.session.getOrCreateWidget(event.detailForm, this.widget);\n    page.setDetailForm(detailForm);\n\n    page.navigateButtonsVisible = event.navigateButtonsVisible;\n    page.detailTableVisible = event.detailTableVisible;\n    let detailTable = this.session.getOrCreateWidget(event.detailTable, this.widget);\n    if (page.detailTable !== detailTable) {\n      if (page.detailTable) {\n        this._destroyDetailTable(page);\n      }\n      page.setDetailTable(detailTable);\n      if (page.detailTable) {\n        this._initDetailTable(page);\n      }\n    }\n\n    this.widget.pageChanged(page);\n  }\n\n  onModelAction(event) {\n    if (event.type === 'pageChanged') {\n      this._onPageChanged(event);\n    } else {\n      super.onModelAction(event);\n    }\n  }\n\n  _initDetailTable(page) {\n    // link already existing rows now\n    page.detailTable.rows.forEach(this._linkNodeWithRow.bind(this));\n    // rows which are inserted later are linked by _onDetailTableRowInit\n    page.detailTable.on('rowInit', this._detailTableRowInitHandler);\n    page.detailTable.on('rowsInserted', this._detailTableRowsInsertedHandler);\n    page.detailTable.on('filterRemoved', this._detailTableFilterRemoved);\n  }\n\n  _destroyDetailTable(page) {\n    this._nodeIdToRowMap = {};\n    page.detailTable.rows.forEach(this._unlinkNodeWithRow.bind(this));\n    page.detailTable.off('rowInit', this._detailTableRowInitHandler);\n    page.detailTable.off('rowsInserted', this._detailTableRowsInsertedHandler);\n    page.detailTable.off('filterRemoved', this._detailTableFilterRemoved);\n  }\n\n  _linkNodeWithRow(row) {\n    scout.assertParameter('row', row);\n    let node,\n      nodeId = row.nodeId;\n\n    if (nodeId === undefined) {\n      // nodeId is undefined if no node exists for that row (e.g. happens if the page containing the row is a leaf page)\n      return;\n    }\n\n    node = this.widget.nodesMap[nodeId];\n    if (node) {\n      node.linkWithRow(row);\n    } else {\n      // Prepare for linking later because node has not been inserted yet\n      // see: #_linkNodeWithRowLater\n      this._nodeIdToRowMap[nodeId] = row;\n    }\n  }\n\n  _unlinkNodeWithRow(row) {\n    let node = this.widget.nodesMap[row.nodeId];\n    if (node) {\n      node.unlinkWithRow(row);\n    }\n  }\n\n  _onDetailTableRowInit(event) {\n    this._linkNodeWithRow(event.row);\n\n    let node = this.widget.nodesMap[event.row.nodeId];\n    if (this.widget.isSelectedNode(node) && !this.widget.detailContent) {\n      // Table row detail could not be created because the link from page to row was missing at the time the node got selected -> do it now\n      this.widget.updateDetailContent();\n    }\n  }\n\n  _onDetailTableRowsInserted(event) {\n    let table = event.source;\n\n    if (this._filterDirty ||\n      (table._filterCount() > 0 && event.rows.some(row => !row.filterAccepted))) {\n      this._filterDirty = false;\n      // Explicitly call filter if some of the new rows are not accepted.\n      // If they are accepted, table.insertRows() will trigger a filter event by itself that will be mediated to the outline by OutlineMediator.js\n      this.widget.filter();\n    }\n  }\n\n  _onDetailTableFilterRemoved(event) {\n    let table = event.source;\n    if (table.modelAdapter && table.modelAdapter._rebuildingTable) {\n      // If a column is removed, the tableAdapter prevents filtering because the flag _rebuildingTable is true\n      // -> the outline does not get informed, hence the nodes stay invisible.\n      this._filterDirty = true;\n    }\n  }\n\n  /**\n   * Link node with row, if it hasn't been linked yet.\n   */\n  _linkNodeWithRowLater(page) {\n    if (!page.parentNode || !page.parentNode.detailTable) {\n      return;\n    }\n    if (!this._nodeIdToRowMap.hasOwnProperty(page.id)) {\n      return;\n    }\n    let row = this._nodeIdToRowMap[page.id];\n    page.linkWithRow(row);\n    delete this._nodeIdToRowMap[page.id];\n  }\n\n  /**\n   * Static method to modify the prototype of Outline.\n   */\n  static modifyOutlinePrototype() {\n    if (!App.get().remote) {\n      return;\n    }\n\n    objects.replacePrototypeFunction(Outline, '_computeDetailContent', OutlineAdapter._computeDetailContentRemote, true);\n    objects.replacePrototypeFunction(Outline, 'updateDetailMenus', OutlineAdapter.updateDetailMenusRemote, true);\n    objects.replacePrototypeFunction(Outline, '_initTreeNodeInternal', OutlineAdapter._initTreeNodeInternalRemote, true);\n  }\n\n  /**\n   * Replacement for Outline#_computeDetailContent(). 'This' points to the outline.\n   */\n  static _computeDetailContentRemote() {\n    if (!this.modelAdapter) {\n      return this._computeDetailContentOrig();\n    }\n\n    let selectedPage = this.selectedNode();\n    if (!selectedPage) {\n      // Detail content is shown for the selected node only\n      return null;\n    }\n\n    // if there is a detail form, use this\n    if (selectedPage.detailForm || selectedPage.detailFormResolved) {\n      // If there is a detail form -> return (and set flag to true to make updateDetailMenusRemote work)\n      selectedPage.detailFormResolved = true;\n      return this._computeDetailContentOrig();\n    }\n\n    // It is not known yet whether there is a detail form -> wait for the requests to be processed before showing the table row detail\n    if (!this.session.areRequestsPending() && !this.session.areEventsQueued()) {\n      // There are no requests pending -> return (and set flag to true to make updateDetailMenusRemote work)\n      selectedPage.detailFormResolved = true;\n      return this._computeDetailContentOrig();\n    }\n\n    // Wait for the requests to complete\n    this.session.listen().done(function(selectedPage) {\n      if (selectedPage.detailFormResolved) {\n        // No need to update detail content again if resolved is true\n        return;\n      }\n      // Make sure the next time the page is selected it returns immediately and does not wait for requests to be completed\n      selectedPage.detailFormResolved = true;\n      this.updateDetailContent();\n    }.bind(this, selectedPage));\n  }\n\n  /**\n   * Replacement for Outline#updateDetailMenusRemote(). 'This' points to the outline.\n   */\n  static updateDetailMenusRemote() {\n    if (!this.modelAdapter) {\n      return this.updateDetailMenusOrig();\n    }\n    if (this.selectedNode() && this.selectedNode().detailFormResolved) {\n      return this.updateDetailMenusOrig();\n    }\n  }\n\n  /**\n   * Replaced to make sure page is correctly initialized (linked with row).\n   * This cannot be done using pageInit event because the page needs to be initialized during the outline initialization\n   * and the event listener can only be attached afterwards.\n   */\n  static _initTreeNodeInternalRemote(page, parentNode) {\n    this._initTreeNodeInternalOrig(page, parentNode);\n    if (!this.modelAdapter) {\n      return;\n    }\n    // The current method may be called during init of the Outline\n    // -> widget is not set yet but the following methods need it\n    this.modelAdapter.widget = this;\n    if (page.detailTable) {\n      this.modelAdapter._initDetailTable(page);\n    }\n    this.modelAdapter._linkNodeWithRowLater(page);\n  }\n}\n\nApp.addListener('bootstrap', OutlineAdapter.modifyOutlinePrototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}