{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\nimport { App, Device, ObjectFactory, objects, strings, ValueField, widgets } from './index';\nimport $ from 'jquery';\nlet $activeElements = null;\nlet objectFactories = {};\n\n/**\n * Returns the first of the given arguments that is not null or undefined. If no such element\n * is present, the last argument is returned. If no arguments are given, undefined is returned.\n */\nexport function nvl() {\n  let result;\n  for (let i = 0; i < arguments.length; i++) {\n    result = i < 0 || arguments.length <= i ? undefined : arguments[i];\n    if (result !== undefined && result !== null) {\n      break;\n    }\n  }\n  return result;\n}\n\n/**\n * Use this method in your functions to assert that a mandatory parameter is passed\n * to the function. Throws an error when value is not set.\n *\n * @template T\n * @param {string} parameterName\n * @param {T} [value]\n * @param {*} [type] if this optional parameter is set, the given value must be of this type (instanceof check)\n * @return {T} the value\n */\nexport function assertParameter(parameterName, value, type) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required parameter \\'' + parameterName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Parameter \\'' + parameterName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Use this method to assert that a mandatory property is set. Throws an error when value is not set.\n *\n * @param [type] if this parameter is set, the value must be of this type (instanceof check)\n * @return {any} the value (for direct assignment)\n */\nexport function assertProperty(object, propertyName, type) {\n  let value = object[propertyName];\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required property \\'' + propertyName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Property \\'' + propertyName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Throws an error if the given value is null or undefined. Otherwise, the value is returned.\n *\n * @template T\n * @param {T} value - value to check\n * @param {string} [msg] - optional error message when the assertion fails\n * @return {T}\n */\nexport function assertValue(value, msg) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error(msg || 'Missing value');\n  }\n  return value;\n}\n\n/**\n * Throws an error if the given value is not an instance of the given type. Otherwise, the value is returned.\n *\n * @param {*} value - value to check\n * @param {*} type - type to check against with \"instanceof\"\n * @param {string} [msg] - optional error message when the assertion fails\n * @return {*}\n */\nexport function assertInstance(value, type, msg) {\n  if (!(value instanceof type)) {\n    throw new Error(msg || 'Value has wrong type');\n  }\n  return value;\n}\n\n/**\n * Checks if one of the arguments from 1-n is equal to the first argument.\n * @param value\n * @param args to check against the value, may be an array or a variable argument list.\n */\nexport function isOneOf(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (args.length === 0) {\n    return false;\n  }\n  let argsToCheck = args;\n  if (args.length === 1 && Array.isArray(args[0])) {\n    argsToCheck = args[0];\n  }\n  return argsToCheck.indexOf(value) !== -1;\n}\n\n/**\n * Creates a new object instance.<p> Delegates the create call to scout.ObjectFactory#create.\n * @returns {object}\n */\nexport function create(objectType, model, options) {\n  return ObjectFactory.get().create(objectType, model, options);\n}\n\n/**\n * Prepares the DOM for scout in the given document. This should be called once while initializing scout.\n * If the target document is not specified, the global \"document\" variable is used instead.\n *\n * This is used by apps (App, LoginApp, LogoutApp)\n *\n * Currently it does the following:\n * - Remove the <noscript> tag (obviously there is no need for it).\n * - Remove <scout-text> tags (they must have been processed before, see texts.readFromDOM())\n * - Remove <scout-version> tag (it must have been processed before, see scout.App._initVersion())\n * - Add a device / browser class to the body tag to allow for device specific CSS rules.\n * - If the browser is Google Chrome, add a special meta header to prevent automatic translation.\n */\nexport function prepareDOM(targetDocument) {\n  targetDocument = targetDocument || document;\n  // Cleanup DOM\n  $('noscript', targetDocument).remove();\n  $('scout-text', targetDocument).remove();\n  $('scout-version', targetDocument).remove();\n  $('body', targetDocument).addDeviceClass();\n\n  // Prevent \"Do you want to translate this page?\" in Google Chrome\n  if (Device.get().browser === Device.Browser.CHROME) {\n    let metaNoTranslate = '<meta name=\"google\" content=\"notranslate\" />';\n    let $title = $('head > title', targetDocument);\n    if ($title.length === 0) {\n      // Add to end of head\n      $('head', targetDocument).append(metaNoTranslate);\n    } else {\n      $title.after(metaNoTranslate);\n    }\n  }\n}\n\n/**\n * Installs a global 'mousedown' interceptor to invoke 'aboutToBlurByMouseDown' on value field before anything else gets executed.\n */\nexport function installGlobalMouseDownInterceptor(myDocument) {\n  myDocument.addEventListener('mousedown', event => {\n    ValueField.invokeValueFieldAboutToBlurByMouseDown(event.target || event.srcElement);\n  }, true); // true=the event handler is executed in the capturing phase\n}\n\n/**\n * Because Firefox does not set the active state of a DOM element when the mousedown event\n * for that element is prevented, we set an 'active' CSS class instead. This means in the\n * CSS we must deal with :active and with .active, where we need same behavior for the\n * active state across all browsers.\n * <p>\n * Typically you'd write something like this in your CSS:\n *   button:active, button.active { ... }\n */\nexport function installSyntheticActiveStateHandler(myDocument) {\n  if (Device.get().requiresSyntheticActiveState()) {\n    $activeElements = [];\n    $(myDocument).on('mousedown', event => {\n      let $element = $(event.target);\n      while ($element.length) {\n        $activeElements.push($element.addClass('active'));\n        $element = $element.parent();\n      }\n    }).on('mouseup', () => {\n      $activeElements.forEach($element => {\n        $element.removeClass('active');\n      });\n      $activeElements = [];\n    });\n  }\n}\n\n/**\n * Resolves the widget using the given widget id or HTML element.\n * <p>\n * If the argument is a string or a number, it will search the widget hierarchy for the given id using Widget#widget(id).\n * If the argument is a HTML or jQuery element, it will use widgets.get() to get the widget which belongs to the given element.\n *\n * @param widgetIdOrElement\n *          a widget ID or a HTML or jQuery element\n * @param [partId]\n *          partId of the session the widget belongs to (optional, only relevant if the\n *          argument is a widget ID). If omitted, the first session is used.\n * @returns {AnyWidget} the widget for the given element or id\n */\nexport function widget(widgetIdOrElement, partId) {\n  if (objects.isNullOrUndefined(widgetIdOrElement)) {\n    return null;\n  }\n  let $elem = widgetIdOrElement;\n  if (typeof widgetIdOrElement === 'string' || typeof widgetIdOrElement === 'number') {\n    // Find widget for ID\n    let session = scout.getSession(partId);\n    if (session) {\n      widgetIdOrElement = strings.asString(widgetIdOrElement);\n      return session.root.widget(widgetIdOrElement);\n    }\n  }\n  return widgets.get($elem);\n}\n\n/**\n * Helper function to get the model adapter for a given adapterId. If there is more than one\n * session, e.g. in case of portlets, the second argument specifies the partId of the session\n * to be queried. If not specified explicitly, the first session is used. If the session or\n * the adapter could not be found, null is returned.\n */\nexport function adapter(adapterId, partId) {\n  if (objects.isNullOrUndefined(adapterId)) {\n    return null;\n  }\n  let session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    return session.modelAdapterRegistry[adapterId];\n  }\n  return null;\n}\nexport function getSession(partId) {\n  let sessions = App.get().sessions;\n  if (!sessions) {\n    return null;\n  }\n  if (objects.isNullOrUndefined(partId)) {\n    return sessions[0];\n  }\n  for (let i = 0; i < sessions.length; i++) {\n    let session = sessions[i];\n    // eslint-disable-next-line eqeqeq\n    if (session.partId == partId) {\n      // <-- compare with '==' is intentional! (NOSONAR)\n      return session;\n    }\n  }\n  return null;\n}\n\n/**\n * This method exports the adapter with the given ID as JSON, it returns an plain object containing the\n * configuration of the adapter. You can transform that object into JSON by calling <code>JSON.stringify</code>.\n * This method can only be called through the browser JavaScript console.\n * Here's an example of how to call the method:\n *\n * JSON.stringify(scout.exportAdapter(4))\n *\n * @param adapterId\n */\nexport function exportAdapter(adapterId, partId) {\n  let session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    let adapter = session.getModelAdapter(adapterId);\n    if (!adapter) {\n      return null;\n    }\n    let adapterData = cloneAdapterData(adapterId);\n    resolveAdapterReferences(adapter, adapterData);\n    adapterData.type = 'model'; // property 'type' is required for models.js\n    return adapterData;\n  }\n\n  // ----- Helper functions -----\n\n  function cloneAdapterData(adapterId) {\n    let adapterData = session.getAdapterData(adapterId);\n    adapterData = $.extend(true, {}, adapterData);\n    return adapterData;\n  }\n  function resolveAdapterReferences(adapter, adapterData) {\n    let tmpAdapter, tmpAdapterData;\n    adapter.widget._widgetProperties.forEach(WidgetPropertyName => {\n      let WidgetPropertyValue = adapterData[WidgetPropertyName];\n      if (!WidgetPropertyValue) {\n        return; // nothing to do when property is null\n      }\n\n      if (Array.isArray(WidgetPropertyValue)) {\n        // value is an array of adapter IDs\n        let adapterDataArray = [];\n        WidgetPropertyValue.forEach(adapterId => {\n          tmpAdapter = session.getModelAdapter(adapterId);\n          tmpAdapterData = cloneAdapterData(adapterId);\n          resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n          adapterDataArray.push(tmpAdapterData);\n        });\n        adapterData[WidgetPropertyName] = adapterDataArray;\n      } else {\n        // value is an adapter ID\n        tmpAdapter = session.getModelAdapter(WidgetPropertyValue);\n        tmpAdapterData = cloneAdapterData(WidgetPropertyValue);\n        resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n        adapterData[WidgetPropertyName] = tmpAdapterData;\n      }\n    });\n    adapterData = adapter.exportAdapterData(adapterData);\n  }\n}\n\n/**\n * Reloads the entire browser window.\n *\n * @param [options]\n * @param [options.schedule]\n *     If true, the page reload is not executed in the current thread but scheduled using setTimeout().\n *     This is useful if the caller wants to execute some other code before the reload. The default is false.\n * @param [options.clearBody]\n *     If true, the body is cleared first before the reload is performed. This is useful to prevent\n *     showing \"old\" content in the browser until the new content arrives. The default is true.\n * @param [options.redirectUrl]\n *      The new URL to load. If not specified, the current location is used (window.location).\n */\nexport function reloadPage(options) {\n  options = options || {};\n  if (options.schedule) {\n    setTimeout(reloadPageImpl);\n  } else {\n    reloadPageImpl();\n  }\n\n  // ----- Helper functions -----\n\n  function reloadPageImpl() {\n    // Hide everything (on entire page, not only $entryPoint)\n    if (nvl(options.clearBody, true)) {\n      $('body').html('');\n    }\n    if (options.redirectUrl) {\n      window.location.href = options.redirectUrl;\n    } else {\n      window.location.reload();\n    }\n  }\n}\nexport function addObjectFactories(factories) {\n  objectFactories = $.extend(objectFactories, factories);\n}\nexport function cloneShallow(template, properties, createUniqueId) {\n  assertParameter('template', template);\n  let clone = Object.create(Object.getPrototypeOf(template));\n  Object.getOwnPropertyNames(template).forEach(key => {\n    clone[key] = template[key];\n  });\n  if (properties) {\n    for (let key in properties) {\n      clone[key] = properties[key];\n    }\n  }\n  if (nvl(createUniqueId, true)) {\n    clone.id = ObjectFactory.get().createUniqueId();\n  }\n  if (clone.cloneOf === undefined) {\n    clone.cloneOf = template;\n  }\n  return clone;\n}\nexport default {\n  nvl,\n  assertParameter,\n  assertProperty,\n  assertValue,\n  assertInstance,\n  isOneOf,\n  create,\n  prepareDOM,\n  installGlobalMouseDownInterceptor,\n  installSyntheticActiveStateHandler,\n  widget,\n  adapter,\n  getSession,\n  exportAdapter,\n  reloadPage,\n  addObjectFactories,\n  objectFactories,\n  cloneShallow\n};","map":{"version":3,"names":["App","Device","ObjectFactory","objects","strings","ValueField","widgets","$","$activeElements","objectFactories","nvl","result","i","length","undefined","assertParameter","parameterName","value","type","isNullOrUndefined","Error","assertProperty","object","propertyName","assertValue","msg","assertInstance","isOneOf","args","argsToCheck","Array","isArray","indexOf","create","objectType","model","options","get","prepareDOM","targetDocument","document","remove","addDeviceClass","browser","Browser","CHROME","metaNoTranslate","$title","append","after","installGlobalMouseDownInterceptor","myDocument","addEventListener","event","invokeValueFieldAboutToBlurByMouseDown","target","srcElement","installSyntheticActiveStateHandler","requiresSyntheticActiveState","on","$element","push","addClass","parent","forEach","removeClass","widget","widgetIdOrElement","partId","$elem","session","scout","getSession","asString","root","adapter","adapterId","modelAdapterRegistry","sessions","exportAdapter","getModelAdapter","adapterData","cloneAdapterData","resolveAdapterReferences","getAdapterData","extend","tmpAdapter","tmpAdapterData","_widgetProperties","WidgetPropertyName","WidgetPropertyValue","adapterDataArray","exportAdapterData","reloadPage","schedule","setTimeout","reloadPageImpl","clearBody","html","redirectUrl","window","location","href","reload","addObjectFactories","factories","cloneShallow","template","properties","createUniqueId","clone","Object","getPrototypeOf","getOwnPropertyNames","key","id","cloneOf"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/scout.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\n\nimport {App, Device, ObjectFactory, objects, strings, ValueField, widgets} from './index';\nimport $ from 'jquery';\n\nlet $activeElements = null;\nlet objectFactories = {};\n\n/**\n * Returns the first of the given arguments that is not null or undefined. If no such element\n * is present, the last argument is returned. If no arguments are given, undefined is returned.\n */\nexport function nvl(...args) {\n  let result;\n  for (let i = 0; i < args.length; i++) {\n    result = args[i];\n    if (result !== undefined && result !== null) {\n      break;\n    }\n  }\n  return result;\n}\n\n/**\n * Use this method in your functions to assert that a mandatory parameter is passed\n * to the function. Throws an error when value is not set.\n *\n * @template T\n * @param {string} parameterName\n * @param {T} [value]\n * @param {*} [type] if this optional parameter is set, the given value must be of this type (instanceof check)\n * @return {T} the value\n */\nexport function assertParameter(parameterName, value, type) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required parameter \\'' + parameterName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Parameter \\'' + parameterName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Use this method to assert that a mandatory property is set. Throws an error when value is not set.\n *\n * @param [type] if this parameter is set, the value must be of this type (instanceof check)\n * @return {any} the value (for direct assignment)\n */\nexport function assertProperty(object, propertyName, type) {\n  let value = object[propertyName];\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error('Missing required property \\'' + propertyName + '\\'');\n  }\n  if (type && !(value instanceof type)) {\n    throw new Error('Property \\'' + propertyName + '\\' has wrong type');\n  }\n  return value;\n}\n\n/**\n * Throws an error if the given value is null or undefined. Otherwise, the value is returned.\n *\n * @template T\n * @param {T} value - value to check\n * @param {string} [msg] - optional error message when the assertion fails\n * @return {T}\n */\nexport function assertValue(value, msg) {\n  if (objects.isNullOrUndefined(value)) {\n    throw new Error(msg || 'Missing value');\n  }\n  return value;\n}\n\n/**\n * Throws an error if the given value is not an instance of the given type. Otherwise, the value is returned.\n *\n * @param {*} value - value to check\n * @param {*} type - type to check against with \"instanceof\"\n * @param {string} [msg] - optional error message when the assertion fails\n * @return {*}\n */\nexport function assertInstance(value, type, msg) {\n  if (!(value instanceof type)) {\n    throw new Error(msg || 'Value has wrong type');\n  }\n  return value;\n}\n\n/**\n * Checks if one of the arguments from 1-n is equal to the first argument.\n * @param value\n * @param args to check against the value, may be an array or a variable argument list.\n */\nexport function isOneOf(value, ...args) {\n  if (args.length === 0) {\n    return false;\n  }\n  let argsToCheck = args;\n  if (args.length === 1 && Array.isArray(args[0])) {\n    argsToCheck = args[0];\n  }\n  return argsToCheck.indexOf(value) !== -1;\n}\n\n/**\n * Creates a new object instance.<p> Delegates the create call to scout.ObjectFactory#create.\n * @returns {object}\n */\nexport function create(objectType, model, options) {\n  return ObjectFactory.get().create(objectType, model, options);\n}\n\n/**\n * Prepares the DOM for scout in the given document. This should be called once while initializing scout.\n * If the target document is not specified, the global \"document\" variable is used instead.\n *\n * This is used by apps (App, LoginApp, LogoutApp)\n *\n * Currently it does the following:\n * - Remove the <noscript> tag (obviously there is no need for it).\n * - Remove <scout-text> tags (they must have been processed before, see texts.readFromDOM())\n * - Remove <scout-version> tag (it must have been processed before, see scout.App._initVersion())\n * - Add a device / browser class to the body tag to allow for device specific CSS rules.\n * - If the browser is Google Chrome, add a special meta header to prevent automatic translation.\n */\nexport function prepareDOM(targetDocument) {\n  targetDocument = targetDocument || document;\n  // Cleanup DOM\n  $('noscript', targetDocument).remove();\n  $('scout-text', targetDocument).remove();\n  $('scout-version', targetDocument).remove();\n  $('body', targetDocument).addDeviceClass();\n\n  // Prevent \"Do you want to translate this page?\" in Google Chrome\n  if (Device.get().browser === Device.Browser.CHROME) {\n    let metaNoTranslate = '<meta name=\"google\" content=\"notranslate\" />';\n    let $title = $('head > title', targetDocument);\n    if ($title.length === 0) {\n      // Add to end of head\n      $('head', targetDocument).append(metaNoTranslate);\n    } else {\n      $title.after(metaNoTranslate);\n    }\n  }\n}\n\n/**\n * Installs a global 'mousedown' interceptor to invoke 'aboutToBlurByMouseDown' on value field before anything else gets executed.\n */\nexport function installGlobalMouseDownInterceptor(myDocument) {\n  myDocument.addEventListener('mousedown', event => {\n    ValueField.invokeValueFieldAboutToBlurByMouseDown(event.target || event.srcElement);\n  }, true); // true=the event handler is executed in the capturing phase\n}\n\n/**\n * Because Firefox does not set the active state of a DOM element when the mousedown event\n * for that element is prevented, we set an 'active' CSS class instead. This means in the\n * CSS we must deal with :active and with .active, where we need same behavior for the\n * active state across all browsers.\n * <p>\n * Typically you'd write something like this in your CSS:\n *   button:active, button.active { ... }\n */\nexport function installSyntheticActiveStateHandler(myDocument) {\n  if (Device.get().requiresSyntheticActiveState()) {\n    $activeElements = [];\n    $(myDocument)\n      .on('mousedown', event => {\n        let $element = $(event.target);\n        while ($element.length) {\n          $activeElements.push($element.addClass('active'));\n          $element = $element.parent();\n        }\n      })\n      .on('mouseup', () => {\n        $activeElements.forEach($element => {\n          $element.removeClass('active');\n        });\n        $activeElements = [];\n      });\n  }\n}\n\n/**\n * Resolves the widget using the given widget id or HTML element.\n * <p>\n * If the argument is a string or a number, it will search the widget hierarchy for the given id using Widget#widget(id).\n * If the argument is a HTML or jQuery element, it will use widgets.get() to get the widget which belongs to the given element.\n *\n * @param widgetIdOrElement\n *          a widget ID or a HTML or jQuery element\n * @param [partId]\n *          partId of the session the widget belongs to (optional, only relevant if the\n *          argument is a widget ID). If omitted, the first session is used.\n * @returns {AnyWidget} the widget for the given element or id\n */\nexport function widget(widgetIdOrElement, partId) {\n  if (objects.isNullOrUndefined(widgetIdOrElement)) {\n    return null;\n  }\n  let $elem = widgetIdOrElement;\n  if (typeof widgetIdOrElement === 'string' || typeof widgetIdOrElement === 'number') {\n    // Find widget for ID\n    let session = scout.getSession(partId);\n    if (session) {\n      widgetIdOrElement = strings.asString(widgetIdOrElement);\n      return session.root.widget(widgetIdOrElement);\n    }\n  }\n  return widgets.get($elem);\n}\n\n/**\n * Helper function to get the model adapter for a given adapterId. If there is more than one\n * session, e.g. in case of portlets, the second argument specifies the partId of the session\n * to be queried. If not specified explicitly, the first session is used. If the session or\n * the adapter could not be found, null is returned.\n */\nexport function adapter(adapterId, partId) {\n  if (objects.isNullOrUndefined(adapterId)) {\n    return null;\n  }\n  let session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    return session.modelAdapterRegistry[adapterId];\n  }\n  return null;\n}\n\nexport function getSession(partId) {\n  let sessions = App.get().sessions;\n  if (!sessions) {\n    return null;\n  }\n  if (objects.isNullOrUndefined(partId)) {\n    return sessions[0];\n  }\n  for (let i = 0; i < sessions.length; i++) {\n    let session = sessions[i];\n    // eslint-disable-next-line eqeqeq\n    if (session.partId == partId) { // <-- compare with '==' is intentional! (NOSONAR)\n      return session;\n    }\n  }\n  return null;\n}\n\n/**\n * This method exports the adapter with the given ID as JSON, it returns an plain object containing the\n * configuration of the adapter. You can transform that object into JSON by calling <code>JSON.stringify</code>.\n * This method can only be called through the browser JavaScript console.\n * Here's an example of how to call the method:\n *\n * JSON.stringify(scout.exportAdapter(4))\n *\n * @param adapterId\n */\nexport function exportAdapter(adapterId, partId) {\n  let session = scout.getSession(partId);\n  if (session && session.modelAdapterRegistry) {\n    let adapter = session.getModelAdapter(adapterId);\n    if (!adapter) {\n      return null;\n    }\n    let adapterData = cloneAdapterData(adapterId);\n    resolveAdapterReferences(adapter, adapterData);\n    adapterData.type = 'model'; // property 'type' is required for models.js\n    return adapterData;\n  }\n\n  // ----- Helper functions -----\n\n  function cloneAdapterData(adapterId) {\n    let adapterData = session.getAdapterData(adapterId);\n    adapterData = $.extend(true, {}, adapterData);\n    return adapterData;\n  }\n\n  function resolveAdapterReferences(adapter, adapterData) {\n    let tmpAdapter, tmpAdapterData;\n    adapter.widget._widgetProperties.forEach(WidgetPropertyName => {\n      let WidgetPropertyValue = adapterData[WidgetPropertyName];\n      if (!WidgetPropertyValue) {\n        return; // nothing to do when property is null\n      }\n      if (Array.isArray(WidgetPropertyValue)) {\n        // value is an array of adapter IDs\n        let adapterDataArray = [];\n        WidgetPropertyValue.forEach(adapterId => {\n          tmpAdapter = session.getModelAdapter(adapterId);\n          tmpAdapterData = cloneAdapterData(adapterId);\n          resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n          adapterDataArray.push(tmpAdapterData);\n        });\n        adapterData[WidgetPropertyName] = adapterDataArray;\n      } else {\n        // value is an adapter ID\n        tmpAdapter = session.getModelAdapter(WidgetPropertyValue);\n        tmpAdapterData = cloneAdapterData(WidgetPropertyValue);\n        resolveAdapterReferences(tmpAdapter, tmpAdapterData);\n        adapterData[WidgetPropertyName] = tmpAdapterData;\n      }\n    });\n    adapterData = adapter.exportAdapterData(adapterData);\n  }\n}\n\n/**\n * Reloads the entire browser window.\n *\n * @param [options]\n * @param [options.schedule]\n *     If true, the page reload is not executed in the current thread but scheduled using setTimeout().\n *     This is useful if the caller wants to execute some other code before the reload. The default is false.\n * @param [options.clearBody]\n *     If true, the body is cleared first before the reload is performed. This is useful to prevent\n *     showing \"old\" content in the browser until the new content arrives. The default is true.\n * @param [options.redirectUrl]\n *      The new URL to load. If not specified, the current location is used (window.location).\n */\nexport function reloadPage(options) {\n  options = options || {};\n  if (options.schedule) {\n    setTimeout(reloadPageImpl);\n  } else {\n    reloadPageImpl();\n  }\n\n  // ----- Helper functions -----\n\n  function reloadPageImpl() {\n    // Hide everything (on entire page, not only $entryPoint)\n    if (nvl(options.clearBody, true)) {\n      $('body').html('');\n    }\n\n    if (options.redirectUrl) {\n      window.location.href = options.redirectUrl;\n    } else {\n      window.location.reload();\n    }\n  }\n}\n\nexport function addObjectFactories(factories) {\n  objectFactories = $.extend(objectFactories, factories);\n}\n\nexport function cloneShallow(template, properties, createUniqueId) {\n  assertParameter('template', template);\n  let clone = Object.create(Object.getPrototypeOf(template));\n  Object.getOwnPropertyNames(template)\n    .forEach(key => {\n      clone[key] = template[key];\n    });\n  if (properties) {\n    for (let key in properties) {\n      clone[key] = properties[key];\n    }\n  }\n  if (nvl(createUniqueId, true)) {\n    clone.id = ObjectFactory.get().createUniqueId();\n  }\n  if (clone.cloneOf === undefined) {\n    clone.cloneOf = template;\n  }\n  return clone;\n}\n\nexport default {\n  nvl,\n  assertParameter,\n  assertProperty,\n  assertValue,\n  assertInstance,\n  isOneOf,\n  create,\n  prepareDOM,\n  installGlobalMouseDownInterceptor,\n  installSyntheticActiveStateHandler,\n  widget,\n  adapter,\n  getSession,\n  exportAdapter,\n  reloadPage,\n  addObjectFactories,\n  objectFactories,\n  cloneShallow\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}