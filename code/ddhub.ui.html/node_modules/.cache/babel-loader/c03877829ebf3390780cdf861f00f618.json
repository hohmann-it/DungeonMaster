{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, events, graphics, HtmlComponent, ModeSelectorLayout, Widget } from '../index';\nexport default class ModeSelector extends Widget {\n  constructor() {\n    super();\n    this._addWidgetProperties(['modes', 'selectedMode']);\n    this._addPreserveOnPropertyChangeProperties(['selectedMode']);\n    this.modes = [];\n    this.selectedMode = null;\n    this.$slider = null;\n\n    // When a new mode is set, the new one is marked as selected while the old one is deselected. This triggers the modePropertyChangeHandler.\n    // In this case the handler must not react on the selection event. Otherwise the value is first set to null (because the old is deselected) and then to the new value.\n    // Setting a new mode should not trigger two change events.\n    this._isModeChanging = false;\n    this._modePropertyChangeHandler = this._onModePropertyChange.bind(this);\n  }\n  _init(model) {\n    super._init(model);\n    this._setModes(this.modes);\n    this._setSelectedMode(this.selectedMode);\n  }\n  _render() {\n    this.$container = this.$parent.appendDiv('mode-selector');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new ModeSelectorLayout(this));\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSlider();\n    this._renderModes();\n  }\n  setModes(modes) {\n    this.setProperty('modes', modes);\n  }\n  _setModes(modes) {\n    this.modes.forEach(function (mode) {\n      mode.off('propertyChange', this._modePropertyChangeHandler);\n    }, this);\n    this._setProperty('modes', arrays.ensure(modes));\n    this.modes.forEach(function (mode) {\n      mode.on('propertyChange', this._modePropertyChangeHandler);\n      if (mode.selected) {\n        this.setSelectedMode(mode);\n      }\n    }, this);\n  }\n  _renderSlider() {\n    this.$slider = this.$container.appendDiv('mode-slider');\n  }\n  _renderModes() {\n    this.modes.forEach(mode => {\n      mode.render();\n      this._registerDragHandlers(mode.$container);\n    });\n    this._updateMarkers();\n  }\n  setSelectedMode(selectedMode) {\n    this.setProperty('selectedMode', selectedMode);\n  }\n  _setSelectedMode(selectedMode) {\n    this._isModeChanging = true;\n    if (this.selectedMode && this.selectedMode !== selectedMode) {\n      this.selectedMode.setSelected(false);\n    }\n    if (selectedMode && !selectedMode.selected) {\n      selectedMode.setSelected(true);\n    }\n    this._setProperty('selectedMode', selectedMode);\n    this._isModeChanging = false;\n    this._updateMarkers();\n  }\n  _onModePropertyChange(event) {\n    if (event.propertyName === 'selected' && !this._isModeChanging) {\n      this.setSelectedMode(event.newValue ? event.source : null);\n    } else if (event.propertyName === 'visible') {\n      this._updateMarkers();\n    } else if (event.propertyName === 'enabled') {\n      this._updateSlider();\n    }\n  }\n  _updateMarkers() {\n    let visibleModes = [];\n    let selectedModeIndex = -1;\n    this.modes.forEach(mode => {\n      if (mode.rendered) {\n        mode.$container.removeClass('first last after-selected');\n        if (mode.isVisible()) {\n          visibleModes.push(mode);\n          if (mode.selected) {\n            selectedModeIndex = visibleModes.length - 1;\n          }\n        }\n      }\n    });\n    if (visibleModes.length) {\n      visibleModes[0].$container.addClass('first');\n      visibleModes[visibleModes.length - 1].$container.addClass('last');\n      if (selectedModeIndex >= 0 && selectedModeIndex < visibleModes.length - 1) {\n        visibleModes[selectedModeIndex + 1].$container.addClass('after-selected');\n      }\n    }\n    this._updateSlider();\n  }\n  _updateSlider() {\n    if (!this.$slider) {\n      return;\n    }\n    let selectedModePosX = 0,\n      selectedModeWidth = 0;\n    if (this.selectedMode && this.selectedMode.$container) {\n      selectedModePosX = graphics.position(this.selectedMode.$container).x;\n      selectedModeWidth = graphics.size(this.selectedMode.$container, {\n        exact: true\n      }).width;\n    }\n    this.$slider.cssLeft(selectedModePosX);\n    this.$slider.cssWidth(selectedModeWidth);\n    this.$slider.setVisible(this.selectedMode && this.selectedMode.$container && this.selectedMode.enabled);\n  }\n  _registerDragHandlers($mode) {\n    let className = 'mode-selector-dragging';\n    let onDown = /** @type {SwipeCallbackEvent} */e => this.enabledComputed && this.selectedMode && this.selectedMode.$container === $mode && this.modes.filter(m => m.isVisible() && m.enabled).length > 1;\n    let onMove = /** @type {SwipeCallbackEvent} */e => {\n      let maxX = this.$container.width() - $mode.outerWidth();\n      let minX = 0;\n      let newModeLeft = Math.max(Math.min(e.newLeft, maxX), minX); // limit to the size of the ModeSelector\n      this.$container.children().addClass(className);\n      if (newModeLeft !== e.originalLeft) {\n        this.$slider.cssLeft(newModeLeft);\n      }\n      return newModeLeft;\n    };\n    let onUp = /** @type {SwipeCallbackEvent} */e => {\n      this.$container.children().removeClass(className);\n      let newSelectedMode = this._computeNewSelectedMode(e);\n      if (!newSelectedMode || newSelectedMode === this.selectedMode || !newSelectedMode.enabled) {\n        this._updateSlider(); // move back to original position\n      } else {\n        this.setSelectedMode(newSelectedMode); // updates the slider position\n      }\n    };\n\n    events.onSwipe($mode, className, onDown, onMove, onUp);\n  }\n\n  /**\n   *\n   * @param {SwipeCallbackEvent} e\n   */\n  _computeNewSelectedMode(e) {\n    if (e.direction === 0 || Math.abs(e.deltaX) <= 5) {\n      // ignore if the slide is below threshold\n      return this.selectedMode;\n    }\n    if (e.direction < 0) {\n      // slide left: use left end of slider\n      return this._findModeByPos(e.newLeft);\n    }\n    // slide right: use right end of slider\n    return this._findModeByPos(e.newLeft + this.$slider.width());\n  }\n  _findModeByPos(pos) {\n    let visibleModes = this.modes.filter(m => m.isVisible());\n    for (let i = visibleModes.length - 1; i >= 0; i--) {\n      let mode = visibleModes[i];\n      let modePosX = Math.floor(graphics.position(mode.$container).x);\n      if (pos >= modePosX) {\n        let modeWidth = graphics.size(mode.$container).width;\n        let modeEndX = modePosX + modeWidth;\n        if (pos <= modeEndX) {\n          return mode;\n        }\n      }\n    }\n    return null;\n  }\n  findModeById(id) {\n    return arrays.find(this.modes, mode => {\n      return mode.id === id;\n    });\n  }\n  findModeByRef(ref) {\n    return arrays.find(this.modes, mode => {\n      return mode.ref === ref;\n    });\n  }\n  selectModeById(id) {\n    this.setSelectedMode(this.findModeById(id));\n  }\n  selectModeByRef(ref) {\n    this.setSelectedMode(this.findModeByRef(ref));\n  }\n}","map":{"version":3,"names":["arrays","events","graphics","HtmlComponent","ModeSelectorLayout","Widget","ModeSelector","constructor","_addWidgetProperties","_addPreserveOnPropertyChangeProperties","modes","selectedMode","$slider","_isModeChanging","_modePropertyChangeHandler","_onModePropertyChange","bind","_init","model","_setModes","_setSelectedMode","_render","$container","$parent","appendDiv","htmlComp","install","session","setLayout","_renderProperties","_renderSlider","_renderModes","setModes","setProperty","forEach","mode","off","_setProperty","ensure","on","selected","setSelectedMode","render","_registerDragHandlers","_updateMarkers","setSelected","event","propertyName","newValue","source","_updateSlider","visibleModes","selectedModeIndex","rendered","removeClass","isVisible","push","length","addClass","selectedModePosX","selectedModeWidth","position","x","size","exact","width","cssLeft","cssWidth","setVisible","enabled","$mode","className","onDown","e","enabledComputed","filter","m","onMove","maxX","outerWidth","minX","newModeLeft","Math","max","min","newLeft","children","originalLeft","onUp","newSelectedMode","_computeNewSelectedMode","onSwipe","direction","abs","deltaX","_findModeByPos","pos","i","modePosX","floor","modeWidth","modeEndX","findModeById","id","find","findModeByRef","ref","selectModeById","selectModeByRef"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/modeselector/ModeSelector.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, events, graphics, HtmlComponent, ModeSelectorLayout, Widget} from '../index';\n\nexport default class ModeSelector extends Widget {\n\n  constructor() {\n    super();\n    this._addWidgetProperties(['modes', 'selectedMode']);\n    this._addPreserveOnPropertyChangeProperties(['selectedMode']);\n\n    this.modes = [];\n    this.selectedMode = null;\n    this.$slider = null;\n\n    // When a new mode is set, the new one is marked as selected while the old one is deselected. This triggers the modePropertyChangeHandler.\n    // In this case the handler must not react on the selection event. Otherwise the value is first set to null (because the old is deselected) and then to the new value.\n    // Setting a new mode should not trigger two change events.\n    this._isModeChanging = false;\n    this._modePropertyChangeHandler = this._onModePropertyChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n    this._setModes(this.modes);\n    this._setSelectedMode(this.selectedMode);\n  }\n\n  _render() {\n    this.$container = this.$parent.appendDiv('mode-selector');\n    this.htmlComp = HtmlComponent.install(this.$container, this.session);\n    this.htmlComp.setLayout(new ModeSelectorLayout(this));\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderSlider();\n    this._renderModes();\n  }\n\n  setModes(modes) {\n    this.setProperty('modes', modes);\n  }\n\n  _setModes(modes) {\n    this.modes.forEach(function(mode) {\n      mode.off('propertyChange', this._modePropertyChangeHandler);\n    }, this);\n    this._setProperty('modes', arrays.ensure(modes));\n    this.modes.forEach(function(mode) {\n      mode.on('propertyChange', this._modePropertyChangeHandler);\n      if (mode.selected) {\n        this.setSelectedMode(mode);\n      }\n    }, this);\n  }\n\n  _renderSlider() {\n    this.$slider = this.$container.appendDiv('mode-slider');\n  }\n\n  _renderModes() {\n    this.modes.forEach(mode => {\n      mode.render();\n      this._registerDragHandlers(mode.$container);\n    });\n    this._updateMarkers();\n  }\n\n  setSelectedMode(selectedMode) {\n    this.setProperty('selectedMode', selectedMode);\n  }\n\n  _setSelectedMode(selectedMode) {\n    this._isModeChanging = true;\n    if (this.selectedMode && this.selectedMode !== selectedMode) {\n      this.selectedMode.setSelected(false);\n    }\n    if (selectedMode && !selectedMode.selected) {\n      selectedMode.setSelected(true);\n    }\n    this._setProperty('selectedMode', selectedMode);\n    this._isModeChanging = false;\n    this._updateMarkers();\n  }\n\n  _onModePropertyChange(event) {\n    if (event.propertyName === 'selected' && !this._isModeChanging) {\n      this.setSelectedMode(event.newValue ? event.source : null);\n    } else if (event.propertyName === 'visible') {\n      this._updateMarkers();\n    } else if (event.propertyName === 'enabled') {\n      this._updateSlider();\n    }\n  }\n\n  _updateMarkers() {\n    let visibleModes = [];\n    let selectedModeIndex = -1;\n    this.modes.forEach(mode => {\n      if (mode.rendered) {\n        mode.$container.removeClass('first last after-selected');\n        if (mode.isVisible()) {\n          visibleModes.push(mode);\n          if (mode.selected) {\n            selectedModeIndex = visibleModes.length - 1;\n          }\n        }\n      }\n    });\n    if (visibleModes.length) {\n      visibleModes[0].$container.addClass('first');\n      visibleModes[visibleModes.length - 1].$container.addClass('last');\n      if (selectedModeIndex >= 0 && selectedModeIndex < (visibleModes.length - 1)) {\n        visibleModes[selectedModeIndex + 1].$container.addClass('after-selected');\n      }\n    }\n    this._updateSlider();\n  }\n\n  _updateSlider() {\n    if (!this.$slider) {\n      return;\n    }\n    let selectedModePosX = 0, selectedModeWidth = 0;\n    if (this.selectedMode && this.selectedMode.$container) {\n      selectedModePosX = graphics.position(this.selectedMode.$container).x;\n      selectedModeWidth = graphics.size(this.selectedMode.$container, {exact: true}).width;\n    }\n    this.$slider.cssLeft(selectedModePosX);\n    this.$slider.cssWidth(selectedModeWidth);\n    this.$slider.setVisible(this.selectedMode && this.selectedMode.$container && this.selectedMode.enabled);\n  }\n\n  _registerDragHandlers($mode) {\n    let className = 'mode-selector-dragging';\n    let onDown = /** @type {SwipeCallbackEvent} */e => this.enabledComputed && this.selectedMode && this.selectedMode.$container === $mode && this.modes.filter(m => m.isVisible() && m.enabled).length > 1;\n    let onMove = /** @type {SwipeCallbackEvent} */e => {\n      let maxX = this.$container.width() - $mode.outerWidth();\n      let minX = 0;\n      let newModeLeft = Math.max(Math.min(e.newLeft, maxX), minX); // limit to the size of the ModeSelector\n      this.$container.children().addClass(className);\n      if (newModeLeft !== e.originalLeft) {\n        this.$slider.cssLeft(newModeLeft);\n      }\n      return newModeLeft;\n    };\n    let onUp = /** @type {SwipeCallbackEvent} */e => {\n      this.$container.children().removeClass(className);\n      let newSelectedMode = this._computeNewSelectedMode(e);\n      if (!newSelectedMode || newSelectedMode === this.selectedMode || !newSelectedMode.enabled) {\n        this._updateSlider(); // move back to original position\n      } else {\n        this.setSelectedMode(newSelectedMode); // updates the slider position\n      }\n    };\n    events.onSwipe($mode, className, onDown, onMove, onUp);\n  }\n\n  /**\n   *\n   * @param {SwipeCallbackEvent} e\n   */\n  _computeNewSelectedMode(e) {\n    if (e.direction === 0 || Math.abs(e.deltaX) <= 5) {\n      // ignore if the slide is below threshold\n      return this.selectedMode;\n    }\n    if (e.direction < 0) {\n      // slide left: use left end of slider\n      return this._findModeByPos(e.newLeft);\n    }\n    // slide right: use right end of slider\n    return this._findModeByPos(e.newLeft + this.$slider.width());\n  }\n\n  _findModeByPos(pos) {\n    let visibleModes = this.modes.filter(m => m.isVisible());\n    for (let i = visibleModes.length - 1; i >= 0; i--) {\n      let mode = visibleModes[i];\n      let modePosX = Math.floor(graphics.position(mode.$container).x);\n      if (pos >= modePosX) {\n        let modeWidth = graphics.size(mode.$container).width;\n        let modeEndX = modePosX + modeWidth;\n        if (pos <= modeEndX) {\n          return mode;\n        }\n      }\n    }\n    return null;\n  }\n\n  findModeById(id) {\n    return arrays.find(this.modes, mode => {\n      return mode.id === id;\n    });\n  }\n\n  findModeByRef(ref) {\n    return arrays.find(this.modes, mode => {\n      return mode.ref === ref;\n    });\n  }\n\n  selectModeById(id) {\n    this.setSelectedMode(this.findModeById(id));\n  }\n\n  selectModeByRef(ref) {\n    this.setSelectedMode(this.findModeByRef(ref));\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,kBAAkB,EAAEC,MAAM,QAAO,UAAU;AAE5F,eAAe,MAAMC,YAAY,SAASD,MAAM,CAAC;EAE/CE,WAAW,GAAG;IACZ,KAAK,EAAE;IACP,IAAI,CAACC,oBAAoB,CAAC,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACpD,IAAI,CAACC,sCAAsC,CAAC,CAAC,cAAc,CAAC,CAAC;IAE7D,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,OAAO,GAAG,IAAI;;IAEnB;IACA;IACA;IACA,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,0BAA0B,GAAG,IAAI,CAACC,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;EACzE;EAEAC,KAAK,CAACC,KAAK,EAAE;IACX,KAAK,CAACD,KAAK,CAACC,KAAK,CAAC;IAClB,IAAI,CAACC,SAAS,CAAC,IAAI,CAACT,KAAK,CAAC;IAC1B,IAAI,CAACU,gBAAgB,CAAC,IAAI,CAACT,YAAY,CAAC;EAC1C;EAEAU,OAAO,GAAG;IACR,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,OAAO,CAACC,SAAS,CAAC,eAAe,CAAC;IACzD,IAAI,CAACC,QAAQ,GAAGtB,aAAa,CAACuB,OAAO,CAAC,IAAI,CAACJ,UAAU,EAAE,IAAI,CAACK,OAAO,CAAC;IACpE,IAAI,CAACF,QAAQ,CAACG,SAAS,CAAC,IAAIxB,kBAAkB,CAAC,IAAI,CAAC,CAAC;EACvD;EAEAyB,iBAAiB,GAAG;IAClB,KAAK,CAACA,iBAAiB,EAAE;IACzB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,YAAY,EAAE;EACrB;EAEAC,QAAQ,CAACtB,KAAK,EAAE;IACd,IAAI,CAACuB,WAAW,CAAC,OAAO,EAAEvB,KAAK,CAAC;EAClC;EAEAS,SAAS,CAACT,KAAK,EAAE;IACf,IAAI,CAACA,KAAK,CAACwB,OAAO,CAAC,UAASC,IAAI,EAAE;MAChCA,IAAI,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACtB,0BAA0B,CAAC;IAC7D,CAAC,EAAE,IAAI,CAAC;IACR,IAAI,CAACuB,YAAY,CAAC,OAAO,EAAErC,MAAM,CAACsC,MAAM,CAAC5B,KAAK,CAAC,CAAC;IAChD,IAAI,CAACA,KAAK,CAACwB,OAAO,CAAC,UAASC,IAAI,EAAE;MAChCA,IAAI,CAACI,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACzB,0BAA0B,CAAC;MAC1D,IAAIqB,IAAI,CAACK,QAAQ,EAAE;QACjB,IAAI,CAACC,eAAe,CAACN,IAAI,CAAC;MAC5B;IACF,CAAC,EAAE,IAAI,CAAC;EACV;EAEAL,aAAa,GAAG;IACd,IAAI,CAAClB,OAAO,GAAG,IAAI,CAACU,UAAU,CAACE,SAAS,CAAC,aAAa,CAAC;EACzD;EAEAO,YAAY,GAAG;IACb,IAAI,CAACrB,KAAK,CAACwB,OAAO,CAACC,IAAI,IAAI;MACzBA,IAAI,CAACO,MAAM,EAAE;MACb,IAAI,CAACC,qBAAqB,CAACR,IAAI,CAACb,UAAU,CAAC;IAC7C,CAAC,CAAC;IACF,IAAI,CAACsB,cAAc,EAAE;EACvB;EAEAH,eAAe,CAAC9B,YAAY,EAAE;IAC5B,IAAI,CAACsB,WAAW,CAAC,cAAc,EAAEtB,YAAY,CAAC;EAChD;EAEAS,gBAAgB,CAACT,YAAY,EAAE;IAC7B,IAAI,CAACE,eAAe,GAAG,IAAI;IAC3B,IAAI,IAAI,CAACF,YAAY,IAAI,IAAI,CAACA,YAAY,KAAKA,YAAY,EAAE;MAC3D,IAAI,CAACA,YAAY,CAACkC,WAAW,CAAC,KAAK,CAAC;IACtC;IACA,IAAIlC,YAAY,IAAI,CAACA,YAAY,CAAC6B,QAAQ,EAAE;MAC1C7B,YAAY,CAACkC,WAAW,CAAC,IAAI,CAAC;IAChC;IACA,IAAI,CAACR,YAAY,CAAC,cAAc,EAAE1B,YAAY,CAAC;IAC/C,IAAI,CAACE,eAAe,GAAG,KAAK;IAC5B,IAAI,CAAC+B,cAAc,EAAE;EACvB;EAEA7B,qBAAqB,CAAC+B,KAAK,EAAE;IAC3B,IAAIA,KAAK,CAACC,YAAY,KAAK,UAAU,IAAI,CAAC,IAAI,CAAClC,eAAe,EAAE;MAC9D,IAAI,CAAC4B,eAAe,CAACK,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACG,MAAM,GAAG,IAAI,CAAC;IAC5D,CAAC,MAAM,IAAIH,KAAK,CAACC,YAAY,KAAK,SAAS,EAAE;MAC3C,IAAI,CAACH,cAAc,EAAE;IACvB,CAAC,MAAM,IAAIE,KAAK,CAACC,YAAY,KAAK,SAAS,EAAE;MAC3C,IAAI,CAACG,aAAa,EAAE;IACtB;EACF;EAEAN,cAAc,GAAG;IACf,IAAIO,YAAY,GAAG,EAAE;IACrB,IAAIC,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAAC1C,KAAK,CAACwB,OAAO,CAACC,IAAI,IAAI;MACzB,IAAIA,IAAI,CAACkB,QAAQ,EAAE;QACjBlB,IAAI,CAACb,UAAU,CAACgC,WAAW,CAAC,2BAA2B,CAAC;QACxD,IAAInB,IAAI,CAACoB,SAAS,EAAE,EAAE;UACpBJ,YAAY,CAACK,IAAI,CAACrB,IAAI,CAAC;UACvB,IAAIA,IAAI,CAACK,QAAQ,EAAE;YACjBY,iBAAiB,GAAGD,YAAY,CAACM,MAAM,GAAG,CAAC;UAC7C;QACF;MACF;IACF,CAAC,CAAC;IACF,IAAIN,YAAY,CAACM,MAAM,EAAE;MACvBN,YAAY,CAAC,CAAC,CAAC,CAAC7B,UAAU,CAACoC,QAAQ,CAAC,OAAO,CAAC;MAC5CP,YAAY,CAACA,YAAY,CAACM,MAAM,GAAG,CAAC,CAAC,CAACnC,UAAU,CAACoC,QAAQ,CAAC,MAAM,CAAC;MACjE,IAAIN,iBAAiB,IAAI,CAAC,IAAIA,iBAAiB,GAAID,YAAY,CAACM,MAAM,GAAG,CAAE,EAAE;QAC3EN,YAAY,CAACC,iBAAiB,GAAG,CAAC,CAAC,CAAC9B,UAAU,CAACoC,QAAQ,CAAC,gBAAgB,CAAC;MAC3E;IACF;IACA,IAAI,CAACR,aAAa,EAAE;EACtB;EAEAA,aAAa,GAAG;IACd,IAAI,CAAC,IAAI,CAACtC,OAAO,EAAE;MACjB;IACF;IACA,IAAI+C,gBAAgB,GAAG,CAAC;MAAEC,iBAAiB,GAAG,CAAC;IAC/C,IAAI,IAAI,CAACjD,YAAY,IAAI,IAAI,CAACA,YAAY,CAACW,UAAU,EAAE;MACrDqC,gBAAgB,GAAGzD,QAAQ,CAAC2D,QAAQ,CAAC,IAAI,CAAClD,YAAY,CAACW,UAAU,CAAC,CAACwC,CAAC;MACpEF,iBAAiB,GAAG1D,QAAQ,CAAC6D,IAAI,CAAC,IAAI,CAACpD,YAAY,CAACW,UAAU,EAAE;QAAC0C,KAAK,EAAE;MAAI,CAAC,CAAC,CAACC,KAAK;IACtF;IACA,IAAI,CAACrD,OAAO,CAACsD,OAAO,CAACP,gBAAgB,CAAC;IACtC,IAAI,CAAC/C,OAAO,CAACuD,QAAQ,CAACP,iBAAiB,CAAC;IACxC,IAAI,CAAChD,OAAO,CAACwD,UAAU,CAAC,IAAI,CAACzD,YAAY,IAAI,IAAI,CAACA,YAAY,CAACW,UAAU,IAAI,IAAI,CAACX,YAAY,CAAC0D,OAAO,CAAC;EACzG;EAEA1B,qBAAqB,CAAC2B,KAAK,EAAE;IAC3B,IAAIC,SAAS,GAAG,wBAAwB;IACxC,IAAIC,MAAM,GAAG,iCAAiCC,CAAC,IAAI,IAAI,CAACC,eAAe,IAAI,IAAI,CAAC/D,YAAY,IAAI,IAAI,CAACA,YAAY,CAACW,UAAU,KAAKgD,KAAK,IAAI,IAAI,CAAC5D,KAAK,CAACiE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACrB,SAAS,EAAE,IAAIqB,CAAC,CAACP,OAAO,CAAC,CAACZ,MAAM,GAAG,CAAC;IACvM,IAAIoB,MAAM,GAAG,iCAAiCJ,CAAC,IAAI;MACjD,IAAIK,IAAI,GAAG,IAAI,CAACxD,UAAU,CAAC2C,KAAK,EAAE,GAAGK,KAAK,CAACS,UAAU,EAAE;MACvD,IAAIC,IAAI,GAAG,CAAC;MACZ,IAAIC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACX,CAAC,CAACY,OAAO,EAAEP,IAAI,CAAC,EAAEE,IAAI,CAAC,CAAC,CAAC;MAC7D,IAAI,CAAC1D,UAAU,CAACgE,QAAQ,EAAE,CAAC5B,QAAQ,CAACa,SAAS,CAAC;MAC9C,IAAIU,WAAW,KAAKR,CAAC,CAACc,YAAY,EAAE;QAClC,IAAI,CAAC3E,OAAO,CAACsD,OAAO,CAACe,WAAW,CAAC;MACnC;MACA,OAAOA,WAAW;IACpB,CAAC;IACD,IAAIO,IAAI,GAAG,iCAAiCf,CAAC,IAAI;MAC/C,IAAI,CAACnD,UAAU,CAACgE,QAAQ,EAAE,CAAChC,WAAW,CAACiB,SAAS,CAAC;MACjD,IAAIkB,eAAe,GAAG,IAAI,CAACC,uBAAuB,CAACjB,CAAC,CAAC;MACrD,IAAI,CAACgB,eAAe,IAAIA,eAAe,KAAK,IAAI,CAAC9E,YAAY,IAAI,CAAC8E,eAAe,CAACpB,OAAO,EAAE;QACzF,IAAI,CAACnB,aAAa,EAAE,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,IAAI,CAACT,eAAe,CAACgD,eAAe,CAAC,CAAC,CAAC;MACzC;IACF,CAAC;;IACDxF,MAAM,CAAC0F,OAAO,CAACrB,KAAK,EAAEC,SAAS,EAAEC,MAAM,EAAEK,MAAM,EAAEW,IAAI,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACEE,uBAAuB,CAACjB,CAAC,EAAE;IACzB,IAAIA,CAAC,CAACmB,SAAS,KAAK,CAAC,IAAIV,IAAI,CAACW,GAAG,CAACpB,CAAC,CAACqB,MAAM,CAAC,IAAI,CAAC,EAAE;MAChD;MACA,OAAO,IAAI,CAACnF,YAAY;IAC1B;IACA,IAAI8D,CAAC,CAACmB,SAAS,GAAG,CAAC,EAAE;MACnB;MACA,OAAO,IAAI,CAACG,cAAc,CAACtB,CAAC,CAACY,OAAO,CAAC;IACvC;IACA;IACA,OAAO,IAAI,CAACU,cAAc,CAACtB,CAAC,CAACY,OAAO,GAAG,IAAI,CAACzE,OAAO,CAACqD,KAAK,EAAE,CAAC;EAC9D;EAEA8B,cAAc,CAACC,GAAG,EAAE;IAClB,IAAI7C,YAAY,GAAG,IAAI,CAACzC,KAAK,CAACiE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACrB,SAAS,EAAE,CAAC;IACxD,KAAK,IAAI0C,CAAC,GAAG9C,YAAY,CAACM,MAAM,GAAG,CAAC,EAAEwC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjD,IAAI9D,IAAI,GAAGgB,YAAY,CAAC8C,CAAC,CAAC;MAC1B,IAAIC,QAAQ,GAAGhB,IAAI,CAACiB,KAAK,CAACjG,QAAQ,CAAC2D,QAAQ,CAAC1B,IAAI,CAACb,UAAU,CAAC,CAACwC,CAAC,CAAC;MAC/D,IAAIkC,GAAG,IAAIE,QAAQ,EAAE;QACnB,IAAIE,SAAS,GAAGlG,QAAQ,CAAC6D,IAAI,CAAC5B,IAAI,CAACb,UAAU,CAAC,CAAC2C,KAAK;QACpD,IAAIoC,QAAQ,GAAGH,QAAQ,GAAGE,SAAS;QACnC,IAAIJ,GAAG,IAAIK,QAAQ,EAAE;UACnB,OAAOlE,IAAI;QACb;MACF;IACF;IACA,OAAO,IAAI;EACb;EAEAmE,YAAY,CAACC,EAAE,EAAE;IACf,OAAOvG,MAAM,CAACwG,IAAI,CAAC,IAAI,CAAC9F,KAAK,EAAEyB,IAAI,IAAI;MACrC,OAAOA,IAAI,CAACoE,EAAE,KAAKA,EAAE;IACvB,CAAC,CAAC;EACJ;EAEAE,aAAa,CAACC,GAAG,EAAE;IACjB,OAAO1G,MAAM,CAACwG,IAAI,CAAC,IAAI,CAAC9F,KAAK,EAAEyB,IAAI,IAAI;MACrC,OAAOA,IAAI,CAACuE,GAAG,KAAKA,GAAG;IACzB,CAAC,CAAC;EACJ;EAEAC,cAAc,CAACJ,EAAE,EAAE;IACjB,IAAI,CAAC9D,eAAe,CAAC,IAAI,CAAC6D,YAAY,CAACC,EAAE,CAAC,CAAC;EAC7C;EAEAK,eAAe,CAACF,GAAG,EAAE;IACnB,IAAI,CAACjE,eAAe,CAAC,IAAI,CAACgE,aAAa,CAACC,GAAG,CAAC,CAAC;EAC/C;AACF"},"metadata":{},"sourceType":"module"}