{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, scout, SmartField, strings } from '../../../index';\nimport $ from 'jquery';\nexport default class ProposalField extends SmartField {\n  constructor() {\n    super();\n    this.maxLength = 4000;\n    this.trimText = true;\n\n    /**\n     * If this flag is set to true the proposal field performs a lookup by text when\n     * accept proposal is called. The behavior is similar to what the smart-field does\n     * in that case, but without the need to have a valid single match as the result\n     * from the lookup.\n     */\n    this.lookupOnAcceptByText = false;\n  }\n  _getValueFromLookupRow(lookupRow) {\n    return lookupRow.text;\n  }\n  _getLastSearchText() {\n    return this.value;\n  }\n  cssClassName() {\n    return 'proposal-field';\n  }\n  _handleEnterKey(event) {\n    // The state of 'this.popup' is different on various browsers. On some browsers (IE11) we don't\n    // do CSS animations. This means IE11 sets the popup to null immediately whereas other browsers\n    // use a timeout. Anyway: in case the popup is open at the time the user presses enter, we must\n    // stop propagation (e.g. to avoid calls of other registered enter key-shortcuts, like the default\n    // button on a form). See Widget.js for details about removing with or without CSS animations.\n    let hasPopup = !!this.popup;\n    this.acceptInput();\n    if (this.popup) {\n      this.closePopup();\n    }\n    if (hasPopup) {\n      event.stopPropagation();\n    }\n  }\n  _lookupByTextOrAllDone(result) {\n    if (super._handleException(result)) {\n      return;\n    }\n    if (result.lookupRows.length === 0) {\n      this.setLoading(false);\n      this._handleEmptyResult();\n      return;\n    }\n    super._lookupByTextOrAllDone(result);\n  }\n  _formatValue(value) {\n    return scout.nvl(value, '');\n  }\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    let validValue = strings.asString(value);\n    if (this.trimText) {\n      validValue = validValue.trim();\n    }\n    if (validValue === '') {\n      validValue = null;\n    }\n    return validValue;\n  }\n  _ensureValue(value) {\n    return strings.asString(value);\n  }\n\n  /**\n   * When 'clear' has been clicked (searchText is empty), we want to call customTextAccepted,\n   * so the new value is sent to the server #221199.\n   */\n  _acceptByText(sync, searchText) {\n    $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptByText) searchText=', searchText);\n    let async = !sync;\n\n    // In case sync=true we cannot wait for the results of the lookup-call,\n    // that's why we simply accept the text that's already in the field\n    if (async && this.lookupOnAcceptByText && strings.hasText(searchText)) {\n      super._acceptByTextAsync(searchText);\n    } else {\n      this._customTextAccepted(searchText);\n    }\n  }\n\n  /**\n   * Only used in case lookupOnAcceptByText is true. It's basically the same code\n   * as in the smart-field but without the error handling.\n   */\n  _acceptByTextDone(result) {\n    this._userWasTyping = false;\n    this._extendResult(result);\n\n    // when there's exactly one result, we accept that lookup row\n    if (result.uniqueMatch) {\n      let lookupRow = result.uniqueMatch;\n      if (this._isLookupRowActive(lookupRow)) {\n        this.setLookupRow(lookupRow);\n        this._inputAccepted();\n        return;\n      }\n    }\n    this._customTextAccepted(result.text);\n  }\n  _checkResetLookupRow(value) {\n    return this.lookupRow && this.lookupRow.text !== value;\n  }\n  _checkSearchTextChanged(searchText) {\n    return this._checkDisplayTextChanged(searchText);\n  }\n  _customTextAccepted(searchText) {\n    this._setLookupRow(null); // only reset property lookup\n    this._setValue(searchText);\n    this._inputAccepted(true, false);\n  }\n  getValueForSelection() {\n    return this._showSelection() ? this.lookupRow.key : null;\n  }\n\n  /**\n   * This function is overridden by ProposalField because it has a different behavior than the smart-field.\n   */\n  _acceptLookupRowAndValueFromField(otherField) {\n    if (this.lookupRow !== otherField.lookupRow) {\n      this.setLookupRow(otherField.lookupRow);\n    }\n  }\n\n  /**\n   * In ProposalField value and display-text is the same. When a custom text has been entered,\n   * the value is set and the lookup-row is null.\n   */\n  _copyValuesFromField(otherField) {\n    if (this.lookupRow !== otherField.lookupRow) {\n      this.setLookupRow(otherField.lookupRow);\n    }\n    if (this.value !== otherField.value) {\n      this.setValue(otherField.value);\n    }\n  }\n  _acceptInput(sync, searchText, searchTextEmpty, searchTextChanged, selectedLookupRow) {\n    // Do nothing when search text is equals to the text of the current lookup row\n    if (!selectedLookupRow && this.lookupRow && this.lookupRow.text === searchText) {\n      $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptInput) unchanged: text is equals. Close popup');\n      this._inputAccepted(false);\n      return;\n    }\n\n    // 2.) proposal chooser is open -> use the selected row as value\n    if (selectedLookupRow) {\n      $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptInput) lookup-row selected. Set lookup-row, close popup lookupRow=', selectedLookupRow.toString());\n      this.clearErrorStatus();\n      this.setLookupRow(selectedLookupRow);\n      this._inputAccepted();\n      return;\n    }\n\n    // 3.) proposal chooser is not open -> try to accept the current display text\n    // this causes a lookup which may fail and open a new proposal chooser (property\n    // change for 'result').\n    if (searchTextChanged) {\n      this.clearErrorStatus();\n      this._acceptByText(sync, searchText);\n    } else if (!this._hasUiError()) {\n      this._inputAccepted(false);\n    } else {\n      // even though there's nothing to do, someone could wait for our promise to be resolved\n      this._acceptInputDeferred.resolve();\n    }\n    return this._acceptInputDeferred.promise();\n  }\n  setTrimText(trimText) {\n    this.setProperty('trimText', trimText);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _updateEmpty() {\n    this.empty = strings.empty(this.value);\n  }\n}","map":{"version":3,"names":["objects","scout","SmartField","strings","$","ProposalField","constructor","maxLength","trimText","lookupOnAcceptByText","_getValueFromLookupRow","lookupRow","text","_getLastSearchText","value","cssClassName","_handleEnterKey","event","hasPopup","popup","acceptInput","closePopup","stopPropagation","_lookupByTextOrAllDone","result","_handleException","lookupRows","length","setLoading","_handleEmptyResult","_formatValue","nvl","_validateValue","isNullOrUndefined","validValue","asString","trim","_ensureValue","_acceptByText","sync","searchText","log","isDebugEnabled","debug","async","hasText","_acceptByTextAsync","_customTextAccepted","_acceptByTextDone","_userWasTyping","_extendResult","uniqueMatch","_isLookupRowActive","setLookupRow","_inputAccepted","_checkResetLookupRow","_checkSearchTextChanged","_checkDisplayTextChanged","_setLookupRow","_setValue","getValueForSelection","_showSelection","key","_acceptLookupRowAndValueFromField","otherField","_copyValuesFromField","setValue","_acceptInput","searchTextEmpty","searchTextChanged","selectedLookupRow","toString","clearErrorStatus","_hasUiError","_acceptInputDeferred","resolve","promise","setTrimText","setProperty","_updateEmpty","empty"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/smartfield/ProposalField.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, scout, SmartField, strings} from '../../../index';\nimport $ from 'jquery';\n\nexport default class ProposalField extends SmartField {\n\n  constructor() {\n    super();\n\n    this.maxLength = 4000;\n    this.trimText = true;\n\n    /**\n     * If this flag is set to true the proposal field performs a lookup by text when\n     * accept proposal is called. The behavior is similar to what the smart-field does\n     * in that case, but without the need to have a valid single match as the result\n     * from the lookup.\n     */\n    this.lookupOnAcceptByText = false;\n  }\n\n  _getValueFromLookupRow(lookupRow) {\n    return lookupRow.text;\n  }\n\n  _getLastSearchText() {\n    return this.value;\n  }\n\n  cssClassName() {\n    return 'proposal-field';\n  }\n\n  _handleEnterKey(event) {\n    // The state of 'this.popup' is different on various browsers. On some browsers (IE11) we don't\n    // do CSS animations. This means IE11 sets the popup to null immediately whereas other browsers\n    // use a timeout. Anyway: in case the popup is open at the time the user presses enter, we must\n    // stop propagation (e.g. to avoid calls of other registered enter key-shortcuts, like the default\n    // button on a form). See Widget.js for details about removing with or without CSS animations.\n    let hasPopup = !!this.popup;\n    this.acceptInput();\n    if (this.popup) {\n      this.closePopup();\n    }\n    if (hasPopup) {\n      event.stopPropagation();\n    }\n  }\n\n  _lookupByTextOrAllDone(result) {\n    if (super._handleException(result)) {\n      return;\n    }\n    if (result.lookupRows.length === 0) {\n      this.setLoading(false);\n      this._handleEmptyResult();\n      return;\n    }\n    super._lookupByTextOrAllDone(result);\n  }\n\n  _formatValue(value) {\n    return scout.nvl(value, '');\n  }\n\n  _validateValue(value) {\n    if (objects.isNullOrUndefined(value)) {\n      return value;\n    }\n    let validValue = strings.asString(value);\n    if (this.trimText) {\n      validValue = validValue.trim();\n    }\n    if (validValue === '') {\n      validValue = null;\n    }\n    return validValue;\n  }\n\n  _ensureValue(value) {\n    return strings.asString(value);\n  }\n\n  /**\n   * When 'clear' has been clicked (searchText is empty), we want to call customTextAccepted,\n   * so the new value is sent to the server #221199.\n   */\n  _acceptByText(sync, searchText) {\n    $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptByText) searchText=', searchText);\n    let async = !sync;\n\n    // In case sync=true we cannot wait for the results of the lookup-call,\n    // that's why we simply accept the text that's already in the field\n    if (async && this.lookupOnAcceptByText && strings.hasText(searchText)) {\n      super._acceptByTextAsync(searchText);\n    } else {\n      this._customTextAccepted(searchText);\n    }\n  }\n\n  /**\n   * Only used in case lookupOnAcceptByText is true. It's basically the same code\n   * as in the smart-field but without the error handling.\n   */\n  _acceptByTextDone(result) {\n    this._userWasTyping = false;\n    this._extendResult(result);\n\n    // when there's exactly one result, we accept that lookup row\n    if (result.uniqueMatch) {\n      let lookupRow = result.uniqueMatch;\n      if (this._isLookupRowActive(lookupRow)) {\n        this.setLookupRow(lookupRow);\n        this._inputAccepted();\n        return;\n      }\n    }\n\n    this._customTextAccepted(result.text);\n  }\n\n  _checkResetLookupRow(value) {\n    return this.lookupRow && this.lookupRow.text !== value;\n  }\n\n  _checkSearchTextChanged(searchText) {\n    return this._checkDisplayTextChanged(searchText);\n  }\n\n  _customTextAccepted(searchText) {\n    this._setLookupRow(null); // only reset property lookup\n    this._setValue(searchText);\n    this._inputAccepted(true, false);\n  }\n\n  getValueForSelection() {\n    return this._showSelection() ? this.lookupRow.key : null;\n  }\n\n  /**\n   * This function is overridden by ProposalField because it has a different behavior than the smart-field.\n   */\n  _acceptLookupRowAndValueFromField(otherField) {\n    if (this.lookupRow !== otherField.lookupRow) {\n      this.setLookupRow(otherField.lookupRow);\n    }\n  }\n\n  /**\n   * In ProposalField value and display-text is the same. When a custom text has been entered,\n   * the value is set and the lookup-row is null.\n   */\n  _copyValuesFromField(otherField) {\n    if (this.lookupRow !== otherField.lookupRow) {\n      this.setLookupRow(otherField.lookupRow);\n    }\n    if (this.value !== otherField.value) {\n      this.setValue(otherField.value);\n    }\n  }\n\n  _acceptInput(sync, searchText, searchTextEmpty, searchTextChanged, selectedLookupRow) {\n    // Do nothing when search text is equals to the text of the current lookup row\n    if (!selectedLookupRow && this.lookupRow && this.lookupRow.text === searchText) {\n      $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptInput) unchanged: text is equals. Close popup');\n      this._inputAccepted(false);\n      return;\n    }\n\n    // 2.) proposal chooser is open -> use the selected row as value\n    if (selectedLookupRow) {\n      $.log.isDebugEnabled() && $.log.debug('(ProposalField#_acceptInput) lookup-row selected. Set lookup-row, close popup lookupRow=', selectedLookupRow.toString());\n      this.clearErrorStatus();\n      this.setLookupRow(selectedLookupRow);\n      this._inputAccepted();\n      return;\n    }\n\n    // 3.) proposal chooser is not open -> try to accept the current display text\n    // this causes a lookup which may fail and open a new proposal chooser (property\n    // change for 'result').\n    if (searchTextChanged) {\n      this.clearErrorStatus();\n      this._acceptByText(sync, searchText);\n    } else if (!this._hasUiError()) {\n      this._inputAccepted(false);\n    } else {\n      // even though there's nothing to do, someone could wait for our promise to be resolved\n      this._acceptInputDeferred.resolve();\n    }\n\n    return this._acceptInputDeferred.promise();\n  }\n\n  setTrimText(trimText) {\n    this.setProperty('trimText', trimText);\n  }\n\n  /**\n   * @override ValueField.js\n   */\n  _updateEmpty() {\n    this.empty = strings.empty(this.value);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}