{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AjaxCall, AjaxError, scout } from '../index';\nimport $ from 'jquery';\n\n/**\n * Utility to perform Ajax requests in an easy way.<br>\n * It basically uses the class {@link AjaxCall} and provides some common functions to call a REST backend.\n */\n\n/**\n * Performs a HTTP GET request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function get(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP POST request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function post(url, data, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP PUT request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function put(url, data, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP DELETE request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function remove(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP GET request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function getJson(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP POST request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function postJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  let opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP PUT request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function putJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  let opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP DELETE request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function removeJson(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs an Ajax request using JSON as format for the request and the response.\n * The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function callJson(options) {\n  return createCallJson(options).call();\n}\n\n/**\n * Performs an Ajax request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function call(options) {\n  return createCall(options).call();\n}\n\n/**\n * Prepares an Ajax call with JSON as format for the request and the response,\n * but does not execute it yet. The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCallJson(options) {\n  let opts = $.extend({}, {\n    type: 'POST',\n    dataType: 'json',\n    contentType: 'application/json; charset=UTF-8'\n  }, options);\n  return createCall(opts);\n}\n\n/**\n * Prepares an Ajax call, but does not execute it yet.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCall(options) {\n  let opts = $.extend({}, {\n    cache: false\n  }, options);\n  return scout.create('AjaxCall', {\n    ajaxOptions: opts\n  }, {\n    ensureUniqueId: false\n  });\n}\nexport default {\n  createCall,\n  createCallJson,\n  call,\n  callJson,\n  get,\n  getJson,\n  post,\n  postJson,\n  put,\n  putJson,\n  remove,\n  removeJson\n};","map":{"version":3,"names":["AjaxCall","AjaxError","scout","$","get","url","options","opts","extend","type","call","post","data","put","remove","getJson","callJson","postJson","JSON","stringify","putJson","removeJson","createCallJson","createCall","dataType","contentType","cache","create","ajaxOptions","ensureUniqueId"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/ajax/ajax.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AjaxCall, AjaxError, scout} from '../index';\nimport $ from 'jquery';\n\n/**\n * Utility to perform Ajax requests in an easy way.<br>\n * It basically uses the class {@link AjaxCall} and provides some common functions to call a REST backend.\n */\n\n/**\n * Performs a HTTP GET request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function get(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP POST request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function post(url, data, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP PUT request.\n * @param data the data to be sent.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function put(url, data, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP DELETE request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function remove(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return call(opts);\n}\n\n/**\n * Performs a HTTP GET request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function getJson(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'GET'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP POST request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function postJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  let opts = $.extend({}, {\n    url: url,\n    type: 'POST',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP PUT request using JSON as format for the request and the response.\n * @param data {(object|string)} the data to be sent. If the data is not a string it will be converted to a string using JSON.stringify().\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function putJson(url, data, options) {\n  if (data && typeof data !== 'string') {\n    data = JSON.stringify(data);\n  }\n  let opts = $.extend({}, {\n    url: url,\n    type: 'PUT',\n    data: data\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs a HTTP DELETE request using JSON as format for the request and the response.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function removeJson(url, options) {\n  let opts = $.extend({}, {\n    url: url,\n    type: 'DELETE'\n  }, options);\n  return callJson(opts);\n}\n\n/**\n * Performs an Ajax request using JSON as format for the request and the response.\n * The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function callJson(options) {\n  return createCallJson(options).call();\n}\n\n/**\n * Performs an Ajax request.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {Promise} a promise which is resolved when the request succeeds.\n *          In case of an error the promise is rejected with an {@link AjaxError} as argument.\n */\nexport function call(options) {\n  return createCall(options).call();\n}\n\n/**\n * Prepares an Ajax call with JSON as format for the request and the response,\n * but does not execute it yet. The default HTTP method is POST.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCallJson(options) {\n  let opts = $.extend({}, {\n    type: 'POST',\n    dataType: 'json',\n    contentType: 'application/json; charset=UTF-8'\n  }, options);\n  return createCall(opts);\n}\n\n/**\n * Prepares an Ajax call, but does not execute it yet.\n * @param [options] additional settings for the request.\n *        Since jQuery is used to perform the request, all the jQuery Ajax settings are accepted.\n * @returns {AjaxCall} the prepared Ajax call object. Execute it with the call() function.\n */\nexport function createCall(options) {\n  let opts = $.extend({}, {\n    cache: false\n  }, options);\n\n  return scout.create('AjaxCall', {\n    ajaxOptions: opts\n  }, {\n    ensureUniqueId: false\n  });\n}\n\nexport default {\n  createCall,\n  createCallJson,\n  call,\n  callJson,\n  get,\n  getJson,\n  post,\n  postJson,\n  put,\n  putJson,\n  remove,\n  removeJson\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}