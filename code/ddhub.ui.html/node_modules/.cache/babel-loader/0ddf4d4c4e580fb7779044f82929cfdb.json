{"ast":null,"code":"/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AggregateTableControl, arrays, objects, scout, Widget } from '../index';\nimport $ from 'jquery';\n\n/**\n * Delegates events between the Table and it's internal TileGrid.\n *\n */\nexport default class TableTileGridMediator extends Widget {\n  constructor() {\n    super();\n    this.table = null;\n    this.tileAccordion = null;\n    this._tileGridListener = null;\n    this._tableListener = null;\n    this._destroyHandler = null;\n    this.tiles = [];\n    this.tileMappings = []; // used only in scout classic\n    this.tilesMap = {}; // tiles by rowId\n    this.groups = {};\n    this.groupForTileMap = {}; // groupId by tile\n    this.tableState = {}; // always stores the last table state before tileMode activation\n\n    this._tileAccordionPropertyChangeHandler = this._onTileAccordionPropertyChange.bind(this);\n    this._tileAccordionActionHandler = this._onTileAccordionAction.bind(this);\n    this._tileAccordionClickHandler = this._onTileAccordionClick.bind(this);\n    this._tableFilterAddedHandler = this._onTableFilterAdded.bind(this);\n    this._tableFilterRemovedHandler = this._onTableFilterRemoved.bind(this);\n    this._tableFilterHandler = this._onTableFilter.bind(this);\n    this._tableGroupHandler = this._onTableGroup.bind(this);\n    this._tableRowsSelectedHandler = this._onTableRowsSelected.bind(this);\n    this._tableRowsInsertedHandler = this._onTableRowsInserted.bind(this);\n    this._tableRowsDeletedHandler = this._onTableRowsDeleted.bind(this);\n    this._tableAllRowsDeletedHandler = this._onTableAllRowsDeleted.bind(this);\n    this._tableRowOrderChangedHandler = this._onTableRowOrderChangedHandler.bind(this);\n    this._destroyHandler = this._uninstallListeners.bind(this);\n\n    // properties for internal tileAccordion\n    this.exclusiveExpand = false;\n    this.gridColumnCount = null;\n    this.tileGridLayoutConfig = null;\n    this.withPlaceholders = null;\n    this._addWidgetProperties(['tileAccordion', 'tiles', 'tileMappings']);\n  }\n  init(model) {\n    super._init(model);\n    this.table = this.parent;\n    if (!this.tileAccordion) {\n      this.tileAccordion = this._createTileAccordion();\n      this._installListeners();\n    }\n    this.tableState.headerVisible = this.table.headerVisible;\n    this._setTiles(this.tiles);\n    this._setTileMappings(this.tileMappings);\n  }\n  _installListeners() {\n    this.tileAccordion.on('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.on('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.on('tileClick', this._tileAccordionClickHandler);\n    this.table.on('filterAdded', this._tableFilterAddedHandler);\n    this.table.on('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.on('filter', this._tableFilterHandler);\n    this.table.on('group', this._tableGroupHandler);\n    this.table.on('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.on('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.on('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.on('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.on('rowOrderChanged', this._tableRowOrderChangedHandler);\n    this.tileAccordion.on('destroy', this._destroyHandler);\n    this.table.on('destroy', this._destroyHandler);\n  }\n  _uninstallListeners() {\n    this.tileAccordion.off('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.off('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.off('tileClick', this._tileAccordionClickHandler);\n    this.table.off('filterAdded', this._tableFilterAddedHandler);\n    this.table.off('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.off('filter', this._tableFilterHandler);\n    this.table.off('group', this._tableGroupHandler);\n    this.table.off('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.off('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.off('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.off('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.off('rowOrderChanged', this._tableRowOrderChangedHandler);\n    this.tileAccordion.off('destroy', this._destroyHandler);\n    this.table.off('destroy', this._destroyHandler);\n  }\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    if (this.tileAccordion) {\n      this.tileAccordion.setGridColumnCount(gridColumnCount);\n    }\n  }\n  setTileGridLayoutConfig(tileGridLayoutConfig) {\n    this.setProperty('tileGridLayoutConfig', tileGridLayoutConfig);\n    if (this.tileAccordion) {\n      this.tileAccordion.setTileGridLayoutConfig(tileGridLayoutConfig);\n    }\n  }\n  setWithPlaceholders(withPlaceholders) {\n    this.setProperty('withPlaceholders', withPlaceholders);\n    if (this.tileAccordion) {\n      this.tileAccordion.setWithPlaceholders(withPlaceholders);\n    }\n  }\n  _setTileMappings(tableRowTileMappings) {\n    this._setProperty('tileMappings', tableRowTileMappings);\n    if (!tableRowTileMappings) {\n      return;\n    }\n    let tiles = tableRowTileMappings.map(this.resolveMapping, this);\n    this._setTiles(tiles);\n  }\n  setTiles(tiles) {\n    this.setProperty('tiles', tiles);\n  }\n  _setTiles(tiles) {\n    this._isUpdatingTiles = true;\n    // remove all new tiles from this.tiles to prevent reused tiles from being destroyed in reset()\n    arrays.removeAll(this.tiles, tiles);\n    this.reset();\n    this._setTilesInternal(tiles);\n    this._isUpdatingTiles = false;\n  }\n  _setTilesInternal(tiles) {\n    // check if all tiles are already available in the table\n    let tableRowMissing = tiles.some(function (tile) {\n      return this.table.rowsMap[tile.rowId] === undefined;\n    }, this);\n    if (tableRowMissing) {\n      if (this.table.initialized) {\n        // wait for next insertRows event on the table to execute this function again\n        this.table.one('rowsInserted', this._setTilesInternal.bind(this, tiles));\n      } else {\n        // if table is not initialized already wait for the init event\n        this.table.one('init', this._setTilesInternal.bind(this, tiles));\n      }\n      return;\n    }\n    this._refreshTilesMap(tiles);\n\n    // create simplified grouping for tile accordion, grouping on the table can be left as is.\n    this._initGroups(tiles);\n    this._setProperty('tiles', tiles);\n    this.tileAccordion.setTiles(this.tiles);\n    this._updateGroupVisibility();\n    this._syncSelectionFromTableToTile();\n  }\n\n  // only used in ScoutJS, see TableAdapter.modifyTablePrototype()\n  loadTiles() {\n    // hierarchy is not supported in tile mode. There is no way to visualize a parent-child hierarchy in the tileGrid. Therefore only top level rows are displayed.\n    let rows = this.table.rows.filter(row => {\n      return !row.parentRow;\n    });\n    let tiles = this.table.createTiles(rows);\n    if (tiles) {\n      this.setTiles(tiles);\n    }\n  }\n  resolveMapping(tableRowTileMapping) {\n    let tile = tableRowTileMapping.tile;\n    tile.rowId = tableRowTileMapping.tableRow;\n    tile.setParent(this);\n    tile.setOwner(this);\n    return tile;\n  }\n\n  // update tilesMap with the given tiles or recreate tilesMap completely in case of null given\n  _refreshTilesMap(tiles) {\n    if (!tiles) {\n      tiles = this.tiles;\n      this.tilesMap = {};\n    }\n    tiles.forEach(function (tile) {\n      this.tilesMap[tile.rowId] = tile;\n    }, this);\n  }\n  getTilesForRows(rows) {\n    return rows.map(function (row) {\n      return this.tilesMap[row.id];\n    }, this).filter(t => {\n      return !!t;\n    });\n  }\n  _initGroups(tiles) {\n    let primaryGroupingColumn = arrays.find(this.table.columns, column => {\n      return column.grouped && column.sortIndex === 0;\n    });\n    tiles.forEach(function (tile) {\n      let row = this.table.rowsMap[tile.rowId];\n      let groupId = primaryGroupingColumn ? primaryGroupingColumn.cellTextForGrouping(row) : 'default';\n      groupId = scout.nvl(groupId, ''); // use empty group to avoid NPE\n      this.groupForTileMap[row.id] = groupId;\n      // check if group already exists, otherwise create it\n      let group = this.tileAccordion.getGroupById(groupId);\n      if (!group) {\n        group = this._createTileGroup(groupId, primaryGroupingColumn, row);\n        this._adaptTileGrid(group.body);\n        this.tileAccordion.insertGroup(group);\n      }\n      tile.parent = group;\n    }, this);\n  }\n  _adaptTileGrid(tileGrid) {\n    // The table contains the menu items -> pass them to the showContextMenu function of the tileGrid.\n    objects.mandatoryFunction(tileGrid, '_showContextMenu');\n    let origShowContextMenu = tileGrid._showContextMenu;\n    tileGrid._showContextMenu = function (options) {\n      objects.mandatoryFunction(this.table, '_filterMenusForContextMenu');\n      options.menuItems = this.table._filterMenusForContextMenu();\n      scout.assertProperty(this.table, '_filterMenusHandler');\n      options.menuFilter = this.table._filterMenusHandler;\n      origShowContextMenu.call(tileGrid, options);\n    }.bind(this);\n    // use the table's keyStrokeContext bindTarget for each tileGrid as well to ensure that the tileGrid's keyStrokes are active when the table is active\n    tileGrid.keyStrokeContext.$bindTarget = this.table.keyStrokeContext.$bindTarget;\n  }\n  _createTileAccordion() {\n    return scout.create('TileAccordion', {\n      parent: this.table,\n      virtual: true,\n      selectable: true,\n      multiselect: this.table.multiSelect,\n      exclusiveExpand: this.exclusiveExpand,\n      gridColumnCount: this.gridColumnCount,\n      tileGridLayoutConfig: this.tileGridLayoutConfig,\n      withPlaceholders: this.withPlaceholders\n    });\n  }\n  _createTileGroup(groupId, primaryGroupingColumn, row) {\n    let htmlEnabled, title, iconId;\n    if (primaryGroupingColumn) {\n      htmlEnabled = primaryGroupingColumn.htmlEnabled;\n      let cell = primaryGroupingColumn.createAggrGroupCell(row);\n      title = cell.text;\n      iconId = cell.iconId;\n    }\n    return scout.create('Group', {\n      parent: this.tileAccordion,\n      id: groupId,\n      headerVisible: groupId !== 'default',\n      title: title,\n      titleHtmlEnabled: htmlEnabled,\n      iconId: iconId,\n      body: {\n        objectType: 'TileGrid',\n        scrollable: false\n      }\n    });\n  }\n  activate() {\n    this.tableState.headerVisible = this.table.headerVisible;\n    this.table.setHeaderVisible(false);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(true);\n    }\n\n    // hide aggregation table control\n    this.table.tableControls.forEach(function (control) {\n      if (control instanceof AggregateTableControl) {\n        this.tableState.aggregateTableControlSelected = control.selected;\n        control.setSelected(false, {\n          closeWhenUnselected: true,\n          animate: false\n        });\n        control.setVisible(false);\n      }\n    }, this);\n    this.tableState.loadingSupportContainer = this.table.loadingSupport.options$Container;\n    this.table.loadingSupport.options$Container = function () {\n      return this.tileAccordion.$container;\n    }.bind(this);\n\n    // check if there exists a hierarchy within the tableRows\n    let hasHierarchy = arrays.find(this.table.rows, row => {\n      return row.parentRow;\n    }) !== null;\n    if (hasHierarchy) {\n      // add the hierarchyFilter since the tileMode doesn't support hierarchy\n      this._tableHierarchyFilter = scout.create('TileTableHierarchyFilter', {\n        table: this.table\n      });\n      this.table.addFilter(this._tableHierarchyFilter);\n    }\n\n    // doesn't depend upon any tile data, therefore execute on activation\n    this._syncFiltersFromTableToTile();\n    this._syncScrollTopFromTableToTile();\n  }\n  deactivate() {\n    // show aggregation table control\n    this.table.tableControls.forEach(control => {\n      if (control instanceof AggregateTableControl) {\n        control.setVisible(true);\n      }\n    }, this);\n\n    // use _setProperty to avoid instant rendering, render manually later on (this is necessary since TableHeader depends upon table.$data)\n    this.table._setProperty('headerVisible', this.tableState.headerVisible);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(false);\n    }\n    if (this.tableState.loadingSupportContainer) {\n      this.table.loadingSupport.options$Container = this.tableState.loadingSupportContainer;\n    }\n    if (this._tableHierarchyFilter) {\n      this.table.removeFilter(this._tableHierarchyFilter);\n      this._tableHierarchyFilter = null;\n    }\n    this._syncScrollTopFromTileGridToTable();\n\n    // complete reset\n    this.reset();\n  }\n  reset() {\n    this.tilesMap = {};\n    this.groups = {};\n    this.groupForTileMap = {};\n    this.tileAccordion.deleteAllTiles();\n    this.tileAccordion.deleteAllGroups();\n\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(tile => {\n      tile.destroy();\n    });\n  }\n  renderTileMode() {\n    if (this.table.tileMode) {\n      // if the table was previously in tileMode this is not necessary...\n      if (this.table.$data) {\n        this.table._removeData();\n      }\n      this._renderTileTableHeader();\n      this._renderTileAccordion();\n    } else {\n      this._removeTileTableHeader();\n      this._removeTileAccordion();\n      this.table._renderData();\n      this.table._renderTableHeader();\n\n      // restore selected state of the aggregationTableControl here since it depends on table.$data\n      if (this.tableState.aggregateTableControlSelected) {\n        arrays.find(this.table.tableControls, control => control instanceof AggregateTableControl).setSelected(true);\n      }\n    }\n    this.table._refreshMenuBarPosition();\n  }\n  destroy() {\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(tile => {\n      tile.destroy();\n    });\n    this.tileAccordion.destroy();\n    this.tileAccordion = null;\n  }\n  insertTiles(tiles) {\n    tiles = arrays.ensure(tiles);\n    if (tiles.length === 0) {\n      return;\n    }\n    this.setTiles(this.tiles.concat(tiles));\n  }\n  deleteTiles(tiles) {\n    if (!tiles) {\n      tiles = this.tiles.slice();\n    }\n    arrays.removeAll(this.tiles, tiles);\n    tiles.forEach(function (tile) {\n      delete this.tilesMap[tile.rowId];\n      delete this.groupForTileMap[tile.rowId];\n      let group = this.tileAccordion.getGroupByTile(tile);\n      if (group) {\n        // if there's only one left remove the group (tile is removed later)\n        if (group.body.tiles.length === 1) {\n          this.tileAccordion.deleteGroup(group);\n        }\n      }\n      tile.destroy();\n    }, this);\n    this.tileAccordion.deleteTiles(tiles);\n  }\n  _onTileAccordionPropertyChange(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    if (event.propertyName === 'selectedTiles') {\n      this._syncSelectionFromTileGridToTable(event.source.getSelectedTiles());\n      if (this.tileAccordion.rendered) {\n        // Depending on the tiles content, selecting tiles with shift can lead to a mix of selecting the tiles content\n        // and the tiles itself, which doesn't look nice. Remove the text selection when selection tiles to avoid this.\n        this.tileAccordion.$container.document(true).getSelection().removeAllRanges();\n      }\n    }\n    if (event.propertyName === 'filteredTiles') {\n      this._updateGroupVisibility();\n    }\n  }\n  _onTileAccordionAction(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table.doRowAction(this.table.rowsMap[event.tile.rowId]);\n  }\n  _onTileAccordionClick(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table._triggerRowClick(event, this.table.rowsMap[event.tile.rowId], event.mouseButton);\n  }\n  _onTableRowsSelected(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._syncSelectionFromTableToTile();\n  }\n  _onTableRowsInserted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.insertTiles(this.table.createTiles(event.rows));\n  }\n  _onTableRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles(this.getTilesForRows(event.rows));\n  }\n  _onTableAllRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles();\n  }\n  _onTableRowOrderChangedHandler(event) {\n    // ignore event when not in tileMode or when this.tilesMap is not (yet) initialized correctly\n    if (!this.table.tileMode || $.isEmptyObject(this.tilesMap)) {\n      return;\n    }\n    this.tiles = this.table.rows.map(function (row) {\n      return this.tilesMap[row.id];\n    }, this);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n  _onTableGroup(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.deleteAllGroups();\n    this._initGroups(this.tiles);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n  _onTableFilterAdded(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._addFilter(event.filter);\n  }\n  _onTableFilterRemoved(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.removeFilter(event.filter.tileFilter);\n  }\n  _addFilter(tableFilter) {\n    let tileFilter = {\n      table: this.table,\n      accept: function (tile) {\n        let rowForTile = this.table.rowsMap[tile.rowId];\n        if (rowForTile) {\n          return tableFilter.accept(rowForTile);\n        }\n        return false;\n      }\n    };\n    if (tableFilter.tileFilter) {\n      this.tileAccordion.removeFilter(tableFilter.tileFilter, false);\n    }\n    tableFilter.tileFilter = tileFilter;\n    this.tileAccordion.addFilter(tileFilter);\n  }\n  _onTableFilter(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.filter();\n  }\n  _syncSelectionFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.selectTiles(this.getTilesForRows(this.table.selectedRows));\n    }\n  }\n  _syncSelectionFromTileGridToTable(selectedTiles) {\n    if (!this._isUpdatingTiles) {\n      let selectedRows = selectedTiles.map(function (tile) {\n        return this.table.rowsMap[tile.rowId];\n      }, this).filter(t => {\n        return Boolean(t);\n      });\n      this.table.selectRows(selectedRows);\n    }\n  }\n  _updateGroupVisibility() {\n    this.tileAccordion.groups.forEach(group => {\n      // Make groups invisible if a tile filter is active and no tiles match (= no tiles are visible)\n      let groupEmpty = group.body.filters.length > 0 && group.body.filteredTiles.length === 0;\n      group.setVisible(!groupEmpty);\n      group.setTitleSuffix(group.body.filteredTiles.length);\n    });\n  }\n  _syncScrollTopFromTableToTile() {\n    let rowIndex = this.table._rowIndexAtScrollTop(this.table.scrollTop);\n    if (rowIndex <= 0) {\n      return;\n    }\n    let tile = this.tilesMap[this.table.rows[rowIndex].id];\n    if (!tile) {\n      return;\n    }\n\n    // reset scrollTop on tileAccordion, otherwise it would overwrite the synced scrollTop\n    this.tileAccordion.scrollTop = null;\n    let options = {\n      align: 'top'\n    };\n    if (!tile.rendered) {\n      // Execute delayed because table may be not layouted yet\n      this.table.session.layoutValidator.schedulePostValidateFunction(tile.reveal.bind(tile, options));\n      return;\n    }\n    tile.reveal(options);\n  }\n  _syncScrollTopFromTileGridToTable() {\n    let tile = this.tileAccordion._tileAtScrollTop(this.tileAccordion.scrollTop);\n    if (tile) {\n      let options = {\n        align: 'top'\n      };\n      if (!this.table._isDataRendered()) {\n        this.table.session.layoutValidator.schedulePostValidateFunction(this.table.scrollTo.bind(this.table, this.table.rowsMap[tile.rowId], options));\n      } else {\n        this.table.scrollTo(this.table.rowsMap[tile.rowId], options);\n      }\n    }\n  }\n  _syncFiltersFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.setFilters([]);\n      this.table.filters.forEach(tableFilter => this._addFilter(tableFilter));\n    }\n  }\n  _renderTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.render();\n    }\n  }\n  _removeTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.remove();\n    }\n  }\n  _renderTileAccordion() {\n    if (!this.tileAccordion.rendered) {\n      this.tileAccordion.render();\n    }\n  }\n  _removeTileAccordion() {\n    if (this.tileAccordion.rendered) {\n      this.tileAccordion.remove();\n    }\n  }\n}","map":{"version":3,"names":["AggregateTableControl","arrays","objects","scout","Widget","$","TableTileGridMediator","constructor","table","tileAccordion","_tileGridListener","_tableListener","_destroyHandler","tiles","tileMappings","tilesMap","groups","groupForTileMap","tableState","_tileAccordionPropertyChangeHandler","_onTileAccordionPropertyChange","bind","_tileAccordionActionHandler","_onTileAccordionAction","_tileAccordionClickHandler","_onTileAccordionClick","_tableFilterAddedHandler","_onTableFilterAdded","_tableFilterRemovedHandler","_onTableFilterRemoved","_tableFilterHandler","_onTableFilter","_tableGroupHandler","_onTableGroup","_tableRowsSelectedHandler","_onTableRowsSelected","_tableRowsInsertedHandler","_onTableRowsInserted","_tableRowsDeletedHandler","_onTableRowsDeleted","_tableAllRowsDeletedHandler","_onTableAllRowsDeleted","_tableRowOrderChangedHandler","_onTableRowOrderChangedHandler","_uninstallListeners","exclusiveExpand","gridColumnCount","tileGridLayoutConfig","withPlaceholders","_addWidgetProperties","init","model","_init","parent","_createTileAccordion","_installListeners","headerVisible","_setTiles","_setTileMappings","on","off","setGridColumnCount","setProperty","setTileGridLayoutConfig","setWithPlaceholders","tableRowTileMappings","_setProperty","map","resolveMapping","setTiles","_isUpdatingTiles","removeAll","reset","_setTilesInternal","tableRowMissing","some","tile","rowsMap","rowId","undefined","initialized","one","_refreshTilesMap","_initGroups","_updateGroupVisibility","_syncSelectionFromTableToTile","loadTiles","rows","filter","row","parentRow","createTiles","tableRowTileMapping","tableRow","setParent","setOwner","forEach","getTilesForRows","id","t","primaryGroupingColumn","find","columns","column","grouped","sortIndex","groupId","cellTextForGrouping","nvl","group","getGroupById","_createTileGroup","_adaptTileGrid","body","insertGroup","tileGrid","mandatoryFunction","origShowContextMenu","_showContextMenu","options","menuItems","_filterMenusForContextMenu","assertProperty","menuFilter","_filterMenusHandler","call","keyStrokeContext","$bindTarget","create","virtual","selectable","multiselect","multiSelect","htmlEnabled","title","iconId","cell","createAggrGroupCell","text","titleHtmlEnabled","objectType","scrollable","activate","setHeaderVisible","tileTableHeader","setVisible","tableControls","control","aggregateTableControlSelected","selected","setSelected","closeWhenUnselected","animate","loadingSupportContainer","loadingSupport","options$Container","$container","hasHierarchy","_tableHierarchyFilter","addFilter","_syncFiltersFromTableToTile","_syncScrollTopFromTableToTile","deactivate","removeFilter","_syncScrollTopFromTileGridToTable","deleteAllTiles","deleteAllGroups","destroy","renderTileMode","tileMode","$data","_removeData","_renderTileTableHeader","_renderTileAccordion","_removeTileTableHeader","_removeTileAccordion","_renderData","_renderTableHeader","_refreshMenuBarPosition","insertTiles","ensure","length","concat","deleteTiles","slice","getGroupByTile","deleteGroup","event","propertyName","_syncSelectionFromTileGridToTable","source","getSelectedTiles","rendered","document","getSelection","removeAllRanges","doRowAction","_triggerRowClick","mouseButton","isEmptyObject","_addFilter","tileFilter","tableFilter","accept","rowForTile","selectTiles","selectedRows","selectedTiles","Boolean","selectRows","groupEmpty","filters","filteredTiles","setTitleSuffix","rowIndex","_rowIndexAtScrollTop","scrollTop","align","session","layoutValidator","schedulePostValidateFunction","reveal","_tileAtScrollTop","_isDataRendered","scrollTo","setFilters","render","remove"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableTileGridMediator.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2021 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AggregateTableControl, arrays, objects, scout, Widget} from '../index';\nimport $ from 'jquery';\n\n/**\n * Delegates events between the Table and it's internal TileGrid.\n *\n */\nexport default class TableTileGridMediator extends Widget {\n\n  constructor() {\n    super();\n\n    this.table = null;\n    this.tileAccordion = null;\n\n    this._tileGridListener = null;\n    this._tableListener = null;\n    this._destroyHandler = null;\n\n    this.tiles = [];\n    this.tileMappings = []; // used only in scout classic\n    this.tilesMap = {}; // tiles by rowId\n    this.groups = {};\n    this.groupForTileMap = {}; // groupId by tile\n    this.tableState = {}; // always stores the last table state before tileMode activation\n\n    this._tileAccordionPropertyChangeHandler = this._onTileAccordionPropertyChange.bind(this);\n    this._tileAccordionActionHandler = this._onTileAccordionAction.bind(this);\n    this._tileAccordionClickHandler = this._onTileAccordionClick.bind(this);\n    this._tableFilterAddedHandler = this._onTableFilterAdded.bind(this);\n    this._tableFilterRemovedHandler = this._onTableFilterRemoved.bind(this);\n    this._tableFilterHandler = this._onTableFilter.bind(this);\n    this._tableGroupHandler = this._onTableGroup.bind(this);\n    this._tableRowsSelectedHandler = this._onTableRowsSelected.bind(this);\n    this._tableRowsInsertedHandler = this._onTableRowsInserted.bind(this);\n    this._tableRowsDeletedHandler = this._onTableRowsDeleted.bind(this);\n    this._tableAllRowsDeletedHandler = this._onTableAllRowsDeleted.bind(this);\n    this._tableRowOrderChangedHandler = this._onTableRowOrderChangedHandler.bind(this);\n\n    this._destroyHandler = this._uninstallListeners.bind(this);\n\n    // properties for internal tileAccordion\n    this.exclusiveExpand = false;\n    this.gridColumnCount = null;\n    this.tileGridLayoutConfig = null;\n    this.withPlaceholders = null;\n\n    this._addWidgetProperties(['tileAccordion', 'tiles', 'tileMappings']);\n  }\n\n  init(model) {\n    super._init(model);\n\n    this.table = this.parent;\n\n    if (!this.tileAccordion) {\n      this.tileAccordion = this._createTileAccordion();\n      this._installListeners();\n    }\n    this.tableState.headerVisible = this.table.headerVisible;\n\n    this._setTiles(this.tiles);\n    this._setTileMappings(this.tileMappings);\n  }\n\n  _installListeners() {\n    this.tileAccordion.on('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.on('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.on('tileClick', this._tileAccordionClickHandler);\n    this.table.on('filterAdded', this._tableFilterAddedHandler);\n    this.table.on('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.on('filter', this._tableFilterHandler);\n    this.table.on('group', this._tableGroupHandler);\n    this.table.on('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.on('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.on('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.on('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.on('rowOrderChanged', this._tableRowOrderChangedHandler);\n\n    this.tileAccordion.on('destroy', this._destroyHandler);\n    this.table.on('destroy', this._destroyHandler);\n  }\n\n  _uninstallListeners() {\n    this.tileAccordion.off('propertyChange', this._tileAccordionPropertyChangeHandler);\n    this.tileAccordion.off('tileAction', this._tileAccordionActionHandler);\n    this.tileAccordion.off('tileClick', this._tileAccordionClickHandler);\n    this.table.off('filterAdded', this._tableFilterAddedHandler);\n    this.table.off('filterRemoved', this._tableFilterRemovedHandler);\n    this.table.off('filter', this._tableFilterHandler);\n    this.table.off('group', this._tableGroupHandler);\n    this.table.off('rowsSelected', this._tableRowsSelectedHandler);\n    this.table.off('rowsInserted', this._tableRowsInsertedHandler);\n    this.table.off('rowsDeleted', this._tableRowsDeletedHandler);\n    this.table.off('allRowsDeleted', this._tableAllRowsDeletedHandler);\n    this.table.off('rowOrderChanged', this._tableRowOrderChangedHandler);\n\n    this.tileAccordion.off('destroy', this._destroyHandler);\n    this.table.off('destroy', this._destroyHandler);\n  }\n\n  setGridColumnCount(gridColumnCount) {\n    this.setProperty('gridColumnCount', gridColumnCount);\n    if (this.tileAccordion) {\n      this.tileAccordion.setGridColumnCount(gridColumnCount);\n    }\n  }\n\n  setTileGridLayoutConfig(tileGridLayoutConfig) {\n    this.setProperty('tileGridLayoutConfig', tileGridLayoutConfig);\n    if (this.tileAccordion) {\n      this.tileAccordion.setTileGridLayoutConfig(tileGridLayoutConfig);\n    }\n  }\n\n  setWithPlaceholders(withPlaceholders) {\n    this.setProperty('withPlaceholders', withPlaceholders);\n    if (this.tileAccordion) {\n      this.tileAccordion.setWithPlaceholders(withPlaceholders);\n    }\n  }\n\n  _setTileMappings(tableRowTileMappings) {\n    this._setProperty('tileMappings', tableRowTileMappings);\n    if (!tableRowTileMappings) {\n      return;\n    }\n    let tiles = tableRowTileMappings.map(this.resolveMapping, this);\n    this._setTiles(tiles);\n  }\n\n  setTiles(tiles) {\n    this.setProperty('tiles', tiles);\n  }\n\n  _setTiles(tiles) {\n    this._isUpdatingTiles = true;\n    // remove all new tiles from this.tiles to prevent reused tiles from being destroyed in reset()\n    arrays.removeAll(this.tiles, tiles);\n    this.reset();\n    this._setTilesInternal(tiles);\n    this._isUpdatingTiles = false;\n  }\n\n  _setTilesInternal(tiles) {\n    // check if all tiles are already available in the table\n    let tableRowMissing = tiles.some(function(tile) {\n      return this.table.rowsMap[tile.rowId] === undefined;\n    }, this);\n\n    if (tableRowMissing) {\n      if (this.table.initialized) {\n        // wait for next insertRows event on the table to execute this function again\n        this.table.one('rowsInserted', this._setTilesInternal.bind(this, tiles));\n      } else {\n        // if table is not initialized already wait for the init event\n        this.table.one('init', this._setTilesInternal.bind(this, tiles));\n      }\n      return;\n    }\n\n    this._refreshTilesMap(tiles);\n\n    // create simplified grouping for tile accordion, grouping on the table can be left as is.\n    this._initGroups(tiles);\n\n    this._setProperty('tiles', tiles);\n\n    this.tileAccordion.setTiles(this.tiles);\n    this._updateGroupVisibility();\n\n    this._syncSelectionFromTableToTile();\n  }\n\n  // only used in ScoutJS, see TableAdapter.modifyTablePrototype()\n  loadTiles() {\n    // hierarchy is not supported in tile mode. There is no way to visualize a parent-child hierarchy in the tileGrid. Therefore only top level rows are displayed.\n    let rows = this.table.rows.filter(row => {\n      return !row.parentRow;\n    });\n    let tiles = this.table.createTiles(rows);\n    if (tiles) {\n      this.setTiles(tiles);\n    }\n  }\n\n  resolveMapping(tableRowTileMapping) {\n    let tile = tableRowTileMapping.tile;\n    tile.rowId = tableRowTileMapping.tableRow;\n    tile.setParent(this);\n    tile.setOwner(this);\n    return tile;\n  }\n\n  // update tilesMap with the given tiles or recreate tilesMap completely in case of null given\n  _refreshTilesMap(tiles) {\n    if (!tiles) {\n      tiles = this.tiles;\n      this.tilesMap = {};\n    }\n    tiles.forEach(function(tile) {\n      this.tilesMap[tile.rowId] = tile;\n    }, this);\n  }\n\n  getTilesForRows(rows) {\n    return rows.map(function(row) {\n      return this.tilesMap[row.id];\n    }, this).filter(t => {\n      return !!t;\n    });\n  }\n\n  _initGroups(tiles) {\n    let primaryGroupingColumn = arrays.find(this.table.columns, column => {\n      return column.grouped && column.sortIndex === 0;\n    });\n\n    tiles.forEach(function(tile) {\n      let row = this.table.rowsMap[tile.rowId];\n      let groupId = primaryGroupingColumn ? primaryGroupingColumn.cellTextForGrouping(row) : 'default';\n      groupId = scout.nvl(groupId, ''); // use empty group to avoid NPE\n      this.groupForTileMap[row.id] = groupId;\n      // check if group already exists, otherwise create it\n      let group = this.tileAccordion.getGroupById(groupId);\n      if (!group) {\n        group = this._createTileGroup(groupId, primaryGroupingColumn, row);\n        this._adaptTileGrid(group.body);\n        this.tileAccordion.insertGroup(group);\n      }\n      tile.parent = group;\n    }, this);\n  }\n\n  _adaptTileGrid(tileGrid) {\n    // The table contains the menu items -> pass them to the showContextMenu function of the tileGrid.\n    objects.mandatoryFunction(tileGrid, '_showContextMenu');\n    let origShowContextMenu = tileGrid._showContextMenu;\n    tileGrid._showContextMenu = function(options) {\n      objects.mandatoryFunction(this.table, '_filterMenusForContextMenu');\n      options.menuItems = this.table._filterMenusForContextMenu();\n      scout.assertProperty(this.table, '_filterMenusHandler');\n      options.menuFilter = this.table._filterMenusHandler;\n      origShowContextMenu.call(tileGrid, options);\n    }.bind(this);\n    // use the table's keyStrokeContext bindTarget for each tileGrid as well to ensure that the tileGrid's keyStrokes are active when the table is active\n    tileGrid.keyStrokeContext.$bindTarget = this.table.keyStrokeContext.$bindTarget;\n  }\n\n  _createTileAccordion() {\n    return scout.create('TileAccordion', {\n      parent: this.table,\n      virtual: true,\n      selectable: true,\n      multiselect: this.table.multiSelect,\n      exclusiveExpand: this.exclusiveExpand,\n      gridColumnCount: this.gridColumnCount,\n      tileGridLayoutConfig: this.tileGridLayoutConfig,\n      withPlaceholders: this.withPlaceholders\n    });\n  }\n\n  _createTileGroup(groupId, primaryGroupingColumn, row) {\n    let htmlEnabled, title, iconId;\n    if (primaryGroupingColumn) {\n      htmlEnabled = primaryGroupingColumn.htmlEnabled;\n      let cell = primaryGroupingColumn.createAggrGroupCell(row);\n      title = cell.text;\n      iconId = cell.iconId;\n    }\n    return scout.create('Group', {\n      parent: this.tileAccordion,\n      id: groupId,\n      headerVisible: groupId !== 'default',\n      title: title,\n      titleHtmlEnabled: htmlEnabled,\n      iconId: iconId,\n      body: {\n        objectType: 'TileGrid',\n        scrollable: false\n      }\n    });\n  }\n\n  activate() {\n    this.tableState.headerVisible = this.table.headerVisible;\n    this.table.setHeaderVisible(false);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(true);\n    }\n\n    // hide aggregation table control\n    this.table.tableControls.forEach(function(control) {\n      if (control instanceof AggregateTableControl) {\n        this.tableState.aggregateTableControlSelected = control.selected;\n        control.setSelected(false, {\n          closeWhenUnselected: true,\n          animate: false\n        });\n        control.setVisible(false);\n      }\n    }, this);\n\n    this.tableState.loadingSupportContainer = this.table.loadingSupport.options$Container;\n    this.table.loadingSupport.options$Container = function() {\n      return this.tileAccordion.$container;\n    }.bind(this);\n\n    // check if there exists a hierarchy within the tableRows\n    let hasHierarchy = arrays.find(this.table.rows, row => {\n      return row.parentRow;\n    }) !== null;\n\n    if (hasHierarchy) {\n      // add the hierarchyFilter since the tileMode doesn't support hierarchy\n      this._tableHierarchyFilter = scout.create('TileTableHierarchyFilter', {\n        table: this.table\n      });\n      this.table.addFilter(this._tableHierarchyFilter);\n    }\n\n    // doesn't depend upon any tile data, therefore execute on activation\n    this._syncFiltersFromTableToTile();\n\n    this._syncScrollTopFromTableToTile();\n  }\n\n  deactivate() {\n    // show aggregation table control\n    this.table.tableControls.forEach(control => {\n      if (control instanceof AggregateTableControl) {\n        control.setVisible(true);\n      }\n    }, this);\n\n    // use _setProperty to avoid instant rendering, render manually later on (this is necessary since TableHeader depends upon table.$data)\n    this.table._setProperty('headerVisible', this.tableState.headerVisible);\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.setVisible(false);\n    }\n\n    if (this.tableState.loadingSupportContainer) {\n      this.table.loadingSupport.options$Container = this.tableState.loadingSupportContainer;\n    }\n\n    if (this._tableHierarchyFilter) {\n      this.table.removeFilter(this._tableHierarchyFilter);\n      this._tableHierarchyFilter = null;\n    }\n\n    this._syncScrollTopFromTileGridToTable();\n\n    // complete reset\n    this.reset();\n  }\n\n  reset() {\n    this.tilesMap = {};\n    this.groups = {};\n    this.groupForTileMap = {};\n    this.tileAccordion.deleteAllTiles();\n    this.tileAccordion.deleteAllGroups();\n\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(tile => {\n      tile.destroy();\n    });\n  }\n\n  renderTileMode() {\n    if (this.table.tileMode) {\n      // if the table was previously in tileMode this is not necessary...\n      if (this.table.$data) {\n        this.table._removeData();\n      }\n      this._renderTileTableHeader();\n      this._renderTileAccordion();\n    } else {\n      this._removeTileTableHeader();\n      this._removeTileAccordion();\n      this.table._renderData();\n      this.table._renderTableHeader();\n\n      // restore selected state of the aggregationTableControl here since it depends on table.$data\n      if (this.tableState.aggregateTableControlSelected) {\n        arrays.find(this.table.tableControls,\n          control => control instanceof AggregateTableControl)\n          .setSelected(true);\n      }\n\n    }\n    this.table._refreshMenuBarPosition();\n  }\n\n  destroy() {\n    // destroy tiles manually since owner is the mediator thus the tileGrid can't destroy them\n    this.tiles.forEach(tile => {\n      tile.destroy();\n    });\n\n    this.tileAccordion.destroy();\n    this.tileAccordion = null;\n  }\n\n  insertTiles(tiles) {\n    tiles = arrays.ensure(tiles);\n    if (tiles.length === 0) {\n      return;\n    }\n    this.setTiles(this.tiles.concat(tiles));\n  }\n\n  deleteTiles(tiles) {\n    if (!tiles) {\n      tiles = this.tiles.slice();\n    }\n    arrays.removeAll(this.tiles, tiles);\n    tiles.forEach(function(tile) {\n      delete this.tilesMap[tile.rowId];\n      delete this.groupForTileMap[tile.rowId];\n      let group = this.tileAccordion.getGroupByTile(tile);\n      if (group) {\n        // if there's only one left remove the group (tile is removed later)\n        if (group.body.tiles.length === 1) {\n          this.tileAccordion.deleteGroup(group);\n        }\n      }\n      tile.destroy();\n    }, this);\n    this.tileAccordion.deleteTiles(tiles);\n  }\n\n  _onTileAccordionPropertyChange(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    if (event.propertyName === 'selectedTiles') {\n      this._syncSelectionFromTileGridToTable(event.source.getSelectedTiles());\n      if (this.tileAccordion.rendered) {\n        // Depending on the tiles content, selecting tiles with shift can lead to a mix of selecting the tiles content\n        // and the tiles itself, which doesn't look nice. Remove the text selection when selection tiles to avoid this.\n        this.tileAccordion.$container.document(true).getSelection().removeAllRanges();\n      }\n    }\n    if (event.propertyName === 'filteredTiles') {\n      this._updateGroupVisibility();\n    }\n  }\n\n  _onTileAccordionAction(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table.doRowAction(this.table.rowsMap[event.tile.rowId]);\n  }\n\n  _onTileAccordionClick(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.table._triggerRowClick(event, this.table.rowsMap[event.tile.rowId], event.mouseButton);\n  }\n\n  _onTableRowsSelected(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._syncSelectionFromTableToTile();\n  }\n\n  _onTableRowsInserted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.insertTiles(this.table.createTiles(event.rows));\n  }\n\n  _onTableRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles(this.getTilesForRows(event.rows));\n  }\n\n  _onTableAllRowsDeleted(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.deleteTiles();\n  }\n\n  _onTableRowOrderChangedHandler(event) {\n    // ignore event when not in tileMode or when this.tilesMap is not (yet) initialized correctly\n    if (!this.table.tileMode || $.isEmptyObject(this.tilesMap)) {\n      return;\n    }\n    this.tiles = this.table.rows.map(function(row) {\n      return this.tilesMap[row.id];\n    }, this);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n\n  _onTableGroup(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.deleteAllGroups();\n    this._initGroups(this.tiles);\n    this.tileAccordion.setTiles(this.tiles);\n  }\n\n  _onTableFilterAdded(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this._addFilter(event.filter);\n  }\n\n  _onTableFilterRemoved(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n\n    this.tileAccordion.removeFilter(event.filter.tileFilter);\n  }\n\n  _addFilter(tableFilter) {\n    let tileFilter = {\n      table: this.table,\n      accept: function(tile) {\n        let rowForTile = this.table.rowsMap[tile.rowId];\n        if (rowForTile) {\n          return tableFilter.accept(rowForTile);\n        }\n        return false;\n      }\n    };\n    if (tableFilter.tileFilter) {\n      this.tileAccordion.removeFilter(tableFilter.tileFilter, false);\n    }\n    tableFilter.tileFilter = tileFilter;\n    this.tileAccordion.addFilter(tileFilter);\n  }\n\n  _onTableFilter(event) {\n    if (!this.table.tileMode) {\n      return;\n    }\n    this.tileAccordion.filter();\n  }\n\n  _syncSelectionFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.selectTiles(this.getTilesForRows(this.table.selectedRows));\n    }\n  }\n\n  _syncSelectionFromTileGridToTable(selectedTiles) {\n    if (!this._isUpdatingTiles) {\n      let selectedRows = selectedTiles.map(function(tile) {\n        return this.table.rowsMap[tile.rowId];\n      }, this).filter(t => {\n        return Boolean(t);\n      });\n      this.table.selectRows(selectedRows);\n    }\n  }\n\n  _updateGroupVisibility() {\n    this.tileAccordion.groups.forEach(group => {\n      // Make groups invisible if a tile filter is active and no tiles match (= no tiles are visible)\n      let groupEmpty = group.body.filters.length > 0 && group.body.filteredTiles.length === 0;\n      group.setVisible(!groupEmpty);\n      group.setTitleSuffix(group.body.filteredTiles.length);\n    });\n  }\n\n  _syncScrollTopFromTableToTile() {\n    let rowIndex = this.table._rowIndexAtScrollTop(this.table.scrollTop);\n    if (rowIndex <= 0) {\n      return;\n    }\n    let tile = this.tilesMap[this.table.rows[rowIndex].id];\n    if (!tile) {\n      return;\n    }\n\n    // reset scrollTop on tileAccordion, otherwise it would overwrite the synced scrollTop\n    this.tileAccordion.scrollTop = null;\n\n    let options = {\n      align: 'top'\n    };\n\n    if (!tile.rendered) {\n      // Execute delayed because table may be not layouted yet\n      this.table.session.layoutValidator.schedulePostValidateFunction(tile.reveal.bind(tile, options));\n      return;\n    }\n    tile.reveal(options);\n  }\n\n  _syncScrollTopFromTileGridToTable() {\n    let tile = this.tileAccordion._tileAtScrollTop(this.tileAccordion.scrollTop);\n    if (tile) {\n      let options = {\n        align: 'top'\n      };\n      if (!this.table._isDataRendered()) {\n        this.table.session.layoutValidator.schedulePostValidateFunction(this.table.scrollTo.bind(this.table, this.table.rowsMap[tile.rowId], options));\n      } else {\n        this.table.scrollTo(this.table.rowsMap[tile.rowId], options);\n      }\n    }\n  }\n\n  _syncFiltersFromTableToTile() {\n    if (this.tileAccordion) {\n      this.tileAccordion.setFilters([]);\n      this.table.filters.forEach(tableFilter => this._addFilter(tableFilter));\n    }\n  }\n\n  _renderTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.render();\n    }\n  }\n\n  _removeTileTableHeader() {\n    if (this.table.tileTableHeader) {\n      this.table.tileTableHeader.remove();\n    }\n  }\n\n  _renderTileAccordion() {\n    if (!this.tileAccordion.rendered) {\n      this.tileAccordion.render();\n    }\n  }\n\n  _removeTileAccordion() {\n    if (this.tileAccordion.rendered) {\n      this.tileAccordion.remove();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}