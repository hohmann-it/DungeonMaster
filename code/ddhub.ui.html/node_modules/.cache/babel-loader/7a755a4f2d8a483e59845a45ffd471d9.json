{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, Dimension, FormController, PopupBlockerHandler, PopupWindow, scout } from '../index';\nimport $ from 'jquery';\nexport default class DesktopFormController extends FormController {\n  constructor(model) {\n    super(model);\n    this.desktop = model.displayParent;\n    this._popupWindows = [];\n    this._documentPopupWindowReadyHandler = this._onDocumentPopupWindowReady.bind(this);\n\n    // must use a document-event, since when popup-window is reloading it does\n    // only know the opener of its own window (and nothing about Scout).\n    $(document).on('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n  render() {\n    super.render();\n    let activeForm = this.desktop.activeForm;\n    if (activeForm) {\n      activeForm.activate();\n    } else {\n      this.desktop.bringOutlineToFront();\n    }\n  }\n  _renderViews() {\n    super._renderViews();\n    if (this.desktop.selectedViewTabs) {\n      this.desktop.selectedViewTabs.forEach(selectedView => {\n        this._activateView(selectedView);\n      });\n    }\n\n    // ensure in all view stacks the last view is activated\n    if (this.desktop.bench) {\n      this.desktop.bench.postRender();\n    }\n  }\n  isFormShown(form) {\n    if (form.isPopupWindow()) {\n      return this._popupWindows.some(popup => popup.form.id === form.id);\n    }\n    return super.isFormShown(form);\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _renderPopupWindow(form) {\n    let windowSpecs, resizeToPrefSize; // flag used to resize browser-window later (see PopupWindow.js)\n\n    let bounds = form.readCacheBounds();\n    if (bounds) {\n      windowSpecs = 'left=' + bounds.x + ',top=' + bounds.y + ',width=' + bounds.width + ',height=' + bounds.height;\n      resizeToPrefSize = false;\n    } else {\n      let $mainDocument = $(document),\n        documentSize = new Dimension($mainDocument.width(), $mainDocument.height());\n      windowSpecs = 'left=0,top=0,width=' + documentSize.width + ',height=' + documentSize.height;\n      resizeToPrefSize = true;\n    }\n\n    // Note: Chrome does not allow to position a popup outside of the primary monitor (Firefox does)\n    // So the popup will always appear on the primary monitor even if we have stored the correct\n    // bounds to position the popup on the secondary monitor!\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Position_and_size_features\n    windowSpecs += ',location=no,toolbar=no,menubar=no,resizable=yes';\n    let popupBlockerHandler = scout.create('PopupBlockerHandler', {\n      session: this.session,\n      preserveOpener: true /* no external untrusted URI: Can keep the opener for callback. */\n    });\n    // form ID in URL is required for 'reload window' support\n    let url = 'popup-window.html?formId=' + form.id;\n\n    // use '_blank' as window-name so browser-windows are never reused\n    popupBlockerHandler.openWindow(url, '_blank', windowSpecs, popup => {\n      this._addPopupWindow(popup, form, resizeToPrefSize);\n    });\n  }\n  _addPopupWindow(newWindow, form, resizeToPrefSize) {\n    let popupWindow = new PopupWindow(newWindow, form);\n    popupWindow.resizeToPrefSize = resizeToPrefSize;\n    popupWindow.events.on('popupWindowUnload', this._onPopupWindowUnload.bind(this));\n    this._popupWindows.push(popupWindow);\n    $.log.isDebugEnabled() && $.log.debug('Opened new popup window for form ID ' + form.id);\n  }\n  _onDocumentPopupWindowReady(event, data) {\n    $.log.isDebugEnabled() && $.log.debug('(FormController#_onDocumentPopupWindowReady) data=' + data);\n    let popupWindow;\n    if (data.formId) {\n      // reload (existing popup window)\n      let i,\n        formId = data.formId;\n      $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + formId + ' has been reloaded');\n      for (i = 0; i < this._popupWindows.length; i++) {\n        popupWindow = this._popupWindows[i];\n        if (popupWindow.form.id === formId) {\n          break;\n        }\n      }\n      if (!popupWindow) {\n        throw new Error('Couldn\\'t find popupWindow reference while popup window was reloaded');\n      }\n    } else if (data.popupWindow) {\n      // open new child window\n      popupWindow = data.popupWindow;\n    } else {\n      // error assertion\n      throw new Error('Neither property \\'formId\\' nor \\'popupWindow\\' exists on data parameter');\n    }\n    popupWindow._onReady();\n  }\n  _onPopupWindowUnload(popupWindow) {\n    let form = popupWindow.form;\n    $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' is unloaded - don\\'t know if its closed or reloaded yet');\n\n    // this remove() is important: when a popup-window in IE is closed, all references to a HTMLDivElement become\n    // invalid. Every call or read on such invalid objects will cause an Error. Even though the DOM element\n    // is invalid, the JQuery object which references the DOM element is still alive and occupies memory. That's\n    // why we must remove JQuery objects _before_ the popup-window is closed finally.\n    form.remove();\n\n    // must do this with setTimeout because at this point window is always still open\n    // Note: timeout with 0 milliseconds will not work\n    setTimeout(() => {\n      // Check if popup is closed (when the unload event was triggered by page reload it will still be open)\n      if (popupWindow.isClosed()) {\n        $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' has been closed');\n        form.close();\n      }\n    }, 250);\n  }\n\n  /**\n   * We only close browser windows here, since during an unload event, we cannot send\n   * anything with a HTTP request anyway. So we cannot inform the server that it\n   * should \"kill\" the forms - instead we simply render the popupWindows and forms\n   * again when the page has been reloaded.\n   */\n  closePopupWindows() {\n    this._popupWindows.forEach(function (popupWindow) {\n      this._removePopupWindow(popupWindow.form);\n    }, this);\n    this._popupWindows = [];\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _removePopupWindow(form) {\n    let popupWindow = form.popupWindow;\n    if (!popupWindow) {\n      throw new Error('Form has no popupWindow reference');\n    }\n    delete form.popupWindow;\n    arrays.remove(this._popupWindows, popupWindow);\n    if (form.rendered) {\n      form.remove();\n      popupWindow.close();\n    }\n  }\n  dispose() {\n    $(document).off('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n}","map":{"version":3,"names":["arrays","Dimension","FormController","PopupBlockerHandler","PopupWindow","scout","$","DesktopFormController","constructor","model","desktop","displayParent","_popupWindows","_documentPopupWindowReadyHandler","_onDocumentPopupWindowReady","bind","document","on","render","activeForm","activate","bringOutlineToFront","_renderViews","selectedViewTabs","forEach","selectedView","_activateView","bench","postRender","isFormShown","form","isPopupWindow","some","popup","id","_renderPopupWindow","windowSpecs","resizeToPrefSize","bounds","readCacheBounds","x","y","width","height","$mainDocument","documentSize","popupBlockerHandler","create","session","preserveOpener","url","openWindow","_addPopupWindow","newWindow","popupWindow","events","_onPopupWindowUnload","push","log","isDebugEnabled","debug","event","data","formId","i","length","Error","_onReady","remove","setTimeout","isClosed","close","closePopupWindows","_removePopupWindow","rendered","dispose","off"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/desktop/DesktopFormController.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, Dimension, FormController, PopupBlockerHandler, PopupWindow, scout} from '../index';\nimport $ from 'jquery';\n\nexport default class DesktopFormController extends FormController {\n\n  constructor(model) {\n    super(model);\n    this.desktop = model.displayParent;\n    this._popupWindows = [];\n    this._documentPopupWindowReadyHandler = this._onDocumentPopupWindowReady.bind(this);\n\n    // must use a document-event, since when popup-window is reloading it does\n    // only know the opener of its own window (and nothing about Scout).\n    $(document).on('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n\n  render() {\n    super.render();\n    let activeForm = this.desktop.activeForm;\n    if (activeForm) {\n      activeForm.activate();\n    } else {\n      this.desktop.bringOutlineToFront();\n    }\n  }\n\n  _renderViews() {\n    super._renderViews();\n\n    if (this.desktop.selectedViewTabs) {\n      this.desktop.selectedViewTabs.forEach(selectedView => {\n        this._activateView(selectedView);\n      });\n    }\n\n    // ensure in all view stacks the last view is activated\n    if (this.desktop.bench) {\n      this.desktop.bench.postRender();\n    }\n  }\n\n  isFormShown(form) {\n    if (form.isPopupWindow()) {\n      return this._popupWindows.some(popup => popup.form.id === form.id);\n    }\n    return super.isFormShown(form);\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _renderPopupWindow(form) {\n    let windowSpecs,\n      resizeToPrefSize; // flag used to resize browser-window later (see PopupWindow.js)\n\n    let bounds = form.readCacheBounds();\n    if (bounds) {\n      windowSpecs = 'left=' + bounds.x + ',top=' + bounds.y + ',width=' + bounds.width + ',height=' + bounds.height;\n      resizeToPrefSize = false;\n    } else {\n      let $mainDocument = $(document),\n        documentSize = new Dimension($mainDocument.width(), $mainDocument.height());\n      windowSpecs = 'left=0,top=0,width=' + documentSize.width + ',height=' + documentSize.height;\n      resizeToPrefSize = true;\n    }\n\n    // Note: Chrome does not allow to position a popup outside of the primary monitor (Firefox does)\n    // So the popup will always appear on the primary monitor even if we have stored the correct\n    // bounds to position the popup on the secondary monitor!\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/Window/open#Position_and_size_features\n    windowSpecs += ',location=no,toolbar=no,menubar=no,resizable=yes';\n\n    let popupBlockerHandler = scout.create('PopupBlockerHandler', {session: this.session, preserveOpener: true /* no external untrusted URI: Can keep the opener for callback. */});\n    // form ID in URL is required for 'reload window' support\n    let url = 'popup-window.html?formId=' + form.id;\n\n    // use '_blank' as window-name so browser-windows are never reused\n    popupBlockerHandler.openWindow(url, '_blank', windowSpecs, popup => {\n      this._addPopupWindow(popup, form, resizeToPrefSize);\n    });\n  }\n\n  _addPopupWindow(newWindow, form, resizeToPrefSize) {\n    let popupWindow = new PopupWindow(newWindow, form);\n    popupWindow.resizeToPrefSize = resizeToPrefSize;\n    popupWindow.events.on('popupWindowUnload', this._onPopupWindowUnload.bind(this));\n    this._popupWindows.push(popupWindow);\n    $.log.isDebugEnabled() && $.log.debug('Opened new popup window for form ID ' + form.id);\n  }\n\n  _onDocumentPopupWindowReady(event, data) {\n    $.log.isDebugEnabled() && $.log.debug('(FormController#_onDocumentPopupWindowReady) data=' + data);\n    let popupWindow;\n    if (data.formId) {\n      // reload (existing popup window)\n      let i, formId = data.formId;\n      $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + formId + ' has been reloaded');\n      for (i = 0; i < this._popupWindows.length; i++) {\n        popupWindow = this._popupWindows[i];\n        if (popupWindow.form.id === formId) {\n          break;\n        }\n      }\n      if (!popupWindow) {\n        throw new Error('Couldn\\'t find popupWindow reference while popup window was reloaded');\n      }\n    } else if (data.popupWindow) {\n      // open new child window\n      popupWindow = data.popupWindow;\n    } else {\n      // error assertion\n      throw new Error('Neither property \\'formId\\' nor \\'popupWindow\\' exists on data parameter');\n    }\n    popupWindow._onReady();\n  }\n\n  _onPopupWindowUnload(popupWindow) {\n    let form = popupWindow.form;\n    $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' is unloaded - don\\'t know if its closed or reloaded yet');\n\n    // this remove() is important: when a popup-window in IE is closed, all references to a HTMLDivElement become\n    // invalid. Every call or read on such invalid objects will cause an Error. Even though the DOM element\n    // is invalid, the JQuery object which references the DOM element is still alive and occupies memory. That's\n    // why we must remove JQuery objects _before_ the popup-window is closed finally.\n    form.remove();\n\n    // must do this with setTimeout because at this point window is always still open\n    // Note: timeout with 0 milliseconds will not work\n    setTimeout(() => {\n      // Check if popup is closed (when the unload event was triggered by page reload it will still be open)\n      if (popupWindow.isClosed()) {\n        $.log.isDebugEnabled() && $.log.debug('Popup window for form ID ' + form.id + ' has been closed');\n        form.close();\n      }\n    }, 250);\n  }\n\n  /**\n   * We only close browser windows here, since during an unload event, we cannot send\n   * anything with a HTTP request anyway. So we cannot inform the server that it\n   * should \"kill\" the forms - instead we simply render the popupWindows and forms\n   * again when the page has been reloaded.\n   */\n  closePopupWindows() {\n    this._popupWindows.forEach(function(popupWindow) {\n      this._removePopupWindow(popupWindow.form);\n    }, this);\n    this._popupWindows = [];\n  }\n\n  /**\n   * @override FormController.js\n   */\n  _removePopupWindow(form) {\n    let popupWindow = form.popupWindow;\n    if (!popupWindow) {\n      throw new Error('Form has no popupWindow reference');\n    }\n    delete form.popupWindow;\n    arrays.remove(this._popupWindows, popupWindow);\n    if (form.rendered) {\n      form.remove();\n      popupWindow.close();\n    }\n  }\n\n  dispose() {\n    $(document).off('popupWindowReady', this._documentPopupWindowReadyHandler);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}