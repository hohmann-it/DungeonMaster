{"ast":null,"code":"/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { CheckBoxField, CompositeField, DateField, dates, FormField, HtmlComponent, LogicalGridData, LogicalGridLayoutConfig, scout, SequenceBoxGridConfig, SequenceBoxLayout } from '../../../index';\nexport default class SequenceBox extends CompositeField {\n  constructor() {\n    super();\n    this._addWidgetProperties('fields');\n    this._addCloneProperties(['layoutConfig']);\n    this.logicalGrid = scout.create('scout.HorizontalGrid');\n    this.layoutConfig = null;\n    this.fields = [];\n    this._fieldPropertyChangeHandler = this._onFieldPropertyChange.bind(this);\n    this._lastVisibleFieldSuppressStatusHandler = this._onLastVisibleFieldSuppressStatusChange.bind(this);\n  }\n  _init(model) {\n    super._init(model);\n    this._setLayoutConfig(this.layoutConfig);\n    this._initDateFields();\n    this.setErrorStatus(this.errorStatus);\n    this.setTooltipText(this.tooltipText);\n    this.setMenus(this.menus);\n    this.setMenusVisible(this.menusVisible);\n  }\n\n  /**\n   * Initialize all DateFields in this SequenceBox with a meaningful autoDate, except fields which already have an autoDate provided by the model.\n   */\n  _initDateFields() {\n    let dateFields = this._getDateFields();\n    let newAutoDate = null;\n    for (let i = 0; i < dateFields.length; i++) {\n      let currField = dateFields[i];\n      if (currField.autoDate) {\n        // is the autoDate already set by the field's model remember to not change this value.\n        currField.hasModelAutoDateSet = true;\n      }\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      newAutoDate = this._getAutoDateProposal(currField);\n    }\n  }\n  _render() {\n    let field, i;\n    this.addContainer(this.$parent, 'sequence-box');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n    this._handleStatus();\n    this.htmlBody = HtmlComponent.install(this.$field, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      field.labelUseUiWidth = true;\n      field.on('propertyChange', this._fieldPropertyChangeHandler);\n      field.render(this.$field);\n      this._modifyLabel(field);\n\n      // set each children layout data to logical grid data\n      field.setLayoutData(new LogicalGridData(field));\n    }\n  }\n  _renderProperties() {\n    super._renderProperties();\n    this._renderLayoutConfig();\n  }\n  _createBodyLayout() {\n    return new SequenceBoxLayout(this, this.layoutConfig);\n  }\n  _remove() {\n    this.fields.forEach(f => f.off('propertyChange', this._fieldPropertyChangeHandler));\n    if (this._lastVisibleField) {\n      this._lastVisibleField.off('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n    }\n    super._remove();\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new SequenceBoxGridConfig());\n    }\n  }\n  setLayoutConfig(layoutConfig) {\n    this.setProperty('layoutConfig', layoutConfig);\n  }\n  _setLayoutConfig(layoutConfig) {\n    if (!layoutConfig) {\n      layoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('layoutConfig', LogicalGridLayoutConfig.ensure(layoutConfig));\n  }\n  _renderLayoutConfig() {\n    this.layoutConfig.applyToLayout(this.htmlBody.layout);\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n  _onFieldPropertyChange(event) {\n    let visibiltyChanged = event.propertyName === 'visible';\n    if (scout.isOneOf(event.propertyName, ['errorStatus', 'tooltipText', 'visible', 'menus', 'menusVisible'])) {\n      this._handleStatus(visibiltyChanged);\n    }\n    if (event.propertyName === 'value') {\n      this._onFieldValueChange(event);\n    }\n  }\n\n  /**\n   * Moves the status relevant properties from the last visible field to the sequencebox. This makes sure that the fields inside the sequencebox have the same size.\n   */\n  _handleStatus(visibilityChanged) {\n    if (visibilityChanged && this._lastVisibleField) {\n      // if there is a new last visible field, make sure the status is shown on the previously last one\n      this._lastVisibleField.off('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n      this._lastVisibleField.setSuppressStatus(null);\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n    this._lastVisibleField = this._getLastVisibleField();\n    if (!this._lastVisibleField) {\n      return;\n    }\n\n    // Update the sequencebox with the status relevant flags\n    this._isOverwritingStatusFromField = true;\n    if (this._lastVisibleField.errorStatus) {\n      this.setErrorStatus(this._lastVisibleField.errorStatus);\n      this._isErrorStatusOverwritten = true;\n    } else {\n      this.setErrorStatus(this.boxErrorStatus);\n      this._isErrorStatusOverwritten = false;\n    }\n    if (this._lastVisibleField.hasStatusTooltip()) {\n      this.setTooltipText(this._lastVisibleField.tooltipText);\n      this._isTooltipTextOverwritten = true;\n    } else {\n      this.setTooltipText(this.boxTooltipText);\n      this._isTooltipTextOverwritten = false;\n    }\n    let menuItems = this._lastVisibleField.getContextMenuItems(false);\n    if (menuItems && menuItems.length > 0) {\n      // Change owner to make sure menu won't be destroyed when setMenus is called\n      this._updateBoxMenuOwner(this.fieldStatus);\n      this.setMenus(menuItems);\n      this.setMenusVisible(this._lastVisibleField.menusVisible);\n      this._isMenusOverwritten = true;\n    } else {\n      this._updateBoxMenuOwner(this);\n      this.setMenus(this.boxMenus);\n      this.setMenusVisible(this.boxMenusVisible);\n      this._isMenusOverwritten = false;\n    }\n    this._isOverwritingStatusFromField = false;\n\n    // Make sure the last field won't display a status (but shows status CSS class)\n    this._lastVisibleField.setSuppressStatus(FormField.SuppressStatus.ICON);\n    this._lastVisibleField.on('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n    if (visibilityChanged) {\n      // If the last field got invisible, make sure the new last field does not display a status anymore (now done by the seq box)\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n  }\n  _onLastVisibleFieldSuppressStatusChange(e) {\n    // do not change suppressStatus\n    e.preventDefault();\n  }\n  setErrorStatus(errorStatus) {\n    if (this._isOverwritingStatusFromField && !this._isErrorStatusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxErrorStatus = this.errorStatus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxErrorStatus = errorStatus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isErrorStatusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setErrorStatus(errorStatus);\n    }\n  }\n  setTooltipText(tooltipText) {\n    if (this._isOverwritingStatusFromField && !this._isTooltipTextOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxTooltipText = this.tooltipText;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxTooltipText = tooltipText;\n    }\n    if (this._isOverwritingStatusFromField || !this._isTooltipTextOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setTooltipText(tooltipText);\n    }\n  }\n  setMenus(menus) {\n    // ensure menus are real and not just model objects\n    menus = this._createChildren(menus);\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenus = this.menus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenus = menus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenus(menus);\n    }\n  }\n  _updateBoxMenuOwner(newOwner) {\n    this.boxMenus.forEach(menu => {\n      menu.setOwner(newOwner);\n    });\n  }\n  setMenusVisible(menusVisible) {\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenusVisible = this.menusVisible;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenusVisible = menusVisible;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenusVisible(menusVisible);\n    }\n  }\n  _getLastVisibleField() {\n    let visibleFields = this.fields.filter(field => {\n      return field.visible;\n    });\n    if (visibleFields.length === 0) {\n      return;\n    }\n    return visibleFields[visibleFields.length - 1];\n  }\n  _onFieldValueChange(event) {\n    if (event.source instanceof DateField) {\n      this._onDateFieldValueChange(event);\n    }\n  }\n  _onDateFieldValueChange(event) {\n    // For a better user experience preselect a meaningful date on all following DateFields in the sequence box.\n    let field = event.source;\n    let dateFields = this._getDateFields();\n    let newAutoDate = this._getAutoDateProposal(field);\n    for (let i = dateFields.indexOf(field) + 1; i < dateFields.length; i++) {\n      let currField = dateFields[i];\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      if (currField.value) {\n        // only update fields in between the current field and the next field with a value set. Otherwise already set autoDates would be overwritten.\n        break;\n      }\n    }\n  }\n  _getDateFields() {\n    return this.fields.filter(field => {\n      return field instanceof DateField;\n    });\n  }\n  _getAutoDateProposal(field) {\n    let newAutoDate = null;\n    // if it's only a time field, add one hour, otherwise add one day\n    if (field && field.value) {\n      if (!field.hasDate && field.hasTime) {\n        newAutoDate = dates.shiftTime(field.value, 1, 0, 0);\n      } else {\n        newAutoDate = dates.shift(field.value, 0, 0, 1);\n      }\n    }\n    return newAutoDate;\n  }\n\n  // The new sequence-box sets the label to invisible on the model.\n  _modifyLabel(field) {\n    if (field instanceof CheckBoxField) {\n      field.labelVisible = false;\n    }\n    if (field instanceof DateField) {\n      // The DateField has two inputs ($dateField and $timeField), field.$field refers to the composite which is irrelevant here\n      // In order to support aria-labelledby for date fields also, the individual inputs have to be linked with the label rather than the composite\n      if (field.$dateField) {\n        this._linkWithLabel(field.$dateField);\n      }\n      if (field.$timeField) {\n        this._linkWithLabel(field.$timeField);\n      }\n    } else if (field.$field) {\n      // If $field is set depends on the concrete field e.g. a group box does not have a $field\n      this._linkWithLabel(field.$field);\n    }\n  }\n  setFields(fields) {\n    if (this.rendered) {\n      throw new Error('Setting fields is not supported if sequence box is already rendered.');\n    }\n    this.setProperty('fields', fields);\n  }\n\n  /**\n   * @override CompositeField.js\n   */\n  getFields() {\n    return this.fields;\n  }\n  clone(model, options) {\n    let clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'fields', options);\n    return clone;\n  }\n}","map":{"version":3,"names":["CheckBoxField","CompositeField","DateField","dates","FormField","HtmlComponent","LogicalGridData","LogicalGridLayoutConfig","scout","SequenceBoxGridConfig","SequenceBoxLayout","SequenceBox","constructor","_addWidgetProperties","_addCloneProperties","logicalGrid","create","layoutConfig","fields","_fieldPropertyChangeHandler","_onFieldPropertyChange","bind","_lastVisibleFieldSuppressStatusHandler","_onLastVisibleFieldSuppressStatusChange","_init","model","_setLayoutConfig","_initDateFields","setErrorStatus","errorStatus","setTooltipText","tooltipText","setMenus","menus","setMenusVisible","menusVisible","dateFields","_getDateFields","newAutoDate","i","length","currField","autoDate","hasModelAutoDateSet","setAutoDate","_getAutoDateProposal","_render","field","addContainer","$parent","addLabel","addField","makeDiv","addStatus","_handleStatus","htmlBody","install","$field","session","setLayout","_createBodyLayout","labelUseUiWidth","on","render","_modifyLabel","setLayoutData","_renderProperties","_renderLayoutConfig","_remove","forEach","f","off","_lastVisibleField","invalidateLogicalGrid","invalidateLayout","nvl","rendered","invalidateLayoutTree","_setLogicalGrid","setGridConfig","setLayoutConfig","setProperty","_setProperty","ensure","applyToLayout","layout","event","visibiltyChanged","propertyName","isOneOf","_onFieldValueChange","visibilityChanged","setSuppressStatus","_renderErrorStatus","_renderTooltipText","_renderMenus","_getLastVisibleField","_isOverwritingStatusFromField","_isErrorStatusOverwritten","boxErrorStatus","hasStatusTooltip","_isTooltipTextOverwritten","boxTooltipText","menuItems","getContextMenuItems","_updateBoxMenuOwner","fieldStatus","_isMenusOverwritten","boxMenus","boxMenusVisible","SuppressStatus","ICON","e","preventDefault","_createChildren","newOwner","menu","setOwner","visibleFields","filter","visible","source","_onDateFieldValueChange","indexOf","value","hasDate","hasTime","shiftTime","shift","labelVisible","$dateField","_linkWithLabel","$timeField","setFields","Error","getFields","clone","options","_deepCloneProperties"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/sequencebox/SequenceBox.js"],"sourcesContent":["/*\n * Copyright (c) 2010-2022 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * https://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {CheckBoxField, CompositeField, DateField, dates, FormField, HtmlComponent, LogicalGridData, LogicalGridLayoutConfig, scout, SequenceBoxGridConfig, SequenceBoxLayout} from '../../../index';\n\nexport default class SequenceBox extends CompositeField {\n\n  constructor() {\n    super();\n    this._addWidgetProperties('fields');\n    this._addCloneProperties(['layoutConfig']);\n    this.logicalGrid = scout.create('scout.HorizontalGrid');\n    this.layoutConfig = null;\n    this.fields = [];\n    this._fieldPropertyChangeHandler = this._onFieldPropertyChange.bind(this);\n    this._lastVisibleFieldSuppressStatusHandler = this._onLastVisibleFieldSuppressStatusChange.bind(this);\n  }\n\n  _init(model) {\n    super._init(model);\n\n    this._setLayoutConfig(this.layoutConfig);\n\n    this._initDateFields();\n\n    this.setErrorStatus(this.errorStatus);\n    this.setTooltipText(this.tooltipText);\n    this.setMenus(this.menus);\n    this.setMenusVisible(this.menusVisible);\n  }\n\n  /**\n   * Initialize all DateFields in this SequenceBox with a meaningful autoDate, except fields which already have an autoDate provided by the model.\n   */\n  _initDateFields() {\n    let dateFields = this._getDateFields();\n    let newAutoDate = null;\n    for (let i = 0; i < dateFields.length; i++) {\n      let currField = dateFields[i];\n      if (currField.autoDate) {\n        // is the autoDate already set by the field's model remember to not change this value.\n        currField.hasModelAutoDateSet = true;\n      }\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      newAutoDate = this._getAutoDateProposal(currField);\n    }\n  }\n\n  _render() {\n    let field, i;\n    this.addContainer(this.$parent, 'sequence-box');\n    this.addLabel();\n    this.addField(this.$parent.makeDiv());\n    this.addStatus();\n    this._handleStatus();\n    this.htmlBody = HtmlComponent.install(this.$field, this.session);\n    this.htmlBody.setLayout(this._createBodyLayout());\n    for (i = 0; i < this.fields.length; i++) {\n      field = this.fields[i];\n      field.labelUseUiWidth = true;\n      field.on('propertyChange', this._fieldPropertyChangeHandler);\n      field.render(this.$field);\n      this._modifyLabel(field);\n\n      // set each children layout data to logical grid data\n      field.setLayoutData(new LogicalGridData(field));\n    }\n  }\n\n  _renderProperties() {\n    super._renderProperties();\n    this._renderLayoutConfig();\n  }\n\n  _createBodyLayout() {\n    return new SequenceBoxLayout(this, this.layoutConfig);\n  }\n\n  _remove() {\n    this.fields.forEach(f => f.off('propertyChange', this._fieldPropertyChangeHandler));\n    if (this._lastVisibleField) {\n      this._lastVisibleField.off('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n    }\n    super._remove();\n  }\n\n  /**\n   * @override\n   */\n  invalidateLogicalGrid(invalidateLayout) {\n    super.invalidateLogicalGrid(false);\n    if (scout.nvl(invalidateLayout, true) && this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  /**\n   * @override\n   */\n  _setLogicalGrid(logicalGrid) {\n    super._setLogicalGrid(logicalGrid);\n    if (this.logicalGrid) {\n      this.logicalGrid.setGridConfig(new SequenceBoxGridConfig());\n    }\n  }\n\n  setLayoutConfig(layoutConfig) {\n    this.setProperty('layoutConfig', layoutConfig);\n  }\n\n  _setLayoutConfig(layoutConfig) {\n    if (!layoutConfig) {\n      layoutConfig = new LogicalGridLayoutConfig();\n    }\n    this._setProperty('layoutConfig', LogicalGridLayoutConfig.ensure(layoutConfig));\n  }\n\n  _renderLayoutConfig() {\n    this.layoutConfig.applyToLayout(this.htmlBody.layout);\n    if (this.rendered) {\n      this.htmlBody.invalidateLayoutTree();\n    }\n  }\n\n  _onFieldPropertyChange(event) {\n    let visibiltyChanged = (event.propertyName === 'visible');\n    if (scout.isOneOf(event.propertyName, ['errorStatus', 'tooltipText', 'visible', 'menus', 'menusVisible'])) {\n      this._handleStatus(visibiltyChanged);\n    }\n    if (event.propertyName === 'value') {\n      this._onFieldValueChange(event);\n    }\n  }\n\n  /**\n   * Moves the status relevant properties from the last visible field to the sequencebox. This makes sure that the fields inside the sequencebox have the same size.\n   */\n  _handleStatus(visibilityChanged) {\n    if (visibilityChanged && this._lastVisibleField) {\n      // if there is a new last visible field, make sure the status is shown on the previously last one\n      this._lastVisibleField.off('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n      this._lastVisibleField.setSuppressStatus(null);\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n    this._lastVisibleField = this._getLastVisibleField();\n    if (!this._lastVisibleField) {\n      return;\n    }\n\n    // Update the sequencebox with the status relevant flags\n    this._isOverwritingStatusFromField = true;\n    if (this._lastVisibleField.errorStatus) {\n      this.setErrorStatus(this._lastVisibleField.errorStatus);\n      this._isErrorStatusOverwritten = true;\n    } else {\n      this.setErrorStatus(this.boxErrorStatus);\n      this._isErrorStatusOverwritten = false;\n    }\n\n    if (this._lastVisibleField.hasStatusTooltip()) {\n      this.setTooltipText(this._lastVisibleField.tooltipText);\n      this._isTooltipTextOverwritten = true;\n    } else {\n      this.setTooltipText(this.boxTooltipText);\n      this._isTooltipTextOverwritten = false;\n    }\n\n    let menuItems = this._lastVisibleField.getContextMenuItems(false);\n    if (menuItems && menuItems.length > 0) {\n      // Change owner to make sure menu won't be destroyed when setMenus is called\n      this._updateBoxMenuOwner(this.fieldStatus);\n      this.setMenus(menuItems);\n      this.setMenusVisible(this._lastVisibleField.menusVisible);\n      this._isMenusOverwritten = true;\n    } else {\n      this._updateBoxMenuOwner(this);\n      this.setMenus(this.boxMenus);\n      this.setMenusVisible(this.boxMenusVisible);\n      this._isMenusOverwritten = false;\n    }\n    this._isOverwritingStatusFromField = false;\n\n    // Make sure the last field won't display a status (but shows status CSS class)\n    this._lastVisibleField.setSuppressStatus(FormField.SuppressStatus.ICON);\n    this._lastVisibleField.on('propertyChange:suppressStatus', this._lastVisibleFieldSuppressStatusHandler);\n    if (visibilityChanged) {\n      // If the last field got invisible, make sure the new last field does not display a status anymore (now done by the seq box)\n      if (this._lastVisibleField.rendered) {\n        this._lastVisibleField._renderErrorStatus();\n        this._lastVisibleField._renderTooltipText();\n        this._lastVisibleField._renderMenus();\n      }\n    }\n  }\n\n  _onLastVisibleFieldSuppressStatusChange(e) {\n    // do not change suppressStatus\n    e.preventDefault();\n  }\n\n  setErrorStatus(errorStatus) {\n    if (this._isOverwritingStatusFromField && !this._isErrorStatusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxErrorStatus = this.errorStatus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxErrorStatus = errorStatus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isErrorStatusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setErrorStatus(errorStatus);\n    }\n  }\n\n  setTooltipText(tooltipText) {\n    if (this._isOverwritingStatusFromField && !this._isTooltipTextOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxTooltipText = this.tooltipText;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxTooltipText = tooltipText;\n    }\n    if (this._isOverwritingStatusFromField || !this._isTooltipTextOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setTooltipText(tooltipText);\n    }\n  }\n\n  setMenus(menus) {\n    // ensure menus are real and not just model objects\n    menus = this._createChildren(menus);\n\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenus = this.menus;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenus = menus;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenus(menus);\n    }\n  }\n\n  _updateBoxMenuOwner(newOwner) {\n    this.boxMenus.forEach(menu => {\n      menu.setOwner(newOwner);\n    });\n  }\n\n  setMenusVisible(menusVisible) {\n    if (this._isOverwritingStatusFromField && !this._isMenusOverwritten) {\n      // was not overwritten, will be overwritten now -> backup old value\n      this.boxMenusVisible = this.menusVisible;\n    } else if (!this._isOverwritingStatusFromField) {\n      // directly changed on seq box -> update backed-up value\n      this.boxMenusVisible = menusVisible;\n    }\n    if (this._isOverwritingStatusFromField || !this._isMenusOverwritten) {\n      // prevent setting value if directly changed on seq box and is already overwritten\n      super.setMenusVisible(menusVisible);\n    }\n  }\n\n  _getLastVisibleField() {\n    let visibleFields = this.fields.filter(field => {\n      return field.visible;\n    });\n    if (visibleFields.length === 0) {\n      return;\n    }\n\n    return visibleFields[visibleFields.length - 1];\n  }\n\n  _onFieldValueChange(event) {\n    if (event.source instanceof DateField) {\n      this._onDateFieldValueChange(event);\n    }\n  }\n\n  _onDateFieldValueChange(event) {\n    // For a better user experience preselect a meaningful date on all following DateFields in the sequence box.\n    let field = event.source;\n    let dateFields = this._getDateFields();\n    let newAutoDate = this._getAutoDateProposal(field);\n    for (let i = dateFields.indexOf(field) + 1; i < dateFields.length; i++) {\n      let currField = dateFields[i];\n      if (!currField.hasModelAutoDateSet) {\n        currField.setAutoDate(newAutoDate);\n      }\n      if (currField.value) {\n        // only update fields in between the current field and the next field with a value set. Otherwise already set autoDates would be overwritten.\n        break;\n      }\n    }\n  }\n\n  _getDateFields() {\n    return this.fields.filter(field => {\n      return field instanceof DateField;\n    });\n  }\n\n  _getAutoDateProposal(field) {\n    let newAutoDate = null;\n    // if it's only a time field, add one hour, otherwise add one day\n    if (field && field.value) {\n      if (!field.hasDate && field.hasTime) {\n        newAutoDate = dates.shiftTime(field.value, 1, 0, 0);\n      } else {\n        newAutoDate = dates.shift(field.value, 0, 0, 1);\n      }\n    }\n    return newAutoDate;\n  }\n\n  // The new sequence-box sets the label to invisible on the model.\n  _modifyLabel(field) {\n    if (field instanceof CheckBoxField) {\n      field.labelVisible = false;\n    }\n\n    if (field instanceof DateField) {\n      // The DateField has two inputs ($dateField and $timeField), field.$field refers to the composite which is irrelevant here\n      // In order to support aria-labelledby for date fields also, the individual inputs have to be linked with the label rather than the composite\n      if (field.$dateField) {\n        this._linkWithLabel(field.$dateField);\n      }\n      if (field.$timeField) {\n        this._linkWithLabel(field.$timeField);\n      }\n    } else if (field.$field) { // If $field is set depends on the concrete field e.g. a group box does not have a $field\n      this._linkWithLabel(field.$field);\n    }\n  }\n\n  setFields(fields) {\n    if (this.rendered) {\n      throw new Error('Setting fields is not supported if sequence box is already rendered.');\n    }\n    this.setProperty('fields', fields);\n  }\n\n  /**\n   * @override CompositeField.js\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  clone(model, options) {\n    let clone = super.clone(model, options);\n    this._deepCloneProperties(clone, 'fields', options);\n    return clone;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}