{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, HtmlComponent } from '../index';\nexport default class SimpleTabBoxLayout extends AbstractLayout {\n  constructor(tabBox) {\n    super();\n    this.tabBox = tabBox;\n  }\n  layout($container) {\n    let containerSize,\n      viewContentSize,\n      htmlContainer = HtmlComponent.get($container),\n      htmlViewContent = HtmlComponent.get(this.tabBox.$viewContent),\n      tabAreaSize;\n    containerSize = htmlContainer.availableSize({\n      exact: true\n    }).subtract(htmlContainer.insets());\n    tabAreaSize = this._layoutTabArea(containerSize);\n    viewContentSize = containerSize.subtract(htmlViewContent.margins());\n    viewContentSize.height -= tabAreaSize.height;\n    htmlViewContent.setSize(viewContentSize);\n  }\n\n  /**\n   * @param containerSize\n   * @returns {Dimension} used of the tab area\n   */\n  _layoutTabArea(containerSize) {\n    if (!this.tabBox.rendered) {\n      return new Dimension(0, 0);\n    }\n    // exprected the tab area is layouted dynamically only\n    let htmlViewTabs = HtmlComponent.get(this.tabBox.$tabArea),\n      prefSize = htmlViewTabs.prefSize(),\n      margins = htmlViewTabs.margins();\n    let size = new Dimension(containerSize.width, prefSize.height + margins.top + margins.bottom);\n    htmlViewTabs.setSize(size);\n    return size;\n  }\n\n  /**\n   * Preferred size of the tab-box aligns every tab-item in a single line, so that each item is visible.\n   */\n  preferredLayoutSize($container, options) {\n    options = options || {};\n    let htmlContainer = HtmlComponent.get($container),\n      htmlViewContent = HtmlComponent.get(this.tabBox.$viewContent),\n      htmlViewTabs = HtmlComponent.get(this.tabBox.$tabArea),\n      viewTabsSize = new Dimension(),\n      viewContentSize = new Dimension();\n\n    // HeightHint not supported\n    options.heightHint = null;\n    if (htmlViewTabs.isVisible()) {\n      viewTabsSize = htmlViewTabs.prefSize().add(htmlViewTabs.margins());\n    }\n    viewContentSize = htmlViewContent.prefSize(options).add(htmlContainer.insets()).add(htmlViewContent.margins());\n    return new Dimension(Math.max(viewTabsSize.width, viewContentSize.width), viewContentSize.height + viewTabsSize.height);\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","HtmlComponent","SimpleTabBoxLayout","constructor","tabBox","layout","$container","containerSize","viewContentSize","htmlContainer","get","htmlViewContent","$viewContent","tabAreaSize","availableSize","exact","subtract","insets","_layoutTabArea","margins","height","setSize","rendered","htmlViewTabs","$tabArea","prefSize","size","width","top","bottom","preferredLayoutSize","options","viewTabsSize","heightHint","isVisible","add","Math","max"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/tabbox/SimpleTabBoxLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, HtmlComponent} from '../index';\n\nexport default class SimpleTabBoxLayout extends AbstractLayout {\n\n  constructor(tabBox) {\n    super();\n    this.tabBox = tabBox;\n  }\n\n  layout($container) {\n    let containerSize, viewContentSize,\n      htmlContainer = HtmlComponent.get($container),\n      htmlViewContent = HtmlComponent.get(this.tabBox.$viewContent),\n      tabAreaSize;\n\n    containerSize = htmlContainer.availableSize({\n      exact: true\n    })\n      .subtract(htmlContainer.insets());\n\n    tabAreaSize = this._layoutTabArea(containerSize);\n\n    viewContentSize = containerSize.subtract(htmlViewContent.margins());\n    viewContentSize.height -= tabAreaSize.height;\n    htmlViewContent.setSize(viewContentSize);\n  }\n\n  /**\n   * @param containerSize\n   * @returns {Dimension} used of the tab area\n   */\n  _layoutTabArea(containerSize) {\n    if (!this.tabBox.rendered) {\n      return new Dimension(0, 0);\n    }\n    // exprected the tab area is layouted dynamically only\n    let htmlViewTabs = HtmlComponent.get(this.tabBox.$tabArea),\n      prefSize = htmlViewTabs.prefSize(),\n      margins = htmlViewTabs.margins();\n    let size = new Dimension(containerSize.width, prefSize.height + margins.top + margins.bottom);\n    htmlViewTabs.setSize(size);\n    return size;\n  }\n\n  /**\n   * Preferred size of the tab-box aligns every tab-item in a single line, so that each item is visible.\n   */\n  preferredLayoutSize($container, options) {\n    options = options || {};\n    let htmlContainer = HtmlComponent.get($container),\n      htmlViewContent = HtmlComponent.get(this.tabBox.$viewContent),\n      htmlViewTabs = HtmlComponent.get(this.tabBox.$tabArea),\n      viewTabsSize = new Dimension(),\n      viewContentSize = new Dimension();\n\n    // HeightHint not supported\n    options.heightHint = null;\n\n    if (htmlViewTabs.isVisible()) {\n      viewTabsSize = htmlViewTabs.prefSize()\n        .add(htmlViewTabs.margins());\n    }\n\n    viewContentSize = htmlViewContent.prefSize(options)\n      .add(htmlContainer.insets())\n      .add(htmlViewContent.margins());\n\n    return new Dimension(\n      Math.max(viewTabsSize.width, viewContentSize.width),\n      viewContentSize.height + viewTabsSize.height);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}