{"ast":null,"code":"/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { objects, strings, TypeDescriptor } from '../index';\nimport $ from 'jquery';\n\n/**\n * map of \"objectType\" -> { defaultValuesObject }\n */\nlet _defaults = {};\n\n/**\n * map of \"objectType\" -> [ \"objectType\", \"parentObjectType\", ..., \"topLevelObjectType\" ]\n */\nlet _objectTypeHierarchyFlat = {};\nexport function bootstrap(options) {\n  options = options || {};\n  let defaultOptions = {\n    url: 'defaultValues'\n  };\n  options = $.extend({}, defaultOptions, options);\n  // Load default value configuration from server (and cache it)\n  return $.ajaxJson(options.url).done(init.bind(this));\n}\nexport function init(data) {\n  // Store defaults\n  _objectTypeHierarchyFlat = {};\n  _defaults = data.defaults || {};\n\n  // Generate object type hierarchy\n  let objectTypeHierarchy = data.objectTypeHierarchy || {};\n  _generateObjectTypeHierarchyRec(objectTypeHierarchy, undefined, _objectTypeHierarchyFlat);\n\n  // For all object types in the defaults that don't have a hierarchy yet, add a dummy hierarchy with one element\n  Object.keys(_defaults).forEach(objectType => {\n    if (!_objectTypeHierarchyFlat[objectType]) {\n      _objectTypeHierarchyFlat[objectType] = [objectType];\n    }\n  }, this);\n}\nexport function _generateObjectTypeHierarchyRec(json, currentParentObjectTypes, targetMap) {\n  if (!json) {\n    return;\n  }\n  if (!targetMap) {\n    throw new Error('Argument \\'targetMap\\' must not be null');\n  }\n  Object.keys(json).forEach(objectType => {\n    let newCurrentParentObjectTypes = [objectType];\n    if (currentParentObjectTypes) {\n      newCurrentParentObjectTypes = newCurrentParentObjectTypes.concat(currentParentObjectTypes);\n    }\n    if (typeof json[objectType] === 'object') {\n      _generateObjectTypeHierarchyRec(json[objectType], newCurrentParentObjectTypes, targetMap);\n    }\n\n    // Store current result\n    if (targetMap[objectType]) {\n      throw new Error('Object type \\'' + objectType + '\\' has ambiguous parent object types.');\n    }\n    targetMap[objectType] = newCurrentParentObjectTypes;\n  }, this);\n}\n\n/**\n * Applies the defaults for the given object type to the given object. Properties\n * are only set if they don't exist yet. The argument 'objectType' is optional\n * if the object has a property of the same name. If the object is an array,\n * the defaults are applied to each of the elements.\n */\nexport function applyTo(object, objectType) {\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      applyTo(object[i], objectType);\n    }\n  } else if (typeof object === 'object') {\n    objectType = objectType || object.objectType;\n    if (objectType) {\n      _applyToInternal(object, objectType);\n    }\n  }\n}\nexport function _applyToInternal(object, objectType) {\n  let objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  if (!objectTypeHierarchy) {\n    // Remove model variant and try again\n    let objectInfo = TypeDescriptor.parse(objectType);\n    objectType = objectInfo.objectType.toString();\n    objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  }\n  if (!objectTypeHierarchy) {\n    // Unknown type, nothing to apply\n    return;\n  }\n  for (let i = 0; i < objectTypeHierarchy.length; i++) {\n    let t = objectTypeHierarchy[i];\n    let defaults = _defaults[t];\n    _extendWithDefaults(object, defaults);\n  }\n}\nexport function _extendWithDefaults(object, defaults) {\n  if (object === undefined || defaults === undefined) {\n    return;\n  }\n  Object.keys(defaults).forEach(prop => {\n    // Support for \"pseudo\" default values: If a property name in the default values definition\n    // starts with a \"~\" character, the defined object will _not_ be applied as a default value\n    // for a non-existing property, but inner properties of that object will be applied to an\n    // existing object.\n    let realProp = prop;\n    if (strings.startsWith(prop, '~')) {\n      realProp = prop.substring(1);\n    }\n    // If property does not exist, set the default value and return.\n    if (object[realProp] === undefined) {\n      object[realProp] = objects.valueCopy(defaults[realProp]);\n    } else if (objects.isPlainObject(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"default objects\". If the property value is an object and default\n      // value is also an object, extend the property value instead of replacing it.\n      _extendWithDefaults(object[realProp], defaults[prop]);\n    } else if (Array.isArray(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"array of default objects\": If the property value is an array of objects and\n      // the default value is an object, extend each object in the array with the default value.\n      let objectArray = object[realProp];\n      for (let i = 0; i < objectArray.length; i++) {\n        if (objects.isPlainObject(objectArray[i])) {\n          _extendWithDefaults(objectArray[i], defaults[prop]);\n        }\n      }\n    }\n  }, this);\n}\nexport default {\n  applyTo,\n  bootstrap,\n  init\n};","map":{"version":3,"names":["objects","strings","TypeDescriptor","$","_defaults","_objectTypeHierarchyFlat","bootstrap","options","defaultOptions","url","extend","ajaxJson","done","init","bind","data","defaults","objectTypeHierarchy","_generateObjectTypeHierarchyRec","undefined","Object","keys","forEach","objectType","json","currentParentObjectTypes","targetMap","Error","newCurrentParentObjectTypes","concat","applyTo","object","Array","isArray","i","length","_applyToInternal","objectInfo","parse","toString","t","_extendWithDefaults","prop","realProp","startsWith","substring","valueCopy","isPlainObject","objectArray"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/defaultValues.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2017 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {objects, strings, TypeDescriptor} from '../index';\nimport $ from 'jquery';\n\n/**\n * map of \"objectType\" -> { defaultValuesObject }\n */\nlet _defaults = {};\n\n/**\n * map of \"objectType\" -> [ \"objectType\", \"parentObjectType\", ..., \"topLevelObjectType\" ]\n */\nlet _objectTypeHierarchyFlat = {};\n\nexport function bootstrap(options) {\n  options = options || {};\n  let defaultOptions = {\n    url: 'defaultValues'\n  };\n  options = $.extend({}, defaultOptions, options);\n  // Load default value configuration from server (and cache it)\n  return $.ajaxJson(options.url)\n    .done(init.bind(this));\n}\n\nexport function init(data) {\n  // Store defaults\n  _objectTypeHierarchyFlat = {};\n  _defaults = data.defaults || {};\n\n  // Generate object type hierarchy\n  let objectTypeHierarchy = data.objectTypeHierarchy || {};\n  _generateObjectTypeHierarchyRec(objectTypeHierarchy, undefined, _objectTypeHierarchyFlat);\n\n  // For all object types in the defaults that don't have a hierarchy yet, add a dummy hierarchy with one element\n  Object.keys(_defaults).forEach(objectType => {\n    if (!_objectTypeHierarchyFlat[objectType]) {\n      _objectTypeHierarchyFlat[objectType] = [objectType];\n    }\n  }, this);\n}\n\nexport function _generateObjectTypeHierarchyRec(json, currentParentObjectTypes, targetMap) {\n  if (!json) {\n    return;\n  }\n  if (!targetMap) {\n    throw new Error('Argument \\'targetMap\\' must not be null');\n  }\n  Object.keys(json).forEach(objectType => {\n    let newCurrentParentObjectTypes = [objectType];\n    if (currentParentObjectTypes) {\n      newCurrentParentObjectTypes = newCurrentParentObjectTypes.concat(currentParentObjectTypes);\n    }\n\n    if (typeof json[objectType] === 'object') {\n      _generateObjectTypeHierarchyRec(json[objectType], newCurrentParentObjectTypes, targetMap);\n    }\n\n    // Store current result\n    if (targetMap[objectType]) {\n      throw new Error('Object type \\'' + objectType + '\\' has ambiguous parent object types.');\n    }\n    targetMap[objectType] = newCurrentParentObjectTypes;\n  }, this);\n}\n\n/**\n * Applies the defaults for the given object type to the given object. Properties\n * are only set if they don't exist yet. The argument 'objectType' is optional\n * if the object has a property of the same name. If the object is an array,\n * the defaults are applied to each of the elements.\n */\nexport function applyTo(object, objectType) {\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      applyTo(object[i], objectType);\n    }\n  } else if (typeof object === 'object') {\n    objectType = objectType || object.objectType;\n    if (objectType) {\n      _applyToInternal(object, objectType);\n    }\n  }\n}\n\nexport function _applyToInternal(object, objectType) {\n  let objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  if (!objectTypeHierarchy) {\n    // Remove model variant and try again\n    let objectInfo = TypeDescriptor.parse(objectType);\n    objectType = objectInfo.objectType.toString();\n    objectTypeHierarchy = _objectTypeHierarchyFlat[objectType];\n  }\n  if (!objectTypeHierarchy) {\n    // Unknown type, nothing to apply\n    return;\n  }\n  for (let i = 0; i < objectTypeHierarchy.length; i++) {\n    let t = objectTypeHierarchy[i];\n    let defaults = _defaults[t];\n    _extendWithDefaults(object, defaults);\n  }\n}\n\nexport function _extendWithDefaults(object, defaults) {\n  if (object === undefined || defaults === undefined) {\n    return;\n  }\n  Object.keys(defaults).forEach(prop => {\n    // Support for \"pseudo\" default values: If a property name in the default values definition\n    // starts with a \"~\" character, the defined object will _not_ be applied as a default value\n    // for a non-existing property, but inner properties of that object will be applied to an\n    // existing object.\n    let realProp = prop;\n    if (strings.startsWith(prop, '~')) {\n      realProp = prop.substring(1);\n    }\n    // If property does not exist, set the default value and return.\n    if (object[realProp] === undefined) {\n      object[realProp] = objects.valueCopy(defaults[realProp]);\n    } else if (objects.isPlainObject(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"default objects\". If the property value is an object and default\n      // value is also an object, extend the property value instead of replacing it.\n      _extendWithDefaults(object[realProp], defaults[prop]);\n    } else if (Array.isArray(object[realProp]) && objects.isPlainObject(defaults[prop])) {\n      // Special case: \"array of default objects\": If the property value is an array of objects and\n      // the default value is an object, extend each object in the array with the default value.\n      let objectArray = object[realProp];\n      for (let i = 0; i < objectArray.length; i++) {\n        if (objects.isPlainObject(objectArray[i])) {\n          _extendWithDefaults(objectArray[i], defaults[prop]);\n        }\n      }\n    }\n  }, this);\n}\n\nexport default {\n  applyTo,\n  bootstrap,\n  init\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}