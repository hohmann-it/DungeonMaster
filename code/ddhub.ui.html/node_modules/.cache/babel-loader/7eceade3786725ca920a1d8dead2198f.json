{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, objects, Table } from '../index';\nexport default class TableUpdateBuffer {\n  constructor(table) {\n    this._rowMap = {};\n    this.promises = [];\n    this.table = table;\n  }\n\n  /**\n   * The buffer is active if it contains at least one promise. When all promises resolve the buffer will be processed.\n   */\n  pushPromise(promise) {\n    this.promises.push(promise);\n\n    // Also make sure viewport is not rendered as long as update events are buffered\n    // Otherwise the other cells might already be visible during buffering\n    this.table._renderViewportBlocked = true;\n    this.table.setLoading(true);\n    let handler = function () {\n      arrays.remove(this.promises, promise);\n\n      // process immediately when all promises have resolved\n      if (this.promises.length === 0) {\n        this.process();\n      }\n    }.bind(this);\n    // Use then instead of always to ensure it is always executed asynchronous, even for null values\n    promise.then(handler, handler);\n  }\n  isBuffering() {\n    return this.promises.length > 0;\n  }\n  buffer(rows) {\n    rows = arrays.ensure(rows);\n\n    // Don't buffer duplicate rows\n    rows.forEach(function (row) {\n      this._rowMap[row.id] = row;\n    }, this);\n  }\n\n  /**\n   * Calls {@link Table.prototype.updateRows} with the buffered rows and renders the viewport if the rendering was blocked.\n   */\n  process() {\n    if (this.table.destroyed) {\n      return;\n    }\n    let rows = objects.values(this._rowMap);\n    this.table.updateRows(rows);\n    this._rowMap = {};\n\n    // Update the viewport as well if rendering was blocked\n    this.table.setLoading(false);\n    this.table._renderViewportBlocked = false;\n    if (this.table._isDataRendered()) {\n      this.table._renderViewport();\n    }\n  }\n}","map":{"version":3,"names":["arrays","objects","Table","TableUpdateBuffer","constructor","table","_rowMap","promises","pushPromise","promise","push","_renderViewportBlocked","setLoading","handler","remove","length","process","bind","then","isBuffering","buffer","rows","ensure","forEach","row","id","destroyed","values","updateRows","_isDataRendered","_renderViewport"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/table/TableUpdateBuffer.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, objects, Table} from '../index';\n\nexport default class TableUpdateBuffer {\n\n  constructor(table) {\n    this._rowMap = {};\n    this.promises = [];\n    this.table = table;\n  }\n\n  /**\n   * The buffer is active if it contains at least one promise. When all promises resolve the buffer will be processed.\n   */\n  pushPromise(promise) {\n    this.promises.push(promise);\n\n    // Also make sure viewport is not rendered as long as update events are buffered\n    // Otherwise the other cells might already be visible during buffering\n    this.table._renderViewportBlocked = true;\n    this.table.setLoading(true);\n\n    let handler = function() {\n      arrays.remove(this.promises, promise);\n\n      // process immediately when all promises have resolved\n      if (this.promises.length === 0) {\n        this.process();\n      }\n    }.bind(this);\n    // Use then instead of always to ensure it is always executed asynchronous, even for null values\n    promise.then(handler, handler);\n  }\n\n  isBuffering() {\n    return this.promises.length > 0;\n  }\n\n  buffer(rows) {\n    rows = arrays.ensure(rows);\n\n    // Don't buffer duplicate rows\n    rows.forEach(function(row) {\n      this._rowMap[row.id] = row;\n    }, this);\n  }\n\n  /**\n   * Calls {@link Table.prototype.updateRows} with the buffered rows and renders the viewport if the rendering was blocked.\n   */\n  process() {\n    if (this.table.destroyed) {\n      return;\n    }\n\n    let rows = objects.values(this._rowMap);\n    this.table.updateRows(rows);\n    this._rowMap = {};\n\n    // Update the viewport as well if rendering was blocked\n    this.table.setLoading(false);\n    this.table._renderViewportBlocked = false;\n    if (this.table._isDataRendered()) {\n      this.table._renderViewport();\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,MAAM,EAAEC,OAAO,EAAEC,KAAK,QAAO,UAAU;AAE/C,eAAe,MAAMC,iBAAiB,CAAC;EAErCC,WAAW,CAACC,KAAK,EAAE;IACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACF,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;EACEG,WAAW,CAACC,OAAO,EAAE;IACnB,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;;IAE3B;IACA;IACA,IAAI,CAACJ,KAAK,CAACM,sBAAsB,GAAG,IAAI;IACxC,IAAI,CAACN,KAAK,CAACO,UAAU,CAAC,IAAI,CAAC;IAE3B,IAAIC,OAAO,GAAG,YAAW;MACvBb,MAAM,CAACc,MAAM,CAAC,IAAI,CAACP,QAAQ,EAAEE,OAAO,CAAC;;MAErC;MACA,IAAI,IAAI,CAACF,QAAQ,CAACQ,MAAM,KAAK,CAAC,EAAE;QAC9B,IAAI,CAACC,OAAO,EAAE;MAChB;IACF,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IACZ;IACAR,OAAO,CAACS,IAAI,CAACL,OAAO,EAAEA,OAAO,CAAC;EAChC;EAEAM,WAAW,GAAG;IACZ,OAAO,IAAI,CAACZ,QAAQ,CAACQ,MAAM,GAAG,CAAC;EACjC;EAEAK,MAAM,CAACC,IAAI,EAAE;IACXA,IAAI,GAAGrB,MAAM,CAACsB,MAAM,CAACD,IAAI,CAAC;;IAE1B;IACAA,IAAI,CAACE,OAAO,CAAC,UAASC,GAAG,EAAE;MACzB,IAAI,CAAClB,OAAO,CAACkB,GAAG,CAACC,EAAE,CAAC,GAAGD,GAAG;IAC5B,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;AACF;AACA;EACER,OAAO,GAAG;IACR,IAAI,IAAI,CAACX,KAAK,CAACqB,SAAS,EAAE;MACxB;IACF;IAEA,IAAIL,IAAI,GAAGpB,OAAO,CAAC0B,MAAM,CAAC,IAAI,CAACrB,OAAO,CAAC;IACvC,IAAI,CAACD,KAAK,CAACuB,UAAU,CAACP,IAAI,CAAC;IAC3B,IAAI,CAACf,OAAO,GAAG,CAAC,CAAC;;IAEjB;IACA,IAAI,CAACD,KAAK,CAACO,UAAU,CAAC,KAAK,CAAC;IAC5B,IAAI,CAACP,KAAK,CAACM,sBAAsB,GAAG,KAAK;IACzC,IAAI,IAAI,CAACN,KAAK,CAACwB,eAAe,EAAE,EAAE;MAChC,IAAI,CAACxB,KAAK,CAACyB,eAAe,EAAE;IAC9B;EACF;AACF"},"metadata":{},"sourceType":"module"}