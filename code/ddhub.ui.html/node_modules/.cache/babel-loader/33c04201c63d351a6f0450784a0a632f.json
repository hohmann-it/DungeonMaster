{"ast":null,"code":"/*\n * Copyright (c) 2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { FocusRule, scout, Status } from '../index';\nimport $ from 'jquery';\n\n/**\n * Copies the given text to the clipboard. To make this work, the method must be called inside\n * a \"user action\" (i.e. mouse or keyboard event handler). For security reasons, the access to\n * the clipboard is blocked by the browser in other contexts (e.g. asynchronous callbacks).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * text                     -               The text to write to the clipboard.\n *\n * parent                   -               Widget that wants to copy the text. Recommended.\n *                                          Used to retrieve the session and the document.\n *\n * session                  -               Scout session object, used to resolve texts and access the\n *                                          focus manager. Only required when \"parent\" is not set.\n *\n * document                 -               The DOM node for the current document. Used to copy to the\n *                                          clipboard in older browsers. Only required when \"parent\" is\n *                                          not set. If this option is missing, the global \"document\"\n *                                          object is used, which might cause security exceptions when\n *                                          called from a different document (especially in IE).\n *\n * showNotification         true            If true, a desktop notification is shown when copying has\n *                                          been completed. Requires the \"parent\" option to be present.\n *                                          If this is true, the method returns null. Otherwise, it\n *                                          returns a promise that is resolved or rejected when the\n *                                          copying is complete.\n *\n * @param options\n *          mandatory, see table above for valid attributes\n * @return a promise or null, see description of \"showNotification\" option\n */\nexport function copyText(options) {\n  scout.assertParameter('options', options);\n  if (options.parent && !options.session) {\n    options.session = options.parent.session;\n  }\n  scout.assertProperty(options, 'session');\n  let promise = _copyText(options);\n  if (options.parent && scout.nvl(options.showNotification, true)) {\n    _showNotification(options, promise);\n    return null;\n  }\n  return promise;\n}\nexport function _copyText(options) {\n  // Modern clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(options.text);\n  }\n\n  // Fallback for browsers that don't support the modern clipboard API (IE, Safari, Chrome < 66, Firefox < 63)\n  // Create invisible textarea field and use document command \"copy\" to copy the text to the clipboard\n  let doc = options.parent && options.parent.rendered ? options.parent.document(true) : document;\n  let f = doc.createElement('textarea');\n  f.style.position = 'fixed';\n  f.style.opacity = '0.0';\n  f.value = options.text;\n  doc.body.appendChild(f);\n  // Preserve focus\n  let $f = $(f);\n  options.session.focusManager.installFocusContext($f, FocusRule.AUTO);\n  f.select(); // cannot use jquery select(), because that is overridden by jquery-scout\n\n  let deferred = $.Deferred();\n  try {\n    let successful = doc.execCommand('copy');\n    if (successful) {\n      deferred.resolve();\n    } else {\n      deferred.reject();\n    }\n  } catch (err) {\n    deferred.reject(err);\n  } finally {\n    // Restore focus\n    options.session.focusManager.uninstallFocusContext($f);\n    doc.body.removeChild(f);\n  }\n  return deferred.promise();\n}\nexport function _showNotification(options, promise) {\n  let status = _successStatus(options.parent.session);\n  promise.catch(() => {\n    status = _failedStatus(options.parent.session);\n  }).then(() => {\n    showNotification(options.parent, status);\n  });\n}\nexport function _successStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardSuccessStatus'),\n    severity: Status.Severity.INFO\n  });\n}\nexport function _failedStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardFailedStatus'),\n    severity: Status.Severity.WARNING\n  });\n}\n\n/**\n * Shows a short desktop notification. By default, it informs the user that the content\n * has been copied to the clipboard successfully. By passing a different status, the\n * message can be changed.\n *\n * @param parent\n *          Widget that wants show the notification. Mandatory. Required for NLS texts.\n */\nexport function showNotification(parent, status) {\n  scout.assertParameter('parent', parent);\n  let notification = scout.create('DesktopNotification', {\n    parent: parent,\n    closable: false,\n    duration: 1234,\n    status: status || _successStatus(parent.session)\n  });\n  notification.show();\n}\nexport default {\n  copyText,\n  showNotification\n};","map":{"version":3,"names":["FocusRule","scout","Status","$","copyText","options","assertParameter","parent","session","assertProperty","promise","_copyText","nvl","showNotification","_showNotification","navigator","clipboard","writeText","text","doc","rendered","document","f","createElement","style","position","opacity","value","body","appendChild","$f","focusManager","installFocusContext","AUTO","select","deferred","Deferred","successful","execCommand","resolve","reject","err","uninstallFocusContext","removeChild","status","_successStatus","catch","_failedStatus","then","message","severity","Severity","INFO","WARNING","notification","create","closable","duration","show"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/clipboard.js"],"sourcesContent":["/*\n * Copyright (c) 2019 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {FocusRule, scout, Status} from '../index';\nimport $ from 'jquery';\n\n/**\n * Copies the given text to the clipboard. To make this work, the method must be called inside\n * a \"user action\" (i.e. mouse or keyboard event handler). For security reasons, the access to\n * the clipboard is blocked by the browser in other contexts (e.g. asynchronous callbacks).\n *\n * OPTION                   DEFAULT VALUE   DESCRIPTION\n * ------------------------------------------------------------------------------------------------------\n * text                     -               The text to write to the clipboard.\n *\n * parent                   -               Widget that wants to copy the text. Recommended.\n *                                          Used to retrieve the session and the document.\n *\n * session                  -               Scout session object, used to resolve texts and access the\n *                                          focus manager. Only required when \"parent\" is not set.\n *\n * document                 -               The DOM node for the current document. Used to copy to the\n *                                          clipboard in older browsers. Only required when \"parent\" is\n *                                          not set. If this option is missing, the global \"document\"\n *                                          object is used, which might cause security exceptions when\n *                                          called from a different document (especially in IE).\n *\n * showNotification         true            If true, a desktop notification is shown when copying has\n *                                          been completed. Requires the \"parent\" option to be present.\n *                                          If this is true, the method returns null. Otherwise, it\n *                                          returns a promise that is resolved or rejected when the\n *                                          copying is complete.\n *\n * @param options\n *          mandatory, see table above for valid attributes\n * @return a promise or null, see description of \"showNotification\" option\n */\nexport function copyText(options) {\n  scout.assertParameter('options', options);\n  if (options.parent && !options.session) {\n    options.session = options.parent.session;\n  }\n  scout.assertProperty(options, 'session');\n\n  let promise = _copyText(options);\n\n  if (options.parent && scout.nvl(options.showNotification, true)) {\n    _showNotification(options, promise);\n    return null;\n  }\n  return promise;\n}\n\nexport function _copyText(options) {\n  // Modern clipboard API\n  // https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(options.text);\n  }\n\n  // Fallback for browsers that don't support the modern clipboard API (IE, Safari, Chrome < 66, Firefox < 63)\n  // Create invisible textarea field and use document command \"copy\" to copy the text to the clipboard\n  let doc = (options.parent && options.parent.rendered ? options.parent.document(true) : document);\n  let f = doc.createElement('textarea');\n  f.style.position = 'fixed';\n  f.style.opacity = '0.0';\n  f.value = options.text;\n  doc.body.appendChild(f);\n  // Preserve focus\n  let $f = $(f);\n  options.session.focusManager.installFocusContext($f, FocusRule.AUTO);\n  f.select(); // cannot use jquery select(), because that is overridden by jquery-scout\n\n  let deferred = $.Deferred();\n  try {\n    let successful = doc.execCommand('copy');\n    if (successful) {\n      deferred.resolve();\n    } else {\n      deferred.reject();\n    }\n  } catch (err) {\n    deferred.reject(err);\n  } finally {\n    // Restore focus\n    options.session.focusManager.uninstallFocusContext($f);\n    doc.body.removeChild(f);\n  }\n  return deferred.promise();\n}\n\nexport function _showNotification(options, promise) {\n  let status = _successStatus(options.parent.session);\n  promise\n    .catch(() => {\n      status = _failedStatus(options.parent.session);\n    })\n    .then(() => {\n      showNotification(options.parent, status);\n    });\n}\n\nexport function _successStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardSuccessStatus'),\n    severity: Status.Severity.INFO\n  });\n}\n\nexport function _failedStatus(session) {\n  return new Status({\n    message: session.text('ui.CopyToClipboardFailedStatus'),\n    severity: Status.Severity.WARNING\n  });\n}\n\n/**\n * Shows a short desktop notification. By default, it informs the user that the content\n * has been copied to the clipboard successfully. By passing a different status, the\n * message can be changed.\n *\n * @param parent\n *          Widget that wants show the notification. Mandatory. Required for NLS texts.\n */\nexport function showNotification(parent, status) {\n  scout.assertParameter('parent', parent);\n  let notification = scout.create('DesktopNotification', {\n    parent: parent,\n    closable: false,\n    duration: 1234,\n    status: status || _successStatus(parent.session)\n  });\n  notification.show();\n}\n\nexport default {\n  copyText,\n  showNotification\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}