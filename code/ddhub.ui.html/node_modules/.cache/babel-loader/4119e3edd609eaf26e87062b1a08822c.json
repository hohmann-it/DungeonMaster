{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { AbstractLayout, Dimension, graphics, HtmlComponent, HtmlEnvironment, Insets } from '../../../index';\nexport default class DateTimeCompositeLayout extends AbstractLayout {\n  constructor(dateField) {\n    super();\n    this._dateField = dateField;\n\n    // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n    this.MIN_DATE_FIELD_WIDTH = 90;\n    this.PREF_DATE_FIELD_WIDTH = 110;\n    this.MIN_TIME_FIELD_WIDTH = 60;\n    this.PREF_TIME_FIELD_WIDTH = 90;\n    this._initDefaults();\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmentPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this._dateField.one('remove', () => {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    });\n  }\n  _initDefaults() {\n    this.hgap = HtmlEnvironment.get().smallColumnGap;\n  }\n  _onHtmlEnvironmentPropertyChange() {\n    this._initDefaults();\n    this._dateField.invalidateLayoutTree();\n  }\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container),\n      $dateField = this._dateField.$dateField,\n      $timeField = this._dateField.$timeField,\n      $dateFieldIcon = this._dateField.$dateFieldIcon,\n      $timeFieldIcon = this._dateField.$timeFieldIcon,\n      $dateClearIcon = this._dateField.$dateClearIcon,\n      $timeClearIcon = this._dateField.$timeClearIcon,\n      $predictDateField = this._dateField._$predictDateField,\n      $predictTimeField = this._dateField._$predictTimeField,\n      htmlDateField = $dateField ? HtmlComponent.get($dateField) : null,\n      htmlTimeField = $timeField ? HtmlComponent.get($timeField) : null,\n      hasDate = $dateField ? !$dateField.isDisplayNone() : false,\n      hasTime = $timeField ? !$timeField.isDisplayNone() : false;\n    let availableSize = htmlContainer.availableSize({\n      exact: true\n    }).subtract(htmlContainer.insets());\n    let dateFieldSize, timeFieldSize;\n    // --- Date and time ---\n    if (hasDate && hasTime) {\n      // Field size\n      let dateFieldMargins = htmlDateField.margins();\n      let timeFieldMargins = htmlTimeField.margins();\n      let compositeMargins = new Insets(Math.max(dateFieldMargins.top, timeFieldMargins.top), Math.max(dateFieldMargins.right, timeFieldMargins.right), Math.max(dateFieldMargins.bottom, timeFieldMargins.bottom), Math.max(dateFieldMargins.left, timeFieldMargins.left));\n      let compositeSize = availableSize.subtract(compositeMargins);\n      let hgap = this._hgap();\n      let totalWidth = compositeSize.width - hgap;\n      // Date field 60%, time field 40%\n      let dateFieldWidth = totalWidth * 0.6;\n      let timeFieldWidth = totalWidth - dateFieldWidth;\n      dateFieldSize = new Dimension(dateFieldWidth, compositeSize.height);\n      timeFieldSize = new Dimension(timeFieldWidth, compositeSize.height);\n      htmlDateField.setSize(dateFieldSize);\n      htmlTimeField.setSize(timeFieldSize);\n      $timeField.cssRight(0);\n\n      // Icons\n      $dateFieldIcon.cssTop($dateField.cssBorderTopWidth()).cssRight(timeFieldWidth + hgap).cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      if ($dateClearIcon) {\n        $dateClearIcon.cssTop($dateField.cssBorderTopWidth()).cssRight(timeFieldWidth + hgap).cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      }\n      $timeFieldIcon.cssTop($timeField.cssBorderTopWidth()).cssRight(0).cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      if ($timeClearIcon) {\n        $timeClearIcon.cssTop($timeField.cssBorderTopWidth()).cssRight(0).cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      }\n\n      // Compact style\n      $dateField.toggleClass('compact', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      $timeField.toggleClass('compact', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-date', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-time', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictDateField) {\n        graphics.setSize($predictDateField, dateFieldSize);\n      }\n      if ($predictTimeField) {\n        graphics.setSize($predictTimeField, timeFieldSize);\n        $predictTimeField.cssRight(0);\n      }\n    } else if (hasDate) {\n      // --- Date only ---\n      // Field size\n      dateFieldSize = availableSize.subtract(htmlDateField.margins());\n      htmlDateField.setSize(dateFieldSize);\n\n      // Icons\n      $dateFieldIcon.cssTop($dateField.cssBorderTopWidth()).cssRight(0).cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      if ($dateClearIcon) {\n        $dateClearIcon.cssTop($dateField.cssBorderTopWidth()).cssRight(0).cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      }\n      // Compact style\n      $dateField.toggleClass('compact', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-date', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictDateField) {\n        graphics.setSize($predictDateField, dateFieldSize);\n      }\n    } else if (hasTime) {\n      // --- Time only ---\n      // Field size\n      timeFieldSize = availableSize.subtract(htmlTimeField.margins());\n      htmlTimeField.setSize(timeFieldSize);\n\n      // Icons\n      $timeFieldIcon.cssTop($timeField.cssBorderTopWidth()).cssRight(0).cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      if ($timeClearIcon) {\n        $timeClearIcon.cssTop($timeField.cssBorderTopWidth()).cssRight(0).cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      }\n      // Compact style\n      $timeField.toggleClass('compact', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-time', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictTimeField) {\n        graphics.setSize($predictTimeField, timeFieldSize);\n      }\n    }\n    let popup = this._dateField.popup;\n    if (popup && popup.rendered) {\n      // Make sure the popup is correctly positioned (especially necessary for cell editor)\n      popup.position();\n    }\n  }\n  _hgap() {\n    if (this._dateField.cellEditor) {\n      return 0;\n    }\n    return this.hgap;\n  }\n  preferredLayoutSize($container) {\n    let prefSize = new Dimension(),\n      $dateField = this._dateField.$dateField,\n      $timeField = this._dateField.$timeField,\n      hasDate = $dateField ? !$dateField.isDisplayNone() : false,\n      hasTime = $timeField ? !$timeField.isDisplayNone() : false;\n\n    // --- Date and time ---\n    if (hasDate && hasTime) {\n      prefSize = graphics.prefSize(this._dateField.$dateField);\n      prefSize.width = this.PREF_DATE_FIELD_WIDTH + this._hgap() + this.PREF_TIME_FIELD_WIDTH;\n    } else if (hasDate) {\n      // --- Date only ---\n      prefSize = graphics.prefSize(this._dateField.$dateField);\n      prefSize.width = this.PREF_DATE_FIELD_WIDTH;\n    } else if (hasTime) {\n      // --- Time only ---\n      prefSize = graphics.prefSize(this._dateField.$timeField);\n      prefSize.width = this.PREF_TIME_FIELD_WIDTH;\n    }\n    return prefSize;\n  }\n}","map":{"version":3,"names":["AbstractLayout","Dimension","graphics","HtmlComponent","HtmlEnvironment","Insets","DateTimeCompositeLayout","constructor","dateField","_dateField","MIN_DATE_FIELD_WIDTH","PREF_DATE_FIELD_WIDTH","MIN_TIME_FIELD_WIDTH","PREF_TIME_FIELD_WIDTH","_initDefaults","htmlPropertyChangeHandler","_onHtmlEnvironmentPropertyChange","bind","get","on","one","off","hgap","smallColumnGap","invalidateLayoutTree","layout","$container","htmlContainer","$dateField","$timeField","$dateFieldIcon","$timeFieldIcon","$dateClearIcon","$timeClearIcon","$predictDateField","_$predictDateField","$predictTimeField","_$predictTimeField","htmlDateField","htmlTimeField","hasDate","isDisplayNone","hasTime","availableSize","exact","subtract","insets","dateFieldSize","timeFieldSize","dateFieldMargins","margins","timeFieldMargins","compositeMargins","Math","max","top","right","bottom","left","compositeSize","_hgap","totalWidth","width","dateFieldWidth","timeFieldWidth","height","setSize","cssRight","cssTop","cssBorderTopWidth","cssHeight","cssBorderWidthY","toggleClass","popup","rendered","position","cellEditor","preferredLayoutSize","prefSize"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/form/fields/datefield/DateTimeCompositeLayout.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {AbstractLayout, Dimension, graphics, HtmlComponent, HtmlEnvironment, Insets} from '../../../index';\n\nexport default class DateTimeCompositeLayout extends AbstractLayout {\n\n  constructor(dateField) {\n    super();\n    this._dateField = dateField;\n\n    // Minimum field with to normal state, for smaller widths the \"compact\" style is applied.\n    this.MIN_DATE_FIELD_WIDTH = 90;\n    this.PREF_DATE_FIELD_WIDTH = 110;\n    this.MIN_TIME_FIELD_WIDTH = 60;\n    this.PREF_TIME_FIELD_WIDTH = 90;\n\n    this._initDefaults();\n\n    this.htmlPropertyChangeHandler = this._onHtmlEnvironmentPropertyChange.bind(this);\n    HtmlEnvironment.get().on('propertyChange', this.htmlPropertyChangeHandler);\n    this._dateField.one('remove', () => {\n      HtmlEnvironment.get().off('propertyChange', this.htmlPropertyChangeHandler);\n    });\n  }\n\n  _initDefaults() {\n    this.hgap = HtmlEnvironment.get().smallColumnGap;\n  }\n\n  _onHtmlEnvironmentPropertyChange() {\n    this._initDefaults();\n    this._dateField.invalidateLayoutTree();\n  }\n\n  layout($container) {\n    let htmlContainer = HtmlComponent.get($container),\n      $dateField = this._dateField.$dateField,\n      $timeField = this._dateField.$timeField,\n      $dateFieldIcon = this._dateField.$dateFieldIcon,\n      $timeFieldIcon = this._dateField.$timeFieldIcon,\n      $dateClearIcon = this._dateField.$dateClearIcon,\n      $timeClearIcon = this._dateField.$timeClearIcon,\n      $predictDateField = this._dateField._$predictDateField,\n      $predictTimeField = this._dateField._$predictTimeField,\n      htmlDateField = ($dateField ? HtmlComponent.get($dateField) : null),\n      htmlTimeField = ($timeField ? HtmlComponent.get($timeField) : null),\n      hasDate = ($dateField ? !$dateField.isDisplayNone() : false),\n      hasTime = ($timeField ? !$timeField.isDisplayNone() : false);\n\n    let availableSize = htmlContainer.availableSize({\n      exact: true\n    })\n      .subtract(htmlContainer.insets());\n\n    let dateFieldSize, timeFieldSize;\n    // --- Date and time ---\n    if (hasDate && hasTime) {\n      // Field size\n      let dateFieldMargins = htmlDateField.margins();\n      let timeFieldMargins = htmlTimeField.margins();\n      let compositeMargins = new Insets(\n        Math.max(dateFieldMargins.top, timeFieldMargins.top),\n        Math.max(dateFieldMargins.right, timeFieldMargins.right),\n        Math.max(dateFieldMargins.bottom, timeFieldMargins.bottom),\n        Math.max(dateFieldMargins.left, timeFieldMargins.left)\n      );\n      let compositeSize = availableSize.subtract(compositeMargins);\n      let hgap = this._hgap();\n      let totalWidth = compositeSize.width - hgap;\n      // Date field 60%, time field 40%\n      let dateFieldWidth = (totalWidth * 0.6);\n      let timeFieldWidth = (totalWidth - dateFieldWidth);\n\n      dateFieldSize = new Dimension(dateFieldWidth, compositeSize.height);\n      timeFieldSize = new Dimension(timeFieldWidth, compositeSize.height);\n      htmlDateField.setSize(dateFieldSize);\n      htmlTimeField.setSize(timeFieldSize);\n      $timeField.cssRight(0);\n\n      // Icons\n      $dateFieldIcon.cssTop($dateField.cssBorderTopWidth())\n        .cssRight(timeFieldWidth + hgap)\n        .cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      if ($dateClearIcon) {\n        $dateClearIcon.cssTop($dateField.cssBorderTopWidth())\n          .cssRight(timeFieldWidth + hgap)\n          .cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      }\n      $timeFieldIcon.cssTop($timeField.cssBorderTopWidth())\n        .cssRight(0)\n        .cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      if ($timeClearIcon) {\n        $timeClearIcon.cssTop($timeField.cssBorderTopWidth())\n          .cssRight(0)\n          .cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      }\n\n      // Compact style\n      $dateField.toggleClass('compact', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      $timeField.toggleClass('compact', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-date', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-time', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictDateField) {\n        graphics.setSize($predictDateField, dateFieldSize);\n      }\n      if ($predictTimeField) {\n        graphics.setSize($predictTimeField, timeFieldSize);\n        $predictTimeField.cssRight(0);\n      }\n    } else if (hasDate) { // --- Date only ---\n      // Field size\n      dateFieldSize = availableSize.subtract(htmlDateField.margins());\n      htmlDateField.setSize(dateFieldSize);\n\n      // Icons\n      $dateFieldIcon.cssTop($dateField.cssBorderTopWidth())\n        .cssRight(0)\n        .cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n\n      if ($dateClearIcon) {\n        $dateClearIcon.cssTop($dateField.cssBorderTopWidth())\n          .cssRight(0)\n          .cssHeight(dateFieldSize.height - $dateField.cssBorderWidthY());\n      }\n      // Compact style\n      $dateField.toggleClass('compact', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-date', dateFieldSize.width < this.MIN_DATE_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictDateField) {\n        graphics.setSize($predictDateField, dateFieldSize);\n      }\n    } else if (hasTime) { // --- Time only ---\n      // Field size\n      timeFieldSize = availableSize.subtract(htmlTimeField.margins());\n      htmlTimeField.setSize(timeFieldSize);\n\n      // Icons\n      $timeFieldIcon.cssTop($timeField.cssBorderTopWidth())\n        .cssRight(0)\n        .cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      if ($timeClearIcon) {\n        $timeClearIcon.cssTop($timeField.cssBorderTopWidth())\n          .cssRight(0)\n          .cssHeight(timeFieldSize.height - $timeField.cssBorderWidthY());\n      }\n      // Compact style\n      $timeField.toggleClass('compact', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n      this._dateField.$container.toggleClass('compact-time', timeFieldSize.width < this.MIN_TIME_FIELD_WIDTH);\n\n      // Prediction\n      if ($predictTimeField) {\n        graphics.setSize($predictTimeField, timeFieldSize);\n      }\n    }\n    let popup = this._dateField.popup;\n    if (popup && popup.rendered) {\n      // Make sure the popup is correctly positioned (especially necessary for cell editor)\n      popup.position();\n    }\n  }\n\n  _hgap() {\n    if (this._dateField.cellEditor) {\n      return 0;\n    }\n    return this.hgap;\n  }\n\n  preferredLayoutSize($container) {\n    let prefSize = new Dimension(),\n      $dateField = this._dateField.$dateField,\n      $timeField = this._dateField.$timeField,\n      hasDate = ($dateField ? !$dateField.isDisplayNone() : false),\n      hasTime = ($timeField ? !$timeField.isDisplayNone() : false);\n\n    // --- Date and time ---\n    if (hasDate && hasTime) {\n      prefSize = graphics.prefSize(this._dateField.$dateField);\n      prefSize.width = this.PREF_DATE_FIELD_WIDTH + this._hgap() + this.PREF_TIME_FIELD_WIDTH;\n    } else if (hasDate) {\n      // --- Date only ---\n      prefSize = graphics.prefSize(this._dateField.$dateField);\n      prefSize.width = this.PREF_DATE_FIELD_WIDTH;\n    } else if (hasTime) {\n      // --- Time only ---\n      prefSize = graphics.prefSize(this._dateField.$timeField);\n      prefSize.width = this.PREF_TIME_FIELD_WIDTH;\n    }\n    return prefSize;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}