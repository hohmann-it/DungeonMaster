{"ast":null,"code":"/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { arrays, numbers, scout, strings } from '../index';\nimport $ from 'jquery';\nlet styleMap = {};\nlet element = null;\n\n/**\n * @typedef StyleMap\n * @property {string} [minHeight]\n * @property {string} [minWidth]\n * @property {string} [fill]\n * @property {string} [stroke]\n * @property {string} [fontFamily]\n * @property {string} [backgroundColor]\n * @property {string} [borderColor]\n */\n\n/**\n * Generates an invisible div and appends it to the body, only once. The same div will be reused on subsequent calls.\n * Adds the given css class to that element and returns a style object containing the values for every given property.\n * The style is cached. Subsequent calls with the same css class will return the same style object.\n *\n * @param {object} styleProperties in the form {backgroundColor: 'black'}\n * @return {StyleMap} style\n */\nexport function get(cssClass, properties, styleProperties) {\n  // create invisible div\n  let elem = element;\n  if (!elem) {\n    elem = window.document.createElement('div');\n    elem.style.display = 'none';\n    window.document.body.appendChild(elem);\n    element = elem;\n  }\n  let displayNoneStyleCssText = elem.style.cssText;\n  styleProperties = $.extend(true, {}, styleProperties, {\n    display: ''\n  });\n  Object.keys(styleProperties).sort().forEach(key => {\n    elem.style[key] = styleProperties[key];\n  });\n  // get cssText as additional key component, display is not part of the key component\n  let keyCssText = elem.style.cssText;\n  // always add display: 'none'\n  elem.style.display = 'none';\n  let styleCssText = elem.style.cssText;\n\n  // reset style\n  elem.style.cssText = displayNoneStyleCssText;\n  let cssClassArray = arrays.ensure(cssClass),\n    mapKey = keyCssText ? [...cssClassArray, keyCssText] : cssClassArray;\n  let style = styleMap[mapKey];\n  // ensure array\n  properties = arrays.ensure(properties);\n  properties = properties.map(prop => {\n    return {\n      name: prop,\n      // replace property names like 'max-width' in 'maxWidth'\n      nameCamelCase: prop.replace(/-(.)/g, (match, p1) => {\n        return p1.toUpperCase();\n      })\n    };\n  });\n\n  // ensure style\n  if (!style) {\n    style = {};\n    put(mapKey, style);\n  }\n  let notResolvedProperties = properties.filter(prop => {\n    return !(prop.nameCamelCase in style);\n  });\n  if (notResolvedProperties.length === 0) {\n    return style;\n  }\n\n  // resolve missing properties\n  elem.className = cssClassArray[0];\n  for (let i = 1; i < cssClassArray.length; i++) {\n    let childElem = elem.children[0];\n    if (!childElem) {\n      childElem = window.document.createElement('div');\n      childElem.style.display = 'none';\n      elem.appendChild(childElem);\n    }\n    elem = childElem;\n    elem.className = cssClassArray[i];\n  }\n\n  // set style properties\n  elem.style.cssText = styleCssText;\n  let computedStyle = window.getComputedStyle(elem);\n  notResolvedProperties.forEach(property => {\n    style[property.nameCamelCase] = computedStyle[property.name];\n  });\n  elem.style.cssText = displayNoneStyleCssText;\n  elem = element;\n  do {\n    elem.className = '';\n    elem = elem.children[0];\n  } while (elem);\n  return style;\n}\n\n/**\n * Traverses the parents of the given $elem and returns the first opaque background color.\n * @param {jQuery} $elem\n */\nexport function getFirstOpaqueBackgroundColor($elem) {\n  if (!$elem) {\n    return;\n  }\n  let document = $elem.document(true);\n  while ($elem && $elem.length && document !== $elem[0]) {\n    let rgbString = $elem.css('background-color'),\n      rgba = rgb(rgbString);\n    if (rgba && rgba.alpha === 1) {\n      return rgbString;\n    }\n    $elem = $elem.parent();\n  }\n}\nexport function getSize(cssClass, cssProperty, property, defaultSize) {\n  let size = get(cssClass, cssProperty)[property];\n  if ('auto' === size) {\n    return defaultSize;\n  }\n  return $.pxToNumber(size);\n}\nexport function put(cssClass, style) {\n  styleMap[cssClass] = style;\n}\nexport function clearCache() {\n  styleMap = {};\n}\nconst RGB_BLACK = {\n  red: 0,\n  green: 0,\n  blue: 0\n};\nconst RGB_WHITE = {\n  red: 255,\n  green: 255,\n  blue: 255\n};\n\n/**\n * Creates an rgb object based on the given rgb string with the format rgb(0, 0, 0).\n * If the input string cannot be parsed, undefined is returned.\n */\nexport function rgb(rgbString) {\n  if (!rgbString) {\n    return undefined;\n  }\n  let rgbVal = rgbString.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?(\\d+(\\.\\d+)?)?/i);\n  if (rgbVal === null) {\n    return undefined;\n  }\n  return {\n    red: parseInt(rgbVal[1], 10),\n    green: parseInt(rgbVal[2], 10),\n    blue: parseInt(rgbVal[3], 10),\n    alpha: parseFloat(scout.nvl(rgbVal[4], 1))\n  };\n}\n\n/**\n * Converts the given hex string to a rgb string.\n */\nexport function hexToRgb(hexString) {\n  if (!hexString) {\n    return;\n  }\n  let r = 0,\n    g = 0,\n    b = 0,\n    a = 255;\n  if (hexString.length === 4 || hexString.length === 5) {\n    r = '0x' + hexString[1] + hexString[1];\n    g = '0x' + hexString[2] + hexString[2];\n    b = '0x' + hexString[3] + hexString[3];\n    if (hexString.length === 5) {\n      a = '0x' + hexString[4] + hexString[4];\n    }\n  }\n  if (hexString.length === 7 || hexString.length === 9) {\n    r = '0x' + hexString[1] + hexString[2];\n    g = '0x' + hexString[3] + hexString[4];\n    b = '0x' + hexString[5] + hexString[6];\n    if (hexString.length === 9) {\n      a = '0x' + hexString[7] + hexString[8];\n    }\n  }\n  a = +(a / 255).toFixed(3);\n  return 'rgba(' + +r + ',' + +g + ',' + +b + ',' + a + ')';\n}\n\n/**\n * Make a given color darker by mixing it with a certain amount of black.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much black should be added\n *          to the given color (0.0 = only 'color', 1.0 = only black).\n *          Default is 0.2.\n */\nexport function darkerColor(color, ratio) {\n  let rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_BLACK, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Make a given color lighter by mixing it with a certain amount of white.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much white should be added\n *          to the given color (0.0 = only 'color', 1.0 = only white).\n *          Default is 0.2.\n */\nexport function lighterColor(color, ratio) {\n  let rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_WHITE, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Merges two RGB colors as defined by rgb().\n *\n * The two 'ratio' arguments specify \"how much\" of the corresponding color is added to the\n * resulting color. Both arguments should (but don't have to) add to 1.0.\n *\n * All arguments are mandatory.\n */\nexport function mergeRgbColors(color1, ratio1, color2, ratio2) {\n  if (typeof color1 === 'string') {\n    color1 = rgb(color1);\n  }\n  if (typeof color2 === 'string') {\n    color2 = rgb(color2);\n  }\n  if (!color1 && !color2) {\n    return undefined;\n  }\n  ratio1 = scout.nvl(ratio1, 0);\n  ratio2 = scout.nvl(ratio2, 0);\n  if (!color1) {\n    color1 = RGB_BLACK;\n    ratio1 = 0;\n  }\n  if (!color2) {\n    color2 = RGB_BLACK;\n    ratio2 = 0;\n  }\n  if (ratio1 === 0 && ratio2 === 0) {\n    return 'rgb(0,0,0)';\n  }\n  return 'rgb(' + numbers.round((ratio1 * color1.red + ratio2 * color2.red) / (ratio1 + ratio2)) + ',' + numbers.round((ratio1 * color1.green + ratio2 * color2.green) / (ratio1 + ratio2)) + ',' + numbers.round((ratio1 * color1.blue + ratio2 * color2.blue) / (ratio1 + ratio2)) + ')';\n}\n\n/**\n * Example: Dialog-PLAIN-12\n */\nexport function parseFontSpec(pattern) {\n  let fontSpec = {};\n  if (strings.hasText(pattern)) {\n    let tokens = pattern.split(/[-_,/.;]/);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i].toUpperCase();\n      // styles\n      if (token === 'NULL' || token === '0') {\n        // nop (undefined values)\n      } else if (token === 'PLAIN') {\n        // nop\n      } else if (token === 'BOLD') {\n        fontSpec.bold = true;\n      } else if (token === 'ITALIC') {\n        fontSpec.italic = true;\n      } else {\n        // size or name\n        if (/^\\d+$/.test(token)) {\n          fontSpec.size = token;\n        } else if (token !== 'NULL') {\n          fontSpec.name = tokens[i];\n        }\n      }\n    }\n  }\n  return fontSpec;\n}\nexport function modelToCssColor(color) {\n  if (!color) {\n    // prevent conversion from null to 'null' by regex\n    return '';\n  }\n  let cssColor = '';\n  if (/^[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$/.test(color)) {\n    // hex color\n    cssColor = '#' + color;\n  } else if (/^[A-Za-z0-9().,%-]+$/.test(color)) {\n    // named colors or color functions\n    cssColor = color;\n  }\n  return cssColor;\n}\n\n/**\n * Returns a string with CSS definitions for use in an element's \"style\" attribute. All CSS relevant\n * properties of the given object are converted to CSS definitions, namely foreground color, background\n * color and font.\n *\n * If an $element is provided, the CSS definitions are directly applied to the element. This can be\n * useful if the \"style\" attribute is shared and cannot be replaced in it's entirety.\n *\n * If propertyPrefix is provided, the prefix will be applied to the properties, e.g. if the prefix is\n * 'label' the properties labelFont, labelBackgroundColor and labelForegroundColor are used instead of\n * just font, backgroundColor and foregroundColor.\n */\nexport function legacyStyle(obj, $element, propertyPrefix) {\n  let style = '';\n  style += legacyForegroundColor(obj, $element, propertyPrefix);\n  style += legacyBackgroundColor(obj, $element, propertyPrefix);\n  style += legacyFont(obj, $element, propertyPrefix);\n  return style;\n}\nexport function legacyForegroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  let cssColor = '';\n  if (obj) {\n    let foregroundColorProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'ForegroundColor');\n    cssColor = modelToCssColor(obj[foregroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('color', cssColor);\n  }\n  let style = '';\n  if (cssColor) {\n    style += 'color: ' + cssColor + '; ';\n  }\n  return style;\n}\nexport function legacyBackgroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  let cssBackgroundColor = '';\n  if (obj) {\n    let backgroundColorProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'BackgroundColor');\n    cssBackgroundColor = modelToCssColor(obj[backgroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('background-color', cssBackgroundColor);\n  }\n  let style = '';\n  if (cssBackgroundColor) {\n    style += 'background-color: ' + cssBackgroundColor + '; ';\n  }\n  return style;\n}\nexport function legacyFont(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n  let cssFontWeight = '';\n  let cssFontStyle = '';\n  let cssFontSize = '';\n  let cssFontFamily = '';\n  if (obj) {\n    let fontProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'Font');\n    let fontSpec = parseFontSpec(obj[fontProperty]);\n    if (fontSpec.bold) {\n      cssFontWeight = 'bold';\n    }\n    if (fontSpec.italic) {\n      cssFontStyle = 'italic';\n    }\n    if (fontSpec.size) {\n      cssFontSize = fontSpec.size + 'pt';\n    }\n    if (fontSpec.name) {\n      cssFontFamily = fontSpec.name;\n    }\n  }\n  if ($element) {\n    $element.css('font-weight', cssFontWeight).css('font-style', cssFontStyle).css('font-size', cssFontSize).css('font-family', cssFontFamily);\n  }\n  let style = '';\n  if (cssFontWeight) {\n    style += 'font-weight: ' + cssFontWeight + '; ';\n  }\n  if (cssFontStyle) {\n    style += 'font-style: ' + cssFontStyle + '; ';\n  }\n  if (cssFontSize) {\n    style += 'font-size: ' + cssFontSize + '; ';\n  }\n  if (cssFontFamily) {\n    style += 'font-family: ' + cssFontFamily + '; ';\n  }\n  return style;\n}\nexport function _getElement() {\n  return element;\n}\nexport default {\n  RGB_BLACK,\n  RGB_WHITE,\n  clearCache,\n  darkerColor,\n  get,\n  getFirstOpaqueBackgroundColor,\n  getSize,\n  hexToRgb,\n  legacyBackgroundColor,\n  legacyFont,\n  legacyForegroundColor,\n  legacyStyle,\n  lighterColor,\n  mergeRgbColors,\n  modelToCssColor,\n  parseFontSpec,\n  put,\n  rgb,\n  styleMap,\n  _getElement\n};","map":{"version":3,"names":["arrays","numbers","scout","strings","$","styleMap","element","get","cssClass","properties","styleProperties","elem","window","document","createElement","style","display","body","appendChild","displayNoneStyleCssText","cssText","extend","Object","keys","sort","forEach","key","keyCssText","styleCssText","cssClassArray","ensure","mapKey","map","prop","name","nameCamelCase","replace","match","p1","toUpperCase","put","notResolvedProperties","filter","length","className","i","childElem","children","computedStyle","getComputedStyle","property","getFirstOpaqueBackgroundColor","$elem","rgbString","css","rgba","rgb","alpha","parent","getSize","cssProperty","defaultSize","size","pxToNumber","clearCache","RGB_BLACK","red","green","blue","RGB_WHITE","undefined","rgbVal","parseInt","parseFloat","nvl","hexToRgb","hexString","r","g","b","a","toFixed","darkerColor","color","ratio","mergeRgbColors","lighterColor","color1","ratio1","color2","ratio2","round","parseFontSpec","pattern","fontSpec","hasText","tokens","split","token","bold","italic","test","modelToCssColor","cssColor","legacyStyle","obj","$element","propertyPrefix","legacyForegroundColor","legacyBackgroundColor","legacyFont","foregroundColorProperty","toLowerCaseFirstLetter","cssBackgroundColor","backgroundColorProperty","cssFontWeight","cssFontStyle","cssFontSize","cssFontFamily","fontProperty","_getElement"],"sources":["C:/workspace/ddhub/ddhub/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/styles.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2020 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {arrays, numbers, scout, strings} from '../index';\nimport $ from 'jquery';\n\nlet styleMap = {};\n\nlet element = null;\n\n/**\n * @typedef StyleMap\n * @property {string} [minHeight]\n * @property {string} [minWidth]\n * @property {string} [fill]\n * @property {string} [stroke]\n * @property {string} [fontFamily]\n * @property {string} [backgroundColor]\n * @property {string} [borderColor]\n */\n\n/**\n * Generates an invisible div and appends it to the body, only once. The same div will be reused on subsequent calls.\n * Adds the given css class to that element and returns a style object containing the values for every given property.\n * The style is cached. Subsequent calls with the same css class will return the same style object.\n *\n * @param {object} styleProperties in the form {backgroundColor: 'black'}\n * @return {StyleMap} style\n */\nexport function get(cssClass, properties, styleProperties) {\n  // create invisible div\n  let elem = element;\n  if (!elem) {\n    elem = window.document.createElement('div');\n    elem.style.display = 'none';\n    window.document.body.appendChild(elem);\n    element = elem;\n  }\n\n  let displayNoneStyleCssText = elem.style.cssText;\n  styleProperties = $.extend(true, {}, styleProperties, {\n    display: ''\n  });\n  Object.keys(styleProperties).sort().forEach(key => {\n    elem.style[key] = styleProperties[key];\n  });\n  // get cssText as additional key component, display is not part of the key component\n  let keyCssText = elem.style.cssText;\n  // always add display: 'none'\n  elem.style.display = 'none';\n  let styleCssText = elem.style.cssText;\n\n  // reset style\n  elem.style.cssText = displayNoneStyleCssText;\n\n  let cssClassArray = arrays.ensure(cssClass),\n    mapKey = keyCssText ? [...cssClassArray, keyCssText] : cssClassArray;\n\n  let style = styleMap[mapKey];\n  // ensure array\n  properties = arrays.ensure(properties);\n  properties = properties.map(prop => {\n    return {\n      name: prop,\n      // replace property names like 'max-width' in 'maxWidth'\n      nameCamelCase: prop.replace(/-(.)/g,\n        (match, p1) => {\n          return p1.toUpperCase();\n        })\n    };\n  });\n\n  // ensure style\n  if (!style) {\n    style = {};\n    put(mapKey, style);\n  }\n\n  let notResolvedProperties = properties.filter(prop => {\n    return !(prop.nameCamelCase in style);\n  });\n  if (notResolvedProperties.length === 0) {\n    return style;\n  }\n\n  // resolve missing properties\n  elem.className = cssClassArray[0];\n  for (let i = 1; i < cssClassArray.length; i++) {\n    let childElem = elem.children[0];\n    if (!childElem) {\n      childElem = window.document.createElement('div');\n      childElem.style.display = 'none';\n      elem.appendChild(childElem);\n    }\n    elem = childElem;\n    elem.className = cssClassArray[i];\n  }\n\n  // set style properties\n  elem.style.cssText = styleCssText;\n\n  let computedStyle = window.getComputedStyle(elem);\n  notResolvedProperties.forEach(property => {\n    style[property.nameCamelCase] = computedStyle[property.name];\n  });\n\n  elem.style.cssText = displayNoneStyleCssText;\n  elem = element;\n\n  do {\n    elem.className = '';\n    elem = elem.children[0];\n  }\n  while (elem);\n\n  return style;\n}\n\n/**\n * Traverses the parents of the given $elem and returns the first opaque background color.\n * @param {jQuery} $elem\n */\nexport function getFirstOpaqueBackgroundColor($elem) {\n  if (!$elem) {\n    return;\n  }\n\n  let document = $elem.document(true);\n  while ($elem && $elem.length && document !== $elem[0]) {\n    let rgbString = $elem.css('background-color'),\n      rgba = rgb(rgbString);\n    if (rgba && rgba.alpha === 1) {\n      return rgbString;\n    }\n    $elem = $elem.parent();\n  }\n}\n\nexport function getSize(cssClass, cssProperty, property, defaultSize) {\n  let size = get(cssClass, cssProperty)[property];\n  if ('auto' === size) {\n    return defaultSize;\n  }\n  return $.pxToNumber(size);\n}\n\nexport function put(cssClass, style) {\n  styleMap[cssClass] = style;\n}\n\nexport function clearCache() {\n  styleMap = {};\n}\n\nconst RGB_BLACK = {\n  red: 0,\n  green: 0,\n  blue: 0\n};\n\nconst RGB_WHITE = {\n  red: 255,\n  green: 255,\n  blue: 255\n};\n\n/**\n * Creates an rgb object based on the given rgb string with the format rgb(0, 0, 0).\n * If the input string cannot be parsed, undefined is returned.\n */\nexport function rgb(rgbString) {\n  if (!rgbString) {\n    return undefined;\n  }\n  let rgbVal = rgbString.replace(/\\s/g, '').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?(\\d+(\\.\\d+)?)?/i);\n  if (rgbVal === null) {\n    return undefined;\n  }\n  return {\n    red: parseInt(rgbVal[1], 10),\n    green: parseInt(rgbVal[2], 10),\n    blue: parseInt(rgbVal[3], 10),\n    alpha: parseFloat(scout.nvl(rgbVal[4], 1))\n  };\n}\n\n/**\n * Converts the given hex string to a rgb string.\n */\nexport function hexToRgb(hexString) {\n  if (!hexString) {\n    return;\n  }\n\n  let r = 0,\n    g = 0,\n    b = 0,\n    a = 255;\n\n  if (hexString.length === 4 || hexString.length === 5) {\n    r = '0x' + hexString[1] + hexString[1];\n    g = '0x' + hexString[2] + hexString[2];\n    b = '0x' + hexString[3] + hexString[3];\n    if (hexString.length === 5) {\n      a = '0x' + hexString[4] + hexString[4];\n    }\n  }\n\n  if (hexString.length === 7 || hexString.length === 9) {\n    r = '0x' + hexString[1] + hexString[2];\n    g = '0x' + hexString[3] + hexString[4];\n    b = '0x' + hexString[5] + hexString[6];\n    if (hexString.length === 9) {\n      a = '0x' + hexString[7] + hexString[8];\n    }\n  }\n\n  a = +(a / 255).toFixed(3);\n\n  return 'rgba(' + +r + ',' + +g + ',' + +b + ',' + a + ')';\n}\n\n/**\n * Make a given color darker by mixing it with a certain amount of black.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much black should be added\n *          to the given color (0.0 = only 'color', 1.0 = only black).\n *          Default is 0.2.\n */\nexport function darkerColor(color, ratio) {\n  let rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_BLACK, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Make a given color lighter by mixing it with a certain amount of white.\n * If no color is specified or the color cannot be parsed, undefined is returned.\n *\n * @param color\n *          a CSS color in 'rgb()' or 'rgba()' format.\n * @param ratio\n *          a number between 0 and 1 specifying how much white should be added\n *          to the given color (0.0 = only 'color', 1.0 = only white).\n *          Default is 0.2.\n */\nexport function lighterColor(color, ratio) {\n  let rgbVal = rgb(color);\n  if (!rgbVal) {\n    return undefined;\n  }\n  ratio = scout.nvl(ratio, 0.2);\n  return mergeRgbColors(RGB_WHITE, ratio, rgbVal, 1 - ratio);\n}\n\n/**\n * Merges two RGB colors as defined by rgb().\n *\n * The two 'ratio' arguments specify \"how much\" of the corresponding color is added to the\n * resulting color. Both arguments should (but don't have to) add to 1.0.\n *\n * All arguments are mandatory.\n */\nexport function mergeRgbColors(color1, ratio1, color2, ratio2) {\n  if (typeof color1 === 'string') {\n    color1 = rgb(color1);\n  }\n  if (typeof color2 === 'string') {\n    color2 = rgb(color2);\n  }\n  if (!color1 && !color2) {\n    return undefined;\n  }\n  ratio1 = scout.nvl(ratio1, 0);\n  ratio2 = scout.nvl(ratio2, 0);\n  if (!color1) {\n    color1 = RGB_BLACK;\n    ratio1 = 0;\n  }\n  if (!color2) {\n    color2 = RGB_BLACK;\n    ratio2 = 0;\n  }\n  if (ratio1 === 0 && ratio2 === 0) {\n    return 'rgb(0,0,0)';\n  }\n  return 'rgb(' +\n    numbers.round((ratio1 * color1.red + ratio2 * color2.red) / (ratio1 + ratio2)) + ',' +\n    numbers.round((ratio1 * color1.green + ratio2 * color2.green) / (ratio1 + ratio2)) + ',' +\n    numbers.round((ratio1 * color1.blue + ratio2 * color2.blue) / (ratio1 + ratio2)) +\n    ')';\n}\n\n/**\n * Example: Dialog-PLAIN-12\n */\nexport function parseFontSpec(pattern) {\n  let fontSpec = {};\n  if (strings.hasText(pattern)) {\n    let tokens = pattern.split(/[-_,/.;]/);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i].toUpperCase();\n      // styles\n      if (token === 'NULL' || token === '0') {\n        // nop (undefined values)\n      } else if (token === 'PLAIN') {\n        // nop\n      } else if (token === 'BOLD') {\n        fontSpec.bold = true;\n      } else if (token === 'ITALIC') {\n        fontSpec.italic = true;\n      } else {\n        // size or name\n        if (/^\\d+$/.test(token)) {\n          fontSpec.size = token;\n        } else if (token !== 'NULL') {\n          fontSpec.name = tokens[i];\n        }\n      }\n    }\n  }\n  return fontSpec;\n}\n\nexport function modelToCssColor(color) {\n  if (!color) { // prevent conversion from null to 'null' by regex\n    return '';\n  }\n  let cssColor = '';\n  if (/^[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$/.test(color)) { // hex color\n    cssColor = '#' + color;\n  } else if (/^[A-Za-z0-9().,%-]+$/.test(color)) { // named colors or color functions\n    cssColor = color;\n  }\n  return cssColor;\n}\n\n/**\n * Returns a string with CSS definitions for use in an element's \"style\" attribute. All CSS relevant\n * properties of the given object are converted to CSS definitions, namely foreground color, background\n * color and font.\n *\n * If an $element is provided, the CSS definitions are directly applied to the element. This can be\n * useful if the \"style\" attribute is shared and cannot be replaced in it's entirety.\n *\n * If propertyPrefix is provided, the prefix will be applied to the properties, e.g. if the prefix is\n * 'label' the properties labelFont, labelBackgroundColor and labelForegroundColor are used instead of\n * just font, backgroundColor and foregroundColor.\n */\nexport function legacyStyle(obj, $element, propertyPrefix) {\n  let style = '';\n  style += legacyForegroundColor(obj, $element, propertyPrefix);\n  style += legacyBackgroundColor(obj, $element, propertyPrefix);\n  style += legacyFont(obj, $element, propertyPrefix);\n  return style;\n}\n\nexport function legacyForegroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  let cssColor = '';\n  if (obj) {\n    let foregroundColorProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'ForegroundColor');\n    cssColor = modelToCssColor(obj[foregroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('color', cssColor);\n  }\n  let style = '';\n  if (cssColor) {\n    style += 'color: ' + cssColor + '; ';\n  }\n  return style;\n}\n\nexport function legacyBackgroundColor(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  let cssBackgroundColor = '';\n  if (obj) {\n    let backgroundColorProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'BackgroundColor');\n    cssBackgroundColor = modelToCssColor(obj[backgroundColorProperty]);\n  }\n  if ($element) {\n    $element.css('background-color', cssBackgroundColor);\n  }\n  let style = '';\n  if (cssBackgroundColor) {\n    style += 'background-color: ' + cssBackgroundColor + '; ';\n  }\n  return style;\n}\n\nexport function legacyFont(obj, $element, propertyPrefix) {\n  propertyPrefix = propertyPrefix || '';\n\n  let cssFontWeight = '';\n  let cssFontStyle = '';\n  let cssFontSize = '';\n  let cssFontFamily = '';\n  if (obj) {\n    let fontProperty = strings.toLowerCaseFirstLetter(propertyPrefix + 'Font');\n    let fontSpec = parseFontSpec(obj[fontProperty]);\n    if (fontSpec.bold) {\n      cssFontWeight = 'bold';\n    }\n    if (fontSpec.italic) {\n      cssFontStyle = 'italic';\n    }\n    if (fontSpec.size) {\n      cssFontSize = fontSpec.size + 'pt';\n    }\n    if (fontSpec.name) {\n      cssFontFamily = fontSpec.name;\n    }\n  }\n  if ($element) {\n    $element\n      .css('font-weight', cssFontWeight)\n      .css('font-style', cssFontStyle)\n      .css('font-size', cssFontSize)\n      .css('font-family', cssFontFamily);\n  }\n  let style = '';\n  if (cssFontWeight) {\n    style += 'font-weight: ' + cssFontWeight + '; ';\n  }\n  if (cssFontStyle) {\n    style += 'font-style: ' + cssFontStyle + '; ';\n  }\n  if (cssFontSize) {\n    style += 'font-size: ' + cssFontSize + '; ';\n  }\n  if (cssFontFamily) {\n    style += 'font-family: ' + cssFontFamily + '; ';\n  }\n  return style;\n}\n\nexport function _getElement() {\n  return element;\n}\n\nexport default {\n  RGB_BLACK,\n  RGB_WHITE,\n  clearCache,\n  darkerColor,\n  get,\n  getFirstOpaqueBackgroundColor,\n  getSize,\n  hexToRgb,\n  legacyBackgroundColor,\n  legacyFont,\n  legacyForegroundColor,\n  legacyStyle,\n  lighterColor,\n  mergeRgbColors,\n  modelToCssColor,\n  parseFontSpec,\n  put,\n  rgb,\n  styleMap,\n  _getElement\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}