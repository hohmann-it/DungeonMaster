{"ast":null,"code":"/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport { graphics, scout, strings } from '../index';\nimport $ from 'jquery';\nlet _deferred = $.Deferred();\n\n/**\n * Indicates whether all fonts have been loaded successfully. Check this variable before\n * waiting for the promise object returned by preloader().\n */\nlet loadingComplete = true;\n\n/**\n * Start preloading the specified fonts. If no fonts are specified, the list of fonts\n * to preload is automatically calculated from the available CSS \"@font-face\" definitions.\n * To disable preloading entirely, pass an empty array to this function.\n *\n * @param fonts (optional) array of fonts\n * @return promise that is resolved when all fonts are loaded\n */\nexport function bootstrap(fonts) {\n  fonts = fonts || autoDetectFonts();\n  if (fonts.length === 0) {\n    loadingComplete = true;\n    return $.resolvedPromise();\n  }\n\n  // Start preloading\n  loadingComplete = false;\n  preload({\n    fonts: fonts,\n    onComplete: (success, badFonts) => {\n      if (!success && badFonts && badFonts.length) {\n        $.log.warn('Timeout occurred while pre-loading the following fonts:\\n\\n- ' + badFonts.join('\\n- ') + '\\n\\n' + 'Rendering will now continue, but font measurements may be inaccurate. ' + 'To prevent unnecessary startup delays and layout problems, check the @font-face ' + 'definitions and the referenced \"src\" URLs or programmatically add additional font-specific ' + 'characters to TEST_STRING before calling app.init().');\n      }\n      loadingComplete = true;\n      _deferred.resolve();\n    }\n  });\n  return $.resolvedPromise();\n}\n\n/**\n * @return  a promise object that is notified when the font preloading was completed.\n *          Important: Before waiting for this promise, always check that value of\n *          loadingComplete first! Do not wait for the promise when loadingComplete\n *          is true, because the promise will never be resolved.\n */\nexport function preloader() {\n  return _deferred.promise();\n}\nconst TEST_FONTS = 'monospace';\n\n/**\n * Test string used for font measurements. Used to detect when a font is fully loaded\n * and available in the browser.\n *\n * Custom characters may be added to this test string if a font is not detected correctly\n * because it does not contain any of the default characters.\n *\n * U+E000 = Start of Unicode private use zone (e.g. scoutIcons)\n * U+F118 = Font Awesome: \"smile\"\n */\nconst TEST_STRING = 'ABC abc 123 .,_ LlIi1 oO0 !#@ \\uE000\\uE001\\uE002 \\uF118';\n\n/**\n * Time in milliseconds to wait for the fonts to be loaded.\n */\nconst TEST_TIMEOUT = 12 * 1000; // 12 sec\n\n/**\n * Loads the specified fonts in a hidden div, forcing the browser to load them.\n *\n * Options:\n *   [fonts]\n *     A single string or object (or an array of them) specifying which fonts should\n *     be preloaded. A string is interpreted as font-family. If the style is relevant,\n *     too, an object with the properties 'family' and 'style' should be provided.\n *     Alternatively, the style can be specified in the string after the font name,\n *     separated by a pipe character ('|').\n *     The property 'testString' (or a third component in a '|' separated string) may\n *     be specified to set the characters to measure for this specific font (can be\n *     useful for icon fonts).\n *   [onComplete]\n *     Mandatory function to be called when all of the specified fonts have been\n *     loaded or if a timeout occurs. An argument 'success' is given to indicate\n *     whether loading was completed successfully or execution was interrupted by\n *     a timeout. If this option is omitted, the call to this method returns immediately.\n *   [timeout]\n *     Optional timeout in milliseconds. If fonts could not be loaded within this time,\n *     loading is stopped and the onComplete method is called with argument 'false'.\n *     Defaults to TEST_TIMEOUT.\n *   [testFonts]\n *     Optional. Test fonts (string separated by commas) to used as baseline when checking\n *     if the specified fonts have been loaded. Defaults to TEST_FONTS.\n *   [testString]\n *     Optional. The test string to use when checking if the specified fonts have been\n *     loaded. Should not be empty, because the empty string has always the width 0.\n *     The default is TEST_STRING. The test string may also be specified\n *     individually per font.\n *\n * Examples:\n *   preload({fonts: 'Sauna Pro'});\n *   preload({fonts: 'Sauna Pro|font-style:italic'});\n *   preload({fonts: 'Sauna Pro|font-style:italic|The quick brown fox jumps over the lazy dog'});\n *   preload({fonts: 'Sauna Pro | font-style: italic; font-weight: 700'});\n *   preload({fonts: 'Sauna Pro', onComplete: handleLoadFinished});\n *   preload({fonts: ['Sauna Pro', 'Dolly Pro']});\n *   preload({fonts: {family:'Sauna', style: 'font-style:italic; font-weight:700', testString: 'MyString012345'}, timeout: 999});\n *   preload({fonts: ['Fakir-Black', {family:'Fakir-Italic', style:'font-style:italic'}], timeout: 2500, onComplete: function() { setCookie('fakir','loaded') }});\n *\n * Inspired by Zenfonts (https://github.com/zengabor/zenfonts, public domain).\n */\nexport function preload(options) {\n  options = options || {};\n  let fonts = options.fonts || [];\n  if (!Array.isArray(fonts)) {\n    fonts = [fonts];\n  }\n  if (!options.onComplete) {\n    // preloading is not useful, because there is no callback on success\n    return;\n  }\n\n  // Create a DIV for each font\n  let divs = [];\n  fonts.forEach(font => {\n    // Convert to object\n    if (typeof font === 'string') {\n      let fontParts = strings.splitMax(font, '|', 3).map(s => {\n        return s.trim();\n      });\n      font = {\n        family: fontParts[0],\n        style: fontParts[1],\n        testString: fontParts[2]\n      };\n    }\n    font.family = font.family || '';\n    font.style = font.style || '';\n    font.testString = font.testString || options.testString || TEST_STRING;\n\n    // these fonts are compared to the custom fonts, strings separated by comma\n    let testFonts = font.testFonts || options.testFonts || TEST_FONTS;\n\n    // Create DIV with default fonts\n    // (Because preloader functionality should not depend on a CSS style sheet we set the required properties programmatically.)\n    let $div = $('body').appendDiv('font-preloader').text(font.testString).css('display', 'block').css('visibility', 'hidden').css('position', 'absolute').css('top', 0).css('left', 0).css('width', 'auto').css('height', 'auto').css('margin', 0).css('padding', 0).css('white-space', 'nowrap').css('line-height', 'normal').css('font-variant', 'normal').css('font-size', '20em').css('font-family', testFonts);\n\n    // Remember size, set new font, and then measure again\n    let originalSize = measureSize($div);\n    $div.data('original-size', originalSize);\n    $div.data('font-family', font.family);\n    $div.css('font-family', '\\'' + font.family + '\\',' + testFonts);\n    if (font.style) {\n      let style = ($div.attr('style') || '').trim();\n      let sep = (style.substr(-1) === ';' ? '' : ';') + (style ? ' ' : '');\n      $div.attr('style', style + sep + font.style);\n    }\n    if (measureSize($div) !== originalSize) {\n      // Font already loaded, nothing to do\n      $div.remove();\n    } else {\n      // Remember DIV\n      divs.push($div);\n    }\n  });\n  if (divs.length === 0) {\n    // No fonts need to be watched, everything is loaded already\n    complete(true);\n    return;\n  }\n  let onFinished = complete;\n  let timeout = scout.nvl(options.timeout, TEST_TIMEOUT);\n  let watchTimerId, timeoutTimerId;\n  if (timeout && timeout >= 0) {\n    // Add timeout\n    timeoutTimerId = setTimeout(() => {\n      clearTimeout(watchTimerId);\n      complete(false);\n    }, timeout);\n    onFinished = () => {\n      clearTimeout(timeoutTimerId);\n      complete(true);\n    };\n  }\n\n  // Start watching (initially 50ms delay)\n  watchWidthChange(50, onFinished);\n\n  // ----- Helper functions -----\n\n  function watchWidthChange(delay, onFinished) {\n    // Check each DIV\n    let i = divs.length;\n    while (i--) {\n      let $div = divs[i];\n      if (measureSize($div) !== $div.data('original-size')) {\n        divs.splice(i, 1);\n        $div.remove();\n      }\n    }\n    if (divs.length === 0) {\n      // All completed\n      onFinished(true);\n      return;\n    }\n\n    // Watch again after a small delay\n    watchTimerId = setTimeout(() => {\n      // Slowly increase delay up to 1 second\n      if (delay < 1000) {\n        delay = delay * 1.2;\n      }\n      watchWidthChange(delay, onFinished);\n    }, delay);\n  }\n  function complete(success) {\n    options.onComplete(success, divs.map($div => {\n      return $div.data('font-family');\n    }));\n  }\n}\nexport function measureSize($div) {\n  let size = graphics.size($div, {\n    exact: true\n  });\n  return size.width + 'x' + size.height;\n}\n\n/**\n * Reads all \"@font-face\" CSS rules from the current document and returns an array of\n * font definition objects, suitable for passing to the preload() function (see above).\n */\nexport function autoDetectFonts() {\n  let fonts = [];\n  // Implementation note: \"styleSheets\" and \"cssRules\" are not arrays (they only look like arrays)\n  let styleSheets = document.styleSheets;\n  for (let i = 0; i < styleSheets.length; i++) {\n    let styleSheet = styleSheets[i];\n    let cssRules;\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (error) {\n      // In some browsers, access to style sheets of other origins is blocked:\n      // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet#Notes\n      $.log.info('Skipped automatic font detection for style sheet ' + styleSheet.href + ' (access blocked by browser). Use the bootstrap argument \"fonts\" to manually list fonts to pre-load.');\n      continue;\n    }\n    for (let j = 0; j < styleSheet.cssRules.length; j++) {\n      let cssRule = styleSheet.cssRules[j];\n      if (cssRule.type === window.CSSRule.FONT_FACE_RULE) {\n        let style = cssRule.style;\n        let ff = style.getPropertyValue('font-family');\n        let fw = style.getPropertyValue('font-weight');\n        let fs = style.getPropertyValue('font-style');\n        let fv = style.getPropertyValue('font-variant');\n        let ft = style.getPropertyValue('font-stretch');\n        if (ff) {\n          ff = ff.replace(/^[\"']|[\"']$/g, ''); // Unquote strings, they will be quoted again automatically\n          let s = [];\n          if (fw && fw !== 'normal') {\n            s.push('font-weight:' + fw);\n          }\n          if (fs && fs !== 'normal') {\n            s.push('font-style:' + fs);\n          }\n          if (fv && fv !== 'normal') {\n            s.push('font-variant:' + fv);\n          }\n          if (ft && ft !== 'normal') {\n            s.push('font-stretch:' + ft);\n          }\n          let font = {\n            family: ff\n          };\n          if (s.length) {\n            font.style = s.join(';');\n          }\n          fonts.push(font);\n        }\n      }\n    }\n  }\n  return fonts;\n}\nexport default {\n  TEST_FONTS,\n  TEST_STRING,\n  TEST_TIMEOUT,\n  autoDetectFonts,\n  bootstrap,\n  loadingComplete,\n  measureSize,\n  preload,\n  preloader\n};","map":{"version":3,"names":["graphics","scout","strings","$","_deferred","Deferred","loadingComplete","bootstrap","fonts","autoDetectFonts","length","resolvedPromise","preload","onComplete","success","badFonts","log","warn","join","resolve","preloader","promise","TEST_FONTS","TEST_STRING","TEST_TIMEOUT","options","Array","isArray","divs","forEach","font","fontParts","splitMax","map","s","trim","family","style","testString","testFonts","$div","appendDiv","text","css","originalSize","measureSize","data","attr","sep","substr","remove","push","complete","onFinished","timeout","nvl","watchTimerId","timeoutTimerId","setTimeout","clearTimeout","watchWidthChange","delay","i","splice","size","exact","width","height","styleSheets","document","styleSheet","cssRules","error","info","href","j","cssRule","type","window","CSSRule","FONT_FACE_RULE","ff","getPropertyValue","fw","fs","fv","ft","replace"],"sources":["C:/git/d-d-hub/code/node_modules/.pnpm/@eclipse-scout+core@22.0.41/node_modules/@eclipse-scout/core/src/util/fonts.js"],"sourcesContent":["/*\n * Copyright (c) 2014-2018 BSI Business Systems Integration AG.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *     BSI Business Systems Integration AG - initial API and implementation\n */\nimport {graphics, scout, strings} from '../index';\nimport $ from 'jquery';\n\nlet _deferred = $.Deferred();\n\n/**\n * Indicates whether all fonts have been loaded successfully. Check this variable before\n * waiting for the promise object returned by preloader().\n */\nlet loadingComplete = true;\n\n/**\n * Start preloading the specified fonts. If no fonts are specified, the list of fonts\n * to preload is automatically calculated from the available CSS \"@font-face\" definitions.\n * To disable preloading entirely, pass an empty array to this function.\n *\n * @param fonts (optional) array of fonts\n * @return promise that is resolved when all fonts are loaded\n */\nexport function bootstrap(fonts) {\n  fonts = fonts || autoDetectFonts();\n\n  if (fonts.length === 0) {\n    loadingComplete = true;\n    return $.resolvedPromise();\n  }\n\n  // Start preloading\n  loadingComplete = false;\n  preload({\n    fonts: fonts,\n    onComplete: (success, badFonts) => {\n      if (!success && badFonts && badFonts.length) {\n        $.log.warn('Timeout occurred while pre-loading the following fonts:\\n\\n- ' + badFonts.join('\\n- ') + '\\n\\n' +\n          'Rendering will now continue, but font measurements may be inaccurate. ' +\n          'To prevent unnecessary startup delays and layout problems, check the @font-face ' +\n          'definitions and the referenced \"src\" URLs or programmatically add additional font-specific ' +\n          'characters to TEST_STRING before calling app.init().');\n      }\n      loadingComplete = true;\n      _deferred.resolve();\n    }\n  });\n\n  return $.resolvedPromise();\n}\n\n/**\n * @return  a promise object that is notified when the font preloading was completed.\n *          Important: Before waiting for this promise, always check that value of\n *          loadingComplete first! Do not wait for the promise when loadingComplete\n *          is true, because the promise will never be resolved.\n */\nexport function preloader() {\n  return _deferred.promise();\n}\n\nconst TEST_FONTS = 'monospace';\n\n/**\n * Test string used for font measurements. Used to detect when a font is fully loaded\n * and available in the browser.\n *\n * Custom characters may be added to this test string if a font is not detected correctly\n * because it does not contain any of the default characters.\n *\n * U+E000 = Start of Unicode private use zone (e.g. scoutIcons)\n * U+F118 = Font Awesome: \"smile\"\n */\nconst TEST_STRING = 'ABC abc 123 .,_ LlIi1 oO0 !#@ \\uE000\\uE001\\uE002 \\uF118';\n\n/**\n * Time in milliseconds to wait for the fonts to be loaded.\n */\nconst TEST_TIMEOUT = 12 * 1000; // 12 sec\n\n/**\n * Loads the specified fonts in a hidden div, forcing the browser to load them.\n *\n * Options:\n *   [fonts]\n *     A single string or object (or an array of them) specifying which fonts should\n *     be preloaded. A string is interpreted as font-family. If the style is relevant,\n *     too, an object with the properties 'family' and 'style' should be provided.\n *     Alternatively, the style can be specified in the string after the font name,\n *     separated by a pipe character ('|').\n *     The property 'testString' (or a third component in a '|' separated string) may\n *     be specified to set the characters to measure for this specific font (can be\n *     useful for icon fonts).\n *   [onComplete]\n *     Mandatory function to be called when all of the specified fonts have been\n *     loaded or if a timeout occurs. An argument 'success' is given to indicate\n *     whether loading was completed successfully or execution was interrupted by\n *     a timeout. If this option is omitted, the call to this method returns immediately.\n *   [timeout]\n *     Optional timeout in milliseconds. If fonts could not be loaded within this time,\n *     loading is stopped and the onComplete method is called with argument 'false'.\n *     Defaults to TEST_TIMEOUT.\n *   [testFonts]\n *     Optional. Test fonts (string separated by commas) to used as baseline when checking\n *     if the specified fonts have been loaded. Defaults to TEST_FONTS.\n *   [testString]\n *     Optional. The test string to use when checking if the specified fonts have been\n *     loaded. Should not be empty, because the empty string has always the width 0.\n *     The default is TEST_STRING. The test string may also be specified\n *     individually per font.\n *\n * Examples:\n *   preload({fonts: 'Sauna Pro'});\n *   preload({fonts: 'Sauna Pro|font-style:italic'});\n *   preload({fonts: 'Sauna Pro|font-style:italic|The quick brown fox jumps over the lazy dog'});\n *   preload({fonts: 'Sauna Pro | font-style: italic; font-weight: 700'});\n *   preload({fonts: 'Sauna Pro', onComplete: handleLoadFinished});\n *   preload({fonts: ['Sauna Pro', 'Dolly Pro']});\n *   preload({fonts: {family:'Sauna', style: 'font-style:italic; font-weight:700', testString: 'MyString012345'}, timeout: 999});\n *   preload({fonts: ['Fakir-Black', {family:'Fakir-Italic', style:'font-style:italic'}], timeout: 2500, onComplete: function() { setCookie('fakir','loaded') }});\n *\n * Inspired by Zenfonts (https://github.com/zengabor/zenfonts, public domain).\n */\nexport function preload(options) {\n  options = options || {};\n  let fonts = options.fonts || [];\n  if (!Array.isArray(fonts)) {\n    fonts = [fonts];\n  }\n  if (!options.onComplete) {\n    // preloading is not useful, because there is no callback on success\n    return;\n  }\n\n  // Create a DIV for each font\n  let divs = [];\n  fonts.forEach(font => {\n    // Convert to object\n    if (typeof font === 'string') {\n      let fontParts = strings.splitMax(font, '|', 3).map(s => {\n        return s.trim();\n      });\n      font = {\n        family: fontParts[0],\n        style: fontParts[1],\n        testString: fontParts[2]\n      };\n    }\n    font.family = font.family || '';\n    font.style = font.style || '';\n    font.testString = font.testString || options.testString || TEST_STRING;\n\n    // these fonts are compared to the custom fonts, strings separated by comma\n    let testFonts = font.testFonts || options.testFonts || TEST_FONTS;\n\n    // Create DIV with default fonts\n    // (Because preloader functionality should not depend on a CSS style sheet we set the required properties programmatically.)\n    let $div = $('body').appendDiv('font-preloader')\n      .text(font.testString)\n      .css('display', 'block')\n      .css('visibility', 'hidden')\n      .css('position', 'absolute')\n      .css('top', 0)\n      .css('left', 0)\n      .css('width', 'auto')\n      .css('height', 'auto')\n      .css('margin', 0)\n      .css('padding', 0)\n      .css('white-space', 'nowrap')\n      .css('line-height', 'normal')\n      .css('font-variant', 'normal')\n      .css('font-size', '20em')\n      .css('font-family', testFonts);\n\n    // Remember size, set new font, and then measure again\n    let originalSize = measureSize($div);\n    $div.data('original-size', originalSize);\n    $div.data('font-family', font.family);\n    $div.css('font-family', '\\'' + font.family + '\\',' + testFonts);\n    if (font.style) {\n      let style = ($div.attr('style') || '').trim();\n      let sep = (style.substr(-1) === ';' ? '' : ';') + (style ? ' ' : '');\n      $div.attr('style', style + sep + font.style);\n    }\n\n    if (measureSize($div) !== originalSize) {\n      // Font already loaded, nothing to do\n      $div.remove();\n    } else {\n      // Remember DIV\n      divs.push($div);\n    }\n  });\n  if (divs.length === 0) {\n    // No fonts need to be watched, everything is loaded already\n    complete(true);\n    return;\n  }\n\n  let onFinished = complete;\n  let timeout = scout.nvl(options.timeout, TEST_TIMEOUT);\n  let watchTimerId, timeoutTimerId;\n  if (timeout && timeout >= 0) {\n    // Add timeout\n    timeoutTimerId = setTimeout(() => {\n      clearTimeout(watchTimerId);\n      complete(false);\n    }, timeout);\n    onFinished = () => {\n      clearTimeout(timeoutTimerId);\n      complete(true);\n    };\n  }\n\n  // Start watching (initially 50ms delay)\n  watchWidthChange(50, onFinished);\n\n  // ----- Helper functions -----\n\n  function watchWidthChange(delay, onFinished) {\n    // Check each DIV\n    let i = divs.length;\n    while (i--) {\n      let $div = divs[i];\n      if (measureSize($div) !== $div.data('original-size')) {\n        divs.splice(i, 1);\n        $div.remove();\n      }\n    }\n    if (divs.length === 0) {\n      // All completed\n      onFinished(true);\n      return;\n    }\n\n    // Watch again after a small delay\n    watchTimerId = setTimeout(() => {\n      // Slowly increase delay up to 1 second\n      if (delay < 1000) {\n        delay = delay * 1.2;\n      }\n      watchWidthChange(delay, onFinished);\n    }, delay);\n  }\n\n  function complete(success) {\n    options.onComplete(success, divs.map($div => {\n      return $div.data('font-family');\n    }));\n  }\n}\n\nexport function measureSize($div) {\n  let size = graphics.size($div, {\n    exact: true\n  });\n  return size.width + 'x' + size.height;\n}\n\n/**\n * Reads all \"@font-face\" CSS rules from the current document and returns an array of\n * font definition objects, suitable for passing to the preload() function (see above).\n */\nexport function autoDetectFonts() {\n  let fonts = [];\n  // Implementation note: \"styleSheets\" and \"cssRules\" are not arrays (they only look like arrays)\n  let styleSheets = document.styleSheets;\n  for (let i = 0; i < styleSheets.length; i++) {\n    let styleSheet = styleSheets[i];\n    let cssRules;\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (error) {\n      // In some browsers, access to style sheets of other origins is blocked:\n      // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet#Notes\n      $.log.info('Skipped automatic font detection for style sheet ' + styleSheet.href +\n        ' (access blocked by browser). Use the bootstrap argument \"fonts\" to manually list fonts to pre-load.');\n      continue;\n    }\n    for (let j = 0; j < styleSheet.cssRules.length; j++) {\n      let cssRule = styleSheet.cssRules[j];\n      if (cssRule.type === window.CSSRule.FONT_FACE_RULE) {\n        let style = cssRule.style;\n        let ff = style.getPropertyValue('font-family');\n        let fw = style.getPropertyValue('font-weight');\n        let fs = style.getPropertyValue('font-style');\n        let fv = style.getPropertyValue('font-variant');\n        let ft = style.getPropertyValue('font-stretch');\n        if (ff) {\n          ff = ff.replace(/^[\"']|[\"']$/g, ''); // Unquote strings, they will be quoted again automatically\n          let s = [];\n          if (fw && fw !== 'normal') {\n            s.push('font-weight:' + fw);\n          }\n          if (fs && fs !== 'normal') {\n            s.push('font-style:' + fs);\n          }\n          if (fv && fv !== 'normal') {\n            s.push('font-variant:' + fv);\n          }\n          if (ft && ft !== 'normal') {\n            s.push('font-stretch:' + ft);\n          }\n          let font = {\n            family: ff\n          };\n          if (s.length) {\n            font.style = s.join(';');\n          }\n          fonts.push(font);\n        }\n      }\n    }\n  }\n  return fonts;\n}\n\nexport default {\n  TEST_FONTS,\n  TEST_STRING,\n  TEST_TIMEOUT,\n  autoDetectFonts,\n  bootstrap,\n  loadingComplete,\n  measureSize,\n  preload,\n  preloader\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}